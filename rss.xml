<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Java Swing Tips</title>
        <description>Java Swing Tips - TERAI Atsuhiro</description>
        <link>http://terai.xrea.jp</link>
        <link>http://terai.xrea.jp</link>
        <lastBuildDate>2014-09-29T02:23:09+09:00</lastBuildDate>
        <pubDate>2014-09-29T02:23:09+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>JPopupMenuのレイアウトを変更して上部にメニューボタンを追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;のレイアウトを変更することで、上部にメニューボタンを水平に並べて表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PopupMenuLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-puZjATgiuLQ/VCgMaUlMzLI/AAAAAAAACN0/PkEeTJkX7Hg/s800/PopupMenuLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPopupMenu popup = new JPopupMenu();
GridBagConstraints c = new GridBagConstraints();
popup.setLayout(new GridBagLayout());
c.gridheight = 1;

c.weightx = 1.0;
c.weighty = 0.0;
c.fill = GridBagConstraints.HORIZONTAL;
c.anchor = GridBagConstraints.CENTER;

c.gridwidth = 1;
c.gridy = 0;
c.gridx = 0; popup.add(makeButton(&quot;\u21E6&quot;), c);
c.gridx = 1; popup.add(makeButton(&quot;\u21E8&quot;), c);
c.gridx = 2; popup.add(makeButton(&quot;\u21BB&quot;), c);
c.gridx = 3; popup.add(makeButton(&quot;\u2729&quot;), c);

c.gridwidth = 4;
c.gridx = 0;
c.insets = new Insets(2, 0, 2, 0);
c.gridy = 1; popup.add(new JSeparator(), c);
c.insets = new Insets(0, 0, 0, 0);
c.gridy = 2; popup.add(new JMenuItem(&quot;aaaaaaaaaa&quot;), c);
c.gridy = 3; popup.add(new JPopupMenu.Separator(), c);
c.gridy = 4; popup.add(new JMenuItem(&quot;bbbb&quot;), c);
c.gridy = 5; popup.add(new JMenuItem(&quot;ccccccccccccccccccccc&quot;), c);
c.gridy = 6; popup.add(new JMenuItem(&quot;dddddddddd&quot;), c);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPopupMenu&lt;/code&gt;のレイアウトを&lt;code&gt;GridBagLayout&lt;/code&gt;に変更して、上部に&lt;code&gt;4&lt;/code&gt;つのメニューボタンを水平に並べて表示(&lt;code&gt;FireFox&lt;/code&gt;風？)します。&lt;/p&gt;

&lt;p&gt;これらのメニューボタンは、&lt;code&gt;JMenuItem&lt;/code&gt;の以下のメソッドをオーバーライドすることで、ボタン風に表示を変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#paintComponent(...)&lt;/code&gt;をオーバーライドして&lt;code&gt;32x32&lt;/code&gt;の&lt;code&gt;Icon&lt;/code&gt;のみを直接描画

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#setIcon(...)&lt;/code&gt;を使用すると、文字列の左側に&lt;code&gt;Icon&lt;/code&gt;が表示される&lt;/li&gt;
&lt;li&gt;ボタン中央に&lt;code&gt;Icon&lt;/code&gt;が描画されるように位置を計算する(&lt;code&gt;GridBagLayout&lt;/code&gt;で&lt;code&gt;GridBagConstraints.HORIZONTAL&lt;/code&gt;と水平方向に拡張しているため、&lt;code&gt;getSize()&lt;/code&gt;で現在のボタンサイズを取得して中央を求める)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#getPreferredSize()&lt;/code&gt;をオーバーライドして、&lt;code&gt;Icon&lt;/code&gt;のサイズを推奨サイズとして返す

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#setIcon(...)&lt;/code&gt;を使用していないので、直接&lt;code&gt;Icon&lt;/code&gt;のサイズを渡す必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final Icon icon = new SymbolIcon(symbol);
JMenuItem b = new JMenuItem() {
  private final Dimension d = new Dimension(icon.getIconWidth(), icon.getIconHeight());
  @Override public Dimension getPreferredSize() {
    return d;
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    Dimension cd = getSize();
    Dimension pd = getPreferredSize();
    int offx = (int) (.5 + .5 * (cd.width  - pd.width));
    int offy = (int) (.5 + .5 * (cd.height - pd.height));
    icon.paintIcon(this, g, offx, offy);
  }
};
b.setOpaque(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonsInMenuItem.html&quot;&gt;JMenuItemの内部にJButtonを配置する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、&lt;code&gt;JPopupMenu&lt;/code&gt;のレイアウトを変更するのではなく、&lt;code&gt;JMenuItem&lt;/code&gt;のレイアウトを変更して、&lt;code&gt;JMenuItem&lt;/code&gt;の子としてボタンを追加している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PressAndHoldButton.html&quot;&gt;JPopupMenuをボタンの長押しで表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/popupmenulayout</link>
                <guid>http://terai.xrea.jp/swing/popupmenulayout</guid>
                <pubDate>2014-09-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeで葉ノードが存在しない親ノードの描画を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の親ノードに子として葉ノードがひとつも存在しない場合でも、フォルダアイコン表示になるよう設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AsksAllowsChildren&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-vfEqezCRy2w/VB7mN-AcppI/AAAAAAAACNg/VkZLdGkiDRQ/s800/AsksAllowsChildren.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
model.setAsksAllowsChildren(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;DefaultTreeModel#setAsksAllowsChildren(false)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt;が親ノード(&lt;code&gt;DefaultMutableTreeNode#getAllowsChildren()==ture&lt;/code&gt;)であっても、子として葉ノードがひとつも存在しない場合、そのアイコンは、葉ノードアイコンになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;DefaultTreeModel#setAsksAllowsChildren(true)&lt;/code&gt; (チェックボックスで選択した場合)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt;が親ノード(&lt;code&gt;DefaultMutableTreeNode#getAllowsChildren()==ture&lt;/code&gt;)の場合、子として葉ノードが存在するかどうかにかかわらず、そのアイコンは、親ノードアイコンになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/asksallowschildren</link>
                <guid>http://terai.xrea.jp/swing/asksallowschildren</guid>
                <pubDate>2014-09-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneでドラッグ中のDividerの背景色を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;Divider&lt;/code&gt;がドラッグ中の場合に、その移動先を示す矩形の色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DividerDraggingColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-M9cMsnuWpL0/VBWl0TfGYyI/AAAAAAAACNI/qvejKL7NGVk/s800/DividerDraggingColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;SplitPaneDivider.draggingColor&quot;, new Color(255, 100, 100, 100));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSplitPane#setContinuousLayout(false)&lt;/code&gt;で、&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;Divider&lt;/code&gt;がドラッグ中の場合に、&lt;code&gt;Divider&lt;/code&gt;の移動先を示す矩形の色を変更しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;ドラッグ中ではない&lt;code&gt;Divider&lt;/code&gt;の色は、&lt;code&gt;LookAndFeel&lt;/code&gt;によっては、以下のような方法で変更することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BasicSplitPaneDivider divider = ((BasicSplitPaneUI) getUI()).getDivider();
divider.setBackground(Color.ORANGE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ContinuousLayout.html&quot;&gt;JSplitPaneでディバイダの移動を連続的に再描画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dividerdraggingcolor</link>
                <guid>http://terai.xrea.jp/swing/dividerdraggingcolor</guid>
                <pubDate>2014-09-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneのDividerを展開収納するOneTouchButtonのサイズ、色などを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;Divider&lt;/code&gt;をワンクリックで展開・収納するための&lt;code&gt;OneTouchButton&lt;/code&gt;のサイズ、オフセット、背景色などを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OneTouchButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-_zdaiM8x6a4/VAxzwh3xxFI/AAAAAAAACM0/hBR-P4Nn56A/s800/OneTouchButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;SplitPane.oneTouchButtonSize&quot;, 32);
UIManager.put(&quot;SplitPane.oneTouchButtonOffset&quot;, 50);
//UIManager.put(&quot;SplitPane.centerOneTouchButtons&quot;, true);

UIManager.put(&quot;SplitPaneDivider.border&quot;, BorderFactory.createLineBorder(Color.RED, 10));
UIManager.put(&quot;SplitPaneDivider.draggingColor&quot;, new Color(255, 100, 100, 100));

BasicSplitPaneDivider divider = ((BasicSplitPaneUI) splitPane.getUI()).getDivider();
divider.setBackground(Color.ORANGE);
for (Component c: divider.getComponents()) {
  if (c instanceof JButton) {
    JButton b = (JButton) c;
    b.setBackground(Color.ORANGE);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;Divider&lt;/code&gt;をワンクリックで展開・収納するための&lt;code&gt;OneTouchButton&lt;/code&gt;(&lt;code&gt;JButton&lt;/code&gt;)のサイズ、オフセット、背景色などを変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OneTouchButton&lt;/code&gt;のサイズ指定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;SplitPane.oneTouchButtonSize&amp;quot;, 32);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;では無効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では無効で、&lt;code&gt;Divider&lt;/code&gt;のサイズに依存？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OneTouchButton&lt;/code&gt;のオフセット指定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;oneTouchButtonOffset&amp;quot;, 50);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSplitPane.VERTICAL_SPLIT&lt;/code&gt;の場合、&lt;code&gt;Divider&lt;/code&gt;の左端から&lt;code&gt;LeftOneTouchButton&lt;/code&gt;までと、&lt;code&gt;LeftOneTouchButton&lt;/code&gt;と&lt;code&gt;RightOneTouchButton&lt;/code&gt;までの距離が設定可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OneTouchButton&lt;/code&gt;の背景色

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton#paint(...)&lt;/code&gt;がオーバーライドされて、&lt;code&gt;oneTouchButton.getBackground()&lt;/code&gt;の色で塗り潰されている(&lt;code&gt;oneTouchButton.setOpaque(false)&lt;/code&gt;で透明にしても無意味)ので、&lt;code&gt;setBackground()&lt;/code&gt;で、&lt;code&gt;Divider&lt;/code&gt;の背景色と同じ色を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OneTouchButton&lt;/code&gt;の図形の色と形も、&lt;code&gt;JButton#paint(...)&lt;/code&gt;の中で直接描画(&lt;code&gt;Color.BLACK&lt;/code&gt;固定)されているので、簡単に変更することが出来ない(&lt;code&gt;BasicSplitPaneUI&lt;/code&gt;や&lt;code&gt;BasicSplitPaneDivider&lt;/code&gt;をオーバーライドする必要がある)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では無効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OneTouchButton&lt;/code&gt;の中央揃え？

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;SplitPane.centerOneTouchButtons&amp;quot;, true);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;、&lt;code&gt;MotifLookAndFeel&lt;/code&gt;、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;などでは、効果が無い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Divider&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt;と、&lt;code&gt;OneTouchButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;divider.setBorder(BorderFactory.createMatteBorder(20, 0, 5, 0, Color.RED));&lt;/code&gt;などを設定すると、&lt;code&gt;OneTouchButton&lt;/code&gt;が&lt;code&gt;Border&lt;/code&gt;にめり込んでしまう？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/onetouchbutton</link>
                <guid>http://terai.xrea.jp/swing/onetouchbutton</guid>
                <pubDate>2014-09-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのHTML形式コピーをカスタマイズする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルを選択してクリップボードに&lt;code&gt;HTML&lt;/code&gt;テキストをコピーするとき、そのセルのクラスに応じて生成するタグを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HtmlTableTransferHandler&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-VsQ_pmP_GKM/VAM3IR6IvyI/AAAAAAAACMI/97dngpaAQn8/s800/HtmlTableTransferHandler.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HtmlTableTransferHandler extends TransferHandler {
  //@see javax/swing/plaf/basic/
  //     BasicTableUI.TableTransferHandler#createTransferable(JComponent)
  @Override protected Transferable createTransferable(JComponent c) {
    if (c instanceof JTable) {
      JTable table = (JTable) c;
      int[] rows;
      int[] cols;

      if (!table.getRowSelectionAllowed() &amp;amp;&amp;amp; !table.getColumnSelectionAllowed()) {
        return null;
      }

      if (table.getRowSelectionAllowed()) {
        rows = table.getSelectedRows();
      } else {
        int rowCount = table.getRowCount();

        rows = new int[rowCount];
        for (int counter = 0; counter &amp;lt; rowCount; counter++) {
          rows[counter] = counter;
        }
      }

      if (table.getColumnSelectionAllowed()) {
        cols = table.getSelectedColumns();
      } else {
        int colCount = table.getColumnCount();

        cols = new int[colCount];
        for (int counter = 0; counter &amp;lt; colCount; counter++) {
          cols[counter] = counter;
        }
      }

      //if (rows == null || cols == null || rows.length == 0 || cols.length == 0) {
      if (cols == null || rows.length == 0 || cols.length == 0) {
        return null;
      }

      StringBuffer plainBuf = new StringBuffer();
      StringBuffer htmlBuf = new StringBuffer(64);

      htmlBuf.append(&quot;&amp;lt;html&amp;gt;\n&amp;lt;body&amp;gt;\n&amp;lt;table border=&#39;1&#39;&amp;gt;\n&quot;);

      for (int row = 0; row &amp;lt; rows.length; row++) {
        htmlBuf.append(&quot;&amp;lt;tr&amp;gt;\n&quot;);
        for (int col = 0; col &amp;lt; cols.length; col++) {
          Object obj = table.getValueAt(rows[row], cols[col]);
          String val = Objects.toString(obj, &quot;&quot;) + &quot;\t&quot;;
            //.replace(&quot;&amp;amp;&quot;, &quot;&amp;amp;amp;&quot;).replace(&quot;&amp;lt;&quot;, &quot;&amp;amp;lt;&quot;).replace(&quot;&amp;gt;&quot;, &quot;&amp;amp;gt;&quot;);
          plainBuf.append(val);

          if (obj instanceof Date) {
            String v = Objects.toString((Date) obj, &quot;&quot;);
            htmlBuf.append(&quot;  &amp;lt;td&amp;gt;&amp;lt;time&amp;gt;&quot; + v + &quot;&amp;lt;/time&amp;gt;&amp;lt;/td&amp;gt;\n&quot;);
          } else  if (obj instanceof Color) {
            htmlBuf.append(String.format(
                &quot;  &amp;lt;td style=&#39;background-color:#%06x&#39;&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;%n&quot;,
                ((Color) obj).getRGB() &amp;amp; 0xffffff));
          } else {
            htmlBuf.append(&quot;  &amp;lt;td&amp;gt;&quot; + Objects.toString(obj, &quot;&quot;) + &quot;&amp;lt;/td&amp;gt;\n&quot;);
          }
        }
        // we want a newline at the end of each line and not a tab
        plainBuf.deleteCharAt(plainBuf.length() - 1).append(&quot;\n&quot;);
        htmlBuf.append(&quot;&amp;lt;/tr&amp;gt;\n&quot;);
      }

      // remove the last newline
      plainBuf.deleteCharAt(plainBuf.length() - 1);
      htmlBuf.append(&quot;&amp;lt;/table&amp;gt;\n&amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;&quot;);

      return new BasicTransferable(plainBuf.toString(), htmlBuf.toString());
    }

    return null;
  }
  @Override public int getSourceActions(JComponent c) {
    return COPY;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: デフォルトの&lt;code&gt;BasicTableUI.TableTransferHandler&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;HtmlTableTransferHandler&lt;/code&gt;を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransferHandler#createTransferable(JComponent)&lt;/code&gt;をオーバーライドしてクリップボードに渡す&lt;code&gt;text/html&lt;/code&gt;なテキストを独自に作成(&lt;code&gt;text/plain&lt;/code&gt;は&lt;code&gt;BasicTableUI.TableTransferHandler&lt;/code&gt;のコピーをそのまま使用)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;タグに属性&lt;code&gt;border=&amp;#39;1&amp;#39;&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セルのクラスに応じたタグを生成

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;: &lt;code&gt;&amp;lt;time&amp;gt;...&amp;lt;/time&amp;gt;&lt;/code&gt;で囲む&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color&lt;/code&gt;: &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;に&lt;code&gt;style=&amp;#39;background-color:#%06x&amp;#39;&amp;gt;&lt;/code&gt;で背景色を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/swing/TransferHandler.html&quot;&gt;Java Swing「ドラッグ&amp;amp;ドロップ」メモ(Hishidama&amp;#39;s Swing-TransferHandler Memo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PropertyTable.html&quot;&gt;JTableでプロパティ一覧表を作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/htmltabletransferhandler</link>
                <guid>http://terai.xrea.jp/swing/htmltabletransferhandler</guid>
                <pubDate>2014-09-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの進捗状況と進捗文字列色を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;の進捗状況の色や、それで塗り潰された場合の進捗文字列色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressBarSelectionColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-GXTDLsaFDf0/U_nV4WbEi0I/AAAAAAAACL0/09g79mFs9ZE/s800/ProgressBarSelectionColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;ProgressBar.foreground&quot;, Color.RED);
UIManager.put(&quot;ProgressBar.selectionForeground&quot;, Color.ORANGE);
UIManager.put(&quot;ProgressBar.background&quot;, Color.WHITE);
UIManager.put(&quot;ProgressBar.selectionBackground&quot;, Color.RED);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;progressBar2.setForeground(Color.BLUE);
progressBar2.setBackground(Color.CYAN.brighter());
progressBar2.setUI(new BasicProgressBarUI() {
  @Override protected Color getSelectionForeground() {
    return Color.PINK;
  }
  @Override protected Color getSelectionBackground() {
    return Color.BLUE;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;Default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;UIManager.put(...);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文字色: &lt;code&gt;&amp;quot;ProgressBar.foreground&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;背景色: &lt;code&gt;&amp;quot;ProgressBar.background&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;進捗状況で塗り潰された場合の文字色: &lt;code&gt;&amp;quot;ProgressBar.selectionForeground&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;進捗状況の塗り潰し色: &lt;code&gt;&amp;quot;ProgressBar.selectionBackground&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、すべて無効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;では、&lt;code&gt;&amp;quot;ProgressBar.background&amp;quot;&lt;/code&gt;が無効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;BasicProgressBarUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文字色: &lt;code&gt;JProgressBar#setForeground(Color)&lt;/code&gt;で設定&lt;/li&gt;
&lt;li&gt;背景色: &lt;code&gt;JProgressBar#setBackground(Color)&lt;/code&gt;で設定&lt;/li&gt;
&lt;li&gt;進捗状況で塗り潰された場合の文字色: &lt;code&gt;BasicProgressBarUI#getSelectionForeground()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;li&gt;進捗状況の塗り潰し色: &lt;code&gt;BasicProgressBarUI#getSelectionBackground()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorChannelSwapFilter.html&quot;&gt;JLayerを使ってJProgressBarの色相を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progressbarselectioncolor</link>
                <guid>http://terai.xrea.jp/swing/progressbarselectioncolor</guid>
                <pubDate>2014-08-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MouseWheelEventを親のJScrollPaneに転送する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使って、ネストする&lt;code&gt;JScrollPane&lt;/code&gt;への&lt;code&gt;MouseWheelEvent&lt;/code&gt;を転送し、スクロールが継続するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WheelOverNestedScrollPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-Ax3sBgN85bo/U_DD4w3kEjI/AAAAAAAACLg/H0QTGo7hLH4/s800/WheelOverNestedScrollPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WheelScrollLayerUI extends LayerUI&amp;lt;JScrollPane&amp;gt; {
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK);
    }
  }
  @Override public void uninstallUI(JComponent c) {
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(0);
    }
    super.uninstallUI(c);
  }
  @Override protected void processMouseWheelEvent(
      MouseWheelEvent e, JLayer&amp;lt;? extends JScrollPane&amp;gt; l) {
    Component c = e.getComponent();
    int dir = e.getWheelRotation();
    JScrollPane main = l.getView();
    if (c instanceof JScrollPane &amp;amp;&amp;amp; !c.equals(main)) {
      JScrollPane child = (JScrollPane) c;
      BoundedRangeModel m = child.getVerticalScrollBar().getModel();
      int extent  = m.getExtent();
      int minimum = m.getMinimum();
      int maximum = m.getMaximum();
      int value   = m.getValue();
      if (value + extent &amp;gt;= maximum &amp;amp;&amp;amp; dir &amp;gt; 0 || value &amp;lt;= minimum &amp;amp;&amp;amp; dir &amp;lt; 0) {
        main.dispatchEvent(SwingUtilities.convertMouseEvent(c, e, main));
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;デフォルトの&lt;code&gt;JScrollPane&lt;/code&gt;をネストさせると、子&lt;code&gt;JScrollPane&lt;/code&gt;内での&lt;code&gt;MouseWheelEvent&lt;/code&gt;は、親&lt;code&gt;JScrollPane&lt;/code&gt;には伝搬しません。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、子&lt;code&gt;JScrollPane&lt;/code&gt;のスクロールバーが最下部にあるなら下方向(最上部なら上方向)の&lt;code&gt;MouseWheelEvent&lt;/code&gt;は親&lt;code&gt;JScrollPane&lt;/code&gt;に転送する&lt;code&gt;LayerUI&lt;/code&gt;を作成し、これを親&lt;code&gt;JScrollPane&lt;/code&gt;の&lt;code&gt;JLayer&amp;lt;JScrollPane&amp;gt;&lt;/code&gt;に適用しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DetectScrollToBottom.html&quot;&gt;JScrollBarが最後までスクロールしたことを確認する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/wheelovernestedscrollpane</link>
                <guid>http://terai.xrea.jp/swing/wheelovernestedscrollpane</guid>
                <pubDate>2014-08-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableCellRendererに複数行のHtmlテキストを表示する場合に行揃えを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;Cell&lt;/code&gt;に複数行になる&lt;code&gt;Html&lt;/code&gt;テキストを表示する場合の行揃えによる描画の変化をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HtmlCellVerticalAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-Id-AlEWH0-M/U-eKsOPZf6I/AAAAAAAACLI/asLZtz0cOvk/s800/HtmlCellVerticalAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;((JLabel) table.getDefaultRenderer(Object.class)).setVerticalAlignment(JLabel.TOP);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultTableCellRenderer&lt;/code&gt;(&lt;code&gt;JLabel&lt;/code&gt;を継承)に複数行になる&lt;code&gt;Html&lt;/code&gt;テキストを表示する場合、行揃え(&lt;code&gt;VerticalAlignment&lt;/code&gt;)に&lt;code&gt;JLabel.TOP&lt;/code&gt;以外が設定されていると、マウスドラッグによるセル選択で描画が乱れることがあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25043191/table-cells-with-html-strings-inconsistently-rendered-as-multiline&quot;&gt;java - Table cells with HTML strings inconsistently rendered as multiline - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/htmlcellverticalalignment</link>
                <guid>http://terai.xrea.jp/swing/htmlcellverticalalignment</guid>
                <pubDate>2014-08-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JWindowをデスクトップにスライドインで表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JOptionPane&lt;/code&gt;を追加した&lt;code&gt;JWindow&lt;/code&gt;を、スライドインアニメーションを使ってデスクトップ上に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SlideInNotificationWindow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-axruZWDGZys/U98iB0eZi8I/AAAAAAAACK0/hh_jWt5nsi4/s800/SlideInNotificationWindow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SlideInNotification implements PropertyChangeListener, HierarchyListener {
  private static final int DELAY = 5;
  private final JFrame frame;
  private JWindow dialog;
  private Timer animator;
  private int dx;
  private int dy;

  public SlideInNotification(JFrame frame) {
    super();
    this.frame = frame;
  }
  public void startSlideIn(final SlideInAnimation slideInAnimation) {
    if (animator != null &amp;amp;&amp;amp; animator.isRunning()) {
      return;
    }
    if (dialog != null &amp;amp;&amp;amp; dialog.isVisible()) {
      dialog.dispose();
    }
    GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Rectangle desktopBounds = env.getMaximumWindowBounds();

    JOptionPane optionPane = new JOptionPane(&quot;Warning&quot;, JOptionPane.WARNING_MESSAGE);
    DragWindowListener dwl = new DragWindowListener();
    optionPane.addMouseListener(dwl);
    optionPane.addMouseMotionListener(dwl);
    optionPane.addPropertyChangeListener(this);
    optionPane.addHierarchyListener(this);

    GraphicsConfiguration gc = frame.getGraphicsConfiguration();
    dialog = new JWindow(gc);
    dialog.getContentPane().add(optionPane);
    dialog.pack();

    final Dimension d = dialog.getContentPane().getPreferredSize();
    dx = desktopBounds.width - d.width;
    dy = desktopBounds.height;

    dialog.setLocation(new Point(dx, dy));
    dialog.setVisible(true);

    animator = new Timer(DELAY, new ActionListener() {
      private int count;
      @Override public void actionPerformed(ActionEvent e) {
        double a = 1d;
        switch (slideInAnimation) {
          case EASE_IN:
          a = AnimationUtil.easeIn(count++ / (double) d.height);
          break;
          case EASE_OUT:
          a = AnimationUtil.easeOut(count++ / (double) d.height);
          break;
          case EASE_IN_OUT:
          default:
          a = AnimationUtil.easeInOut(count++ / (double) d.height);
          break;
        }
        int visibleHeidht = (int) (.5 + a * d.height);
        if (visibleHeidht &amp;gt;= d.height) {
          visibleHeidht = d.height;
          animator.stop();
        }
        dialog.setLocation(new Point(dx, dy - visibleHeidht));
      }
    });
    animator.start();
  }
  @Override public void propertyChange(PropertyChangeEvent e) {
    if (dialog != null &amp;amp;&amp;amp; dialog.isVisible() &amp;amp;&amp;amp; e.getNewValue() != null &amp;amp;&amp;amp;
        e.getNewValue() != JOptionPane.UNINITIALIZED_VALUE) {
      dialog.dispose();
    }
  }
  @Override public void hierarchyChanged(HierarchyEvent e) {
    JComponent c = (JComponent) e.getComponent();
    if ((e.getChangeFlags() &amp;amp; HierarchyEvent.DISPLAYABILITY_CHANGED) != 0 &amp;amp;&amp;amp;
        animator != null &amp;amp;&amp;amp; !c.isDisplayable()) {
      animator.stop();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Window#setLocation(int, int)&lt;/code&gt;メソッドを使用して&lt;code&gt;JOptionPane&lt;/code&gt;を追加した&lt;code&gt;JWindow&lt;/code&gt;のデスクトップ上での表示位置を変更し、画面右下からそれがスライドインしてくるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;マルチスクリーン環境では、メインの&lt;code&gt;JFrame&lt;/code&gt;が存在する画面(&lt;code&gt;frame.getGraphicsConfiguration()&lt;/code&gt;)に警告(&lt;code&gt;new JWindow(GraphicsConfiguration)&lt;/code&gt;)がスライドインすることを想定しているが、テストしていない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOptionPane.WARNING_MESSAGE&lt;/code&gt;以外の&lt;code&gt;JOptionPane&lt;/code&gt;はテストしていない&lt;/li&gt;
&lt;li&gt;スクリーンショットでは親フレーム中央に&lt;code&gt;JOptionPane&lt;/code&gt;が表示されているが、これは手動で移動している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/slideinnotificationwindow</link>
                <guid>http://terai.xrea.jp/swing/slideinnotificationwindow</guid>
                <pubDate>2014-08-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>NimbusLookAndFeelでJComponentのサイズを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;を使用している場合、クライアントプロパティを設定することで&lt;code&gt;JComponent&lt;/code&gt;の表示サイズを変更することが出来ます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComponentSizeVariant&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-Uru9Oco4olg/U9T5RHzJ_5I/AAAAAAAACKY/7N7a3Ya3sYw/s800/ComponentSizeVariant.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;booleanRenderer.putClientProperty(&quot;JComponent.sizeVariant&quot;, &quot;mini&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;を使用している場合、&lt;code&gt;JComponent#putClientProperty(&amp;quot;JComponent.sizeVariant&amp;quot;, &amp;quot;mini&amp;quot;);&lt;/code&gt;のように、クライアントプロパティを設定することで、その表示サイズを変更可能

&lt;ul&gt;
&lt;li&gt;デフォルトは&lt;code&gt;regular&lt;/code&gt;、その他は小さい順に&lt;code&gt;mini&lt;/code&gt;, &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;large&lt;/code&gt;が設定可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComponent#updateUI()&lt;/code&gt;を実行しないと、更新されない

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;SwingUtilities.updateComponentTreeUI(window);&lt;/code&gt;で実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォントがユーザー指定されている場合は、文字サイズは更新されない？

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;updateUI()&lt;/code&gt;の前に、&lt;code&gt;jc.setFont(new FontUIResource(jc.getFont()));&lt;/code&gt;で&lt;code&gt;UIResource&lt;/code&gt;化することで回避&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;BooleanRenderer&lt;/code&gt;が二回目以降変更されない

&lt;ul&gt;
&lt;li&gt;初回の&lt;code&gt;JCheckBox booleanRenderer = (JCheckBox) table.getDefaultRenderer(Boolean.class); booleanRenderer.putClientProperty(&amp;quot;JComponent.sizeVariant&amp;quot;, &amp;quot;mini&amp;quot;);&lt;/code&gt;は、正常に動作しているように見える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/size.html&quot;&gt;Resizing a Component (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/componentsizevariant</link>
                <guid>http://terai.xrea.jp/swing/componentsizevariant</guid>
                <pubDate>2014-07-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneの各タブにJButtonを右寄せで追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ上にそれを閉じるための&lt;code&gt;JButton&lt;/code&gt;を&lt;code&gt;JLayer&lt;/code&gt;を使用して右寄せで描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CloseableTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-slZiu9Gyq8I/U8wH6A1byMI/AAAAAAAACJ0/-aLfrJeKX4Y/s800/CloseableTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CloseableTabbedPaneLayerUI extends LayerUI&amp;lt;JTabbedPane&amp;gt; {
  private final JComponent rubberStamp = new JPanel();
  private final Point pt = new Point(-100, -100);
  private final JButton button = new JButton(new CloseTabIcon());
  public CloseableTabbedPaneLayerUI() {
    super();
    button.setBorder(BorderFactory.createEmptyBorder());
    button.setFocusPainted(false);
    button.setBorderPainted(false);
    button.setContentAreaFilled(false);
    button.setRolloverEnabled(false);
  }
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    if (c instanceof JLayer) {
      JLayer jlayer = (JLayer) c;
      JTabbedPane tabPane = (JTabbedPane) jlayer.getView();
      for (int i = 0; i &amp;lt; tabPane.getTabCount(); i++) {
        Rectangle rect = tabPane.getBoundsAt(i);
        Dimension d = button.getPreferredSize();
        int x = rect.x + rect.width - d.width - 2;
        int y = rect.y + (rect.height - d.height) / 2;
        Rectangle r = new Rectangle(x, y, d.width, d.height);
        button.getModel().setRollover(r.contains(pt));
        SwingUtilities.paintComponent(g, button, rubberStamp, r);
      }
    }
  }
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(
          AWTEvent.MOUSE_EVENT_MASK |
          AWTEvent.MOUSE_MOTION_EVENT_MASK);
    }
  }
  @Override public void uninstallUI(JComponent c) {
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(0);
    }
    super.uninstallUI(c);
  }
  @Override protected void processMouseEvent(
      MouseEvent e, JLayer&amp;lt;? extends JTabbedPane&amp;gt; l) {
    if (e.getID() == MouseEvent.MOUSE_CLICKED) {
      pt.setLocation(e.getPoint());
      JTabbedPane tabbedPane = (JTabbedPane) l.getView();
      int index = tabbedPane.indexAtLocation(pt.x, pt.y);
      if (index &amp;gt;= 0) {
        Rectangle rect = tabbedPane.getBoundsAt(index);
        Dimension d = button.getPreferredSize();
        int x = rect.x + rect.width - d.width - 2;
        int y = rect.y + (rect.height - d.height) / 2;
        Rectangle r = new Rectangle(x, y, d.width, d.height);
        if (r.contains(pt)) {
          tabbedPane.removeTabAt(index);
        }
      }
    }
  }
  @Override protected void processMouseMotionEvent(
      MouseEvent e, JLayer&amp;lt;? extends JTabbedPane&amp;gt; l) {
    pt.setLocation(e.getPoint());
    JTabbedPane tabbedPane = (JTabbedPane) l.getView();
    int index = tabbedPane.indexAtLocation(pt.x, pt.y);
    if (index &amp;gt;= 0) {
      Point loc = e.getPoint();
      loc.translate(-16, -16);
      l.repaint(new Rectangle(loc, new Dimension(32, 32)));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;タブに追加したコンポーネントは、中央揃えで配置される(&lt;code&gt;BasicTabbedPaneUI&lt;/code&gt;などのデフォルト)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLayer&lt;/code&gt;を使用して、タブの余白にそれを閉じるための&lt;code&gt;JButton&lt;/code&gt;を描画

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TabbedPaneUI&lt;/code&gt;をオーバーライドする必要がない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseIcon.html&quot;&gt;JTabbedPaneにタブを閉じるアイコンを追加&lt;/a&gt;では、&lt;code&gt;BasicTabbedPaneUI#createLayoutManager()&lt;/code&gt;をオーバーライドして、独自の&lt;code&gt;TabbedPaneLayout&lt;/code&gt;で右端に☓アイコンを描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タブの余白は&lt;code&gt;UIManager.put(&amp;quot;TabbedPane.tabInsets&amp;quot;, new Insets(2, 18, 2, 18));&lt;/code&gt;で設定

&lt;ul&gt;
&lt;li&gt;この余白は、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;などでは無効&lt;/li&gt;
&lt;li&gt;余白が取れないほどタブが短くなったら、ボタンがタイトルに重なってしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24634047/closeable-jtabbedpane-alignment-of-the-close-button&quot;&gt;java - Closeable JTabbedPane - alignment of the close button - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseIcon.html&quot;&gt;JTabbedPaneにタブを閉じるアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/closeabletabbedpane</link>
                <guid>http://terai.xrea.jp/swing/closeabletabbedpane</guid>
                <pubDate>2014-07-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの不確定状態でのアニメーションパターンを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;が不確定状態の場合に描画するアニメーションパターンを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StripedProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-NNzCJkyUG1U/U8KcWq3YRjI/AAAAAAAACJg/tB7jz0r9Frg/s800/StripedProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class StripedProgressBarUI extends BasicProgressBarUI {
  private final boolean dir;
  private final boolean slope;
  public StripedProgressBarUI(boolean dir, boolean slope) {
    super();
    this.dir = dir;
    this.slope = slope;
  }
  @Override protected int getBoxLength(int availableLength, int otherDimension) {
    return availableLength; //(int)Math.round(availableLength/6.0);
  }
  @Override public void paintIndeterminate(Graphics g, JComponent c) {
    if (!(g instanceof Graphics2D)) {
      return;
    }

    Insets b = progressBar.getInsets(); // area for border
    int barRectWidth  = progressBar.getWidth() - b.right - b.left;
    int barRectHeight = progressBar.getHeight() - b.top - b.bottom;

    if (barRectWidth &amp;lt;= 0 || barRectHeight &amp;lt;= 0) {
      return;
    }

    Graphics2D g2 = (Graphics2D) g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);

    // Paint the striped box.
    boxRect = getBox(boxRect);
    if (boxRect != null) {
      int w = 10;
      int x = getAnimationIndex();
      GeneralPath p = new GeneralPath();
      if (dir) {
        p.moveTo(boxRect.x,           boxRect.y);
        p.lineTo(boxRect.x + w * .5f, boxRect.y + boxRect.height);
        p.lineTo(boxRect.x + w,       boxRect.y + boxRect.height);
        p.lineTo(boxRect.x + w * .5f, boxRect.y);
      } else {
        p.moveTo(boxRect.x,           boxRect.y + boxRect.height);
        p.lineTo(boxRect.x + w * .5f, boxRect.y + boxRect.height);
        p.lineTo(boxRect.x + w,       boxRect.y);
        p.lineTo(boxRect.x + w * .5f, boxRect.y);
      }
      p.closePath();
      g2.setColor(progressBar.getForeground());
      if (slope) {
        for (int i = boxRect.width + x; i &amp;gt; -w; i -= w) {
          g2.fill(AffineTransform.getTranslateInstance(i, 0).createTransformedShape(p));
        }
      } else {
        for (int i = -x; i &amp;lt; boxRect.width; i += w) {
          g2.fill(AffineTransform.getTranslateInstance(i, 0).createTransformedShape(p));
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicProgressBarUI#paintIndeterminate(...)&lt;/code&gt;をオーバーライドした&lt;code&gt;ProgressBarUI&lt;/code&gt;を設定して、不確定状態で描画されるアニメーションのパターンをストライプ模様に変更しています。また、デフォルトの不確定状態アニメーションは、&lt;code&gt;JProgressBar&lt;/code&gt;の内部をボックスが左右(縦の場合は上下)に跳ねるパターンですが、今回は&lt;code&gt;JProgressBar&lt;/code&gt;全体をストライプで描画するため、&lt;code&gt;BasicProgressBarUI#getBoxLength()&lt;/code&gt;も&lt;code&gt;JProgressBar&lt;/code&gt;自体の長さを返すようにオーバーライドしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;アニメーションのスピードなどは、&lt;a href=&quot;http://terai.xrea.jp/Swing/IndeterminateCycleTime.html&quot;&gt;JProgressBarの不確定進捗サイクル時間を設定&lt;/a&gt;と同様に、&lt;code&gt;UIManager.put(...)&lt;/code&gt;を使って調整しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;ProgressBar.cycleTime&quot;, 1000);
UIManager.put(&quot;ProgressBar.repaintInterval&quot;, 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IndeterminateRegionPainter.html&quot;&gt;JProgressBarのNimbusLookAndFeelにおける不確定状態アニメーションを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IndeterminateCycleTime.html&quot;&gt;JProgressBarの不確定進捗サイクル時間を設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/stripedprogressbar</link>
                <guid>http://terai.xrea.jp/swing/stripedprogressbar</guid>
                <pubDate>2014-07-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaでハイライト付き検索を行う</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;内の文字列を指定した条件で検索し、マッチした文字列をすべてハイライト表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HighlightSearch&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-jdjIr-6A1l8/U7ljpxPgxzI/AAAAAAAACJI/x2Okpzkcce8/s800/HighlightSearch.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private Pattern getPattern() {
  String text = field.getText();
  if (text == null || text.isEmpty()) {
    return null;
  }
  try {
    String cw = checkWord.isSelected() ? &quot;\\b&quot; : &quot;&quot;;
    String pattern = String.format(&quot;%s%s%s&quot;, cw, text, cw);
    int flags = checkCase.isSelected()
      ? 0
      : Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE;
    return Pattern.compile(pattern, flags);
  } catch (PatternSyntaxException ex) {
    field.setBackground(WARNING_COLOR);
    return null;
  }
}

private void changeHighlight() {
  field.setBackground(Color.WHITE);
  Highlighter highlighter = textArea.getHighlighter();
  highlighter.removeAllHighlights();
  Document doc = textArea.getDocument();
  try {
    Pattern pattern = getPattern();
    if (pattern != null) {
      Matcher matcher = pattern.matcher(doc.getText(0, doc.getLength()));
      int pos = 0;
      while (matcher.find(pos)) {
        int start = matcher.start();
        int end   = matcher.end();
        highlighter.addHighlight(start, end, highlightPainter);
        pos = end;
      }
    }
    JLabel label = layerUI.hint;
    Highlighter.Highlight[] array = highlighter.getHighlights();
    int hits = array.length;
    if (hits == 0) {
      current = -1;
      label.setOpaque(true);
    } else {
      current = (current + hits) % hits;
      label.setOpaque(false);
      Highlighter.Highlight hh = highlighter.getHighlights()[current];
      highlighter.removeHighlight(hh);
      highlighter.addHighlight(
          hh.getStartOffset(), hh.getEndOffset(), currentPainter);
      scrollToCenter(textArea, hh.getStartOffset());
    }
    label.setText(String.format(&quot;%02d / %02d%n&quot;, current + 1, hits));
  } catch (BadLocationException e) {
    e.printStackTrace();
  }
  field.repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のような条件に一致する文字列をすべてハイライト表示(黄色)する検索を行います。また、文字列入力欄に文字列が入力されている場合、マッチした結果の総数とカレントの結果(オレンジでハイライト)の順番を&lt;code&gt;JLayer&lt;/code&gt;で表示します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⋀&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;前を検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⋁&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;次を検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Match case&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;チェック有りで、&lt;code&gt;Pattern.compile(...)&lt;/code&gt;の引数に、&lt;code&gt;0&lt;/code&gt;を指定して大文字小文字の区別を行う&lt;/li&gt;
&lt;li&gt;チェック無しで、&lt;code&gt;Pattern.compile(...)&lt;/code&gt;の引数に、&lt;code&gt;Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE&lt;/code&gt;を指定して、大文字小文字の区別をしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;Match whole word only&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;チェック有りで、&lt;code&gt;\b&lt;/code&gt;(単語境界)を検索文字列の前後に追加して、単語検索を行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Match case&lt;/code&gt;の動作が逆になっていたのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-07-23 (水) 17:57:58&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/highlightsearch</link>
                <guid>http://terai.xrea.jp/swing/highlightsearch</guid>
                <pubDate>2014-07-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarのNimbusLookAndFeelにおける不確定状態アニメーションを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;を&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;で使用している場合、その不確定状態アニメーションを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IndeterminateRegionPainter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-L28C52EISs4/U7AofjsiWqI/AAAAAAAACIo/OHDDAqKKk6E/s800/IndeterminateRegionPainter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIDefaults d = new UIDefaults();
d.put(&quot;ProgressBar[Enabled+Indeterminate].foregroundPainter&quot;, new AbstractRegionPainter() {
  //...
  private final PaintContext ctx = new PaintContext(
      new Insets(5, 5, 5, 5), new Dimension(29, 19), false);
  @Override public void doPaint(
      Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
    path = decodePath1();
    g.setPaint(color17);
    g.fill(path);
    rect = decodeRect3();
    g.setPaint(decodeGradient5(rect));
    g.fill(rect);
    rect = decodeRect4();
    g.setPaint(decodeGradient6(rect));
    g.fill(rect);
  }
  @Override public PaintContext getPaintContext() {
    return ctx;
  }
  //...
});
progressBar1 = new JProgressBar(model);
progressBar1.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;で&lt;code&gt;JProgressBar&lt;/code&gt;の不確定状態アニメーションを変更するために、セルの描画を行う&lt;code&gt;AbstractRegionPainter#doPaint(...)&lt;/code&gt;をオーバーライドし、これを&lt;code&gt;UIDefaults&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StripedProgressBar.html&quot;&gt;JProgressBarの不確定状態でのアニメーションパターンを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/indeterminateregionpainter</link>
                <guid>http://terai.xrea.jp/swing/indeterminateregionpainter</guid>
                <pubDate>2014-06-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>LookAndFeelの変更を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;の変更を取得するリスナーの作成などを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LookAndFeelChangeListener&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-dbduLE1mbyM/U6b3UwtJj6I/AAAAAAAACH4/AUy3dSpgxMg/s800/LookAndFeelChangeListener.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.addPropertyChangeListener(new PropertyChangeListener() {
  @Override public void propertyChange(PropertyChangeEvent e) {
    if (e.getPropertyName().equals(&quot;lookAndFeel&quot;)) {
      //String lnf = e.getNewValue().toString();
      updateCheckBox(&quot;UIManager: propertyChange&quot;);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の三種類の方法で&lt;code&gt;LookAndFeel&lt;/code&gt;の変更を取得するテストを行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager: propertyChange&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.addPropertyChangeListener(PropertyChangeListener)&lt;/code&gt;を使用して、&lt;code&gt;LookAndFeel&lt;/code&gt;の変更を取得&lt;/li&gt;
&lt;li&gt;このサンプルでは、初回の&lt;code&gt;UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());&lt;/code&gt;の後で&lt;code&gt;PropertyChangeListener&lt;/code&gt;を設定しているので、それには反応しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel: updateUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;の変更(&lt;code&gt;SwingUtilities.updateComponentTreeUI(...)&lt;/code&gt;が実行)されると、必ず呼び出される&lt;code&gt;JComponent.updateUI()&lt;/code&gt;をオーバーライドして変更を取得&lt;/li&gt;
&lt;li&gt;このメソッドをオーバーライドしたコンポーネントのコンストラクタが実行される前に呼び出される場合があるので、子コンポーネントの更新は&lt;code&gt;EventQueue.invokeLater(...)&lt;/code&gt;を使って一連のイベントの一番最後に実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuItem: actionPerformed&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;で&lt;code&gt;LookAndFeel&lt;/code&gt;を切り替えているので、各ボタンに&lt;code&gt;ActionListener&lt;/code&gt;を追加し、チェックされた時に&lt;code&gt;LookAndFeel&lt;/code&gt;の変更を取得&lt;/li&gt;
&lt;li&gt;アクションが実行された時点では、&lt;code&gt;LookAndFeel&lt;/code&gt;の変更が完了しておらず、&lt;code&gt;UIManager&lt;/code&gt;のプロパティ値も前の&lt;code&gt;LookAndFeel&lt;/code&gt;のままなので、その値の取得は&lt;code&gt;EventQueue.invokeLater(...)&lt;/code&gt;を使って一連のイベントの一番最後に実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/lookandfeelchangelistener</link>
                <guid>http://terai.xrea.jp/swing/lookandfeelchangelistener</guid>
                <pubDate>2014-06-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードがフォーカス状態になった場合のBorderを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードが選択されてフォーカス状態になった場合の&lt;code&gt;Border&lt;/code&gt;による描画を&lt;code&gt;UIManager&lt;/code&gt;で変更します。 &lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DrawsTreeFocus&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-I62wWvQhdQI/U53BUsVLj9I/AAAAAAAACHk/SSHVLXv9m28/s800/DrawsTreeFocus.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.putBoolean(&quot;Tree.drawsFocusBorderAroundIcon&quot;, false);
UIManager.putBoolean(&quot;Tree.drawDashedFocusIndicator&quot;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tree.drawsFocusBorderAroundIcon&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ture&lt;/code&gt;の場合、&lt;code&gt;JTree&lt;/code&gt;のノードアイコンも囲むように&lt;code&gt;Border&lt;/code&gt;が拡張される(背景色で塗りつぶされる範囲は変化しない)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MotifLookAndFeel&lt;/code&gt;の初期値は&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tree.drawDashedFocusIndicator&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ture&lt;/code&gt;の場合、&lt;code&gt;JTree&lt;/code&gt;のフォーカスの描画に使用する&lt;code&gt;Border&lt;/code&gt;が点線になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の初期値は&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/drawstreefocus</link>
                <guid>http://terai.xrea.jp/swing/drawstreefocus</guid>
                <pubDate>2014-06-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのセルエディタにJComboBoxなどを配置したJPanelを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のセルエディタ、セルレンダラとして、&lt;code&gt;JComboBox&lt;/code&gt;などを配置した&lt;code&gt;JPanel&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-kNa0cfgyvbY/U5SIYOWjVtI/AAAAAAAACHM/XkjN37IzSas/s800/ComboBoxCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class PluginCellEditor extends DefaultCellEditor {
  private final PluginPanel panel;
  private transient Node node;

  public PluginCellEditor(JComboBox&amp;lt;String&amp;gt; comboBox) {
    super(comboBox);
    panel = new PluginPanel(comboBox);
  }
  @Override public Component getTreeCellEditorComponent(
      JTree tree, Object value, boolean selected, boolean expanded,
      boolean leaf, int row) {
    Node node = panel.extractNode(value);
    panel.setContents(node);
    this.node = node;
    return panel;
  }
  @Override public Object getCellEditorValue() {
    Object o = super.getCellEditorValue();
    if (node == null) {
      return o;
    }
    DefaultComboBoxModel&amp;lt;String&amp;gt; m = (DefaultComboBoxModel&amp;lt;String&amp;gt;) panel.comboBox.getModel();
    Node n = new Node(panel.pluginName.getText(), node.plugins);
    n.setSelectedPluginIndex(m.getIndexOf(o));
    return n;
  }
  @Override public boolean isCellEditable(EventObject e) {
    Object source = e.getSource();
    if (!(source instanceof JTree) || !(e instanceof MouseEvent)) {
      return false;
    }
    JTree tree = (JTree) source;
    MouseEvent me = (MouseEvent) e;
    TreePath path = tree.getPathForLocation(me.getX(), me.getY());
    if (path == null) {
      return false;
    }
    Object node = path.getLastPathComponent();
    if (!(node instanceof DefaultMutableTreeNode)) {
      return false;
    }
    Rectangle r = tree.getPathBounds(path);
    if (r == null) {
      return false;
    }
    Dimension d = panel.getPreferredSize();
    r.setSize(new Dimension(d.width, r.height));
    if (r.contains(me.getX(), me.getY())) {
      showComboPopup(tree, me);
      return true;
    }
    return delegate.isCellEditable(e);
  }
  private void showComboPopup(final JTree tree, final MouseEvent me) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        Point pt = SwingUtilities.convertPoint(tree, me.getPoint(), panel);
        Object o = SwingUtilities.getDeepestComponentAt(panel, pt.x, pt.y);
        if (o instanceof JComboBox) {
          panel.comboBox.showPopup();
        } else if (o != null) {
          Object oo = SwingUtilities.getAncestorOfClass(JComboBox.class, (Component) o);
          if (oo instanceof JComboBox) {
            panel.comboBox.showPopup();
          }
        }
      }
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;と&lt;code&gt;JComboBox&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;を描画や編集に移譲する&lt;code&gt;TreeCellRenderer&lt;/code&gt;と&lt;code&gt;TreeCellEditor&lt;/code&gt;を作成して、それぞれ、&lt;code&gt;JTree#setCellRenderer(...)&lt;/code&gt;、&lt;code&gt;JTree#setCellEditor(...)&lt;/code&gt;で設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;TreeCellEditor&lt;/code&gt;には、コンストラクタで&lt;code&gt;JComboBox&lt;/code&gt;を設定する&lt;code&gt;DefaultCellEditor&lt;/code&gt;を使用していますが、この&lt;code&gt;JComboBox&lt;/code&gt;は&lt;code&gt;JPanel&lt;/code&gt;の子要素になるため、一回目のクリックでノードが編集開始されたときに&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストを開くことができません(二回目ならすでにセルエディタである&lt;code&gt;JPanel&lt;/code&gt;自体が&lt;code&gt;JTree&lt;/code&gt;の前面に表示されているので、子コンポーネントの&lt;code&gt;JComboBox&lt;/code&gt;をクリックすればドロップダウンリストが開く)。そのため、このサンプルでは、&lt;code&gt;TreeCellEditor#isCellEditable(...)&lt;/code&gt;をオーバーライドし、ノード(&lt;code&gt;JPanel&lt;/code&gt;)のクリックされた位置に存在するコンポーネントが&lt;code&gt;JComboBox&lt;/code&gt;(または&lt;code&gt;JComboBox&lt;/code&gt;内にある&lt;code&gt;ArrowButton&lt;/code&gt;)だった場合は、編集が開始された後(&lt;code&gt;EventQueue.invokeLater(...)&lt;/code&gt;を使用してセルエディタが表示された後で実行)、&lt;code&gt;JComboBox.showPopup()&lt;/code&gt;メソッドでドロップダウンリストを開くように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23900512/jtree-selection-issue&quot;&gt;java - JTree selection issue - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxcelleditor</link>
                <guid>http://terai.xrea.jp/swing/comboboxcelleditor</guid>
                <pubDate>2014-06-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの進捗状況を円形で表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;の進捗状況を円形表示するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressCircle&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-K2Us5zyEGJs/U4rt4SgHxVI/AAAAAAAACGo/IBfgQ2C1jxE/s800/ProgressCircle.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ProgressCircleUI extends BasicProgressBarUI {
  @Override public Dimension getPreferredSize(JComponent c) {
    Dimension d = super.getPreferredSize(c);
    int v = Math.max(d.width, d.height);
    d.setSize(v, v);
    return d;
  }
  @Override public void paint(Graphics g, JComponent c) {
    Insets b = progressBar.getInsets(); // area for border
    int barRectWidth  = progressBar.getWidth()  - b.right - b.left;
    int barRectHeight = progressBar.getHeight() - b.top - b.bottom;
    if (barRectWidth &amp;lt;= 0 || barRectHeight &amp;lt;= 0) {
      return;
    }

    // draw the cells
    Graphics2D g2 = (Graphics2D) g.create();
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    double degree = 360 * progressBar.getPercentComplete();
    double sz = Math.min(barRectWidth, barRectHeight);
    double cx = b.left + barRectWidth  * .5;
    double cy = b.top  + barRectHeight * .5;
    double or = sz * .5;
    double ir = or * .5; //or - 20;
    Shape inner  = new Ellipse2D.Double(cx - ir, cy - ir, ir * 2, ir * 2);
    Shape outer  = new Ellipse2D.Double(cx - or, cy - or, sz, sz);
    Shape sector = new Arc2D.Double(
        cx - or, cy - or, sz, sz, 90 - degree, degree, Arc2D.PIE);

    Area foreground = new Area(sector);
    Area background = new Area(outer);
    Area hole = new Area(inner);

    foreground.subtract(hole);
    background.subtract(hole);

    g2.setPaint(new Color(0xDDDDDD));
    g2.fill(background);

    g2.setPaint(progressBar.getForeground());
    g2.fill(foreground);
    g2.dispose();

    // Deal with possible text painting
    if (progressBar.isStringPainted()) {
      paintString(g, b.left, b.top, barRectWidth, barRectHeight, 0, b);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicProgressBarUI#paint(Graphics g, JComponent c)&lt;/code&gt;をオーバーライドして進捗状況を円形で表現する&lt;code&gt;ProgressBarUI&lt;/code&gt;を作成し、&lt;code&gt;JProgressBar&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;表示上、中心から表示枠矩形の上辺中央を結ぶ線が弧の始角で、増加は時計回り方向に見えるよう&lt;code&gt;Arc2D&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;推奨サイズが常に正方形になるように、&lt;code&gt;BasicProgressBarUI#getPreferredSize(JComponent c)&lt;/code&gt;をオーバーライドしているので、方向(&lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt;,&lt;code&gt;SwingConstants.HORIZONTAL&lt;/code&gt;)は無視される&lt;/li&gt;
&lt;li&gt;不確定状態の描画(&lt;code&gt;BasicProgressBarUI#paintDeterminate(...)&lt;/code&gt;,&lt;code&gt;BasicProgressBarUI#paintIndeterminate(...)&lt;/code&gt;はオーバーライドしていない)は未対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CompoundButton.html&quot;&gt;OverlayLayoutで複数のJButtonを重ねて複合ボタンを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GradientPalletProgressBar.html&quot;&gt;JProgressBarにUIを設定してインジケータの色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progresscircle</link>
                <guid>http://terai.xrea.jp/swing/progresscircle</guid>
                <pubDate>2014-06-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのリサイズで最後のTableColumnのみリサイズする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;がリサイズされた場合、最後にある&lt;code&gt;TableColumn&lt;/code&gt;がその幅の変更を吸収するように設定します。主に、&lt;a href=&quot;http://stackoverflow.com/questions/23201818/jtable-columns-doesnt-resize-probably-when-jframe-resize&quot;&gt;java - JTable columns doesnt resize probably when JFrame resize - Stack Overflow&lt;/a&gt;の回答からソースを引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ResizingColumnAndTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-uhbVwRqsa2g/U4HyPhrI8PI/AAAAAAAACF8/OJXWaFVxavE/s800/ResizingColumnAndTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JTable table = new JTable(100, 3) {
  private transient ComponentListener resizeHandler;
  @Override public void updateUI() {
    removeComponentListener(resizeHandler);
    super.updateUI();
    resizeHandler = new ComponentAdapter() {
      @Override public void componentResized(ComponentEvent e) {
        JTable table = (JTable) e.getComponent();
        JTableHeader tableHeader = table.getTableHeader();
        if (tableHeader != null) {
          tableHeader.setResizingColumn(null);
        }
      }
    };
    addComponentListener(resizeHandler);
  }
  //http://stackoverflow.com/questions/16368343/jtable-resize-only-selected-column-when-container-size-changes
  //http://stackoverflow.com/questions/23201818/jtable-columns-doesnt-resize-probably-when-jframe-resize
  @Override public void doLayout() {
    if (tableHeader != null &amp;amp;&amp;amp; autoResizeMode != AUTO_RESIZE_OFF &amp;amp;&amp;amp; check.isSelected()) {
      TableColumn resizingColumn = tableHeader.getResizingColumn();
      if (resizingColumn == null) {
        TableColumnModel tcm = getColumnModel();
        int lastColumn = tcm.getColumnCount() - 1;
        tableHeader.setResizingColumn(tcm.getColumn(lastColumn));
      }
    }
    super.doLayout();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable#doLayout()&lt;/code&gt;をオーバーライドして、&lt;code&gt;JFrame&lt;/code&gt;がリサイズされた、&lt;code&gt;JTable&lt;/code&gt;、&lt;code&gt;JTableHeader&lt;/code&gt;もリサイズされたら、&lt;code&gt;JTableHeader.setResizingColumn(...)&lt;/code&gt;で最後の&lt;code&gt;TableColumn&lt;/code&gt;を設定し、幅の変更をすべて吸収するようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);&lt;/code&gt;を設定しても、&lt;code&gt;JTableHeader&lt;/code&gt;自体のリサイズではすべての&lt;code&gt;TableColumn&lt;/code&gt;の幅が均等に変化する&lt;/li&gt;
&lt;li&gt;列を入れ替えた場合でも、表示上最後にある&lt;code&gt;TableColumn&lt;/code&gt;がリサイズされる&lt;/li&gt;
&lt;li&gt;チェックボックスで設定を切り替えているため、&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;ComponentListener&lt;/code&gt;を追加して、変更ごとに&lt;code&gt;JTableHeader.setResizingColumn(null)&lt;/code&gt;でリセット&lt;/li&gt;
&lt;li&gt;以下のように、&lt;code&gt;JTable#doLayout()&lt;/code&gt;をオーバーライドではなく、&lt;code&gt;ComponentListener&lt;/code&gt;の追加でも同様の動作をするように設定することができるが、リサイズ開始時に最後の&lt;code&gt;TableColumn&lt;/code&gt;にも幅の変更が適用されてしまう(先に&lt;code&gt;JTable#doLayout()&lt;/code&gt;が実行される)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table2 = new JTable(100, 3);
table2.getTableHeader().addComponentListener(new ComponentAdapter() {
  @Override public void componentResized(ComponentEvent e) {
    JTableHeader tableHeader = (JTableHeader) e.getComponent();
    if (tableHeader == null) {
      return;
    }
    if (check.isSelected()) {
      TableColumnModel tcm = tableHeader.getTable().getColumnModel();
      int lastColumn = tcm.getColumnCount() - 1;
      tableHeader.setResizingColumn(tcm.getColumn(lastColumn));
    } else {
      tableHeader.setResizingColumn(null);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23201818/jtable-columns-doesnt-resize-probably-when-jframe-resize&quot;&gt;java - JTable columns doesnt resize probably when JFrame resize - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16368343/jtable-resize-only-selected-column-when-container-size-changes&quot;&gt;java - JTable resize only selected column when container size changes - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/resizingcolumnandtable</link>
                <guid>http://terai.xrea.jp/swing/resizingcolumnandtable</guid>
                <pubDate>2014-05-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrame間でのドラッグ＆ドロップによるJTableの行入れ替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;間で&lt;code&gt;JTable&lt;/code&gt;の行をドラッグ＆ドロップを使って入れ替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InternalFrameDropTarget&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-UP_I_iTgtpc/U3jPL_jhwuI/AAAAAAAACFg/olJ1Sf-P_lU/s800/InternalFrameDropTarget.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private boolean isDropableTableIntersection(TransferSupport info) {
  Component c = info.getComponent();
  if (!(c instanceof JTable)) {
    return false;
  }
  JTable target = (JTable) c;
  if (!target.equals(source)) {
    JDesktopPane dp = null;
    Container cn = SwingUtilities.getAncestorOfClass(JDesktopPane.class, target);
    if (cn instanceof  JDesktopPane) {
      dp = (JDesktopPane) cn;
    }

    JInternalFrame sf = getInternalFrame(source);
    JInternalFrame tf = getInternalFrame(target);
    if (sf == null || tf == null || dp.getIndexOf(tf) &amp;lt; dp.getIndexOf(sf)) {
      return false;
    }

    Point pt = SwingUtilities.convertPoint(
        target, info.getDropLocation().getDropPoint(), dp);
    Rectangle rect = sf.getBounds().intersection(tf.getBounds());
    if (rect.contains(pt)) {
      return false;
    }
    //tf.moveToFront();
    //tf.getParent().repaint();
  }
  return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、異なる&lt;code&gt;JInternalFrame&lt;/code&gt;に配置した&lt;code&gt;JTable&lt;/code&gt;の行をドラッグ＆ドロップで入れ替えています。使用する&lt;code&gt;TransferHandler&lt;/code&gt;は&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;のものとほぼ同じですが、前面の&lt;code&gt;JInternalFrame&lt;/code&gt;内にある&lt;code&gt;JTable&lt;/code&gt;からドラッグした場合、その&lt;code&gt;JTableHeader&lt;/code&gt;や&lt;code&gt;JInternalFrame&lt;/code&gt;のタイトルバー上でも、背面にある&lt;code&gt;JInternalFrame&lt;/code&gt;に反応してドロップ可能になってしまうため、&lt;code&gt;TransferHandler#canImport(...)&lt;/code&gt;をオーバーライドして、ドラッグ元とドロップ先の&lt;code&gt;JInternalFrame&lt;/code&gt;の共通部分では背面にドロップ出来ないように変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/internalframedroptarget</link>
                <guid>http://terai.xrea.jp/swing/internalframedroptarget</guid>
                <pubDate>2014-05-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldの表示領域をJScrollBarでスクロールする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;の表示領域を&lt;code&gt;JScrollBar&lt;/code&gt;でスクロール可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HorizontalVisibility&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-e-5Z2Ze6fmU/U4Q5K7nrzqI/AAAAAAAACGQ/9vdUHpxI2VA/s800/HorizontalVisibility.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scroller.setModel(textField.getHorizontalVisibility());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField#getHorizontalVisibility()&lt;/code&gt;で取得した&lt;code&gt;BoundedRangeModel&lt;/code&gt;(可視領域のモデル)を&lt;code&gt;JScrollBar&lt;/code&gt;に設定することで、これを使用したスクロールや現在の可視領域の位置、幅の表示などが可能になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: &lt;code&gt;setCaretPosition: 0&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField#setCaretPosition(0);&lt;/code&gt;は&lt;code&gt;JTextField&lt;/code&gt;にフォーカスが無い場合無効？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;が同期しない場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注: &lt;code&gt;setScrollOffset: 0&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;のノブがマウスドラッグに反応しなくなる場合がある？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注: ノブの表示

&lt;ul&gt;
&lt;li&gt;文字列をすべて削除するなどしても、ノブが非表示にならない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1px&lt;/code&gt;の余白？、以下のようなリスナーで回避するテストを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class EmptyThumbHandler extends ComponentAdapter implements DocumentListener {
  private final BoundedRangeModel emptyThumbModel = new DefaultBoundedRangeModel(0, 1, 0, 1);
  private final JTextField textField;
  private final JScrollBar scroller;
  public EmptyThumbHandler(JTextField textField, JScrollBar scroller) {
    super();
    this.textField = textField;
    this.scroller = scroller;
  }
  private void changeThumbModel() {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        BoundedRangeModel m = textField.getHorizontalVisibility();
        int iv = m.getMaximum() - m.getMinimum() - m.getExtent() - 1; // -1: bug?
        if (iv &amp;lt;= 0) {
          scroller.setModel(emptyThumbModel);
        } else {
          scroller.setModel(textField.getHorizontalVisibility());
        }
      }
    });
  }
  @Override public void componentResized(ComponentEvent e) {
    changeThumbModel();
  }
  @Override public void insertUpdate(DocumentEvent e) {
    changeThumbModel();
  }
  @Override public void removeUpdate(DocumentEvent e) {
    changeThumbModel();
  }
  @Override public void changedUpdate(DocumentEvent e) {
    changeThumbModel();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;以下は、サイズ&lt;code&gt;0&lt;/code&gt;の&lt;code&gt;ArrowButton&lt;/code&gt;を使用する&lt;code&gt;ScrollBarUI&lt;/code&gt;を設定する方法&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ArrowButtonlessScrollBarUI extends BasicScrollBarUI {
  private static final Color DEFAULT_COLOR  = new Color(220, 100, 100, 100);
  private static final Color DRAGGING_COLOR = new Color(200, 100, 100, 100);
  private static final Color ROLLOVER_COLOR = new Color(255, 120, 100, 100);
  @Override protected JButton createDecreaseButton(int orientation) {
    return new ZeroSizeButton();
  }
  @Override protected JButton createIncreaseButton(int orientation) {
    return new ZeroSizeButton();
  }
  @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r) {
    //Graphics2D g2 = (Graphics2D) g.create();
    //g2.setPaint(new Color(100, 100, 100, 100));
    //g2.fillRect(r.x, r.y, r.width - 1, r.height - 1);
    //g2.dispose();
  }
  @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
    JScrollBar sb = (JScrollBar) c;
    if (!sb.isEnabled()) {
      return;
    }
    BoundedRangeModel m = sb.getModel();
    int iv = m.getMaximum() - m.getMinimum() - m.getExtent() - 1; // -1: bug?
    if (iv &amp;gt; 0) {
      Graphics2D g2 = (Graphics2D) g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      Color color;
      if (isDragging) {
        color = DRAGGING_COLOR;
      } else if (isThumbRollover()) {
        color = ROLLOVER_COLOR;
      } else {
        color = DEFAULT_COLOR;
      }
      g2.setPaint(color);
      g2.fillRect(r.x, r.y, r.width - 1, r.height - 1);
      g2.dispose();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane(new JTextField(TEXT), ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;縦スクロールバーを非表示にした&lt;code&gt;JScrollPane&lt;/code&gt;を使用する場合、&lt;code&gt;JTextField&lt;/code&gt;内の文字列選択でスクロールしない&lt;/li&gt;
&lt;li&gt;文字列を適当な長さまで削除するとノブが非表示になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;可視領域の幅の表示を考えると&lt;code&gt;ArrowButton&lt;/code&gt;は不要なので、&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentScrollBar.html&quot;&gt;JScrollBarを半透明にする&lt;/a&gt;のような外見の&lt;code&gt;JScrollBar&lt;/code&gt;を使用した方が良いかもしれない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-05-14 (水) 16:05:32&lt;/li&gt;
&lt;li&gt;サンプルの追加と、スクリーンショットの更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-05-27 (火) 16:12:38&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/horizontalvisibility</link>
                <guid>http://terai.xrea.jp/swing/horizontalvisibility</guid>
                <pubDate>2014-05-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセル上にToolTipを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のセル内に文字列が収まらない場合のみ、その上に&lt;code&gt;ToolTip&lt;/code&gt;を重ねて表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolTipOnCellBounds&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-KLOWyeZG-zU/U2Zif591XkI/AAAAAAAACE0/JDZZwAWkY50/s800/ToolTipOnCellBounds.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TooltipList&amp;lt;E&amp;gt; extends JList&amp;lt;E&amp;gt; {
  public TooltipList(ListModel&amp;lt;E&amp;gt; m) {
    super(m);
  }
  @Override public Point getToolTipLocation(MouseEvent event) {
    Point pt = null;
    if (event != null) {
      Point p = event.getPoint();
      ListCellRenderer&amp;lt;? super E&amp;gt; r = getCellRenderer();
      int i = locationToIndex(p);
      Rectangle cb = getCellBounds(i, i);
      if (i != -1 &amp;amp;&amp;amp; r != null &amp;amp;&amp;amp; cb != null &amp;amp;&amp;amp; cb.contains(p.x, p.y)) {
        ListSelectionModel lsm = getSelectionModel();
        Component rc = r.getListCellRendererComponent(
            this, getModel().getElementAt(i), i, lsm.isSelectedIndex(i),
            hasFocus() &amp;amp;&amp;amp; lsm.getLeadSelectionIndex() == i);
        if (rc instanceof JComponent &amp;amp;&amp;amp; ((JComponent) rc).getToolTipText() != null) {
          pt = cb.getLocation();
        }
      }
    }
    return pt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;CellBounds&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#getToolTipLocation()&lt;/code&gt;をオーバーライドして、表示する&lt;code&gt;JToolTip&lt;/code&gt;の原点を&lt;code&gt;JList#getCellBounds(int, int)&lt;/code&gt;で取得したセル領域の左上に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;ListCellRenderer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#getToolTipLocation()&lt;/code&gt;をオーバーライドして、表示する&lt;code&gt;JToolTip&lt;/code&gt;の原点を&lt;code&gt;JList#getCellBounds(int, int)&lt;/code&gt;で取得したセル領域の左上に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JList#createToolTip()&lt;/code&gt;をオーバーライドして、セルの描画に使用するセルレンダラー自体を&lt;code&gt;JToolTip&lt;/code&gt;に追加

&lt;ul&gt;
&lt;li&gt;このため、対象の選択状態なら、&lt;code&gt;JToolTip&lt;/code&gt;の背景色なども選択状態の色になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JToolTip&lt;/code&gt;の表示位置はデフォルトで、マウスカーソルの右下&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;セル内に文字列が収まっているかどうかは、以下のようなセルレンダラーで判定しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TooltipListCellRenderer extends DefaultListCellRenderer {
  @Override public Component getListCellRendererComponent(
      JList list, Object value, int index, boolean isSelected, boolean hasFocus) {
    JLabel l = (JLabel) super.getListCellRendererComponent(
        list, value, index, isSelected, hasFocus);
    Insets i = l.getInsets();
    Container c = SwingUtilities.getAncestorOfClass(JViewport.class, list);
    Rectangle rect = c.getBounds();
    rect.width -= i.left + i.right;
    FontMetrics fm = l.getFontMetrics(l.getFont());
    String str = Objects.toString(value, &quot;&quot;);
    l.setToolTipText(fm.stringWidth(str) &amp;gt; rect.width ? str : null);
    return l;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToolTipLocation.html&quot;&gt;JToolTipの表示位置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltiponcellbounds</link>
                <guid>http://terai.xrea.jp/swing/tooltiponcellbounds</guid>
                <pubDate>2014-05-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneのHTMLDocumentに要素を追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;の&lt;code&gt;HTMLDocument&lt;/code&gt;から&lt;code&gt;table&lt;/code&gt;要素を取得し、その子要素として&lt;code&gt;tr&lt;/code&gt;要素などを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InsertHtmlText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-hU9bkPgb4Q8/U10bg5XoDfI/AAAAAAAACEI/BJrmelBz93M/s800/InsertHtmlText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;HTMLDocument doc = (HTMLDocument) editor.getDocument();
Element element = doc.getElement(&quot;log&quot;);
String ROW_TEXT = &quot;&amp;lt;tr bgColor=&#39;%s&#39;&amp;gt;&amp;lt;td&amp;gt;%s&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;%s&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;;
Date d = new Date();
String tag = String.format(ROW_TEXT, &quot;#FFFFFF&quot;, &quot;insertBeforeEnd&quot;, d.toString());
try {
  doc.insertBeforeEnd(element, tag);
} catch (BadLocationException | IOException ex) {
  ex.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insertAfterStart&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;要素の開始タグの後に、子要素として&lt;code&gt;tr&lt;/code&gt;要素を追加&lt;/li&gt;
&lt;li&gt;注: 挿入後のスクロールがおかしい場合がある？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertBeforeEnd&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;要素の終了タグの前に、子要素として&lt;code&gt;tr&lt;/code&gt;要素を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/javax/swing/text/html/HTMLEditorKit.html#insertHTML-javax.swing.text.html.HTMLDocument-int-java.lang.String-int-int-javax.swing.text.html.HTML.Tag-&quot;&gt;HTMLEditorKit.html#insertHTML(HTMLDocument, int, String, int, int, HTML.Tag)&lt;/a&gt;よりは簡単？速度などは？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-04-28 (月) 15:00:16&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/inserthtmltext</link>
                <guid>http://terai.xrea.jp/swing/inserthtmltext</guid>
                <pubDate>2014-04-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelに表示した画像のズームとスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;に表示した画像に&lt;code&gt;AffineTransform&lt;/code&gt;による変換を適用して、マウスを使った拡大・縮小・移動を実行します。&lt;a href=&quot;https://forums.oracle.com/thread/1263955&quot;&gt;How to implement Zoom &amp;amp; Pan in Java using Graphics2D&lt;/a&gt;に投稿されているコードを参考・引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ZoomingAndPanning&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-c5Y9hCoRQbU/U1PhhnitgFI/AAAAAAAACD0/ZXIcyPywcr0/s800/ZoomingAndPanning.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ZoomAndPanHandler extends MouseAdapter {
  private static final double ZOOM_MULTIPLICATION_FACTOR = 1.2;
  private static final int MIN_ZOOM = -10;
  private static final int MAX_ZOOM = 10;
  private static final int EXTENT = 1;
  private final BoundedRangeModel zoomRange = new DefaultBoundedRangeModel(
    0, EXTENT, MIN_ZOOM, MAX_ZOOM + EXTENT);
  private final AffineTransform coordTransform = new AffineTransform();
  private final Point dragStartPoint = new Point();
  @Override public void mousePressed(MouseEvent e) {
    dragStartPoint.setLocation(e.getPoint());
  }
  @Override public void mouseDragged(MouseEvent e) {
    Point dragEndPoint = e.getPoint();
    Point dragStart = transformPoint(dragStartPoint);
    Point dragEnd   = transformPoint(dragEndPoint);
    coordTransform.translate(dragEnd.x - dragStart.x, dragEnd.y - dragStart.y);
    dragStartPoint.setLocation(dragEndPoint);
    e.getComponent().repaint();
  }
  @Override public void mouseWheelMoved(MouseWheelEvent e) {
    int dir = e.getWheelRotation();
    int z = zoomRange.getValue();
    zoomRange.setValue(z + EXTENT * (dir &amp;gt; 0 ? -1 : 1));
    if (z == zoomRange.getValue()) {
      return;
    }
    Component c = e.getComponent();
    Rectangle r = c.getBounds();
    //Point p = e.getPoint();
    Point p = new Point(r.x + r.width / 2, r.y + r.height / 2);
    Point p1 = transformPoint(p);
    double scale = dir &amp;gt; 0 ? 1 / ZOOM_MULTIPLICATION_FACTOR : ZOOM_MULTIPLICATION_FACTOR;
    coordTransform.scale(scale, scale);
    Point p2 = transformPoint(p);
    coordTransform.translate(p2.getX() - p1.getX(), p2.getY() - p1.getY());
    c.repaint();
  }
  //https://forums.oracle.com/thread/1263955
  //How to implement Zoom &amp;amp; Pan in Java using Graphics2D
  private Point transformPoint(Point p1) {
    Point p2 = new Point();
    try {
      AffineTransform inverse = coordTransform.createInverse();
      inverse.transform(p1, p2);
    } catch (NoninvertibleTransformException ex) {
      ex.printStackTrace();
    }
    return p2;
  }
  public AffineTransform getCoordTransform() {
    return coordTransform;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AffineTransform#createInverse()&lt;/code&gt;で取得した&lt;code&gt;AffineTransform&lt;/code&gt;オブジェクトでマウス位置の逆変換を行い、現在表示されている倍率でのズームの中心や移動距離などを計算しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ズーム

&lt;ul&gt;
&lt;li&gt;ホイール上回転で&lt;del&gt;マウスの位置を中心にして&lt;/del&gt;拡大&lt;/li&gt;
&lt;li&gt;ホイール下回転で&lt;del&gt;マウスの位置を中心にして&lt;/del&gt;縮小&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクロール

&lt;ul&gt;
&lt;li&gt;マウスドラッグで移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1263955&quot;&gt;How to implement Zoom &amp;amp; Pan in Java using Graphics2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codezine.jp/article/detail/174&quot;&gt;ズームとパンの機能を備えたドローソフトを作成する：CodeZine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.nitoyon.com/ja/blog/2013/12/13/touch-viewer/&quot;&gt;タッチ操作に対応した画像ビューワーをJavaScriptで作るならD3.jsが便利 - てっく煮ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/torutk/20140415/p1&quot;&gt;CanvasでAffine変換で大いにはまる（数学的センスが足りなかった・・・） - torutkの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;表示画面の中心を 基準に拡大縮小するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-04-21 (月) 14:55:12&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/zoomingandpanning</link>
                <guid>http://terai.xrea.jp/swing/zoomingandpanning</guid>
                <pubDate>2014-04-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Timerの使用数を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;パネルのタイルアニメーションで使用する&lt;code&gt;java.swing.Timer&lt;/code&gt;の数を変更して動作のテストを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TimerAction&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-Kc02XwN3fHA/U0qu1BcXNEI/AAAAAAAACDg/UDwGuPoJmjk/s800/TimerAction.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//Timer: 1, ActionListener: 100
class Tile2 extends JComponent {
  private int red;
  public Tile2(final Random rnd, Timer timer) {
    super();
    timer.addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        red = rnd.nextInt(255);
        repaint();
      }
    });
  }
  @Override public Dimension getPreferredSize() {
    return new Dimension(10, 10);
  }
  @Override protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    g.setColor(new Color(red, 255 - red, 0));
    g.fillRect(0, 0, getWidth(), getHeight());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Timer: 100&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10x10&lt;/code&gt;個のアニメーション用タイル一つに、&lt;code&gt;Timer&lt;/code&gt;を生成して使用(その為、&lt;code&gt;Timer&lt;/code&gt;も&lt;code&gt;10x10&lt;/code&gt;個存在する)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0_40&lt;/code&gt;以降で低速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.8.0&lt;/code&gt;は、&lt;code&gt;JDK 1.7.0_25&lt;/code&gt;と同等？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timer: 1, ActionListener: 100&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Timer&lt;/code&gt;は&lt;code&gt;1&lt;/code&gt;個、&lt;code&gt;Timer#addActionListener(...)&lt;/code&gt;で、&lt;code&gt;100&lt;/code&gt;個の&lt;code&gt;ActionListener&lt;/code&gt;を追加して使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timer: 1, ActionListener: 1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;個の&lt;code&gt;Timer&lt;/code&gt;を使用し、&lt;code&gt;for&lt;/code&gt;ループで&lt;code&gt;10x10&lt;/code&gt;のラベルの色を変更してアニメーションを実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18933986/javax-swing-timer-slowdown-in-java7u40&quot;&gt;java - javax.swing.Timer slowdown in Java7u40 - Stack Overflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0_25&lt;/code&gt;までは、どれも同じような速度でアニメーションするが、&lt;code&gt;JDK 1.7.0_40&lt;/code&gt;以降は&lt;code&gt;Timer&lt;/code&gt;の数を減らさないと遅くなる？&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7167780&quot;&gt;Bug ID: JDK-7167780 Hang javasoft.sqe.tests.api.javax.swing.Timer.Ctor2Tests&lt;/a&gt;の修正が影響している？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/timeraction</link>
                <guid>http://terai.xrea.jp/swing/timeraction</guid>
                <pubDate>2014-04-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderのつまみの形状を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;のつまみの形状を目盛り表示ありの場合と同じになるよう変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ThumbArrowShape&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-wnMCy-QjKqI/U0Fp9vKfehI/AAAAAAAACDE/fem_kGyz1KM/s800/ThumbArrowShape.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;slider.putClientProperty(&quot;Slider.paintThumbArrowShape&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;slider.putClientProperty(&amp;quot;Slider.paintThumbArrowShape&amp;quot;, Boolean.TRUE);&lt;/code&gt;を使用して、つまみの形状を、目盛り表示ありの場合に使用する矢印型に変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;矢印型に変化するかどうかは、&lt;code&gt;LookAndFeel&lt;/code&gt;による

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、目盛り表示ありの場合でも矢印型にはならないが、&lt;code&gt;Slider.paintThumbArrowShape&lt;/code&gt;で三角形になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;でつまみが小さすぎる場合に使用可

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slider.putClientProperty(&amp;quot;Slider.minimumHorizontalSize&amp;quot;, new Dimension(30, 30));&lt;/code&gt;などは効果がない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slider.setPaintTicks(true);&lt;/code&gt;だけ使用する場合と異なり、目盛り表示領域の余白がない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MinimumThumbSize.html&quot;&gt;JScrollBarのKnobの最小サイズを設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/thumbarrowshape</link>
                <guid>http://terai.xrea.jp/swing/thumbarrowshape</guid>
                <pubDate>2014-04-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのモデルが変更されたことをイベントで受け取る</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のモデルの変更を受け取って&lt;code&gt;JTableHeader&lt;/code&gt;に追加した&lt;code&gt;JCheckBox&lt;/code&gt;を更新します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableModelEvent&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-Mndxsu0wtCM/Uzg00YuVfyI/AAAAAAAACCw/HoRS9CVP_-o/s800/TableModelEvent.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HeaderCheckBoxHandler implements TableModelListener {
  private final JTable table;
  private final int targetColumnIndex;
  public HeaderCheckBoxHandler(JTable table, int index) {
    this.table = table;
    this.targetColumnIndex = index;
  }
  @Override public void tableChanged(TableModelEvent e) {
    int vci = table.convertColumnIndexToView(targetColumnIndex);
    TableColumn column = table.getColumnModel().getColumn(vci);
    Object status = column.getHeaderValue();
    TableModel m = table.getModel();
    if (e.getType() == TableModelEvent.DELETE) {
      if (m.getRowCount() == 0) {
        column.setHeaderValue(Status.DESELECTED);
      } else if (Status.INDETERMINATE.equals(status)) {
        boolean selected = true;
        boolean deselected = true;
        for (int i = 0; i &amp;lt; m.getRowCount(); i++) {
          Boolean b = (Boolean) m.getValueAt(i, targetColumnIndex);
          selected &amp;amp;= b;
          deselected &amp;amp;= !b;
        }
        if (deselected) {
          column.setHeaderValue(Status.DESELECTED);
        } else if (selected) {
          column.setHeaderValue(Status.SELECTED);
        } else {
          return;
        }
      }
    } else if (e.getType() == TableModelEvent.INSERT
               &amp;amp;&amp;amp; !Status.INDETERMINATE.equals(status)) {
      boolean selected = Status.DESELECTED.equals(status);
      boolean deselected = Status.SELECTED.equals(status);
      for (int i = e.getFirstRow(); i &amp;lt;= e.getLastRow(); i++) {
        Boolean b = (Boolean) m.getValueAt(i, targetColumnIndex);
        selected &amp;amp;= b;
        deselected &amp;amp;= !b;
      }
      if (selected &amp;amp;&amp;amp; m.getRowCount() == 1) {
        column.setHeaderValue(Status.SELECTED);
      } else if (selected || deselected) {
        column.setHeaderValue(Status.INDETERMINATE);
      }
    } else if (e.getType() == TableModelEvent.UPDATE
               &amp;amp;&amp;amp; e.getColumn() == targetColumnIndex) {
      if (Status.INDETERMINATE.equals(status)) {
        boolean selected = true;
        boolean deselected = true;
        for (int i = 0; i &amp;lt; m.getRowCount(); i++) {
          Boolean b = (Boolean) m.getValueAt(i, targetColumnIndex);
          selected &amp;amp;= b;
          deselected &amp;amp;= !b;
          if (selected == deselected) {
            return;
          }
        }
        if (deselected) {
          column.setHeaderValue(Status.DESELECTED);
        } else if (selected) {
          column.setHeaderValue(Status.SELECTED);
        } else {
          return;
        }
      } else {
        column.setHeaderValue(Status.INDETERMINATE);
      }
    }
    JTableHeader h = table.getTableHeader();
    h.repaint(h.getHeaderRect(vci));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;0&lt;/code&gt;行目の値(&lt;code&gt;boolean&lt;/code&gt;)の変更、行の追加、削除を受け取って&lt;code&gt;JTableHeader&lt;/code&gt;のチェック状態を更新する&lt;code&gt;TableModelListener&lt;/code&gt;を作成して、これを&lt;code&gt;TableModel#addTableModelListener(...)&lt;/code&gt;で設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;e.getType() == TableModelEvent.DELETE&lt;/code&gt;: 行の削除

&lt;ul&gt;
&lt;li&gt;削除によって行数が&lt;code&gt;0&lt;/code&gt;になった場合は、&lt;code&gt;JTableHeader&lt;/code&gt;は未選択状態&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;が選択状態、または未選択状態の場合、削除によってその状態は変化しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;が不定状態の場合は、全行を検索して選択状態を変更するかどうかを調査する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e.getType() == TableModelEvent.INSERT&lt;/code&gt;: 行の追加

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;がすでに不定状態の場合は、追加される行の選択状態にかかわらず、その状態は変化しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;が不定状態でない場合は、追加される行と&lt;code&gt;JTableHeader&lt;/code&gt;の選択状態を合わせて調査する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e.getType() == TableModelEvent.UPDATE&lt;/code&gt;: &lt;code&gt;0&lt;/code&gt;列目の更新

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;が不定状態の場合は、全行を検索して選択状態を変更するかどうかを調査する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;が不定状態でない場合は、この更新によって&lt;code&gt;JTableHeader&lt;/code&gt;は不定状態になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableHeaderCheckBox.html&quot;&gt;JTableHeaderにJCheckBoxを追加してセルの値を切り替える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;修正: &lt;code&gt;src.zip&lt;/code&gt;などがアップロードされていない -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-05-09 (金) 17:17:04&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablemodelevent</link>
                <guid>http://terai.xrea.jp/swing/tablemodelevent</guid>
                <pubDate>2014-03-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableCellRendererに進捗文字列を設定したJProgressBarを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;TableCellRenderer&lt;/code&gt;として、進捗文字列を表示する&lt;code&gt;JProgressBar&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StringPaintedCellProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-XSMYQI-BTU8/Uy67ZR-E4TI/AAAAAAAACCE/2zdsU6o7iA0/s800/StringPaintedCellProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class Task extends SwingWorker&amp;lt;Integer, ProgressValue&amp;gt; {
  private final int lengthOfTask;
  private final int sleepDummy = new Random().nextInt(100) + 1;
  public Task(int lengthOfTask) {
    super();
    this.lengthOfTask = lengthOfTask;
  }
  @Override protected Integer doInBackground() {
    int current = 0;
    while (current &amp;lt; lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
      current++;
      try {
        Thread.sleep(sleepDummy);
      } catch (InterruptedException ie) {
        break;
      }
      publish(new ProgressValue(lengthOfTask, current));
    }
    return sleepDummy * lengthOfTask;
  }
}

class ProgressValue {
  private final Integer progress;
  private final Integer lengthOfTask;
  public ProgressValue(Integer lengthOfTask, Integer progress) {
    this.progress = progress;
    this.lengthOfTask = lengthOfTask;
  }
  public Integer getProgress() {
    return progress;
  }
  public Integer getLengthOfTask() {
    return lengthOfTask;
  }
}

class ProgressRenderer extends DefaultTableCellRenderer {
  private final JProgressBar b = new JProgressBar();
  private final JPanel p = new JPanel(new BorderLayout());
  public ProgressRenderer() {
    super();
    setOpaque(true);
    b.setStringPainted(true);
    p.add(b);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected, boolean hasFocus,
      int row, int column) {
    String text = &quot;Done&quot;;
    if (value instanceof ProgressValue) {
      ProgressValue pv = (ProgressValue) value;
      Integer current = pv.getProgress();
      Integer lengthOfTask = pv.getLengthOfTask();
      if (current &amp;lt; 0) {
        text = &quot;Canceled&quot;;
      } else if (current &amp;lt; lengthOfTask) {
        b.setMaximum(lengthOfTask);
        b.setValue(current);
        b.setString(String.format(&quot;%d/%d&quot;, current, lengthOfTask));
        return p;
      }
    }
    super.getTableCellRendererComponent(
        table, text, isSelected, hasFocus, row, column);
    return this;
  }
  @Override public void updateUI() {
    super.updateUI();
    if (p != null) {
      SwingUtilities.updateComponentTreeUI(p);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;2&lt;/code&gt;列目の&lt;code&gt;TableCellRenderer&lt;/code&gt;として、&lt;code&gt;JProgressBar#setStringPainted(true)&lt;/code&gt;と進捗文字列を表示するように設定した&lt;code&gt;JProgressBar&lt;/code&gt;を使用しています。進捗状況文字列は、現在値/最大値の形式で表示するため、&lt;code&gt;SwingWorker#publish(...)&lt;/code&gt;には、この&lt;code&gt;2&lt;/code&gt;つの値を保持する&lt;code&gt;ProgressValue&lt;/code&gt;オブジェクトを作成して渡しています。&lt;code&gt;TableCellRenderer&lt;/code&gt;は、この&lt;code&gt;ProgressValue&lt;/code&gt;オブジェクトを受け取り、&lt;code&gt;JProgressBar#setMaximum(int)&lt;/code&gt;(最大値は、各行ごとにランダムなので)、&lt;code&gt;JProgressBar#setValue(int)&lt;/code&gt;、&lt;code&gt;JProgressBar#setString(String)&lt;/code&gt;の&lt;code&gt;3&lt;/code&gt;つを設定した&lt;code&gt;JProgressBar&lt;/code&gt;をセル描画用コンポーネントとして返しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableCellProgressBar.html&quot;&gt;JTableのセルにJProgressBarを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/stringpaintedcellprogressbar</link>
                <guid>http://terai.xrea.jp/swing/stringpaintedcellprogressbar</guid>
                <pubDate>2014-03-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserでの隠しファイルの非表示設定を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;で隠しファイルを表示するかどうかをポップアップメニューから切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileHidingEnabled&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-TSMPljQ02Ao/UyWixahVFzI/AAAAAAAACBw/n_Ctee0FJGQ/s800/FileHidingEnabled.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;chooser = new JFileChooser();
JPopupMenu pop = searchPopupMenu(chooser);
pop.addSeparator();
JCheckBoxMenuItem mi = new JCheckBoxMenuItem(
    new AbstractAction(&quot;isFileHidingEnabled&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    chooser.setFileHidingEnabled(
        ((JCheckBoxMenuItem) e.getSource()).isSelected());
  }
});
mi.setSelected(chooser.isFileHidingEnabled());
pop.add(mi);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFileChooser#setFileHidingEnabled(boolean)&lt;/code&gt;メソッドを使用して、隠しファイル、隠しフォルダーなどを表示するかどうかを設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;初期値は、&lt;code&gt;OS&lt;/code&gt;の設定(&lt;code&gt;Windows&lt;/code&gt;なら「コントロールパネル、フォルダーオプション、表示、ファイルとフォルダーの表示」)に従う

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/DesktopProperty.html&quot;&gt;DesktopPropertyの変更を監視する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Object showHiddenProperty = Toolkit.getDefaultToolkit().getDesktopProperty(&quot;awt.file.showHiddenFiles&quot;);
System.out.println(&quot;awt.file.showHiddenFiles: &quot; + showHiddenProperty);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;から&lt;code&gt;JPopupMenu&lt;/code&gt;を直接取得することが出来ないので、以下のように子コンポーネントを検索しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JPopupMenu searchPopupMenu(Container parent) {
  for (Component c: parent.getComponents()) {
    if (c instanceof JComponent &amp;amp;&amp;amp; ((JComponent) c).getComponentPopupMenu() != null) {
      return ((JComponent) c).getComponentPopupMenu();
    } else {
      JPopupMenu pop = searchPopupMenu((Container) c);
      if (pop != null) {
        return pop;
      }
    }
  }
  return null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://crocro.com/news/20110706140746.html&quot;&gt;クロノス・クラウン - 「JFileChooser」のコンテキストメニューに独自メニューを追加する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DesktopProperty.html&quot;&gt;DesktopPropertyの変更を監視する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filehidingenabled</link>
                <guid>http://terai.xrea.jp/swing/filehidingenabled</guid>
                <pubDate>2014-03-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>InputVerifierを設定したJTextFieldの値が不正な場合のフォーカス移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;InputVerifier&lt;/code&gt;を設定した&lt;code&gt;JTextField&lt;/code&gt;の値が適切な形式でない場合のフォーカス移動動作をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/VerifyInputWhenFocusTarget&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-0s6ChUywZz8/Ux0P0IVi99I/AAAAAAAACBY/8hZOhY0SCI4/s800/VerifyInputWhenFocusTarget.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;button2.setVerifyInputWhenFocusTarget(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、フォーカスが別のコンポーネントに移動する時に、現在フォーカスを持つコンポーネントの&lt;code&gt;InputVerifier&lt;/code&gt;で値を検証するかを&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JBUtton&lt;/code&gt;のデフォルトで、&lt;code&gt;getVerifyInputWhenFocusTarget()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;、&lt;code&gt;isFocusable()&lt;/code&gt;も&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;すべての&lt;code&gt;JTextField&lt;/code&gt;の値をクリアし、自身にフォーカスが移動するが、フォーカスのあった&lt;code&gt;JTextField&lt;/code&gt;に入力されている値が&lt;code&gt;Integer&lt;/code&gt;でない場合、警告音が鳴る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setFocusable(false)&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setFocusable(false)&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;すべての&lt;code&gt;JTextField&lt;/code&gt;の値をクリアするが、フォーカスは移動しないため、フォーカスのあった&lt;code&gt;JTextField&lt;/code&gt;に入力されている値が&lt;code&gt;Integer&lt;/code&gt;でない場合でも、警告音は鳴らない(設定されている&lt;code&gt;InputVerifier#verify(...)&lt;/code&gt;は呼ばれない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setVerifyInputWhenFocusTarget(false)&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setVerifyInputWhenFocusTarget(false)&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;すべての&lt;code&gt;JTextField&lt;/code&gt;の値をクリアし、自身にフォーカスが移動するが、フォーカスのあった&lt;code&gt;JTextField&lt;/code&gt;に入力されている値が&lt;code&gt;Integer&lt;/code&gt;でない場合でも、警告音は鳴らない(設定されている&lt;code&gt;InputVerifier#verify(...)&lt;/code&gt;は呼ばれない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/1.4/guide/swing/1.3/InputChanges.html&quot;&gt;入力の検証&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/verifyinputwhenfocustarget</link>
                <guid>http://terai.xrea.jp/swing/verifyinputwhenfocustarget</guid>
                <pubDate>2014-03-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxのチェックアイコンを一行目中央に配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;のテキストが複数行の場合、チェックアイコンが一行目中央に配置されるよう設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/VerticalIconAlignMultilineText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-xEdb1NQpk3A/UxNGwOHM8dI/AAAAAAAACBE/GDPtPjFUuJs/s800/VerticalIconAlignMultilineText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WindowsVerticalAlignmentCheckBoxUI extends WindowsCheckBoxUI {
  @Override public synchronized void paint(Graphics g, JComponent c) {
    AbstractButton b = (AbstractButton) c;
    // ...
    // Paint the radio button
    int y = HtmlViewUtil.getFirstLineCenterY(text, b, iconRect);
    getDefaultIcon().paintIcon(c, g, iconRect.x, iconRect.y + y);
    //....
  }
  public static int getFirstLineCenterY(String text, AbstractButton c, Rectangle iconRect) {
    int y = 0;
    if (text != null &amp;amp;&amp;amp; c.getVerticalTextPosition() == SwingConstants.TOP) {
      View v = (View) c.getClientProperty(BasicHTML.propertyKey);
      if (v != null) {
        try {
          Element e = v.getElement().getElement(0);
          Shape s = new Rectangle();
          Position.Bias b = Position.Bias.Forward;
          s = v.modelToView(e.getStartOffset(), b, e.getEndOffset(), b, s);
          //System.out.println(&quot;v.h: &quot; + s.getBounds());
          y = (int) (.5 + Math.abs(s.getBounds().height - iconRect.height) * .5);
        } catch (BadLocationException ex) {
          ex.printStackTrace();
        }
      }
    }
    return y;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;SwingConstants.TOP&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBox#setVerticalTextPosition(SwingConstants.TOP);&lt;/code&gt;と設定して、チェックアイコンとテキストの上辺が揃うように設定&lt;/li&gt;
&lt;li&gt;フォントサイズなどが大きくなると、チェックアイコンが上に飛び出しているように見えてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;First line center&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsCheckBoxUI#paint(...)&lt;/code&gt;などをオーバーライドし、一行目の中央にチェックアイコンの中心が揃うように設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;html&amp;gt;aa&amp;lt;font size=+5&amp;gt;bb&amp;lt;/font&amp;gt;cc...&lt;/code&gt;のような一部の文字サイズを大きくしたようなテキストを設定しても行の中央に揃えることが可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/22121439/jcheckbox-vertical-alignment-for-multi-line-text&quot;&gt;java - JCheckBox: Vertical alignment for multi-line text - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/verticaliconalignmultilinetext</link>
                <guid>http://terai.xrea.jp/swing/verticaliconalignmultilinetext</guid>
                <pubDate>2014-03-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノード編集をコミット</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード編集中に割り込みが発生した場合、変更の自動保存を行うかどうかを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InvokesStopCellEditing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-KbIRjsEYzEA/Uwny844Zc3I/AAAAAAAACAY/_3w4abiuaIo/s800/InvokesStopCellEditing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.setInvokesStopCellEditing(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード編集に割り込みが発生した場合の動作を変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tree.setInvokesStopCellEditing(false);&lt;/code&gt; デフォルト

&lt;ul&gt;
&lt;li&gt;編集に割り込みが発生したとき、&lt;code&gt;JTree#cancelCellEditing()&lt;/code&gt;が呼び出され、変更は破棄される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tree.setInvokesStopCellEditing(true);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;編集に割り込みが発生したとき、&lt;code&gt;JTree#stopCellEditing()&lt;/code&gt;が呼び出され、データが保存される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;ノード編集の割り込みは、その&lt;code&gt;JTree&lt;/code&gt;内の別のノードがクリックされた場合などに発生します。&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどで&lt;code&gt;JTree&lt;/code&gt;以外のコンポーネントにフォーカスが移動したり、親&lt;code&gt;Window&lt;/code&gt;がフォーカスを失っても、割り込みは発生しないため、編集中の状態が維持され、再度&lt;code&gt;JTree&lt;/code&gt;にフォーカスを戻せば編集を再開することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/JTree.html#setInvokesStopCellEditing%28boolean%29&quot;&gt;JTree#setInvokesStopCellEditing(boolean) (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TerminateEdit.html&quot;&gt;JTableのセルの編集をコミット&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/invokesstopcellediting</link>
                <guid>http://terai.xrea.jp/swing/invokesstopcellediting</guid>
                <pubDate>2014-02-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelとIconで作成した検索位置表示バーをマウスで操作する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;から&lt;code&gt;BoundedRangeModel&lt;/code&gt;を取得し、&lt;code&gt;JLabel&lt;/code&gt;と&lt;code&gt;Icon&lt;/code&gt;で表示した検索位置表示バーをマウスで操作可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BoundedRangeModel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-EN1vcmWX7Gs/UwDyGP5n91I/AAAAAAAACAE/tb9w7pHxtk8/s800/BoundedRangeModel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightBarHandler extends MouseAdapter {
  private void processMouseEvent(MouseEvent e) {
    Point pt = e.getPoint();
    Component c = e.getComponent();
    BoundedRangeModel m = scrollbar.getModel();
    int h = m.getMaximum()-m.getMinimum();
    int iv = (int)(.5 - m.getExtent() * .5 + pt.y * h / (double)c.getHeight());
    m.setValue(iv);
  }
  @Override public void mousePressed(MouseEvent e) {
    processMouseEvent(e);
  }
  @Override public void mouseDragged(MouseEvent e) {
    processMouseEvent(e);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Icon&lt;/code&gt;に検索結果をハイライト表示し、&lt;code&gt;JLabel&lt;/code&gt;に設定

&lt;ul&gt;
&lt;li&gt;この&lt;code&gt;JLabel&lt;/code&gt;は、&lt;code&gt;JScrollPane&lt;/code&gt;の子コンポーネントではないので、縦&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;BoundedRangeModel&lt;/code&gt;に&lt;code&gt;ChangeListener&lt;/code&gt;を追加して、更新ごとに&lt;code&gt;JLabel&lt;/code&gt;も&lt;code&gt;repaint&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;上の表示範囲をマウスで操作可能にするため、&lt;code&gt;MouseListener&lt;/code&gt;などを追加

&lt;ul&gt;
&lt;li&gt;位置は&lt;code&gt;JScrollBar&lt;/code&gt;から&lt;code&gt;BoundedRangeModel&lt;/code&gt;を取得して計算&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollBarSearchHighlighter.html&quot;&gt;JScrollBarに検索結果をハイライト表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ハイライトのサンプルとして&lt;code&gt;JTable&lt;/code&gt;を使用しているけど、実際に行数が多くなるなら&lt;a href=&quot;http://terai.xrea.jp/Swing/TableHighlightRegexFilter.html&quot;&gt;JTableの検索結果をRowFilterとHighlighterで強調表示する&lt;/a&gt;のようにフィルタを使用するほうが良さそう。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-02-17 (月) 02:41:10&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/boundedrangemodel</link>
                <guid>http://terai.xrea.jp/swing/boundedrangemodel</guid>
                <pubDate>2014-02-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderの順序を反転</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;の値や目盛りの表示などの順序を反転します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InvertedSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-qI_Mv8LOhi8/UvdK3TThMiI/AAAAAAAAB_0/xQR9OJ1Z8xY/s800/InvertedSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;slider.setInverted(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSlider#setInverted(true)&lt;/code&gt;で、値や目盛りの表示を反転しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider#setInverted(true)&lt;/code&gt;と&lt;code&gt;setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT)&lt;/code&gt;で言語に依存する方向を同時に指定可能

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider.HORIZONTAL&lt;/code&gt;の場合、両方指定すると元に戻る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSlider.VERTICAL&lt;/code&gt;の場合、&lt;code&gt;JSlider#setInverted(true)&lt;/code&gt;で上最小、下最大に変化し、&lt;code&gt;setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT)&lt;/code&gt;で目盛りの位置が右から左に変化する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;範囲の塗り潰しが可能な&lt;code&gt;MetalLookAndFeel&lt;/code&gt;の場合、これも反転する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;縦の&lt;code&gt;JSlider&lt;/code&gt;で&lt;code&gt;ComponentOrientation.RIGHT_TO_LEFT&lt;/code&gt;、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;を設定した場合、ノブのフォーカスが描画されない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-02-26 (水) 21:22:55&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/invertedslider</link>
                <guid>http://terai.xrea.jp/swing/invertedslider</guid>
                <pubDate>2014-02-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeへのノード追加をテスト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;にノード追加をした場合、兄弟ノードの展開状態などがどうなるかをテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InsertNodeInto&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-siBaGX1oXx8/Uu8JPWZaA7I/AAAAAAAAB_Y/fzV1VSKYg9I/s800/InsertNodeInto.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultTreeModel model1 = (DefaultTreeModel)tree1.getModel();
DefaultMutableTreeNode parent1 = (DefaultMutableTreeNode)model1.getRoot();
DefaultMutableTreeNode child1  = new DefaultMutableTreeNode(date);
parent1.add(child1);
model1.reload(parent1);
tree1.scrollPathToVisible(new TreePath(child1.getPath()));

DefaultTreeModel model2 = (DefaultTreeModel)tree2.getModel();
DefaultMutableTreeNode parent2 = (DefaultMutableTreeNode)model2.getRoot();
DefaultMutableTreeNode child2  = new DefaultMutableTreeNode(date);
model2.insertNodeInto(child2, parent2, parent2.getChildCount());
tree2.scrollPathToVisible(new TreePath(child2.getPath()));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;add&lt;/code&gt;ボタンをクリックすると、左右の&lt;code&gt;JTree&lt;/code&gt;のルートノードが持つ子の末尾に新規ノードを追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;p.add(c) &amp;amp; m.reload(p)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultMutableTreeNode#add(...)&lt;/code&gt;メソッドを使用して、親ノードの末尾に子ノードを追加

&lt;ul&gt;
&lt;li&gt;追加する子ノードが親ノードを持つ場合は、そこから削除される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeModel#reload(...)&lt;/code&gt;、または&lt;code&gt;DefaultTreeModel#nodeStructureChanged(DefaultMutableTreeNode)&lt;/code&gt;でモデルに更新を通知

&lt;ul&gt;
&lt;li&gt;兄弟ノードの展開状態などがすべて閉じた状態にリセットされてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;m.insertNodeInto(c, p, p.size)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeModel#insertNodeInto(...)&lt;/code&gt;メソッドを使用して、子ノードを親ノードの指定した位置に挿入

&lt;ul&gt;
&lt;li&gt;内部で、&lt;code&gt;nodesWereInserted(...)&lt;/code&gt;メソッドが呼び出され、適切なイベントが生成されるので、他のノードの展開状態などは維持される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AddNode.html&quot;&gt;JTreeのノード追加、削除&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ポップアップメニューで任意の位置にノードを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollRectToVisible.html&quot;&gt;JScrollPane内にあるJTableなどで追加した行が可視化されるようにスクロールする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;追加したノードが表示されるようにスクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/insertnodeinto</link>
                <guid>http://terai.xrea.jp/swing/insertnodeinto</guid>
                <pubDate>2014-02-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeで展開不可のノードを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;で特定のノードだけ展開できないように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PreventNodeExpanding&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-WcBsEg_mxgc/UuUbyvn84EI/AAAAAAAAB-0/iZ6t8_EGeZQ/s800/PreventNodeExpanding.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DirectoryExpandVetoListener implements TreeWillExpandListener {
  @Override public void treeWillExpand(TreeExpansionEvent e)
        throws ExpandVetoException {
    TreePath path = e.getPath();
    Object o = path.getLastPathComponent();
    if(o instanceof DefaultMutableTreeNode) {
      DefaultMutableTreeNode node = (DefaultMutableTreeNode)o;
      File file = (File)node.getUserObject();
      String title = file.getName();
      System.out.println(title);
      if(title.startsWith(&quot;.&quot;)) {
        throw new ExpandVetoException(e, &quot;Tree expansion cancelled&quot;);
      }
    }
  }
  @Override public void treeWillCollapse(TreeExpansionEvent e)
        throws ExpandVetoException {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreeWillExpandListener&lt;/code&gt;を実装し、&lt;code&gt;treeWillExpand(...)&lt;/code&gt;メソッド内で、ノード(&lt;code&gt;File&lt;/code&gt;)の名前がドットで始まる場合、&lt;code&gt;ExpandVetoException&lt;/code&gt;を投げて展開をキャンセル

&lt;ul&gt;
&lt;li&gt;これらのノードは展開は不可だが、選択自体は可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getTreeCellRendererComponent(...)&lt;/code&gt;内で、名前がドットで始まる場合、ノードを&lt;code&gt;setEnabled(false)&lt;/code&gt;で無効状態にして描画&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/events/treewillexpandlistener.html&quot;&gt;How to Write a Tree-Will-Expand Listener (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Writing Event Listeners)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/preventnodeexpanding</link>
                <guid>http://terai.xrea.jp/swing/preventnodeexpanding</guid>
                <pubDate>2014-01-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerの上下限値をBigDecimalで比較する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;で浮動小数点型のモデルを使用する場合、最大値と最小値の比較を&lt;code&gt;BigDecimal&lt;/code&gt;で行うよう変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BigDecimalSpinnerModel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-JztoRl3kot0/UtvN48iHZ3I/AAAAAAAAB-g/D3QcAYgr_ks/s800/BigDecimalSpinnerModel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BigDecimalSpinnerModel extends SpinnerNumberModel {
  public BigDecimalSpinnerModel(double value, double minimum, double maximum, double stepSize) {
    super(value, minimum, maximum, stepSize);
  }
  @Override public Object getPreviousValue() {
    return incrValue(-1);
  }
  @Override public Object getNextValue() {
    return incrValue(+1);
  }
  private Number incrValue(int dir) {
    Number v = getNumber();
    BigDecimal value  = new BigDecimal(v.toString());
    BigDecimal stepSize = new BigDecimal(getStepSize().toString());
    BigDecimal maximum  = new BigDecimal(getMaximum().toString());
    BigDecimal minimum  = new BigDecimal(getMinimum().toString());
    BigDecimal newValue;

    if(dir&amp;gt;0) {
      newValue = value.add(stepSize);
    }else{
      newValue = value.subtract(stepSize);
    }
    if(maximum != null &amp;amp;&amp;amp; maximum.compareTo(newValue) &amp;lt; 0) {
      return null;
    }
    if(minimum != null &amp;amp;&amp;amp; minimum.compareTo(newValue) &amp;gt; 0) {
      return null;
    }
    return newValue;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;SpinnerNumberModel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Double&lt;/code&gt;型の&lt;code&gt;SpinnerNumberModel&lt;/code&gt;では、最大最小値の比較に、&lt;code&gt;Double#compare(...)&lt;/code&gt;が使用されている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stepSize&lt;/code&gt;の&lt;code&gt;0.1&lt;/code&gt;などが持つ浮動小数点の誤差のせいで、このサンプルの&lt;code&gt;JSpinner&lt;/code&gt;の場合、下限(&lt;code&gt;2.0&lt;/code&gt;や&lt;code&gt;29.6&lt;/code&gt;)にダウンボタンで移動できない

&lt;ul&gt;
&lt;li&gt;例えば、&lt;code&gt;29.7 - 29.6 - 0.1 &amp;gt;= 0&lt;/code&gt;は&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;BigDecimalSpinnerModel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpinnerNumberModel#getPreviousValue()&lt;/code&gt;などをオーバーライドして、&lt;code&gt;Double#compareTo(Double)&lt;/code&gt;ではなく、&lt;code&gt;BigDecimal#compareTo(BigDecimal)&lt;/code&gt;で最小値との比較を行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://homepage1.nifty.com/docs/java/faq/S029.html&quot;&gt;JavaFAQ: 浮動小数 float/double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21158043/jspinner-not-showing-minimum-value-on-pressing-down-arrow&quot;&gt;java - JSpinner not showing minimum value on pressing down arrow - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SpinnerNumberModel.html&quot;&gt;SpinnerNumberModelに上限値を超える値を入力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/bigdecimalspinnermodel</link>
                <guid>http://terai.xrea.jp/swing/bigdecimalspinnermodel</guid>
                <pubDate>2014-01-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JViewportにBorderを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JViewport&lt;/code&gt;に&lt;code&gt;Border&lt;/code&gt;を設定して余白を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ViewportBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-dtdRJtfyQqs/UtKoFiKxRVI/AAAAAAAAB-A/QmWEeAHNlmE/s800/ViewportBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextArea textArea2 = new JTextArea(&quot;JScrollPane#setViewportBorder(...)\n\n&quot; + initTxt);
textArea2.setMargin(new Insets(0,0,0,0));
JScrollPane scroll2 = new JScrollPane(textArea2);
scroll2.setViewportBorder(BorderFactory.createLineBorder(textArea2.getBackground(), 5));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;JTextArea#setMargin(Insets)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;に&lt;code&gt;setMargin(Insets)&lt;/code&gt;で余白を設定&lt;/li&gt;
&lt;li&gt;行変更などのカーソル移動で先頭や末尾の余白分まではスクロールされない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;JScrollPane#setViewportBorder(...)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea#setMargin(new Insets(0,0,0,1))&lt;/code&gt;で&lt;code&gt;JTextArea&lt;/code&gt;自体の余白を変更

&lt;ul&gt;
&lt;li&gt;すべて&lt;code&gt;0&lt;/code&gt;の場合、一番長い行の末尾でキャレットが表示されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#setViewportBorder(...)&lt;/code&gt;で&lt;code&gt;JViewport&lt;/code&gt;の周囲に余白を設定

&lt;ul&gt;
&lt;li&gt;スクロールバーなどの有無によらず、この余白は常に表示されている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/viewportborder</link>
                <guid>http://terai.xrea.jp/swing/viewportborder</guid>
                <pubDate>2014-01-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableでプロパティ一覧表を作成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行ごとにクラスに応じたセルエディタなどを適用することで、プロパティ一覧表を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PropertyTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-ZueCWsZFbOQ/UslO6WVldNI/AAAAAAAAB9g/53vsd2t0OPo/s800/PropertyTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;String[] columnNames = {&quot;Type&quot;, &quot;Value&quot;};
Object[][] data = {
  {&quot;String&quot;,  &quot;text&quot;    },
  {&quot;Date&quot;,  new Date()  },
  {&quot;Integer&quot;, 12      },
  {&quot;Double&quot;,  3.45    },
  {&quot;Boolean&quot;, Boolean.TRUE},
  {&quot;Color&quot;,   Color.RED   }
};
JTable table = new JTable(data, columnNames) {
  private Class editingClass;
  private Class getClassAt(int row, int column) {
    int mc = convertColumnIndexToModel(column);
    int mr = convertRowIndexToModel(row);
    return getModel().getValueAt(mr, mc).getClass();
  }
  @Override public TableCellRenderer getCellRenderer(int row, int column) {
    //editingClass = null;
    if(convertColumnIndexToModel(column)==1) {
      //System.out.println(&quot;getCellRenderer&quot;);
      return getDefaultRenderer(getClassAt(row, column));
    }else{
      return super.getCellRenderer(row, column);
    }
  }
  @Override public TableCellEditor getCellEditor(int row, int column) {
    if(convertColumnIndexToModel(column)==1) {
      //System.out.println(&quot;getCellEditor&quot;);
      editingClass = getClassAt(row, column);
      return getDefaultEditor(editingClass);
    }else{
      editingClass = null;
      return super.getCellEditor(row, column);
    }
  }
  // http://stackoverflow.com/questions/1464691/property-list-gui-component-in-swing
  // This method is also invoked by the editor when the value in the editor
  // component is saved in the TableModel. The class was saved when the
  // editor was invoked so the proper class can be created.
  @Override public Class getColumnClass(int column) {
    //return editingClass != null ? editingClass : super.getColumnClass(column);
    if(convertColumnIndexToModel(column)==1) {
      //System.out.println(&quot;getColumnClass&quot;);
      return editingClass;
    }else{
      return super.getColumnClass(column);
    }
  }
};
table.setAutoCreateRowSorter(true);
table.setDefaultRenderer(Color.class, new ColorRenderer());
table.setDefaultEditor(Color.class,   new ColorEditor());
table.setDefaultEditor(Date.class,  new DateEditor());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable#getCellRenderer(...)&lt;/code&gt;、&lt;code&gt;JTable#getCellEditor(...)&lt;/code&gt;をオーバーライドして、実際のモデル値からクラスを取得し、そのクラスに応じて行毎に使用するセルレンダラ、セルエディタを変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;セルレンダラ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;クラスは、それぞれデフォルトの&lt;code&gt;DefaultTableCellRenderer&lt;/code&gt;, &lt;code&gt;JTable$NumberRenderer&lt;/code&gt;, &lt;code&gt;JTable$DoubleRenderer&lt;/code&gt;, &lt;code&gt;JTable$BooleanRenderer&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color&lt;/code&gt;クラスは、&lt;code&gt;table.setDefaultRenderer(Color.class, new ColorRenderer());&lt;/code&gt;で、自作の&lt;code&gt;ColorRenderer&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セルエディタ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;と&lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;クラスは、それぞれデフォルトの&lt;code&gt;JTable$GenericEditor&lt;/code&gt;, &lt;code&gt;JTable$NumberEditor&lt;/code&gt;, &lt;code&gt;JTable$BooleanEditor&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Color&lt;/code&gt;クラスは、&lt;code&gt;JTable#setDefaultEditor(Class, TableCellEditor)&lt;/code&gt;で、それぞれ対応するセルエディタを用意して使用

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/DateCellEditor.html&quot;&gt;CellEditorをJSpinnerにして日付を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html#TableDialogEditDemo&quot;&gt;TableDialogEditDemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#getColumnClass(int)&lt;/code&gt;メソッドの引数は列のみなので、&lt;code&gt;1&lt;/code&gt;列目の場合は、&lt;code&gt;JTable#getCellEditor(...)&lt;/code&gt;で取得したクラスを返すようにオーバーライド

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://stackoverflow.com/questions/1464691/property-list-gui-component-in-swing&quot;&gt;java - Property list GUI component in Swing - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1464691/property-list-gui-component-in-swing&quot;&gt;java - Property list GUI component in Swing - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DateCellEditor.html&quot;&gt;CellEditorをJSpinnerにして日付を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html#TableDialogEditDemo&quot;&gt;TableDialogEditDemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/propertytable</link>
                <guid>http://terai.xrea.jp/swing/propertytable</guid>
                <pubDate>2014-01-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeで目次を作成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードにリーダーとページ番号を追加表示して目次を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableOfContentsTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-uecZSLw75K4/UsAxPx9ol2I/AAAAAAAAB9M/TcD_QI2Ex_Y/s800/TableOfContentsTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TableOfContentsTreeCellRenderer extends DefaultTreeCellRenderer {
  private static BasicStroke READER = new BasicStroke(
      1f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER,
      1f, new float[] { 1f }, 0f);
  private String pn;
  private Point pnPt = new Point();
  private int rxs, rxe, ry;
  private boolean isSynth = false;
  private final JPanel p = new JPanel(new BorderLayout()) {
    @Override public void paintComponent(Graphics g) {
      super.paintComponent(g);
      if(pn!=null) {
        Graphics2D g2 = (Graphics2D)g.create();
        g2.setColor(isSynth?getForeground():getTextNonSelectionColor());
        g2.drawString(pn, pnPt.x - getX(), pnPt.y);
        g2.setStroke(READER);
        g2.drawLine(rxs, pnPt.y, rxe - getX(), pnPt.y);
        g2.dispose();
      }
    }
    @Override public Dimension getPreferredSize() {
      Dimension d = super.getPreferredSize();
      d.width = Short.MAX_VALUE;
      return d;
    }
  };
  public TableOfContentsTreeCellRenderer() {
    super();
    p.setOpaque(false);
  }
  @Override public void updateUI() {
    super.updateUI();
    isSynth = getUI().getClass().getName().contains(&quot;Synth&quot;);
    if(isSynth) {
      //System.out.println(&quot;XXX: FocusBorder bug?, JDK 1.7.0, Nimbus start LnF&quot;);
      setBackgroundSelectionColor(new Color(0, true));
    }
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean selected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    JLabel l = (JLabel)super.getTreeCellRendererComponent(
        tree, value, selected, expanded, leaf, row, hasFocus);
    if(value instanceof DefaultMutableTreeNode) {
      DefaultMutableTreeNode n = (DefaultMutableTreeNode)value;
      Object o = n.getUserObject();
      if(o instanceof TableOfContents) {
        TableOfContents toc = (TableOfContents)o;
        FontMetrics metrics = l.getFontMetrics(l.getFont());
        int gap = l.getIconTextGap();
        int h = l.getPreferredSize().height;
        Insets ins = tree.getInsets();

        p.removeAll();
        p.add(l, BorderLayout.WEST);
        if(isSynth) p.setForeground(l.getForeground());

        pn = String.format(&quot;%3d&quot;, toc.page);
        pnPt.x = tree.getWidth() - metrics.stringWidth(pn) - gap;
        pnPt.y = (h + metrics.getAscent()) / 2;

        rxs = l.getPreferredSize().width + gap;
        rxe = tree.getWidth() - ins.right - metrics.stringWidth(&quot;000&quot;) - gap;
        ry  = h / 2;

        return p;
      }
    }
    pn = null;
    return l;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;TreeCellRenderer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;をオーバーライドし、デフォルトのレンダリングで使用する&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;JTree&lt;/code&gt;を超える十分な幅をもつ&lt;code&gt;JPanel&lt;/code&gt;でラップ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#getScrollableTracksViewportWidth()&lt;/code&gt;が常に&lt;code&gt;true&lt;/code&gt;を返すようオーバーライドして、スクロールバーが表示されないよう設定(参考: &lt;a href=&quot;https://community.oracle.com/thread/1357473&quot;&gt;JTree cell width question | Oracle Forums&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;のノードの幅には、最初に表示された時にキャッシュされたものが使用されるため、&lt;code&gt;JTable&lt;/code&gt;や&lt;code&gt;JList&lt;/code&gt;のレンダラーのように&lt;code&gt;LayoutManager&lt;/code&gt;を使ったセル内でのレイアウトが使用できない(&lt;code&gt;JTree&lt;/code&gt;をリサイズした場合、右寄せが維持できない)&lt;/li&gt;
&lt;li&gt;代わりに、ラップした&lt;code&gt;JPanel&lt;/code&gt;の&lt;code&gt;paintComponent(...)&lt;/code&gt;メソッドをオーバーライドして、ノードに続けてリーダー、&lt;code&gt;JTree&lt;/code&gt;の右端付近にページ番号を表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ページ番号などをクリックしてノードを展開可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;に十分な幅がなく、ノードとページ番号が重なる場合などは考慮していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;JTree#paintComponent(...)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#paintComponent(...)&lt;/code&gt;をオーバーライドし、ノードとは別にリーダーとページ番号を直接&lt;code&gt;JTree&lt;/code&gt;上に描画&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#getRowBounds(int)&lt;/code&gt;で取得したノードのセル領域が表示中の場合だけ処理を行う&lt;/li&gt;
&lt;li&gt;ページ番号などをクリックしてもノードを展開しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;に十分なサイズがなく、ノードとページ番号が重なる場合などは考慮していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTree tree2 = new JTree(makeModel()) {
  @Override public void updateUI() {
    super.updateUI();
    setBorder(BorderFactory.createTitledBorder(&quot;JTree#paintComponent(...)&quot;));
    isSynth = getUI().getClass().getName().contains(&quot;Synth&quot;);
  }
  private boolean isSynth = false;
  private final BasicStroke reader = new BasicStroke(
      1f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER,
      1f, new float[] { 1f }, 0f);
  private Rectangle getVisibleRowsRect() {
    Insets i = getInsets();
    Rectangle visRect = getVisibleRect();
    if(visRect.x == 0 &amp;amp;&amp;amp; visRect.y == 0 &amp;amp;&amp;amp; visRect.width == 0 &amp;amp;&amp;amp;
       visRect.height == 0 &amp;amp;&amp;amp; getVisibleRowCount() &amp;gt; 0) {
      // The tree doesn&#39;t have a valid bounds yet. Calculate
      // based on visible row count.
      visRect.width = 1;
      visRect.height = getRowHeight() * getVisibleRowCount();
    }else{
      visRect.x -= i.left;
      visRect.y -= i.top;
    }
    // we should consider a non-visible area above
    Component component = SwingUtilities.getUnwrappedParent(this);
    if(component instanceof JViewport) {
      component = component.getParent();
      if(component instanceof JScrollPane) {
        JScrollPane pane = (JScrollPane) component;
        JScrollBar bar = pane.getHorizontalScrollBar();
        if(bar != null &amp;amp;&amp;amp; bar.isVisible()) {
          int height = bar.getHeight();
          visRect.y -= height;
          visRect.height += height;
        }
      }
    }
    return visRect;
  }
  @Override public void paintComponent(Graphics g) {
    g.setColor(getBackground());
    g.fillRect(0,0,getWidth(),getHeight());
    super.paintComponent(g);
    Graphics2D g2 = (Graphics2D)g.create();
    FontMetrics fm = g.getFontMetrics();
    int pnmaxWidth = fm.stringWidth(&quot;000&quot;);
    Insets ins   = getInsets();
    Rectangle rect = getVisibleRowsRect();
    for(int i=0;i&amp;lt;getRowCount();i++) {
      Rectangle r = getRowBounds(i);
      if(rect.intersects(r)) {
        TreePath path = getPathForRow(i);
        if(isSynth &amp;amp;&amp;amp; isRowSelected(i)) {
          TreeCellRenderer tcr = getCellRenderer();
          if(tcr instanceof DefaultTreeCellRenderer) {
            DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer)tcr;
            g2.setColor(renderer.getTextSelectionColor());
          }
        }else{
          g2.setColor(getForeground());
        }
        DefaultMutableTreeNode node =
          (DefaultMutableTreeNode)path.getLastPathComponent();
        Object o = node.getUserObject();
        if(o instanceof TableOfContents) {
          TableOfContents toc = (TableOfContents)o;
          String pn = &quot;&quot; + toc.page;
          int x = getWidth() -1 - fm.stringWidth(pn) - ins.right;
          int y = r.y + (r.height + fm.getAscent()) / 2;
          g2.drawString(pn, x, y);

          int gap = 5;
          int x2  = getWidth() -1 - pnmaxWidth - ins.right;
          Stroke s = g2.getStroke();
          g2.setStroke(reader);
          g2.drawLine(r.x + r.width + gap, y, x2 - gap, y);
          g2.setStroke(s);
        }
      }
    }
    g2.dispose();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;等の場合、ノード選択時にリーダーとページ番号の文字色を変更するよう設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://community.oracle.com/thread/1357473&quot;&gt;JTree cell width question | Oracle Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tableofcontentstree</link>
                <guid>http://terai.xrea.jp/swing/tableofcontentstree</guid>
                <pubDate>2013-12-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードにJProgressBarを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードに&lt;code&gt;JProgressBar&lt;/code&gt;を表示する&lt;code&gt;TreeCellRenderer&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeNodeProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-SBg5NOTGinM/UrcLHfPzXVI/AAAAAAAAB84/HD0k-sWiJGo/s800/TreeNodeProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ProgressBarRenderer extends DefaultTreeCellRenderer {
  private int nodeWidth = 100;
  private static int barHeight = 4;
  private final JProgressBar b = new JProgressBar(0, 100) {
    @Override public Dimension getPreferredSize() {
      Dimension d = super.getPreferredSize();
      d.height = barHeight;
      d.width  = nodeWidth;
      return d;
    }
    @Override public void updateUI() {
      super.updateUI();
      setUI(new BasicProgressBarUI());
    }
  };
  private final JPanel p = new JPanel(new BorderLayout());
  public ProgressBarRenderer() {
    super();
    b.setOpaque(false);
    p.setOpaque(false);
    b.setStringPainted(true);
    b.setString(&quot;&quot;);
    b.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean selected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    Object o = ((DefaultMutableTreeNode)value).getUserObject();
    JComponent c = (JComponent)super.getTreeCellRendererComponent(
        tree, value, selected, expanded, leaf, row, hasFocus);
    if(o==null || !(o instanceof ProgressObject)) {
      return c;
    }
    ProgressObject n = (ProgressObject)o;
    int i = n.getValue();
    b.setValue(i);

    FontMetrics metrics = c.getFontMetrics(c.getFont());
    int ww = getX() + getIcon().getIconWidth() + getIconTextGap()
      + metrics.stringWidth(n.title);
    nodeWidth = ww;

    p.removeAll();
    p.add(c);
    p.add(i&amp;lt;100 ? b : Box.createVerticalStrut(barHeight), BorderLayout.SOUTH);
    return p;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、タスクが実行中の場合、ノードの幅(アイコンと文字列)だけの長さを持つ&lt;code&gt;JProgressBar&lt;/code&gt;を配置する&lt;code&gt;TreeCellRenderer&lt;/code&gt;を作成して、これを&lt;code&gt;JTree#setCellRenderer(...)&lt;/code&gt;で設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スタートボタンを押すと、&lt;code&gt;JButton&lt;/code&gt;を選択不可にし、&lt;code&gt;SwingWorker&lt;/code&gt;を起動して葉以外のノードをすべて捜査&lt;/li&gt;
&lt;li&gt;取得した各ノードで、ダミーの&lt;code&gt;SwingWorker&lt;/code&gt;を&lt;code&gt;ExecutorService#execute(...)&lt;/code&gt;で起動し、進捗を&lt;code&gt;JProgressBar&lt;/code&gt;を配置した&lt;code&gt;TreeCellRenderer&lt;/code&gt;で表示

&lt;ul&gt;
&lt;li&gt;ダミータスクが終了するとそのノードを展開&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;すべてのノードのタスクが終了したことを&lt;code&gt;ExecutorService#awaitTermination(...)&lt;/code&gt;で検知したら、&lt;code&gt;JButton&lt;/code&gt;を選択可に戻す&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treenodeprogressbar</link>
                <guid>http://terai.xrea.jp/swing/treenodeprogressbar</guid>
                <pubDate>2013-12-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerで隣接する別コンポーネント上に縁を描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使用して隣接する別コンポーネント上にも縁や影を描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OverlapBorderPaintLayer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-VshDpoewqBc/Uq2wDsedThI/AAAAAAAAB8g/TFMskJO7jys/s800/OverlapBorderPaintLayer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BreadcrumbLayerUI extends LayerUI&amp;lt;JPanel&amp;gt; {
  private Shape shape;
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    if(shape!=null) {
      Graphics2D g2 = (Graphics2D)g.create();
      g2.setRenderingHint(
          RenderingHints.KEY_ANTIALIASING,
          RenderingHints.VALUE_ANTIALIAS_ON);

      Rectangle r = new Rectangle(0,0,c.getWidth(),c.getHeight());
      Area area = new Area(r);
      area.subtract(new Area(shape));
      g2.setClip(area);

      g2.setPaint(new Color(0x55666666, true));
      g2.setStroke(new BasicStroke(3f));
      g2.draw(shape);
      g2.setStroke(new BasicStroke(2f));
      g2.draw(shape);

      g2.setStroke(new BasicStroke(1f));
      g2.setClip(r);
      g2.setPaint(Color.WHITE);
      g2.draw(shape);

      g2.dispose();
    }
  }
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    ((JLayer)c).setLayerEventMask(
        AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
  }
  @Override public void uninstallUI(JComponent c) {
    ((JLayer)c).setLayerEventMask(0);
    super.uninstallUI(c);
  }
  private void update(MouseEvent e, JLayer&amp;lt;? extends JPanel&amp;gt; l) {
    int id = e.getID();
    Shape s = null;
    if(id==MouseEvent.MOUSE_ENTERED || id==MouseEvent.MOUSE_MOVED) {
      Component c = e.getComponent();
      if(c instanceof AbstractButton) {
        AbstractButton b = (AbstractButton)c;
        if(b.getIcon() instanceof ToggleButtonBarCellIcon) {
          ToggleButtonBarCellIcon icon = (ToggleButtonBarCellIcon)b.getIcon();
          Rectangle r = c.getBounds();
          AffineTransform at = AffineTransform.getTranslateInstance(r.x, r.y);
          s = at.createTransformedShape(icon.area);
        }
      }
    }
    if(s!=shape) {
      shape = s;
      l.getView().repaint();
    }
  }
  @Override protected void processMouseEvent(
      MouseEvent e, JLayer&amp;lt;? extends JPanel&amp;gt; l) {
    update(e, l);
  }
  @Override protected void processMouseMotionEvent(
      MouseEvent e, JLayer&amp;lt;? extends JPanel&amp;gt; l) {
    update(e, l);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLayer#processMouseEvent(...)&lt;/code&gt;, &lt;code&gt;JLayer#processMouseMotionEvent(...)&lt;/code&gt;をオーバーライドして、カーソルの下にある&lt;code&gt;JRadioButton&lt;/code&gt;を取得し、その周辺に&lt;code&gt;JLayer#paint(...)&lt;/code&gt;メソッドを使って影と縁を描画しています。これらは一番手前の別レイヤーに描画されるので、隣接したり奥に重なったりしているコンポーネントなどの上に描画することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BreadcrumbList.html&quot;&gt;FlowLayoutでボタンを重ねてパンくずリストを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonsInMenuItem.html&quot;&gt;JMenuItemの内部にJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/overlapborderpaintlayer</link>
                <guid>http://terai.xrea.jp/swing/overlapborderpaintlayer</guid>
                <pubDate>2013-12-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ConvolveOpでコンポーネントにぼかしを入れる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ConvolveOp&lt;/code&gt;を使って、使用不可状態の&lt;code&gt;JButton&lt;/code&gt;にぼかしを入れます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BlurButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-KJB6Hz9n1R0/UqSGnCNV3HI/AAAAAAAAB70/sTyoJce2HZQ/s800/BlurButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BlurButton extends JButton {
  private final ConvolveOp op = new ConvolveOp(
      new Kernel(3, 3, new float[] {
    .05f, .05f, .05f,
    .05f, .60f, .05f,
    .05f, .05f, .05f
  }), ConvolveOp.EDGE_NO_OP, null);
  private int iw = -1;
  private int ih = -1;
  private BufferedImage buf;
  public BlurButton(String label) {
    super(label);
    //System.out.println(op.getEdgeCondition());
  }
  @Override protected void paintComponent(Graphics g) {
    if(isEnabled()) {
      super.paintComponent(g);
    }else{
      if(buf==null || iw!=getWidth() || ih!=getHeight()) {
        iw = getWidth();
        ih = getHeight();
        buf = new BufferedImage(iw, ih, BufferedImage.TYPE_INT_ARGB);
      }
      Graphics2D g2 = (Graphics2D)buf.getGraphics();
      super.paintComponent(g2);
      g2.dispose();
      g.drawImage(op.filter(buf, null), 0, 0, null);
    }
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.width += 3 * 3;
    return d;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JButton&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConvolveOp&lt;/code&gt;を使って、使用不可状態の&lt;code&gt;JButton&lt;/code&gt;にぼかし&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/&quot;&gt;Java Swing Hacks 9. 使用不可状態のコンポーネントをぼかし表示する&lt;/a&gt;から引用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、右端&lt;code&gt;1&lt;/code&gt;ドットの表示が乱れる場合があるので、&lt;code&gt;EdgeCondition&lt;/code&gt;をデフォルトの&lt;code&gt;EDGE_ZERO_FILL&lt;/code&gt;から、&lt;code&gt;EDGE_NO_OP&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、これらのぼかしを入れると文字が拡大されて？(左右の&lt;code&gt;Border&lt;/code&gt;が広いから？)、文字列が省略されてしまうので、&lt;code&gt;JButton#getPreferredSize()&lt;/code&gt;をオーバーライドして幅を拡大&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/image/ConvolveOp.html&quot;&gt;ConvolveOp (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/1.4/guide/2d/spec/j2d-image.fm8.html&quot;&gt;5.8.1 イメージ処理操作の使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jhlabs.com/ip/blurring.html&quot;&gt;Java Image Processing - Blurring for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/&quot;&gt;Java Swing Hacks 9. 使用不可状態のコンポーネントをぼかし表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/blurbutton</link>
                <guid>http://terai.xrea.jp/swing/blurbutton</guid>
                <pubDate>2013-12-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FlowLayoutでボタンを重ねてパンくずリストを作成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FlowLayout&lt;/code&gt;の水平間隔をマイナスにして、&lt;code&gt;JRadioButton&lt;/code&gt;を重ねて表示し、パンくずリスト風のコンポーネントを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BreadcrumbList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-aKK_2LaPfVQ/UpsqWSS4lUI/AAAAAAAAB7c/VSzPRuRu3IY/s800/BreadcrumbList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JComponent makeBreadcrumbList(int overlap, List&amp;lt;String&amp;gt; list) {
  JPanel p = new JPanel(new FlowLayout(FlowLayout.LEADING, -overlap, 0));
  p.setBorder(BorderFactory.createEmptyBorder(4, overlap+4, 4, 4));
  p.setOpaque(false);
  ButtonGroup bg = new ButtonGroup();
  for(String title: list) {
    AbstractButton b = makeButton(title, Color.PINK);
    p.add(b);
    bg.add(b);
  }
  return p;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、指定したピクセル分だけ重なるように、&lt;code&gt;FlowLayout&lt;/code&gt;の水平間隔にマイナスの値を指定しています。このため、左側の&lt;code&gt;JRadioButton&lt;/code&gt;の下に右側の&lt;code&gt;JRadioButton&lt;/code&gt;が配置されている状態になっています。各&lt;code&gt;JRadioButton&lt;/code&gt;自体は重なっていますが、描画やマウスクリックなどは重ならないよう、以下のような設定を追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;描画

&lt;ul&gt;
&lt;li&gt;矢羽型のアイコンを設定、このアイコン以外は、&lt;code&gt;setContentAreaFilled(false);&lt;/code&gt;などで透明化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マウスクリック

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JRadioButton#contains(...)&lt;/code&gt;をオーバーライドして、上記の矢羽図形の外では反応しないよう設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToggleButtonBar.html&quot;&gt;JRadioButtonを使ってToggleButtonBarを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonsInMenuItem.html&quot;&gt;JMenuItemの内部にJButtonを配置する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;前後のコンポーネントのフチを共通化して(&lt;code&gt;1px&lt;/code&gt;だけ重ねる)、&lt;code&gt;JLayer&lt;/code&gt;でそのフォーカスを描画するサンプル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/breadcrumblist</link>
                <guid>http://terai.xrea.jp/swing/breadcrumblist</guid>
                <pubDate>2013-12-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuItemの内部にJButtonを配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenuItem&lt;/code&gt;の内部に切り取り、コピー、貼り付けを行う&lt;code&gt;JButton&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonsInMenuItem&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-aY1o9VhHFWI/UpHzycRD8gI/AAAAAAAAB64/jaFbU_zn7hI/s800/ButtonsInMenuItem.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JMenuItem makeEditMenuItem(final JPanel edit) {
  JMenuItem item = new JMenuItem(&quot;Edit&quot;) {
    @Override public Dimension getPreferredSize() {
      Dimension d = super.getPreferredSize();
      d.width += edit.getPreferredSize().width;
      d.height = Math.max(edit.getPreferredSize().height, d.height);
      return d;
    }
    @Override protected void fireStateChanged() {
      setForeground(Color.BLACK);
      super.fireStateChanged();
    }
  };
  item.setEnabled(false);

  GridBagConstraints c = new GridBagConstraints();
  item.setLayout(new GridBagLayout());
  c.gridheight = 1;
  c.gridwidth  = 1;
  c.gridy = 0;
  c.gridx = 0;

  c.weightx = 1.0;
  c.fill = GridBagConstraints.HORIZONTAL;
  item.add(Box.createHorizontalGlue(), c);
  c.gridx = 1;
  c.fill = GridBagConstraints.NONE;
  c.weightx = 0.0;
  c.anchor = GridBagConstraints.EAST;
  item.add(edit, c);

  return item;
}
private static JPanel makeEditButtonBar(List&amp;lt;AbstractButton&amp;gt; list) {
  int size = list.size();
  JPanel p = new JPanel(new GridLayout(1, size, 0, 0)) {
    @Override public Dimension getMaximumSize() {
      return super.getPreferredSize();
    }
  };
  for(AbstractButton b: list) {
    b.setIcon(new ToggleButtonBarCellIcon());
    p.add(b);
  }
  p.setBorder(BorderFactory.createEmptyBorder(4, 10, 4, 10));
  p.setOpaque(false);
  return p;
}
private static AbstractButton makeButton(String title, Action action) {
  JButton b = new JButton(action);
  b.addActionListener(new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      JButton b = (JButton)e.getSource();
      Container c = SwingUtilities.getAncestorOfClass(JPopupMenu.class, b);
      if(c instanceof JPopupMenu) {
        ((JPopupMenu)c).setVisible(false);
      }
    }
  });
  b.setText(title);
  b.setVerticalAlignment(SwingConstants.CENTER);
  b.setVerticalTextPosition(SwingConstants.CENTER);
  b.setHorizontalAlignment(SwingConstants.CENTER);
  b.setHorizontalTextPosition(SwingConstants.CENTER);
  b.setBorder(BorderFactory.createEmptyBorder());
  b.setContentAreaFilled(false);
  b.setFocusPainted(false);
  b.setOpaque(false);
  b.setBorder(BorderFactory.createEmptyBorder());
  return b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#getPreferredSize()&lt;/code&gt;をオーバーライドして、挿入する&lt;code&gt;JButton&lt;/code&gt;を考慮したサイズを返すように変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuItem&lt;/code&gt;自体は、選択不可になるように&lt;code&gt;JMenuItem#setEnabled(false)&lt;/code&gt;を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem#setEnabled(false)&lt;/code&gt;の状態でも文字色は常に黒になるように、&lt;code&gt;JMenuItem#fireStateChanged&lt;/code&gt;をオーバーライドして&lt;code&gt;setForeground(Color.BLACK);&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonTextColor.html&quot;&gt;JRadioButtonの文字色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuItem&lt;/code&gt;にレイアウトを設定し、&lt;code&gt;JMenuItem#add(...)&lt;/code&gt;で&lt;code&gt;JButton&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;を追加

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OverlayLayout.html&quot;&gt;OverlayLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;レイアウトマネージャーは、&lt;code&gt;GridBagLayout&lt;/code&gt;を使用し、追加する&lt;code&gt;JButtun&lt;/code&gt;は左右は右端、上下は中央に来るように設定&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GridBagLayout.html&quot;&gt;GridBagLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;レイアウトを&lt;code&gt;GridLayout&lt;/code&gt;に変更して同じサイズの&lt;code&gt;JButton&lt;/code&gt;を複数配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel#getMaximumSize()&lt;/code&gt;をオーバーライドして、&lt;code&gt;JPanel#getPreferredSize()&lt;/code&gt;と同じサイズを返すよう変更&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonWidth.html&quot;&gt;JButtonの高さを変更せずに幅を指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultEditorKit.CopyAction()&lt;/code&gt;などで、&lt;code&gt;Action&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;左右両端に配置された&lt;code&gt;JButton&lt;/code&gt;のフチのラウンドなどは、&lt;code&gt;Icon&lt;/code&gt;を生成して描画

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToggleButtonBar.html&quot;&gt;JRadioButtonを使ってToggleButtonBarを作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5972368/custom-jmenuitems-in-java&quot;&gt;Custom JMenuItems in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonsinmenuitem</link>
                <guid>http://terai.xrea.jp/swing/buttonsinmenuitem</guid>
                <pubDate>2013-11-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの展開状態を記憶・復元する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;でノードの展開状態を記憶、復元します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExpandedDescendants&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-FcYsZkFYSxE/UojBcoMtHwI/AAAAAAAAB6k/A7D221doy2w/s800/ExpandedDescendants.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;visitAll(tree, rootPath, false); //Collapse all
if(expandedState == null) { return; }
while(expandedState.hasMoreElements()) {
  tree.expandPath(expandedState.nextElement());
}
expandedState = tree.getExpandedDescendants(rootPath);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTree#getExpandedDescendants(TreePath)&lt;/code&gt;メソッドで展開されているノードの&lt;code&gt;TreePath&lt;/code&gt;を&lt;code&gt;Enumeration&lt;/code&gt;で保存しています。復元は一旦すべてのノードを折り畳んでから、&lt;code&gt;JTree#expandPath(TreePath)&lt;/code&gt;で&lt;code&gt;Enumeration&amp;lt;TreePath&amp;gt;&lt;/code&gt;から取得したノードを展開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;親ノードが閉じている場合、その子ノードの展開状態は記憶していない

&lt;ul&gt;
&lt;li&gt;このサンプルでの例を挙げると、&lt;code&gt;Set 004&lt;/code&gt;を展開して、親の&lt;code&gt;Set 001&lt;/code&gt;を折り畳んだ状態で、&lt;code&gt;JTree#getExpandedDescendants(TreePaht)&lt;/code&gt;を使用した場合、戻り値の&lt;code&gt;Enumeration&amp;lt;TreePath&amp;gt;&lt;/code&gt;に&lt;code&gt;Set 004&lt;/code&gt;へのパスは含まれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/JTree.html#getExpandedDescendants%28javax.swing.tree.TreePath%29&quot;&gt;JTree#getExpandedDescendants(TreePath) (Java Platform SE 7)&lt;/a&gt;に書かれている説明がよく分からない(特に前半)が、もしかしたら上記のことを言っているのかもしれない…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;If you expand/collapse nodes while iterating over the returned Enumeration this may not return all the expanded paths, or may return paths that are no longer expanded.
返された Enumeration で繰り返している間ノードを展開するか、折りたたむと、このメソッドは展開されたすべてのパスを返すのではなく、それ以上展開されていないパスを返します。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;のシリアライズに関するのメモ&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//XMLEncoderではデフォルトのJTreeの場合、展開状態などは保存されない
//??? 1.7.0_45では、整形式のXMLにならない場合がある ???
XMLEncoder xe = new XMLEncoder(new BufferedOutputStream(new FileOutputStream(xmlFile)));
xe.writeObject(tree);
xe.flush();

//ObjectOutputStreamの場合は、選択状態、展開状態なども保存、復元可能
ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));
oos.writeObject(tree);
oos.flush();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExpandAllNodes.html&quot;&gt;JTreeのノードを展開・折り畳み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javalobby.org/java/forums/t19857.html&quot;&gt;Swing: Retaining JTree Expansion State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://orinanobworld.blogspot.jp/2013/03/auto-collapsing-tree-in-java.html&quot;&gt;OR in an OB World: Auto-collapsing Tree in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/expandeddescendants</link>
                <guid>http://terai.xrea.jp/swing/expandeddescendants</guid>
                <pubDate>2013-11-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelでイニシャル組を行う</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;の先頭文字を拡大、残りの文字列を&lt;code&gt;TextLayout&lt;/code&gt;で回り込むよう配置し、ドロップキャップで描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DropcapLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-kf9qTpS1Olg/Un-Dk5bbC-I/AAAAAAAAB5s/fAVjwJVHBqA/s800/DropcapLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override protected void paintComponent(Graphics g) {
  Graphics2D g2 = (Graphics2D)g.create();
  g2.setPaint(getBackground());
  g2.fillRect(0, 0, getWidth(), getHeight());

  Insets i = getInsets();
  float x0 = i.left;
  float y0 = i.top;

  Font font = getFont();
  String txt = getText();

  AttributedString as = new AttributedString(txt.substring(1));
  as.addAttribute(TextAttribute.FONT, font);
  AttributedCharacterIterator aci = as.getIterator();
  FontRenderContext frc = g2.getFontRenderContext();

  Shape shape = new TextLayout(txt.substring(0, 1), font, frc).getOutline(null);

  AffineTransform at1 = AffineTransform.getScaleInstance(5d, 5d);
  Shape s1 = at1.createTransformedShape(shape);
  Rectangle r = s1.getBounds();
  r.grow(6, 2);
  int rw = r.width;
  int rh = r.height;

  AffineTransform at2 = AffineTransform.getTranslateInstance(x0, y0+rh);
  Shape s2 = at2.createTransformedShape(s1);
  g2.setPaint(getForeground());
  g2.fill(s2);

  float x = x0 + rw;
  float y = y0;
  int w0 = getWidth() - i.left - i.right;
  int w = w0 - rw;
  LineBreakMeasurer lbm = new LineBreakMeasurer(aci, frc);
  while(lbm.getPosition() &amp;lt; aci.getEndIndex()) {
    TextLayout tl = lbm.nextLayout(w);
    tl.draw(g2, x, y + tl.getAscent());
    y += tl.getDescent() + tl.getLeading() + tl.getAscent();
    if(y0+rh &amp;lt; y) {
      x = x0;
      w = w0;
    }
  }
  g2.dispose();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の手順で&lt;code&gt;JLabel&lt;/code&gt;にドロップキャップの装飾を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先頭一文字を&lt;code&gt;Shape&lt;/code&gt;として取得し拡大して表示&lt;/li&gt;
&lt;li&gt;残りの文字から&lt;code&gt;AttributedString&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;拡大した先頭文字の高さに行の&lt;code&gt;y&lt;/code&gt;座標が収まる場合は、&lt;code&gt;JLabel&lt;/code&gt;の幅から先頭文字幅を除いた幅に収まる文字列を&lt;code&gt;LineBreakMeasurer&lt;/code&gt;で取得し描画&lt;/li&gt;
&lt;li&gt;拡大した先頭文字の高さを行の&lt;code&gt;y&lt;/code&gt;座標が超えた場合は、&lt;code&gt;JLabel&lt;/code&gt;の幅に収まる文字列を&lt;code&gt;LineBreakMeasurer&lt;/code&gt;で取得し描画&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GlyphVector.html&quot;&gt;JLabelの文字列を折り返し&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransformedShape.html&quot;&gt;Fontを回転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dropcaplabel</link>
                <guid>http://terai.xrea.jp/swing/dropcaplabel</guid>
                <pubDate>2013-11-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのPaginationとSwingWorkerでの逐次読み込み</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;で&lt;code&gt;RowFilter&lt;/code&gt;を使った&lt;code&gt;Pagination&lt;/code&gt;と&lt;code&gt;SwingWorker&lt;/code&gt;での逐次読み込みを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PageInputForPagination&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-1qIJd4HlwkQ/UnaN9fNNZtI/AAAAAAAAB5Y/JqssphQAq3Q/s800/PageInputForPagination.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;worker = new SwingWorker&amp;lt;String, List&amp;lt;Object[]&amp;gt;&amp;gt;() {
  private int max = 2013;
  @Override public String doInBackground() {
    int current = 1;
    int c = max/itemsPerPage;
    int i = 0;
    while(i&amp;lt;c &amp;amp;&amp;amp; !isCancelled()) {
      current = makeRowListAndPublish(current, itemsPerPage);
      i++;
    }
    int m = max%itemsPerPage;
    if(m&amp;gt;0) {
      makeRowListAndPublish(current, m);
    }
    return &quot;Done&quot;;
  }
  private int makeRowListAndPublish(int current, int size) {
    try{
      Thread.sleep(500); //dummy
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    List&amp;lt;Object[]&amp;gt; result = new ArrayList&amp;lt;Object[]&amp;gt;(size);
    int j = current;
    while(j&amp;lt;current+size) {
      result.add(new Object[] {j, &quot;Test: &quot;+j, (j%2==0)?&quot;&quot;:&quot;comment...&quot;});
      j++;
    }
    publish(result);
    return j;
  }
  @Override protected void process(List&amp;lt;List&amp;lt;Object[]&amp;gt;&amp;gt; chunks) {
    for(List&amp;lt;Object[]&amp;gt; list: chunks) {
      for(Object[] o: list) {
        model.addRow(o);
      }
    }
    int rowCount = model.getRowCount();
    maxPageIndex = (rowCount/itemsPerPage) + (rowCount%itemsPerPage==0?0:1);
    initFilterAndButton();
  }
  @Override public void done() {
    String text = null;
    if(isCancelled()) {
      text = &quot;Cancelled&quot;;
    }else{
      try{
        text = get();
      }catch(Exception ex) {
        ex.printStackTrace();
        text = &quot;Exception&quot;;
      }
    }
    table.setEnabled(true);
  }
};
worker.execute();
//...
private static final int itemsPerPage = 100;
private int maxPageIndex;
private int currentPageIndex = 1;
private void initFilterAndButton() {
  sorter.setRowFilter(new RowFilter&amp;lt;TableModel, Integer&amp;gt;() {
    @Override public boolean include(
        Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
      int ti = currentPageIndex - 1;
      int ei = entry.getIdentifier();
      return ti*itemsPerPage&amp;lt;=ei &amp;amp;&amp;amp; ei&amp;lt;ti*itemsPerPage+itemsPerPage;
    }
  });
  first.setEnabled(currentPageIndex&amp;gt;1);
  prev.setEnabled(currentPageIndex&amp;gt;1);
  next.setEnabled(currentPageIndex&amp;lt;maxPageIndex);
  last.setEnabled(currentPageIndex&amp;lt;maxPageIndex);
  field.setText(Integer.toString(currentPageIndex));
  label.setText(String.format(&quot;/ %d&quot;, maxPageIndex));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://terai.xrea.jp/Swing/TablePagination.html&quot;&gt;RowFilterでJTableのページ分割&lt;/a&gt;に以下の変更を追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;に数値を入力して指定ページにジャンプ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;First&lt;/code&gt;, &lt;code&gt;Prev&lt;/code&gt;, &lt;code&gt;Next&lt;/code&gt;, &lt;code&gt;Last&lt;/code&gt;に&lt;code&gt;JRadioButton&lt;/code&gt;ではなく、&lt;code&gt;JButton&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingWorker&lt;/code&gt;を使ってページ単位での逐次読み込み(最大ページの表示を更新)&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TablePagination.html&quot;&gt;RowFilterでJTableのページ分割&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/pageinputforpagination</link>
                <guid>http://terai.xrea.jp/swing/pageinputforpagination</guid>
                <pubDate>2013-11-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldの文字列に下線を付ける</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;にテキスト属性を設定したフォントを使用して、文字列に下線を引きます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextAttribute&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-OkP81Y9wnSg/Um0wk_H3a5I/AAAAAAAAB5A/KfDBXqlXF3o/s800/TextAttribute.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Font font = textField.getFont();
Map&amp;lt;TextAttribute, Object&amp;gt; attrs = new HashMap&amp;lt;&amp;gt;(font.getAttributes());
attrs.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_LOW_DOTTED);
textField.setFont(font.deriveFont(attrs));
//...
enum UnderlineStyle {
    UNDERLINE_OFF(-1),
    UNDERLINE_LOW_DASHED(TextAttribute.UNDERLINE_LOW_DASHED),
    UNDERLINE_LOW_DOTTED(TextAttribute.UNDERLINE_LOW_DOTTED),
    UNDERLINE_LOW_GRAY(TextAttribute.UNDERLINE_LOW_GRAY),
    UNDERLINE_LOW_ONE_PIXEL(TextAttribute.UNDERLINE_LOW_ONE_PIXEL),
    UNDERLINE_LOW_TWO_PIXEL(TextAttribute.UNDERLINE_LOW_TWO_PIXEL),
    UNDERLINE_ON(TextAttribute.UNDERLINE_ON);
    public final int style;
    private UnderlineStyle(int style) {
        this.style = style;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Font#deriveFont(...)&lt;/code&gt;メソッドに下線の属性キーに点線や破線の属性値を設定した&lt;code&gt;TextAttribute&lt;/code&gt;のマップを適用して、下線属性の付いた新しい&lt;code&gt;Font&lt;/code&gt;オブジェクトを生成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;の下にある&lt;code&gt;JTextField&lt;/code&gt;のように、その高さが足りない場合、下線の種類によって表示されないことがある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/font/TextAttribute.html&quot;&gt;TextAttribute (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/19478966/is-it-possible-to-underline-text-on-jtextfieldif-yes-how&quot;&gt;java - Is it possible to underline text on JTextField?If Yes, How? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textattribute</link>
                <guid>http://terai.xrea.jp/swing/textattribute</guid>
                <pubDate>2013-10-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセル中に配置したコンポーネント毎にカーソルを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のセルに配置されているコンポーネントをマウスの座標から検索し、それに設定されたカーソルを&lt;code&gt;JList&lt;/code&gt;に適用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CursorOfCellComponent&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-v3ugRz81Y0Q/UmPxM3SwOYI/AAAAAAAAB4Y/PqZaNMCPgN0/s800/CursorOfCellComponent.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList&amp;lt;String&amp;gt; list = new JList&amp;lt;String&amp;gt;(model) {
  private LinkCellRenderer renderer;
  @Override public void updateUI() {
    setForeground(null);
    setBackground(null);
    setSelectionForeground(null);
    setSelectionBackground(null);
    super.updateUI();
    renderer = new LinkCellRenderer();
    setCellRenderer(renderer);
  }
  private int prevIndex = -1;
  @Override protected void processMouseMotionEvent(MouseEvent e) {
    Point pt = e.getPoint();
    int i = locationToIndex(pt);
    String s = ((ListModel&amp;lt;String&amp;gt;)getModel()).getElementAt(i);
    Component c = getCellRenderer().getListCellRendererComponent(
        this, s, i, false, false);
    Rectangle r = getCellBounds(i, i);
    c.setBounds(r);
    if(prevIndex!=i) {
      c.doLayout();
    }
    prevIndex = i;
    pt.translate(-r.x, -r.y);
    Component cmp = SwingUtilities.getDeepestComponentAt(c, pt.x, pt.y);
    if(cmp != null) {
      setCursor(cmp.getCursor());
    }else{
      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の手順でイベントを取得しないセルレンダラー中のコンポーネントに応じたカーソルの変更を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList&lt;/code&gt;上をマウスカーソルを移動した時に、カーソルのある行を取得&lt;/li&gt;
&lt;li&gt;セルレンダラーに行番号や文字列などの値を渡して描画用のコンポーネントを取得&lt;/li&gt;
&lt;li&gt;描画用コンポーネントの位置とサイズを&lt;code&gt;JList#getCellBounds()&lt;/code&gt;で取得したセル領域に変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Component#setBounds(...)&lt;/code&gt;で描画用コンポーネントの位置とサイズを変更してもその子コンポーネントのレイアウトは更新されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Component#doLayout()&lt;/code&gt;で、レイアウトを更新

&lt;ul&gt;
&lt;li&gt;このサンプルで使用している&lt;code&gt;FlowLayout&lt;/code&gt;では、&lt;code&gt;JLabel&lt;/code&gt;に設定する文字列の長さで後続のコンポーネントの位置が変化するので、&lt;code&gt;Component#doLayout()&lt;/code&gt;が必要&lt;/li&gt;
&lt;li&gt;ただし、同じ行の場合は描画用コンポーネントも前回と同じはずなのでレイアウトを更新する必要はない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonsInListCell.html&quot;&gt;JListのセル内にJButtonを配置する&lt;/a&gt;などのように、すべての行のレイアウトが同じ(内容に応じて変化しない)場合も同様に更新する必要はない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JList&lt;/code&gt;基準のカーソル座標を描画用コンポーネント基準に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.getDeepestComponentAt(...);&lt;/code&gt;で描画用コンポーネントから変更した座標の下にある子コンポーネントを取得&lt;/li&gt;
&lt;li&gt;取得した子コンポーネントのカーソルを&lt;code&gt;JList&lt;/code&gt;のカーソルとして設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/cursorofcellcomponent</link>
                <guid>http://terai.xrea.jp/swing/cursorofcellcomponent</guid>
                <pubDate>2013-10-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの複数キーを使ったソートをヘッダに表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の複数キーを使ったソートの状態をヘッダ上に別途表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MultisortHeaderRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-QNe3lJ3oXH0/Ulqu3vaS91I/AAAAAAAAB3U/Tb2kXiKV8Fs/s800/MultisortHeaderRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MultisortHeaderRenderer implements TableCellRenderer {
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    if(table.getRowSorter()!=null) {
      List&amp;lt;?&amp;gt; keys = table.getRowSorter().getSortKeys();
      int max = keys.size();
      for(int i=0; i&amp;lt;max; i++) {
        TableRowSorter.SortKey sortKey = (TableRowSorter.SortKey)keys.get(i);
        if(column==sortKey.getColumn()) {
          String k = sortKey.getSortOrder()==SortOrder.ASCENDING
            ? &quot;\u25B4 &quot; : &quot;\u25BE &quot;;
          value = &quot;&amp;lt;html&amp;gt;&quot;+value.toString()+&quot; &amp;lt;small color=&#39;gray&#39;&amp;gt;&quot;+k+(i+1);
        }
      }
    }
    TableCellRenderer r = table.getTableHeader().getDefaultRenderer();
    return r.getTableCellRendererComponent(
        table, value, isSelected, hasFocus, row, column);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;TableRowSorter&lt;/code&gt;は、デフォルトで最大数&lt;code&gt;3&lt;/code&gt;の&lt;code&gt;SortKey&lt;/code&gt;が設定されているため、複数キーを使ったソートが可能ですが、&lt;code&gt;JTableHeader&lt;/code&gt;には第一ソートキーの状態だけが表示されます。
このサンプルでは、ヘッダのセルレンダラー内部でソートキーを取得し、その状態を文字列にしてヘッダタイトルに追記表示することで識別できるようにしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2010/08/29/multisort-table-header-cell-renderer/&quot;&gt;Multisort Table Header Cell Renderer « Java Tips Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;第二キー以下を薄く表示するサンプルがあります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;でデフォルトの&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;が使用するヘッダレンダラー(ソートのマークが文字列の右ではなく上部に表示される)と併用したい場合、少し面倒な修正が必要になります。

&lt;ul&gt;
&lt;li&gt;この修正を行ったレンダラーを他の&lt;code&gt;LookAndFeel&lt;/code&gt;で使用すると第一ソートキーが非表示になります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2010/08/29/multisort-table-header-cell-renderer/&quot;&gt;Multisort Table Header Cell Renderer « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableSortIcon.html&quot;&gt;JTableのソートアイコンを変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/multisortheaderrenderer</link>
                <guid>http://terai.xrea.jp/swing/multisortheaderrenderer</guid>
                <pubDate>2013-10-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneで選択色を半透明化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;で選択色を半透明化し、&lt;code&gt;HighlightPainter&lt;/code&gt;によるハイライトや&lt;code&gt;CSS&lt;/code&gt;での背景色変更と組み合わせた場合の描画のテストを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectionColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-vbDIDKoUbmw/UlFdSAKWCVI/AAAAAAAAB3A/wbVAmRfeTCY/s800/SelectionColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JEditorPane area = new JEditorPane();
area.setOpaque(false);
area.setForeground(new Color(200, 200, 200));
area.setSelectedTextColor(Color.WHITE);
area.setBackground(new Color(0, true));
area.setSelectionColor(new Color(0xC86464FF, true));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JEditorPane&lt;/code&gt;の選択色などを半透明化して、ハイライトや&lt;code&gt;CSS&lt;/code&gt;での背景色変更と組み合わせた場合のテストをしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextComponent#setSelectionColor&lt;/code&gt;, &lt;code&gt;JTextComponent#setSelectedTextColor&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;選択色、選択文字色を変更することができる&lt;/li&gt;
&lt;li&gt;どちらも半透明色を使用可能&lt;/li&gt;
&lt;li&gt;デフォルトでは、選択が一番手前に描画されるので、半透明にしておくと他の選択色とアルファで乗算されて表示される&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/JTextComponent.html#setSelectionColor%28java.awt.Color%29&quot;&gt;JTextComponent#setSelectionColor(Color)&lt;/a&gt;では、「色に &lt;code&gt;null&lt;/code&gt; を設定することは、&lt;code&gt;Color.white&lt;/code&gt; を設定することと同じです。」となっているが、上記のサンプルで、&lt;code&gt;&amp;quot;setSelectionColor(#C86464FF)&amp;quot;&lt;/code&gt;のチェックを外して&lt;code&gt;null&lt;/code&gt;を設定すると、選択の描画が一行目とそれ以降で異なる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HighlightPainter&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ハイライトの背景色は設定可能だが、文字色を変更することはできない&lt;/li&gt;
&lt;li&gt;背景色を半透明にすることは可能&lt;/li&gt;
&lt;li&gt;デフォルトのハイライトの設定(&lt;code&gt;DefaultHighlighter#setDrawsLayeredHighlights(true)&lt;/code&gt;)では、文字列の選択描画より手前にハイライトの矩形が表示される

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DrawsLayeredHighlights.html&quot;&gt;DefaultHighlighterの描画方法を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StyleSheet&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StyleSheet.html&quot;&gt;JEditorPaneのHTMLEditorKitにCSSを適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styleSheet.addRule(&amp;quot;.highlight {color: blue; background: #FF5533; opacity: 0.5;}&amp;quot;);&lt;/code&gt;などで、文字色、背景色を変更可能&lt;/li&gt;
&lt;li&gt;デフォルトの&lt;code&gt;HTMLEditorKit&lt;/code&gt;は&lt;code&gt;CSS&lt;/code&gt;の&lt;code&gt;opacity: 0.5&lt;/code&gt;、&lt;code&gt;background: rgba(255,100,100,0.6);&lt;/code&gt;などに未対応で、半透明化は不可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字列選択の描画や、ハイライトの矩形より奥に描画される&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/JTextComponent.html#setSelectionColor%28java.awt.Color%29&quot;&gt;JTextComponent#setSelectionColor(Color) (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StyleSheet.html&quot;&gt;JEditorPaneのHTMLEditorKitにCSSを適用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Highlighter.html&quot;&gt;Highlighterで文字列をハイライト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CentredBackgroundBorder.html&quot;&gt;JTextAreaの背景に画像を表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DrawsLayeredHighlights.html&quot;&gt;DefaultHighlighterの描画方法を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectioncolor</link>
                <guid>http://terai.xrea.jp/swing/selectioncolor</guid>
                <pubDate>2013-10-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuItemのAccelerator表示を右揃えにする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenuItem&lt;/code&gt;の&lt;code&gt;Accelerator&lt;/code&gt;表示を右揃えに変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MenuItemAcceleratorAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-vl8nnt_tGvQ/UkhDq1YV-VI/AAAAAAAAB2o/B0-hGdv35Ns/s800/MenuItemAcceleratorAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static void paintAccText(
    Graphics g, MenuItemLayoutHelper lh, MenuItemLayoutHelper.LayoutResult lr,
    Color disabledForeground, Color acceleratorForeground,
    Color acceleratorSelectionForeground) {
  if(!lh.getAccText().equals(&quot;&quot;)) {
    ButtonModel model = lh.getMenuItem().getModel();
    g.setFont(lh.getAccFontMetrics().getFont());
    if(!model.isEnabled()) {
      // *** paint the accText disabled
      if(disabledForeground != null) {
        g.setColor(disabledForeground);
        SwingUtilities2.drawString(
            lh.getMenuItem(), g, lh.getAccText(),
            lr.getAccRect().x,
            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());
      }else{
        g.setColor(lh.getMenuItem().getBackground().brighter());
        SwingUtilities2.drawString(
            lh.getMenuItem(), g, lh.getAccText(),
            lr.getAccRect().x,
            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());
        g.setColor(lh.getMenuItem().getBackground().darker());
        SwingUtilities2.drawString(
            lh.getMenuItem(), g, lh.getAccText(),
            lr.getAccRect().x - 1,
            lr.getAccRect().y + lh.getFontMetrics().getAscent() - 1);
      }
    }else{
      // *** paint the accText normally
      if(model.isArmed() ||
         (lh.getMenuItem() instanceof JMenu &amp;amp;&amp;amp; model.isSelected())) {
        g.setColor(acceleratorSelectionForeground);
      }else{
        g.setColor(acceleratorForeground);
      }
      SwingUtilities2.drawString(
          lh.getMenuItem(), g, lh.getAccText(),
          //lr.getAccRect().x, &amp;gt;&amp;gt;&amp;gt;
          lh.getViewRect().x + lh.getViewRect().width
          - lh.getMenuItem().getIconTextGap() - lr.getAccRect().width,
          //&amp;lt;&amp;lt;&amp;lt;
          lr.getAccRect().y + lh.getAccFontMetrics().getAscent());
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicMenuItemUI#paintMenuItem(...)&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;JMenuItem&lt;/code&gt;の&lt;code&gt;Accelerator&lt;/code&gt;を左寄せではなく、右寄せで表示するように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;で実行すると&lt;code&gt;java.security.AccessControlException: access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;accessClassInPackage.sun.swing&amp;quot;)&lt;/code&gt;と例外が発生してメニューが表示されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sun.swing.MenuItemLayoutHelper&lt;/code&gt;や、&lt;code&gt;sun.swing.MenuItemLayoutHelper.LayoutResult&lt;/code&gt;などの内部所有の&lt;code&gt;API&lt;/code&gt;を使用しているので、今後も使用できるか不明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paintText(...)&lt;/code&gt;、&lt;code&gt;paintCheckIcon(...)&lt;/code&gt;、&lt;code&gt;paintIcon(...)&lt;/code&gt;、&lt;code&gt;paintArrowIcon(...)&lt;/code&gt;などの&lt;code&gt;BasicMenuItemUI&lt;/code&gt;のプライベートなメソッドをほぼそのままコピーして使用している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentOrientation.RIGHT_TO_LEFT&lt;/code&gt;が設定されて、文字列が右から左に配置される場合は考慮していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JMenuItem&lt;/code&gt;の&lt;code&gt;Accelerator&lt;/code&gt;が、&lt;code&gt;JMenuItem#setLocale(Locale.ENGLISH)&lt;/code&gt;としても変化しない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6292739&quot;&gt;Bug ID: JDK-6292739 Locale change at runtime doesn&amp;#39;t affect text displayed for accelerator keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;から&lt;code&gt;Locale.getLocale()&lt;/code&gt;が&lt;code&gt;Locale.JAPAN&lt;/code&gt;などの場合、&lt;code&gt;KeyEvent#getKeyText(...)&lt;/code&gt;で取得できる文字列が翻訳されている

&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;Space&lt;/code&gt;が「スペース」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/event/KeyEvent.html#getKeyText%28int%29&quot;&gt;KeyEvent#getKeyText(int) (Java Platform SE 7)&lt;/a&gt;では、「これらの文字列は&lt;code&gt;awt.properties&lt;/code&gt;ファイルを変更することによりローカライズが可能です。」となっているが、&lt;code&gt;%JAVA_HOME%/jre/lib/rt.jar&lt;/code&gt;内に&lt;code&gt;sun/awt/resources/awt.class&lt;/code&gt;などの優先順位が高いクラスがあるため、&lt;code&gt;awt_ja.properties&lt;/code&gt;などを作成しても読み込まれない

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Xbootclasspath/p:&lt;/code&gt;などで、&lt;code&gt;rt.jar&lt;/code&gt;より先に以下のような&lt;code&gt;sun.awt.resources.awt_ja.class&lt;/code&gt;を読み込むよう指定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;package sun.awt.resources;
import java.util.ListResourceBundle;
//ant package
//cd target
//&quot;%JAVA_HOME%\bin\java&quot; -Xbootclasspath/p:example.jar -jar example.jar
public class awt_ja extends ListResourceBundle {
  @Override protected Object[][] getContents() {
    System.out.println(&quot;---- awt_ja ----&quot;);
    return new Object[][] { { &quot;AWT.space&quot;, &quot;XXXXX&quot; } };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1364746&quot;&gt;Swing - Localized Accelorator Keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/menuitemacceleratoralignment</link>
                <guid>http://terai.xrea.jp/swing/menuitemacceleratoralignment</guid>
                <pubDate>2013-09-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのColumn名を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;Column&lt;/code&gt;名を&lt;code&gt;JPopupMenu&lt;/code&gt;を使用して変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EditColumnName&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-axnByzuSfvw/Uj9Bj3mhK0I/AAAAAAAAB2U/GgzDuKdOje8/s800/EditColumnName.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JMenuItem editItem1 = new JMenuItem(
    new AbstractAction(&quot;Edit: setHeaderValue&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JTableHeader header = (JTableHeader)getInvoker();
    TableColumn column = header.getColumnModel().getColumn(index);
    String name = column.getHeaderValue().toString();
    textField.setText(name);
    int result = JOptionPane.showConfirmDialog(
        header.getTable(), textField, getValue(NAME).toString(),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
    if(result==JOptionPane.OK_OPTION) {
      String str = textField.getText().trim();
      if(!str.equals(name)) {
        column.setHeaderValue(str);
        header.repaint(header.getHeaderRect(index));
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Edit: setHeaderValue&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableColumn#getHeaderValue()&lt;/code&gt;でカラム名を取得して、&lt;code&gt;TableColumn#setHeaderValue(String)&lt;/code&gt;で変更&lt;/li&gt;
&lt;li&gt;モデルの&lt;code&gt;ColumnIdentifier&lt;/code&gt;は、変更されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Edit: setColumnIdentifiers&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTableModel#setColumnIdentifiers(Object[])&lt;/code&gt;でモデルの列識別子を置き換え、&lt;code&gt;JTableHeader&lt;/code&gt;を作り直しているため、列の入れ替えなどは初期化される&lt;/li&gt;
&lt;li&gt;ドラッグ中のカラムが存在する状態で、&lt;code&gt;DefaultTableModel#setColumnIdentifiers(Object[])&lt;/code&gt;を実行すると、&lt;code&gt;ArrayIndexOutOfBoundsException: -1&lt;/code&gt;が発生する

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;JTableHeader#setDraggedColumn(null);&lt;/code&gt;で、ドラッグ中のカラムをクリアしている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTableModel#setColumnIdentifiers(Object[])&lt;/code&gt;を使用する場合は、&lt;code&gt;table.getTableHeader().setReorderingAllowed(false);&lt;/code&gt;とドラッグによる列の順序変更を禁止しておいた方が良いかもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JMenuItem editItem2 = new JMenuItem(
        new AbstractAction(&quot;Edit: setColumnIdentifiers&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    final JTableHeader header = (JTableHeader)getInvoker();
    final JTable table = header.getTable();
    final DefaultTableModel model = (DefaultTableModel)table.getModel();
    String name = table.getColumnName(index);
    textField.setText(name);
    int result = JOptionPane.showConfirmDialog(
        table, textField, getValue(NAME).toString(),
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
    if(result==JOptionPane.OK_OPTION) {
      String str = textField.getText().trim();
      if(!str.equals(name)) {
        columnNames[table.convertColumnIndexToModel(index)] = str;
        header.setDraggedColumn(null); //XXX
        model.setColumnIdentifiers(columnNames);
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowSorterPopupMenu.html&quot;&gt;JTableHeaderにJPopupMenuを追加してソート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/editcolumnname</link>
                <guid>http://terai.xrea.jp/swing/editcolumnname</guid>
                <pubDate>2013-09-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontのアウトラインから輪郭を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Font&lt;/code&gt;から取得した字形の輪郭を抽出し、縁取りや内部の塗り潰しなどを行います。このサンプルは、&lt;a href=&quot;http://stackoverflow.com/questions/18686199/fill-unicode-characters-in-labels&quot;&gt;java - &amp;#39;Fill&amp;#39; Unicode characters in labels - Stack Overflow&lt;/a&gt;に投稿されているコードを参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FontSilhouette&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-kzMG9iEHFz4/UjWgNdHCh1I/AAAAAAAAB2A/0gpKBcNqz44/s800/FontSilhouette.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static Area getOuterShape(Shape shape) {
  Area area = new Area();
  double[] coords = new double[6];
  PathIterator pi = shape.getPathIterator(null);
  Path2D.Double path = null;
  while(!pi.isDone()) {
    int pathSegmentType = pi.currentSegment(coords);
    if(pathSegmentType == PathIterator.SEG_MOVETO) {
      if(area.isEmpty() || !area.contains(coords[0], coords[1])) {
        path = new Path2D.Double();
        path.moveTo(coords[0], coords[1]);
      }
    }else if(path==null) {
      pi.next();
      continue;
    }else if(pathSegmentType == PathIterator.SEG_LINETO) {
      path.lineTo(coords[0], coords[1]);
    }else if(pathSegmentType == PathIterator.SEG_QUADTO) {
      path.quadTo(coords[0], coords[1], coords[2], coords[3]);
    }else if(pathSegmentType == PathIterator.SEG_CUBICTO) {
      path.curveTo(coords[0], coords[1], coords[2],
                   coords[3], coords[4], coords[5]);
    }else if(pathSegmentType == PathIterator.SEG_CLOSE) {
      path.closePath();
      area.add(new Area(path));
      path = null;
    }else{
      System.err.println(&quot;Unexpected value! &quot; + pathSegmentType);
    }
    pi.next();
  }
  return area;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルの下二行は、チェスの駒の字形から輪郭を取得し、それを使って縁取り、内部の塗り潰しを行う&lt;code&gt;Icon&lt;/code&gt;を&lt;code&gt;JLabel&lt;/code&gt;に配置して表示しています。&lt;/p&gt;

&lt;p&gt;字形(&lt;code&gt;Shape&lt;/code&gt;)の輪郭は、&lt;code&gt;Shape#getPathIterator(...)&lt;/code&gt;で字形からパスを取得し、開始点が一番外側にあるパスの集合を&lt;code&gt;Path2D&lt;/code&gt;に変換、&lt;code&gt;Area&lt;/code&gt;に追加することで作成しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18686199/fill-unicode-characters-in-labels&quot;&gt;java - &amp;#39;Fill&amp;#39; Unicode characters in labels - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src.zip&lt;/code&gt;などがダウンロードできない状態(上げ忘れ？)だったのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-12-06 (金) 16:37:48&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fontsilhouette</link>
                <guid>http://terai.xrea.jp/swing/fontsilhouette</guid>
                <pubDate>2013-09-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneのHTMLDocumentからIDでElementを取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;に設定した&lt;code&gt;HTMLDocument&lt;/code&gt;を検索して&lt;code&gt;id&lt;/code&gt;属性を持つ&lt;code&gt;Element&lt;/code&gt;を取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HTMLAttributeID&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-qbmJcawN3vU/UiyAF7K-MRI/AAAAAAAABz0/i1Hw-dPyqSw/s800/HTMLAttributeID.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void traverseElementById(Element element) {
  if(element.isLeaf()) {
    checkID(element);
  }else{
    for(int i=0;i&amp;lt;element.getElementCount();i++) {
      Element child = element.getElement(i);
      checkID(child);
      if(!child.isLeaf()) {
        traverseElementById(child);
      }
    }
  }
}
private void checkID(Element element) {
  AttributeSet attrs = element.getAttributes();
  Object elementName = attrs.getAttribute(
      AbstractDocument.ElementNameAttribute);
  Object name = (elementName != null)
    ? null : attrs.getAttribute(StyleConstants.NameAttribute);
  HTML.Tag tag;
  if(name instanceof HTML.Tag) {
    tag = (HTML.Tag)name;
  }else{
    return;
  }
  textArea.append(String.format(&quot;%s%n&quot;, tag));
  if(tag.isBlock()) { //block
    Object bid = attrs.getAttribute(HTML.Attribute.ID);
    if(bid!=null) {
      textArea.append(String.format(&quot;block: id=%s%n&quot;, bid));
      addHighlight(element, true);
    }
  }else{ //inline
    Enumeration e = attrs.getAttributeNames();
    while(e.hasMoreElements()) {
      Object obj = attrs.getAttribute(e.nextElement());
      //System.out.println(&quot;AttributeNames: &quot;+obj);
      if(obj instanceof AttributeSet) {
        AttributeSet a = (AttributeSet)obj;
        Object iid = a.getAttribute(HTML.Attribute.ID);
        if(iid!=null) {
          textArea.append(String.format(&quot;inline: id=%s%n&quot;, iid));
          addHighlight(element, false);
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Element#getElement(id)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/html/HTMLDocument.html#getElement%28java.lang.String%29&quot;&gt;HTMLDocument#getElement(String)&lt;/a&gt;メソッドを使用して指定した&lt;code&gt;id&lt;/code&gt;を持つ&lt;code&gt;Element&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;これらの&lt;code&gt;Element&lt;/code&gt;は、&lt;code&gt;org.w3c.dom.Element&lt;/code&gt;ではなく、&lt;code&gt;javax.swing.text.Element&lt;/code&gt;インタフェースを実装する&lt;code&gt;HTMLDocument.BlockElement&lt;/code&gt;など

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.w3c.dom.Document#getElementById(String)&lt;/code&gt;などは使用できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;指定した&lt;code&gt;id&lt;/code&gt;の&lt;code&gt;Element&lt;/code&gt;が存在した場合、&lt;code&gt;editorPane.select(element.getStartOffset(), element.getEndOffset());&lt;/code&gt;で選択

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;element.getStartOffset()&lt;/code&gt;などで取得されるオフセットは、&lt;code&gt;JEditorPane&lt;/code&gt;に表示されない要素や属性は含まれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Highlight Element[@id]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;属性を持つ&lt;code&gt;Element&lt;/code&gt;をハイライト表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTMLDocument.BlockElement&lt;/code&gt;などには、&lt;code&gt;html&lt;/code&gt;の要素や属性が後で復元するための備考として&lt;code&gt;AttributeSet&lt;/code&gt;に保存されている

&lt;ul&gt;
&lt;li&gt;ブロック要素とインライン要素で属性の保存されている場所が異なる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultHighlighter#setDrawsLayeredHighlights(false)&lt;/code&gt;の場合、改行を含むハイライトや選択状態の描画がおかしくなる？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ParserDelegator&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ParserDelegator&lt;/code&gt;を使って文字列をパースし、&lt;code&gt;HTMLEditorKit.ParserCallback#handleStartTag(...)&lt;/code&gt;でタグの開始を見つけたら、&lt;code&gt;MutableAttributeSet#getAttribute(HTML.Attribute.ID);&lt;/code&gt;でそのタグの&lt;code&gt;id&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.swing.text.Element&lt;/code&gt;とは無関係に、&lt;code&gt;JEditorPane#getText()&lt;/code&gt;で取得した文字列を&lt;code&gt;html&lt;/code&gt;として解析している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;が設定された&lt;code&gt;JEditorPane&lt;/code&gt;から&lt;code&gt;getText()&lt;/code&gt;で取得された文字列には、&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;などのタグが自動的に補完されているので、元の&lt;code&gt;html&lt;/code&gt;テキストとは異なる点に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;System.out.println(&quot;ParserDelegator&quot;);
final String id = field.getText().trim();
final String text = editorPane.getText();
ParserDelegator delegator = new ParserDelegator();
try{
  delegator.parse(new StringReader(text), new HTMLEditorKit.ParserCallback() {
    @Override public void handleStartTag(
        HTML.Tag tag, MutableAttributeSet a, int pos) {
      Object attrid = a.getAttribute(HTML.Attribute.ID);
      textArea.append(String.format(&quot;%s@id=%s%n&quot;, tag, attrid));
      if(id.equals(attrid)) {
        textArea.append(String.format(&quot;found: pos=%d%n&quot;, pos));
        int endoffs = text.indexOf(&#39;&amp;gt;&#39;, pos);
        textArea.append(String.format(&quot;%s%n&quot;, text.substring(pos, endoffs+1)));
      }
    }
  }, Boolean.TRUE);
}catch(Exception ex) {
  ex.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/html/HTMLDocument.html&quot;&gt;HTMLDocument (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HTMLEditorKit.html&quot;&gt;JTextPaneで修飾したテキストをJTextAreaにHtmlソースとして表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/htmlattributeid</link>
                <guid>http://terai.xrea.jp/swing/htmlattributeid</guid>
                <pubDate>2013-09-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JOptionPaneを自動的に閉じる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JOptionPane&lt;/code&gt;にカウントダウンと自動クローズを行うための&lt;code&gt;JLabel&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AutomaticallyCloseDialog&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-NvrpIdRXy8M/UiMOJmS8OMI/AAAAAAAABzg/6QK49B0s-NE/s800/AutomaticallyCloseDialog.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;label.addHierarchyListener(new HierarchyListener() {
  private Timer timer = null;
  private AtomicInteger atomicDown = new AtomicInteger(SECONDS);
  @Override public void hierarchyChanged(HierarchyEvent e) {
    final JLabel l = (JLabel)e.getComponent();
    if((e.getChangeFlags() &amp;amp; HierarchyEvent.SHOWING_CHANGED)!=0) {
      if(l.isShowing()) {
        textArea.append(&quot;isShowing=true\n&quot;);
        atomicDown.set(SECONDS);
        l.setText(String.format(&quot;Closing in %d seconds&quot;, SECONDS));
        timer = new Timer(1000, new ActionListener() {
          //private int countdown = SECONDS;
          @Override public void actionPerformed(ActionEvent e) {
            //int i = --countdown;
            int i = atomicDown.decrementAndGet();
            l.setText(String.format(&quot;Closing in %d seconds&quot;, i));
            if(i&amp;lt;=0) {
              Window w = SwingUtilities.getWindowAncestor(l);
              if(w!=null &amp;amp;&amp;amp; timer!=null &amp;amp;&amp;amp; timer.isRunning()) {
                textArea.append(&quot;Timer: timer.stop()\n&quot;);
                timer.stop();
                textArea.append(&quot;window.dispose()\n&quot;);
                w.dispose();
              }
            }
          }
        });
        timer.start();
      }else{
        textArea.append(&quot;isShowing=false\n&quot;);
        if(timer!=null &amp;amp;&amp;amp; timer.isRunning()) {
          textArea.append(&quot;timer.stop()\n&quot;);
          timer.stop();
          timer = null;
        }
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.awt.event.HierarchyListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HierarchyListener&lt;/code&gt;を使って、&lt;code&gt;JLabel&lt;/code&gt;の表示状態の変化を監視

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OptionPaneDefaultFocus.html&quot;&gt;JOptionPaneのデフォルトフォーカス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;の表示状態の変化し、&lt;code&gt;JLabel#isShowing()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;となって親の&lt;code&gt;JOptionPane&lt;/code&gt;が表示されたら、&lt;code&gt;Timer#start()&lt;/code&gt;でカウントダウンを開始

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ShowingDisplayableVisible.html&quot;&gt;JComponentの表示状態&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;指定した時間が経過したら、&lt;code&gt;Window#dispose()&lt;/code&gt;を使って、親の&lt;code&gt;JOptionPane&lt;/code&gt;を自動的に閉じる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Window#dispose()&lt;/code&gt;を使うので、&lt;code&gt;JOptionPane.showConfirmDialog(...)&lt;/code&gt;の戻り値は、&lt;code&gt;JOptionPane.CLOSED_OPTION&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ShowingDisplayableVisible.html&quot;&gt;JComponentの表示状態&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OptionPaneDefaultFocus.html&quot;&gt;JOptionPaneのデフォルトフォーカス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10021969/java-how-to-continuously-update-jlabel-which-uses-atomicinteger-to-countdown-af&quot;&gt;swing - Java: How to continuously update JLabel which uses atomicInteger to countdown after ActionListener - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/automaticallyclosedialog</link>
                <guid>http://terai.xrea.jp/swing/automaticallyclosedialog</guid>
                <pubDate>2013-09-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DefaultHighlighterの描画方法を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultHighlighter&lt;/code&gt;の描画方法を変更して、文字列が選択されている場合のハイライト表示を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DrawsLayeredHighlights&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-yXndYI0LTyA/UhoR8XLek3I/AAAAAAAABy0/BpEfTjjAGwU/s800/DrawsLayeredHighlights.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultHighlighter dh = (DefaultHighlighter)textArea.getHighlighter();
dh.setDrawsLayeredHighlights(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultHighlighter#setDrawsLayeredHighlights(true)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;li&gt;文字列の描画直前にハイライトも描画されるため、文字列の選択描画より手前にハイライトの矩形が表示される&lt;/li&gt;
&lt;li&gt;選択時の文字色が反転する場合(&lt;code&gt;MetalLookAndFeel&lt;/code&gt;以外の&lt;code&gt;LookAndFeel&lt;/code&gt;など)、ハイライトの色によっては見づらくなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultHighlighter#setDrawsLayeredHighlights(false)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;選択されている文字列の背景だけではなく、テキストエリアの右端や、範囲内の空行も選択色で塗り潰される&lt;/li&gt;
&lt;li&gt;文字列の選択描画より奥にハイライトが表示されるため、ハイライトの矩形は塗り潰れさて非表示となる&lt;/li&gt;
&lt;li&gt;文字列選択で、ハイライトされている箇所がわかりづらくなる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;と合わせて使用すると、改行を含む文字列を選択すると選択の描画がおかしくなる？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/DefaultHighlighter.html#setDrawsLayeredHighlights%28boolean%29&quot;&gt;DefaultHighlighter#setDrawsLayeredHighlights(boolean) (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/drawslayeredhighlights</link>
                <guid>http://terai.xrea.jp/swing/drawslayeredhighlights</guid>
                <pubDate>2013-08-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ImageIconのリソースを開放してAnimatedGifを最初から再生する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;などのコンポーネントに設定した&lt;code&gt;AnimatedGif&lt;/code&gt;のリソースを一旦解放して最初から再生します。&lt;a href=&quot;http://stackoverflow.com/questions/18270701/animated-imageicon-as-button&quot;&gt;java - Animated ImageIcon as Button - Stack Overflow&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RestartAnimatedGif&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-qShu8SKEKus/UhDUybKOCYI/AAAAAAAAByg/QRDcWyIqcmU/s800/RestartAnimatedGif.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final ImageIcon animatedIcon = new ImageIcon(url);
JButton button = new JButton(icon9) {
  @Override protected void fireStateChanged() {
    ButtonModel m = getModel();
    if(isRolloverEnabled() &amp;amp;&amp;amp; m.isRollover()) {
      animatedIcon.getImage().flush();
    }
    super.fireStateChanged();
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Image#flush()&lt;/code&gt;メソッドを使用して&lt;code&gt;Image&lt;/code&gt;オブジェクトのリソースを解放することで、&lt;code&gt;Animated GIF&lt;/code&gt;画像のアニメーションを初期状態までリセットしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;JButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton#setRolloverIcon(...)&lt;/code&gt;で&lt;code&gt;Animated GIF&lt;/code&gt;を設定し、マウスのロールオーバーで&lt;code&gt;Image#flush()&lt;/code&gt;され、カウントダウンアニメーションが最初からスタート&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#setIcon(...)&lt;/code&gt;には先頭画像のアイコン、&lt;code&gt;JButton#setPressedIcon(...)&lt;/code&gt;には、空アイコンを設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;JLabel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;マウスリスナーを追加し、クリックで&lt;code&gt;Image#flush()&lt;/code&gt;が呼ばれて、アニメーションが再開&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;で、&lt;code&gt;Image#flush()&lt;/code&gt;されると、同じ&lt;code&gt;Image&lt;/code&gt;オブジェクトを使用しているのでアニメーションが止まる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/18270701/animated-imageicon-as-button&quot;&gt;java - Animated ImageIcon as Button - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/Image.html#flush%28%29&quot;&gt;Image#flush() (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/restartanimatedgif</link>
                <guid>http://terai.xrea.jp/swing/restartanimatedgif</guid>
                <pubDate>2013-08-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonに9分割した画像を使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;を拡大縮小しても四隅などのサイズが変更しないようにように&lt;code&gt;9&lt;/code&gt;分割した画像を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NineSliceScalingButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-yYRfTw-3_BU/UgaFQAAiUcI/AAAAAAAABx4/koHqjZ3o36Q/s800/NineSliceScalingButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class NineSliceScalingIcon implements Icon {
  private final BufferedImage image;
  private final int a, b, c, d;
  private int width, height;
  public NineSliceScalingIcon(BufferedImage image, int a, int b, int c, int d) {
    this.image = image;
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  @Override public int getIconWidth() {
    return width;
  }
  @Override public int getIconHeight() {
    return Math.max(image.getHeight(null), height);
  }
  @Override public void paintIcon(Component cmp, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(
        RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

    Insets i = ((JComponent)cmp).getBorder().getBorderInsets(cmp);
    //g2.translate(x, y); //JDK 1.7.0 などで描画がおかしい？

    int iw = image.getWidth(cmp);
    int ih = image.getHeight(cmp);
    width  = cmp.getWidth()-i.left-i.right;
    height = cmp.getHeight()-i.top-i.bottom;

    g2.drawImage(image.getSubimage(a, c, iw - a - b, ih - c - d),
                 a, c, width - a - b, height - c - d, cmp);

    if(a&amp;gt;0 &amp;amp;&amp;amp; b&amp;gt;0 &amp;amp;&amp;amp; c&amp;gt;0 &amp;amp;&amp;amp; d&amp;gt;0) {
      g2.drawImage(image.getSubimage(a, 0, iw - a - b, c),
                   a, 0, width - a - b, c, cmp);
      g2.drawImage(image.getSubimage(a, ih - d, iw - a - b, d),
                   a, height - d, width - a - b, d, cmp);
      g2.drawImage(image.getSubimage(0, c, a, ih - c - d),
                   0, c, a, height - c - d, cmp);
      g2.drawImage(image.getSubimage(iw - b, c, b, ih - c - d),
                   width - b, c, b, height - c - d, cmp);

      g2.drawImage(image.getSubimage(0, 0, a, c), 0, 0, cmp);
      g2.drawImage(image.getSubimage(iw - b, 0, b, c), width - b, 0, cmp);
      g2.drawImage(image.getSubimage(0, ih - d, a, d), 0, height - d, cmp);
      g2.drawImage(image.getSubimage(iw - b, ih - d, b, d), width - b, height - d, cmp);
    }
    g2.dispose();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BufferedImage#getSubimage&lt;/code&gt;で元画像を&lt;code&gt;9&lt;/code&gt;分割し、四隅はサイズ変更なし、上下辺は幅のみ拡大縮小、左右辺は高さのみ拡大縮小、中央は幅高さが拡大縮小可能になるよう、&lt;code&gt;Graphics#drawImage(...)&lt;/code&gt;のスケーリングを利用して描画しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;四隅などの固定サイズ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: 左上下隅の幅&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: 右上下隅の幅&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: 左右上隅の高さ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: 左右下隅の高さ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rwillustrator.blogspot.jp/2007/04/understanding-9-slice-scaling.html&quot;&gt;Real World Illustrator: Understanding 9-Slice Scaling&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;テスト用の画像(&lt;code&gt;symbol_scale_2.jpg&lt;/code&gt;)を拝借しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/nineslicescalingbutton</link>
                <guid>http://terai.xrea.jp/swing/nineslicescalingbutton</guid>
                <pubDate>2013-08-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPane内にある複数Componentを配置したJPanelをJLayerを使ってドラッグスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;複数のネストした&lt;code&gt;Component&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;のドラッグイベントを、&lt;code&gt;JScrollPane&lt;/code&gt;をラップした&lt;code&gt;JLayer&lt;/code&gt;で受け取ってスクロール可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragScrollLayer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-5zBF0JOr6kM/UfuiEj7Do7I/AAAAAAAABxg/7tKYnrOl9eo/s800/DragScrollLayer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DragScrollLayerUI extends LayerUI&amp;lt;JScrollPane&amp;gt; {
  private final Point pp = new Point();
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    JLayer jlayer = (JLayer)c;
    jlayer.setLayerEventMask(
        AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
  }
  @Override public void uninstallUI(JComponent c) {
    JLayer jlayer = (JLayer)c;
    jlayer.setLayerEventMask(0);
    super.uninstallUI(c);
  }
  @Override protected void processMouseEvent(
      MouseEvent e, JLayer&amp;lt;? extends JScrollPane&amp;gt; l) {
    Component c = e.getComponent();
    if(c instanceof JScrollBar || c instanceof JSlider) {
      return;
    }
    if(e.getID()==MouseEvent.MOUSE_PRESSED) {
      JViewport vport = l.getView().getViewport();
      Point cp = SwingUtilities.convertPoint(c, e.getPoint(), vport);
      pp.setLocation(cp);
    }
  }
  @Override protected void processMouseMotionEvent(
      MouseEvent e, JLayer&amp;lt;? extends JScrollPane&amp;gt; l) {
    Component c = e.getComponent();
    if(c instanceof JScrollBar || c instanceof JSlider) {
      return;
    }
    if(e.getID()==MouseEvent.MOUSE_DRAGGED) {
      JViewport vport = l.getView().getViewport();
      JComponent cmp = (JComponent)vport.getView();
      Point cp = SwingUtilities.convertPoint(c, e.getPoint(), vport);
      Point vp = vport.getViewPosition();
      vp.translate(pp.x-cp.x, pp.y-cp.y);
      cmp.scrollRectToVisible(new Rectangle(vp, vport.getSize()));
      pp.setLocation(cp);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;DragScrollListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeDragScroll.html&quot;&gt;JTreeの余白をドラッグしてスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;このリスナーを追加した一つの&lt;code&gt;Component&lt;/code&gt;をドラッグしてスクロールが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt;を掴んでスクロールすることができるが、その子コンポーネントの&lt;code&gt;JTabbedPane&lt;/code&gt;などをドラッグしてもスクロールはできない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;DragScrollLayer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;すべての下位コンポーネントの&lt;code&gt;MouseEvent&lt;/code&gt;をキャッチするよう&lt;code&gt;JLayer#setLayerEventMask(...)&lt;/code&gt;と設定した&lt;code&gt;JLayer&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;JLayer&lt;/code&gt;で&lt;code&gt;JScrollPane&lt;/code&gt;をラップし、子にマウスイベントを消費するコンポーネントがあっても、ビューである&lt;code&gt;JPanel&lt;/code&gt;をドラッグに応じてスクロール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;や&lt;code&gt;JSlider&lt;/code&gt;のように、ノブのドラッグを使用するコンポーネントは二重にスクロールしてしまうので除外&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://java-swing-tips.blogspot.jp/2009/03/mouse-dragging-viewport-scroll.html&quot;&gt;Java Swing Tips: Mouse Dragging ViewPort Scroll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeDragScroll.html&quot;&gt;JTreeの余白をドラッグしてスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragscrolllayer</link>
                <guid>http://terai.xrea.jp/swing/dragscrolllayer</guid>
                <pubDate>2013-08-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの検索結果をRowFilterとHighlighterで強調表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;で正規表現による検索結果を&lt;code&gt;RowFilter&lt;/code&gt;と&lt;code&gt;Highlighter&lt;/code&gt;を使用して表現します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableHighlightRegexFilter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-9b6L1m5fhBk/UfUzbWaYGtI/AAAAAAAABw8/xhrIa_pJXls/s800/TableHighlightRegexFilter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightTableCellRenderer extends JTextField implements TableCellRenderer {
  private static final Color backgroundSelectionColor = new Color(220, 240, 255);
  private static final Highlighter.HighlightPainter highlightPainter
    = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
  private String pattern = &quot;&quot;;
  private String prev = null;

  public boolean setPattern(String str) {
    if(str==null || str.equals(pattern)) {
      return false;
    }else{
      prev = pattern;
      pattern = str;
      return true;
    }
  }
  public HighlightTableCellRenderer() {
    super();
    setOpaque(true);
    setBorder(BorderFactory.createEmptyBorder());
    setForeground(Color.BLACK);
    setBackground(Color.WHITE);
    setEditable(false);
  }
  @Override public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected,
        boolean hasFocus, int row, int column) {
    String txt = value!=null ? value.toString() : &quot;&quot;;
    Highlighter highlighter = getHighlighter();
    highlighter.removeAllHighlights();
    setText(txt);
    setBackground(isSelected ? backgroundSelectionColor : Color.WHITE);
    if(pattern!=null &amp;amp;&amp;amp; !pattern.isEmpty() &amp;amp;&amp;amp; !pattern.equals(prev)) {
      Matcher matcher = Pattern.compile(pattern).matcher(txt);
      if(matcher.find()) {
        int start = matcher.start();
        int end   = matcher.end();
        try{
          highlighter.addHighlight(start, end, highlightPainter);
        }catch(BadLocationException | PatternSyntaxException e) {
          e.printStackTrace();
        }
      }
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;セル中文字列のハイライト

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HighlightWordInNode.html&quot;&gt;JTreeのノード中の文字列をハイライトする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;を継承する&lt;code&gt;TableCellRenderer&lt;/code&gt;を作成し、&lt;code&gt;JTextField#getHighlighter()#addHighlight(...)&lt;/code&gt;で検索結果の文字列をハイライト表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;行のフィルタリング

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowFilter.html&quot;&gt;RowFilterでJTableの行をフィルタリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RowFilter.regexFilter(pattern)&lt;/code&gt;で正規表現を使用するフィルタを作成し、その検索にマッチする行以外は非表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HighlightWordInNode.html&quot;&gt;JTreeのノード中の文字列をハイライトする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowFilter.html&quot;&gt;RowFilterでJTableの行をフィルタリング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablehighlightregexfilter</link>
                <guid>http://terai.xrea.jp/swing/tablehighlightregexfilter</guid>
                <pubDate>2013-07-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>NimbusLookAndFeelを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;一覧から&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;を名前で検索取得して使用します。&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/nimbus.html&quot;&gt;Nimbus Look and Feel (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;などのサンプルから引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NimbusLookAndFeel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-40dXjNq1HbU/UewL67WFpWI/AAAAAAAABwg/zOHVr2U7KiM/s800/NimbusLookAndFeel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  for(UIManager.LookAndFeelInfo laf: UIManager.getInstalledLookAndFeels()) {
    if(&quot;Nimbus&quot;.equals(laf.getName())) {
      UIManager.setLookAndFeel(laf.getClassName());
    }
  }
}catch(Exception e) {
  //e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;で&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;のパッケージが移動されて完全クラス名が変更されたので、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;のインスタンスを生成して設定するのではなく、一旦&lt;code&gt;UIManager.getInstalledLookAndFeels()&lt;/code&gt;で全&lt;code&gt;LookAndFeelInfo&lt;/code&gt;を取得し、名前が&lt;code&gt;Nimbus&lt;/code&gt;となっている&lt;code&gt;LookAndFeel&lt;/code&gt;を検索してからその完全クラス名を取得しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;: &lt;code&gt;com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;: &lt;code&gt;javax.swing.plaf.nimbus.NimbusLookAndFeel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/nimbus.html&quot;&gt;Nimbus Look and Feel (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/nimbuslookandfeel</link>
                <guid>http://terai.xrea.jp/swing/nimbuslookandfeel</guid>
                <pubDate>2013-07-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの不確定進捗サイクル時間を設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;の不確定進捗状態アニメーションで使用するサイクル時間などを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IndeterminateCycleTime&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/--xwJeUKsm8k/UeK6iFE0vkI/AAAAAAAABvw/SNNt1mvM4_c/s800/IndeterminateCycleTime.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;ProgressBar.repaintInterval&quot;, (Integer)repaintIntervalSpinner.getValue());
UIManager.put(&quot;ProgressBar.cycleTime&quot;,       (Integer)cycleTimeSpinner.getValue());
progressBar.setIndeterminate(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;UIManager&lt;/code&gt;を使って&lt;code&gt;JProgressBar&lt;/code&gt;の不確定進捗のアニメーションで使用するサイクル時間と再ペイント間隔をミリ秒で指定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;サイクル時間

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ProgressBar.cycleTime&amp;quot;, 1000);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;再ペイント間隔

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ProgressBar.repaintInterval&amp;quot;, 10);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;注

&lt;ul&gt;
&lt;li&gt;サイクル時間が再ペイント間隔の偶数倍でない場合、サイクル時間は自動的にそうなるように増加する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;などの場合、&lt;code&gt;JProgressBar#setIndeterminate(true);&lt;/code&gt;が実行されたときに、これらの値は更新される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/technotes/guides/swing/1.4/pb.html&quot;&gt;不確定進捗バー - Java™ 2 SDK, Standard Edition, v 1.4 での Swing の変更点および新機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/indeterminatecycletime</link>
                <guid>http://terai.xrea.jp/swing/indeterminatecycletime</guid>
                <pubDate>2013-07-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FlatteningPathIteratorでShape上の点を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FlatteningPathIterator&lt;/code&gt;を使って平坦化された&lt;code&gt;Shape&lt;/code&gt;上の座標点を取得、描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FlatteningPathIterator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-3GsdpxueSG8/Udl1tOfisII/AAAAAAAABvc/SBOIf1ZPPUk/s800/FlatteningPathIterator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;PathIterator i = new FlatteningPathIterator(shape.getPathIterator(null), 1.0);
float[] coords = new float[6];
while(!i.isDone()) {
  i.currentSegment(coords);
  g2.fillRect((int)(coords[0]-.5), (int)(coords[1]-.5), 2, 2);
  i.next();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ellipse2D&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new Ellipse2D.Double&lt;/code&gt;で作成した&lt;code&gt;Shape&lt;/code&gt;を描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Polygon x 2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;上記の楕円を&lt;code&gt;360/60&lt;/code&gt;度ごとに曲線上の座標点を取得し、&lt;code&gt;Polygon&lt;/code&gt;に変換して直線で描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static Polygon convertEllipse2Polygon(Ellipse2D e) {
  Rectangle b = e.getBounds();
  int r1 = b.width/2, r2 = b.height/2;
  int x0 = b.x + r1,  y0 = b.y + r2;
  int v  = 60;
  double a = 0.0, d = 2*Math.PI/v;
  Polygon polygon = new Polygon();
  for(int i=0; i&amp;lt;v; i++) {
    polygon.addPoint((int)(r1*Math.cos(a)+x0), (int)(r2*Math.sin(a)+y0));
    a+=d;
  }
  return polygon;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FlatteningPathIterator&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;上記の楕円から取得した&lt;code&gt;PathIterator&lt;/code&gt;を&lt;code&gt;FlatteningPathIterator&lt;/code&gt;で平坦化して曲線上の等間隔な座標点を取得し、&lt;code&gt;Polygon&lt;/code&gt;に変換して直線で描画&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://java-sl.com/tip_flatteningpathiterator_moving_shape.html&quot;&gt;FlatteningPathIterator and moving object along Shape path.&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://stackoverflow.com/questions/17272912/converting-an-ellipse2d-to-polygon&quot;&gt;java - Converting an Ellipse2D to Polygon - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlatteningPathIterator&lt;/code&gt;を使う方法なら、どんな&lt;code&gt;Shape&lt;/code&gt;でもその線上から等間隔な座標点を簡単に取得できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/geom/FlatteningPathIterator.html&quot;&gt;FlatteningPathIterator (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-sl.com/tip_flatteningpathiterator_moving_shape.html&quot;&gt;FlatteningPathIterator and moving object along Shape path.&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;このサイトの例のように、&lt;code&gt;Shape&lt;/code&gt;のパスに添ってアニメーションさせる場合などに便利です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/flatteningpathiterator</link>
                <guid>http://terai.xrea.jp/swing/flatteningpathiterator</guid>
                <pubDate>2013-07-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノード中の文字列をハイライトする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードから文字列を検索して、&lt;code&gt;HighlightPainter&lt;/code&gt;で強調表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HighlightWordInNode&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-rBf-D-8MbOM/UdBIT7ksWjI/AAAAAAAABvI/m_v7K_LuLao/s800/HighlightWordInNode.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightTreeCellRenderer extends JTextField
                                implements TreeCellRenderer {
  Color backgroundSelectionColor = new Color(220, 240, 255);
  Highlighter.HighlightPainter highlightPainter =
    new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
  public String q;
  public HighlightTreeCellRenderer() {
    super();
    setOpaque(true);
    setBorder(BorderFactory.createEmptyBorder());
    setForeground(Color.BLACK);
    setBackground(Color.WHITE);
    setEditable(false);
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    String txt = value!=null ? value.toString() : &quot;&quot;;
    getHighlighter().removeAllHighlights();
    setText(txt);
    setBackground(isSelected ? backgroundSelectionColor : Color.WHITE);
    if(q!=null &amp;amp;&amp;amp; !q.isEmpty() &amp;amp;&amp;amp; txt.startsWith(q)) {
      try {
        getHighlighter().addHighlight(0, q.length(), highlightPainter);
      } catch(BadLocationException e) {
        e.printStackTrace();
      }
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;TreeCellRenderer&lt;/code&gt;に&lt;code&gt;JLabel&lt;/code&gt;ではなく、&lt;code&gt;JTextField&lt;/code&gt;を使用し&lt;code&gt;JTextField#getHighlighter()#addHighlight(...)&lt;/code&gt;で検索中の文字列をハイライト表示しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeNodeHighlightSearch.html&quot;&gt;JTreeで条件に一致するノードを検索しハイライト&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、ノードの色を変更してハイライト表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Highlighter.html&quot;&gt;Highlighterで文字列をハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/highlightwordinnode</link>
                <guid>http://terai.xrea.jp/swing/highlightwordinnode</guid>
                <pubDate>2013-07-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerを使ってJProgressBarの色相を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使って&lt;code&gt;JProgressBar&lt;/code&gt;の色相を緑から赤に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColorChannelSwapFilter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-BOomq0cC-U4/UceBZ2TsWWI/AAAAAAAABug/yoXs3wbBVGk/s800/ColorChannelSwapFilter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BlockedColorLayerUI extends LayerUI&amp;lt;JProgressBar&amp;gt;{
  public boolean isPreventing = false;
  private BufferedImage bi;
  private int prevw = -1;
  private int prevh = -1;
  @Override public void paint(Graphics g, JComponent c) {
    if(isPreventing) {
      JLayer jlayer = (JLayer)c;
      JProgressBar progress = (JProgressBar)jlayer.getView();
      int w = progress.getSize().width;
      int h = progress.getSize().height;

      if(bi==null || w!=prevw || h!=prevh) {
        bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
      }
      prevw = w;
      prevh = h;

      Graphics2D g2 = bi.createGraphics();
      super.paint(g2, c);
      g2.dispose();

      Image image = c.createImage(
          new FilteredImageSource(
              bi.getSource(), new RedGreenChannelSwapFilter()));
      g.drawImage(image, 0, 0, c);
    }else{
      super.paint(g, c);
    }
  }
}

class RedGreenChannelSwapFilter extends RGBImageFilter{
  @Override public int filterRGB(int x, int y, int argb) {
    int r = (int)((argb &amp;gt;&amp;gt; 16) &amp;amp; 0xff);
    int g = (int)((argb &amp;gt;&amp;gt;  8) &amp;amp; 0xff);
    int b = (int)((argb    ) &amp;amp; 0xff);
    return (argb &amp;amp; 0xff000000) | (g&amp;lt;&amp;lt;16) | (r&amp;lt;&amp;lt;8) | (b);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setStringPainted(true)&lt;/code&gt;: 上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JProgressBar#setStringPainted(true)&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setStringPainted(true)&lt;/code&gt;: 下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JProgressBar#setStringPainted(true)&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;チェックボックスがチェックされると、&lt;code&gt;JProgressBar#setForeground(Color)&lt;/code&gt;で色が変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setStringPainted(false)&lt;/code&gt;: 上

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JProgressBar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setStringPainted(false)&lt;/code&gt;: 上

&lt;ul&gt;
&lt;li&gt;チェックボックスがチェックされると、&lt;code&gt;JLayer&lt;/code&gt;を使って色を変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;での中断状態風に、緑を赤に入れ替えるため、&lt;code&gt;RGBImageFilter#filterRGB(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RatingLabel.html&quot;&gt;RGBImageFilterでアイコンの色調を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressStringLayer.html&quot;&gt;JProgressBarの文字列をJLayerを使って表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressBarSelectionColor.html&quot;&gt;JProgressBarの進捗状況と進捗文字列色を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;JProgressBar#setOpaque(true)&lt;/code&gt;として&lt;code&gt;JLayer&lt;/code&gt;と&lt;code&gt;RedGreenChannelSwapFilter&lt;/code&gt;を使用しないと、フチが半透明にならない。また&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;JProgressBar#setForeground(Color)&lt;/code&gt;で変化するのは他の&lt;code&gt;LookAndFeel&lt;/code&gt;とは異なり、進捗文字列になる。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-25 (火) 20:51:09&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/colorchannelswapfilter</link>
                <guid>http://terai.xrea.jp/swing/colorchannelswapfilter</guid>
                <pubDate>2013-06-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JRootPaneにリサイズのための装飾を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;自体の装飾を削除し、&lt;code&gt;JRootPane&lt;/code&gt;にリサイズのためのウィンドウ装飾(透明)を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowDecorationStyle&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-6jloCHHvTmw/Ub30100G84I/AAAAAAAABuM/AHxMNa5jyB0/s800/WindowDecorationStyle.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame frame = new JFrame();
try{
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
}catch(Exception e) {
  e.printStackTrace();
}
//XXX: JFrame frame = new JFrame();
frame.setUndecorated(true);

JRootPane root = frame.getRootPane();
root.setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
JLayeredPane layeredPane = root.getLayeredPane();
Component c = layeredPane.getComponent(1);
if(c instanceof JComponent) {
  JComponent orgTitlePane = (JComponent)c;
  orgTitlePane.setVisible(false);
  //layeredPane.remove(orgTitlePane);
}
//JComponent dummyTitlePane = new JLabel();
//layeredPane.add(dummyTitlePane, JLayeredPane.FRAME_CONTENT_LAYER);
//dummyTitlePane.setVisible(true);

JPanel p = new JPanel(new BorderLayout());
p.setBorder(BorderFactory.createEmptyBorder(2,2,2,2));
p.setBackground(new Color(1f,1f,1f,.01f));

p.add(internalFrame);
frame.getContentPane().add(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;の装飾を削除

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame#setUndecorated(true);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;を&lt;code&gt;ContentPane&lt;/code&gt;に追加

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InternalFrameTitleBar.html&quot;&gt;JInternalFrameをJFrameとして表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;の背景色を&lt;code&gt;JFrame#setBackground(new Color(0,0,0,0));&lt;/code&gt;で透明化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JRootPane&lt;/code&gt;に装飾を追加、変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JRootPane#setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);&lt;/code&gt;で装飾を追加し、リサイズのための&lt;code&gt;MouseMotionListener&lt;/code&gt;などを利用

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CustomDecoratedFrame.html&quot;&gt;JFrameのタイトルバーなどの装飾を独自のものにカスタマイズする&lt;/a&gt;は、このリサイズのための&lt;code&gt;MouseMotionListener&lt;/code&gt;も独自に追加している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;からタイトルバーを削除

&lt;ul&gt;
&lt;li&gt;上辺でリサイズできない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マウスでリサイズ可能な領域を作成するために、&lt;code&gt;ContentPane&lt;/code&gt;にほぼ透明な&lt;code&gt;Border&lt;/code&gt;をもつ&lt;code&gt;JPanel&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;のみ&lt;code&gt;LookAndFeel#getSupportsWindowDecorations()&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を変更する場合は、&lt;code&gt;ContentPane&lt;/code&gt;以下から更新することで、&lt;code&gt;JRootPane#setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);&lt;/code&gt;が無効にならないようにする必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;for(Window window: Frame.getWindows()) {
  if(window instanceof RootPaneContainer) {
    RootPaneContainer rpc = (RootPaneContainer)window;
    SwingUtilities.updateComponentTreeUI(rpc.getContentPane());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InternalFrameTitleBar.html&quot;&gt;JInternalFrameをJFrameとして表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CustomDecoratedFrame.html&quot;&gt;JFrameのタイトルバーなどの装飾を独自のものにカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowdecorationstyle</link>
                <guid>http://terai.xrea.jp/swing/windowdecorationstyle</guid>
                <pubDate>2013-06-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの文字列をJLayerを使って表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;垂直&lt;code&gt;JProgressBar&lt;/code&gt;の文字列を&lt;code&gt;JLayer&lt;/code&gt;を使って横組で表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressStringLayer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-ATDPf7XMEzg/UbTLqsulmsI/AAAAAAAABt0/_0ZOg11jmXk/s800/ProgressStringLayer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JLabel label = new JLabel(&quot;000/100&quot;);
label.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
LayerUI&amp;lt;JProgressBar&amp;gt; layerUI = new LayerUI&amp;lt;JProgressBar&amp;gt;() {
  private final JPanel rubberStamp = new JPanel();
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    Dimension d = label.getPreferredSize();
    int x = (c.getWidth()  - d.width)  / 2;
    int y = (c.getHeight() - d.height) / 2;
    JLayer jlayer = (JLayer)c;
    JProgressBar progress = (JProgressBar)jlayer.getView();
    int iv = (int)(100 * progress.getPercentComplete());
    label.setText(String.format(&quot;%03d/100&quot;, iv));
    //label.setText(progress.getString());
    SwingUtilities.paintComponent(
      g, label, rubberStamp, x, y, d.width, d.height);
  }
};
JProgressBar progressBar = new JProgressBar(model) {
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    Insets i = label.getInsets();
    d.width = label.getPreferredSize().width + i.left + i.right;
    return d;
  }
};
progressBar.setOrientation(SwingConstants.VERTICAL);
progressBar.setStringPainted(false);
JComponent c = new JLayer&amp;lt;JProgressBar&amp;gt;(progressBar, layerUI);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一番左

&lt;ul&gt;
&lt;li&gt;デフォルトの垂直&lt;code&gt;JProgressBar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;左から二番目

&lt;ul&gt;
&lt;li&gt;文字列表示有りの垂直&lt;code&gt;JProgressBar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右から二番目

&lt;ul&gt;
&lt;li&gt;垂直&lt;code&gt;JProgressBar&lt;/code&gt;に&lt;code&gt;BorderLayout&lt;/code&gt;を設定して、&lt;code&gt;JLabel&lt;/code&gt;を配置&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressStringAlignment.html&quot;&gt;JProgressBarの進捗文字列の字揃えを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;の幅と任意の余白から、垂直&lt;code&gt;JProgressBar&lt;/code&gt;の幅を決定するよう、&lt;code&gt;JProgressBar#getPreferredSize()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一番右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLayer&lt;/code&gt;を使って、垂直&lt;code&gt;JProgressBar&lt;/code&gt;上に文字列を描画&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;の幅と任意の余白から、垂直&lt;code&gt;JProgressBar&lt;/code&gt;の幅を決定するよう、&lt;code&gt;JProgressBar#getPreferredSize()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16934009/is-it-possible-to-save-text-horizontal-in-vertical-jprogressbar&quot;&gt;java - Is it possible to save text horizontal in vertical JProgressbar - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressStringAlignment.html&quot;&gt;JProgressBarの進捗文字列の字揃えを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progressstringlayer</link>
                <guid>http://terai.xrea.jp/swing/progressstringlayer</guid>
                <pubDate>2013-06-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerの表記を16進数にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;の表記を&lt;code&gt;16&lt;/code&gt;進数にして、その&lt;code&gt;Unicode&lt;/code&gt;コードポイントに割り当てられた文字を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HexFormatterSpinner&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-eTZU_kuJGK4/UauUgRcPuTI/AAAAAAAABtc/7FNouA9JcLI/s800/HexFormatterSpinner.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultFormatter hexformatter = new DefaultFormatter() {
  @Override public Object stringToValue(String text) throws ParseException {
    try{
      return Integer.valueOf(text, 16);
    }catch(NumberFormatException nfe) {
      throw new ParseException(text, 0);
    }
  }
  private final String MASK = &quot;000000&quot;;
  @Override public String valueToString(Object value) throws ParseException {
    String str = MASK + Integer.toHexString((Integer)value).toUpperCase();
    int i = str.length() - MASK.length();
    return str.substring(i);
  }
};
hexformatter.setValueClass(Integer.class);
hexformatter.setOverwriteMode(true);

&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DefaultFormatter#stringToValue(String)&lt;/code&gt;と&lt;code&gt;DefaultFormatter#valueToString(Object)&lt;/code&gt;をオーバーライドして、&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;0x10FFFF&lt;/code&gt;までの整数を&lt;code&gt;16&lt;/code&gt;進数で表示する&lt;code&gt;Formatter&lt;/code&gt;を作成し、&lt;code&gt;JSpinner&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;から取得した数値(コードポイント)から文字を生成する時、サロゲートペアなどの基本多言語面(&lt;code&gt;BMP&lt;/code&gt;)外に対応するために以下のような方法を使用しています。

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/i18n/text/usage.html&quot;&gt;Sample Usage (The Java™ Tutorials &amp;gt; Internationalization &amp;gt; Working with Text)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int code = ((Integer)spinner.getValue()).intValue();
//char[] ca = Character.toChars(code);
String str = new String(Character.toChars(code));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://mojikiban.ipa.go.jp/download.html&quot;&gt;IPAmj明朝&lt;/a&gt;と&lt;a href=&quot;http://ipafont.ipa.go.jp/&quot;&gt;IPAex明朝フォント&lt;/a&gt;がインストールされている場合、その文字の形の違いを比較することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mojikiban.ipa.go.jp/download.html&quot;&gt;IPAmj明朝フォントダウンロード　｜　IPA 文字情報基盤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ipafont.ipa.go.jp/&quot;&gt;IPAexフォント/IPAフォント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LineSplittingLabel.html&quot;&gt;Fontのアウトラインを取得して文字列の内部を修飾する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://f.hatena.ne.jp/NAOI/20130411131759&quot;&gt;IPAmj明朝とIPAex明朝で形の違う字 NAOI&amp;#39;s fotolife - 20130411131759&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/hexformatterspinner</link>
                <guid>http://terai.xrea.jp/swing/hexformatterspinner</guid>
                <pubDate>2013-06-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Nimbusの外観をUIDefaultsで変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の外観を&lt;code&gt;UIDefaults&lt;/code&gt;を使って部分的に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/UIDefaultsOverrides&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-iuOm0KmZLK4/UaIp6IGdL4I/AAAAAAAABso/TUvbvWNNQuI/s800/UIDefaultsOverrides.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIDefaults d = new UIDefaults();
d.put(&quot;TextArea.borderPainter&quot;, new Painter&amp;lt;JComponent&amp;gt;() {
  @Override public void paint(Graphics2D g, JComponent c, int w, int h) {}
});
MultiLineTableCellRenderer r = new MultiLineTableCellRenderer();
r.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
r.putClientProperty(&quot;Nimbus.Overrides.InheritDefaults&quot;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBoxMenuItem&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CheckBoxMenuItem[Enabled].checkIconPainter&lt;/code&gt;, &lt;code&gt;CheckBoxMenuItem[MouseOver].checkIconPainter&lt;/code&gt;, &lt;code&gt;CheckBoxMenuItem[Enabled+Selected].checkIconPainter&lt;/code&gt;, &lt;code&gt;CheckBoxMenuItem[MouseOver+Selected].checkIconPainter&lt;/code&gt;の&lt;code&gt;Painter&lt;/code&gt;(これらの状態を独自に描画)を置き換えた&lt;code&gt;UIDefaults&lt;/code&gt;を作成し、&lt;code&gt;putClientProperty(&amp;quot;Nimbus.Overrides&amp;quot;, d);&lt;/code&gt;を使って上書き&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;TableCellRenderer&lt;/code&gt;に&lt;code&gt;JTextArea&lt;/code&gt;を使用してセル内に複数行の文字列を表示(&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoWrapTableCell.html&quot;&gt;JTableのセルの高さを自動調整&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、&lt;code&gt;JScrollPane&lt;/code&gt;内にない&lt;code&gt;JTextArea&lt;/code&gt;には&lt;code&gt;Border&lt;/code&gt;が表示されるので、これを非表示にするために&lt;code&gt;TextArea.borderPainter&lt;/code&gt;で使用する&lt;code&gt;Painter&lt;/code&gt;を置き換えた&lt;code&gt;UIDefaults&lt;/code&gt;を作成し、&lt;code&gt;JTextArea&lt;/code&gt;のデフォルトを&lt;code&gt;putClientProperty(&amp;quot;Nimbus.Overrides&amp;quot;, d);&lt;/code&gt;を使って上書き

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.getBorder(&amp;quot;Table.focusCellHighlightBorder&amp;quot;)&lt;/code&gt;を使うと、なぜか一番左上のセルのフォーカスが表示されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TextArea.NotInScrollPane&lt;/code&gt;の&lt;code&gt;State#isInState(...)&lt;/code&gt;をオーバーライドして&lt;code&gt;JScrollPane&lt;/code&gt;内にあるように見せかける方法もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;d.put(&quot;TextArea.NotInScrollPane&quot;, new State(&quot;NotInScrollPane&quot;) {
  @Override protected boolean isInState(JComponent c) {
    //@see javax.swing.plaf.nimbus.TextAreaNotInScrollPaneState
    //return !(c.getParent() instanceof JViewport);
    return false;
  }
});
r.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html&quot;&gt;Nimbus Defaults (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;のプロパティ一覧&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/plaf/nimbus/package-summary.html&quot;&gt;javax.swing.plaf.nimbus (Java Platform SE 7)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/plaf/nimbus/NimbusStyle.html&quot;&gt;NimbusStyle (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/uidefaultsoverrides</link>
                <guid>http://terai.xrea.jp/swing/uidefaultsoverrides</guid>
                <pubDate>2013-05-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;半透明の&lt;code&gt;JScrollBar&lt;/code&gt;を作成して、&lt;code&gt;JViewport&lt;/code&gt;内部に配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentScrollBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-X8o390yxqhI/UZjhjkgUrkI/AAAAAAAABsY/Aajtim-5-uE/s800/TranslucentScrollBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JComponent makeTranslucentScrollBar(JComponent c) {
  JScrollPane scrollPane = new JScrollPane(c) {
      @Override public boolean isOptimizedDrawingEnabled() {
          return false; // JScrollBar is overlap
      }
  };
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

  scrollPane.setComponentZOrder(scrollPane.getVerticalScrollBar(), 0);
  scrollPane.setComponentZOrder(scrollPane.getViewport(), 1);
  scrollPane.getVerticalScrollBar().setOpaque(false);

  scrollPane.setLayout(new ScrollPaneLayout() {
    @Override public void layoutContainer(Container parent) {
      JScrollPane scrollPane = (JScrollPane)parent;

      Rectangle availR = scrollPane.getBounds();
      availR.x = availR.y = 0;

      Insets insets = parent.getInsets();
      availR.x = insets.left;
      availR.y = insets.top;
      availR.width  -= insets.left + insets.right;
      availR.height -= insets.top  + insets.bottom;

      Rectangle vsbR = new Rectangle();
      vsbR.width  = 12;
      vsbR.height = availR.height;
      vsbR.x = availR.x + availR.width - vsbR.width;
      vsbR.y = availR.y;

      if(viewport != null) {
        viewport.setBounds(availR);
      }
      if(vsb != null) {
        vsb.setVisible(true);
        vsb.setBounds(vsbR);
      }
    }
  });
  scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
    private final Dimension d = new Dimension();
    @Override protected JButton createDecreaseButton(int orientation) {
      return new JButton() {
        @Override public Dimension getPreferredSize() {
          return d;
        }
      };
    }
    @Override protected JButton createIncreaseButton(int orientation) {
      return new JButton() {
        @Override public Dimension getPreferredSize() {
          return d;
        }
      };
    }
    @Override protected void paintTrack(Graphics g, JComponent c, Rectangle r) {}
    private final Color defaultColor  = new Color(220,100,100,100);
    private final Color draggingColor = new Color(200,100,100,100);
    private final Color rolloverColor = new Color(255,120,100,100);
    @Override protected void paintThumb(Graphics g, JComponent c, Rectangle r) {
      Color color;
      JScrollBar sb = (JScrollBar)c;
      if(!sb.isEnabled() || r.width&amp;gt;r.height) {
        return;
      }else if(isDragging) {
        color = draggingColor;
      }else if(isThumbRollover()) {
        color = rolloverColor;
      }else{
        color = defaultColor;
      }
      Graphics2D g2 = (Graphics2D)g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      g2.setPaint(color);
      g2.fillRect(r.x,r.y,r.width-1,r.height-1);
      g2.setPaint(Color.WHITE);
      g2.drawRect(r.x,r.y,r.width-1,r.height-1);
      g2.dispose();
    }
    @Override protected void setThumbBounds(int x, int y, int width, int height) {
      super.setThumbBounds(x, y, width, height);
      //scrollbar.repaint(x, 0, width, scrollbar.getHeight());
      scrollbar.repaint();
    }
  });
  return scrollPane;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JScrollBar&lt;/code&gt;の増減ボタンのサイズを&lt;code&gt;0&lt;/code&gt;、トラックを透明、つまみを半透明にして、&lt;code&gt;JViewport&lt;/code&gt;内部に配置しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScrollPaneLayout#layoutContainer(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;JScrollBar&lt;/code&gt;を&lt;code&gt;JViewport&lt;/code&gt;の内部にオーバーラップするように配置

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollPane.setComponentZOrder(...)&lt;/code&gt;で、&lt;code&gt;JScrollBar&lt;/code&gt;と&lt;code&gt;JViewport&lt;/code&gt;の&lt;code&gt;Z&lt;/code&gt;軸の順序を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicScrollBarUI#createDecreaseButton()&lt;/code&gt;、&lt;code&gt;BasicScrollBarUI#createIncreaseButton()&lt;/code&gt;をオーバーライドして増減ボタンのサイズを&lt;code&gt;0&lt;/code&gt;に設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicScrollBarUI#paintTrack()&lt;/code&gt;をオーバーライドしてトラックを非表示

&lt;ul&gt;
&lt;li&gt;トラックにつまみの残像が残るので、&lt;code&gt;BasicScrollBarUI#setThumbBounds&lt;/code&gt;をオーバーライドして&lt;code&gt;JScrollBar&lt;/code&gt;全体を再描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicScrollBarUI#paintThumb()&lt;/code&gt;をオーバーライドして半透明のつまみを描画&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;などでつまみの描画がチラつく？&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JTextArea&lt;/code&gt;などをこのサンプルの&lt;code&gt;JViewport&lt;/code&gt;に配置すると、&lt;code&gt;Caret&lt;/code&gt;の点滅や、文字列の選択などでつまみの描画が乱れる&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JList&lt;/code&gt;などの選択でも、つまみの描画が乱れる&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;ListSelectionListener&lt;/code&gt;や、&lt;code&gt;FocusListener&lt;/code&gt;を追加して再描画することで回避&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#isOptimizedDrawingEnabled()&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;を返すようにオーバーライドして回避&lt;/li&gt;
&lt;li&gt;横スクロールバーの表示に未対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/painting-140037.html&quot;&gt;&amp;quot;Optimized&amp;quot; Drawing - Painting in AWT and Swing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScrollPaneLayout&lt;/code&gt;を変更してオーバーラップするより、&lt;code&gt;JLayer&lt;/code&gt;などを使ってドラッグ可能な矩形を描画する方が簡単かもしれない…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-20 (月) 17:20:39&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentscrollbar</link>
                <guid>http://terai.xrea.jp/swing/translucentscrollbar</guid>
                <pubDate>2013-05-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルを横方向に連結する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルを横方向に連結するセルレンダラーを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColumnSpanningCellRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-wcXag_bBidU/UY-uA3riCRI/AAAAAAAABrs/Q_V-fdNVRu8/s800/ColumnSpanningCellRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ColumnSpanningCellRenderer extends JPanel implements TableCellRenderer{
  private final JTextArea textArea = new JTextArea(2, 999999);
  private final JLabel label = new JLabel();
  private final JLabel iconLabel = new JLabel();
  private final JScrollPane scroll = new JScrollPane();

  public ColumnSpanningCellRenderer() {
    super(new BorderLayout(0, 0));

    scroll.setViewportView(textArea);
    scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
    scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
    scroll.setBorder(BorderFactory.createEmptyBorder());
    scroll.setViewportBorder(BorderFactory.createEmptyBorder());
    scroll.setOpaque(false);
    scroll.getViewport().setOpaque(false);

    textArea.setBorder(BorderFactory.createEmptyBorder());
    textArea.setMargin(new Insets(0, 0, 0, 0));
    textArea.setForeground(Color.RED);
    textArea.setEditable(false);
    textArea.setFocusable(false);
    textArea.setOpaque(false);

    iconLabel.setBorder(BorderFactory.createEmptyBorder(0, 4, 0, 4));
    iconLabel.setOpaque(false);

    Border b1 = BorderFactory.createEmptyBorder(2, 2, 2, 2);
    Border b2 = BorderFactory.createMatteBorder(0, 0, 1, 1, Color.GRAY);
    label.setBorder(BorderFactory.createCompoundBorder(b2, b1));

    setBackground(textArea.getBackground());
    setOpaque(true);
    add(label, BorderLayout.NORTH);
    add(scroll);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    Test test;
    if(value instanceof Test) {
      test = (Test)value;
      add(iconLabel, BorderLayout.WEST);
    }else{
      int mrow = table.convertRowIndexToModel(row);
      String title = value!=null ? value.toString() : &quot;&quot;;
      Test t = (Test)table.getModel().getValueAt(mrow, 0);
      String text = t!=null ? t.text : &quot;&quot;;
      Icon icon = t!=null ? t.icon : null;
      test = new Test(title, icon, text);
      remove(iconLabel);
    }
    label.setText(test.title);
    textArea.setText(test.text);
    iconLabel.setIcon(test.icon);

    Rectangle cr = table.getCellRect(row, column, false);
/*/ //Flickering on first visible row ?
    if(column==0) {
      cr.x = 0;
      cr.width -= iconLabel.getPreferredSize().width;
    }else{
      cr.x -= iconLabel.getPreferredSize().width;
    }
    textArea.scrollRectToVisible(cr);
/*/
    if(column!=0) cr.x -= iconLabel.getPreferredSize().width;
    scroll.getViewport().setViewPosition(cr.getLocation());
//*/
    if(isSelected) {
      setBackground(Color.ORANGE);
    }else{
      setBackground(Color.WHITE);
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;文字列を配置した&lt;code&gt;JTextArea&lt;/code&gt;を各カラムごとに&lt;code&gt;JViewport&lt;/code&gt;で表示する領域を切り取ってセルに貼り付けています。さらに、&lt;code&gt;JTable&lt;/code&gt;のセルの縦罫線自体は、&lt;code&gt;table.setShowVerticalLines(false);&lt;/code&gt;などで非表示にすることでレンダラー内の&lt;code&gt;JTextArea&lt;/code&gt;は、連続しているように見せかけ、上部の&lt;code&gt;JLabel&lt;/code&gt;は&lt;code&gt;Border&lt;/code&gt;を設定することで区切りを表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;列の入れ替えには対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;行目だけカラムヘッダのサイズを変更すると、描画がおかしくなる？

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;行目ではなく、一番上に表示されている行の表示が乱れている&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea#scrollRectToVisible(...)&lt;/code&gt;ではなく、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;を使用すると正常にリサイズできる&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;0&lt;/code&gt;行目だけ高さ&lt;code&gt;1&lt;/code&gt;のダミー行を追加して回避(ソートなどで問題が残る)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JTable&lt;/code&gt;のクリック(セル選択？)などで表示が乱れる場合がある&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JTable#repaint(Rectangle)&lt;/code&gt;をオーバーライドして常に全体を描画することで回避&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.huihoo.com/javaone/2007/desktop/TS-3548.pdf&quot;&gt;PDF: Extreme GUI Makeover 2007&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://stackoverflow.com/questions/16305023/jtable-complex-cell-renderer&quot;&gt;java - JTable : Complex Cell Renderer - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IntercellSpacing.html&quot;&gt;JTableの罫線の有無とセルの内余白を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;をスクロールするとおかしくなる？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-04 (火) 13:37:19

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;行目ではなく、一番上に表示されている行の表示が原因かもしれない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-04 (火) 13:44:14&lt;/li&gt;
&lt;li&gt;移動の幅からみて、&lt;code&gt;TableCellRenderer&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt;が関連しているような気がするけど、よく分からない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-04 (火) 15:08:18&lt;/li&gt;
&lt;li&gt;一番上の行のみの症状なので、ヘッダレンダラーとか関係してるのかと調べてたけど、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;を使って直接ジャンプ？すれは、正常にヘッダサイズを変更できるようだ。もしかしたら&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JViewport.html&quot;&gt;次にビューポートにペイントが呼び出されたときに、クリッピング領域がビューポートサイズより小さい場合には、タイマーが開始され全体をペイントし直す&lt;/a&gt;せいだった？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-04 (火) 18:29:12&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/columnspanningcellrenderer</link>
                <guid>http://terai.xrea.jp/swing/columnspanningcellrenderer</guid>
                <pubDate>2013-05-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneを一行に制限してスタイル可能なJTextFieldとして使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;の行数を一行のみに制限して、文字色などのスタイル付けが可能な&lt;code&gt;JTextField&lt;/code&gt;として使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OneLineTextPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-jckifA3Ym6c/UYZlsvWPTqI/AAAAAAAABrY/ERGHE6rtaPo/s800/OneLineTextPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextPane textPane = new JTextPane() {
  @Override public void scrollRectToVisible(Rectangle rect) {
    int r = getBorder().getBorderInsets(this).right;
    rect.grow(r, 0);
    super.scrollRectToVisible(rect);
  }
};
textPane.setEditorKit(new NoWrapEditorKit());
AbstractDocument doc = new SimpleSyntaxDocument();
textPane.setDocument(doc);
try {
  doc.insertString(0, text, null);
} catch(Exception ex) {
  ex.printStackTrace();
}
String KEY = &quot;Do-Nothing&quot;;
InputMap im = textPane.getInputMap(JComponent.WHEN_FOCUSED);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), KEY);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), KEY);
textPane.getActionMap().put(KEY, new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    // Do nothing
  }
});

// @see http://terai.xrea.jp/Swing/FocusTraversalKeys.html
Set&amp;lt;AWTKeyStroke&amp;gt; forwardKeys = new HashSet&amp;lt;AWTKeyStroke&amp;gt;(
    textPane.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, KeyEvent.SHIFT_MASK));
textPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, forwardKeys);

JScrollPane scrollPane = new JScrollPane(
    textPane, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,
              ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER) {
  @Override public Dimension getMinimumSize() {
    return super.getPreferredSize();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;に追加

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;を常に非表示にした、&lt;code&gt;JScrollPane&lt;/code&gt;に&lt;code&gt;JTextPane&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextPane&lt;/code&gt;の折り返しを無効化

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NoWrapTextPane.html&quot;&gt;JEditorPaneで長い行を折り返さない&lt;/a&gt;の&lt;code&gt;ParagraphView&lt;/code&gt;を使用して、折り返しを無効化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字列の最後にある&lt;code&gt;Caret&lt;/code&gt;が表示されないのを修正

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane#scrollRectToVisible(Rectangle)&lt;/code&gt;をオーバーライドして、余白までスクロールするように設定&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://tips4java.wordpress.com/2009/01/25/no-wrap-text-pane/&quot;&gt;No Wrap Text Pane ≪ Java Tips Weblog&lt;/a&gt;のように、&lt;code&gt;CaretListener&lt;/code&gt;を使用する方法もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;キーの無効化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane&lt;/code&gt;から&lt;code&gt;InputMap&lt;/code&gt;と&lt;code&gt;ActionMap&lt;/code&gt;を取得して、&lt;code&gt;KeyEvent.VK_ENTER&lt;/code&gt;をなにもしない&lt;code&gt;Action&lt;/code&gt;で置き換える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Document#insertString(...)&lt;/code&gt;をオーバーライドして、コピー・ペーストなどで張り込まれた文字列から、改行を空白に置換&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーでフォーカス移動

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversalKeys.html&quot;&gt;FocusTraversalKeysに矢印キーを追加してフォーカス移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextPane&lt;/code&gt;から&lt;code&gt;InputMap&lt;/code&gt;を取得して、&lt;code&gt;KeyEvent.VK_TAB&lt;/code&gt;をなにもしない&lt;code&gt;Action&lt;/code&gt;で置き換え、&lt;code&gt;JTextPane#setFocusTraversalKeys(...)&lt;/code&gt;で、&lt;kbd&gt;Tab&lt;/kbd&gt;キーでフォーカス移動するように設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字スタイルの変更

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SimpleSyntaxHighlight.html&quot;&gt;JTextPaneでキーワードのSyntaxHighlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.discoverteenergy.com/files/SyntaxDocument.java&quot;&gt;SyntaxDocument.java&lt;/a&gt;を使って、入力された&lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;の文字色を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NoWrapTextPane.html&quot;&gt;JEditorPaneで長い行を折り返さない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversalKeys.html&quot;&gt;FocusTraversalKeysに矢印キーを追加してフォーカス移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;では、&lt;code&gt;aaaaa|bbbbb&lt;/code&gt;でカーソル&lt;code&gt;|&lt;/code&gt;の位置に文字を追加していくと領域外にカーソルが移動した時点で&lt;code&gt;bbbbb&lt;/code&gt;が表示されるようにスクロールするが、ここの&lt;code&gt;OneLineTextPane&lt;/code&gt;では未対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-06 (月) 15:35:00&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputMap&lt;/code&gt;と&lt;code&gt;ActionMap&lt;/code&gt;を間違えて使用していた箇所を修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-01 (金) 17:55:13&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/onelinetextpane</link>
                <guid>http://terai.xrea.jp/swing/onelinetextpane</guid>
                <pubDate>2013-05-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxをJSpinnerの代わりに使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;の代わりに&lt;code&gt;JComboBox&lt;/code&gt;を使用することで、アイテムの文字色などを変更しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerTextColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-kpruQCgOnLE/UX2r6exfrII/AAAAAAAABqo/JZnFlTBy1zw/s800/SpinnerTextColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton nb = createArrowButton(SwingConstants.NORTH);
nb.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    e.setSource(comboBox);
    comboBox.getActionMap().get(&quot;selectPrevious2&quot;).actionPerformed(e);
  }
});
JButton sb = createArrowButton(SwingConstants.SOUTH);
sb.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    e.setSource(comboBox);
    comboBox.getActionMap().get(&quot;selectNext2&quot;).actionPerformed(e);
  }
});
Box box = Box.createVerticalBox();
box.add(nb);
box.add(sb);

JPanel p = new JPanel(new BorderLayout()) {
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    return new Dimension(d.width, 20);
  }
};
p.add(comboBox);
p.add(box, BorderLayout.EAST);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ドロップダウンリストを無効(表示させない)にした&lt;code&gt;JComboBox&lt;/code&gt;と&lt;code&gt;2&lt;/code&gt;つの&lt;code&gt;ArrowButton&lt;/code&gt;を組み合わせて、&lt;code&gt;JSpinner&lt;/code&gt;風のコンポーネントを作成しています。各アイテムの文字色は、&lt;code&gt;Html&lt;/code&gt;の&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;タグを使って変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;をオーバーライドして、&lt;code&gt;JComboBox&lt;/code&gt;の元&lt;code&gt;ArrowButton&lt;/code&gt;を非表示

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HideComboArrowButton.html&quot;&gt;JComboBoxのArrowButtonを隠す&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#setPopupVisible&lt;/code&gt;、&lt;code&gt;BasicComboBoxUI#createPopup()&lt;/code&gt;、&lt;code&gt;BasicComboPopup#show()&lt;/code&gt;などをオーバーライドしてドロップダウンリストを無効化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox#getActionMap()#get(&amp;quot;selectNext2&amp;quot;)&lt;/code&gt;などで取得したアクションを実行する&lt;code&gt;ArrowButton&lt;/code&gt;を作成してレイアウト

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SelectAllButton.html&quot;&gt;JTableを別コンポーネントから操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KeyBinding.html&quot;&gt;JComponentのKeyBinding一覧を取得する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;リピート機能には未対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnertextcolor</link>
                <guid>http://terai.xrea.jp/swing/spinnertextcolor</guid>
                <pubDate>2013-04-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ProgressMonitorInputStreamを使用してテキストファイルのダウンロード状況を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ProgressMonitorInputStream&lt;/code&gt;を使用してテキストファイルのダウンロード状態を進捗表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressMonitorInputStream&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-gXnU23f7iiw/UXQuzmKdfVI/AAAAAAAABp8/aPk0QR78NlY/s800/ProgressMonitorInputStream.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RunAction extends AbstractAction {
  public RunAction() {
    super(&quot;Load&quot;);
  }
  @Override public void actionPerformed(ActionEvent e) {
    runButton.setEnabled(false);
    textArea.setText(&quot;&quot;);

    URLConnection urlConnection = getURLConnection();
    if(urlConnection==null) {
      return;
    }
    Charset cs = getCharset(urlConnection, &quot;EUC-JP&quot;);
    int length = urlConnection.getContentLength();
    JFrame frame = (JFrame)SwingUtilities.getWindowAncestor((Component)e.getSource());

    try{
      InputStream is = urlConnection.getInputStream();
      ProgressMonitorInputStream pmis = new ProgressMonitorInputStream(frame, &quot;Loading&quot;, is);
      monitor = pmis.getProgressMonitor();
      monitor.setNote(&quot; &quot;); //Need for JLabel#getPreferredSize
      monitor.setMillisToDecideToPopup(0);
      monitor.setMillisToPopup(0);
      monitor.setMinimum(0);
      monitor.setMaximum(length);

      worker = new MonitorTask(pmis, cs, length);
      worker.execute();
    }catch(IOException ex) {
      ex.printStackTrace();
    }
  }
}

private class MonitorTask extends Task {
  public MonitorTask(ProgressMonitorInputStream pmis, Charset cs, int length) {
    super(pmis, cs, length);
  }
  @Override protected void process(List&amp;lt;Chunk&amp;gt; chunks) {
    for(Chunk c: chunks) {
      textArea.append(c.line+&quot;\n&quot;);
      monitor.setNote(c.note);
    }
    textArea.setCaretPosition(textArea.getDocument().getLength());
  }
  @Override public void done() {
    runButton.setEnabled(true);
    String text = null;
    try{
      if(pmis!=null) {
        pmis.close();
      }
      text = isCancelled() ? &quot;Cancelled&quot; : get();
    }catch(IOException | InterruptedException | ExecutionException ex) {
      ex.printStackTrace();
      text = &quot;Exception&quot;;
    }
    System.out.println(text);
  }
}

private static class Task extends SwingWorker&amp;lt;String, Chunk&amp;gt; {
  protected final ProgressMonitorInputStream pmis;
  protected final Charset cs;
  protected final int length;
  public Task(ProgressMonitorInputStream pmis, Charset cs, int length) {
    super();
    this.pmis = pmis;
    this.cs = cs;
    this.length = length;
  }
  @Override public String doInBackground() {
    String ret = &quot;Done&quot;;
    try(BufferedReader reader = new BufferedReader(new InputStreamReader(pmis, cs));
      Scanner scanner = new Scanner(reader)) {
      int i = 0;
      int size = 0;
      while(scanner.hasNextLine()) {
        if(i%50==0) { //Wait
          Thread.sleep(10);
        }
        i++;
        String line = scanner.nextLine();
        size += line.getBytes(cs).length + 1; //+1: \n
        String note = String.format(&quot;%03d%% - %d/%d%n&quot;, 100*size/length, size, length);
        //System.out.println(note);
        publish(new Chunk(line, note));
      }
    }catch(InterruptedException | IOException ex) {
      System.out.println(&quot;Exception&quot;);
      ret = &quot;Exception&quot;;
      cancel(true);
    }
    return ret;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;URLConnection&lt;/code&gt;から開いた&lt;code&gt;InputStream&lt;/code&gt;に&lt;code&gt;ProgressMonitorInputStream&lt;/code&gt;をラップして、ファイルのダウンロード進捗状態を&lt;code&gt;ProgressMonitor&lt;/code&gt;で表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitorInputStream&lt;/code&gt;の使用する&lt;code&gt;ProgressMonitor&lt;/code&gt;の最大値は、ファイルサイズ(バイト)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitorInputStream&lt;/code&gt;がデフォルトで設定する最大値は、&lt;code&gt;InputStream#available()&lt;/code&gt;の値&lt;/li&gt;
&lt;li&gt;この値がダウンロード中のストリームの合計バイト数を返す訳ではないので、これを最大値のままにしておくと、&lt;code&gt;ProgressMonitor&lt;/code&gt;が表示されない、またはすぐ閉じてしまう&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URLConnection#getContentLength()&lt;/code&gt;で取得したバイト数を&lt;code&gt;ProgressMonitor#setMaximum(...)&lt;/code&gt;で設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一行ずつ&lt;code&gt;JTextArea&lt;/code&gt;に文字列として読み込ませるために、&lt;code&gt;InputStreamReader&lt;/code&gt;を使用しているので、エンコードを&lt;code&gt;URLConnection#getContentEncoding()&lt;/code&gt;や&lt;code&gt;URLConnection#getContentType()&lt;/code&gt;などで取得

&lt;ul&gt;
&lt;li&gt;何パーセント読み込んだかを&lt;code&gt;ProgressMonitor#setNote(...)&lt;/code&gt;で表示する場合は、一行が何バイトかを&lt;code&gt;String#getBytes(Charset)&lt;/code&gt;で取得して計算&lt;/li&gt;
&lt;li&gt;注: 改行は&lt;code&gt;1&lt;/code&gt;バイトで決め打ちしている&lt;/li&gt;
&lt;li&gt;進捗を表示する前に&lt;code&gt;ProgressMonitor#setNote(&amp;quot;dummy note&amp;quot;);&lt;/code&gt;としておかないと、&lt;code&gt;Note&lt;/code&gt;に使用する&lt;code&gt;JLabel&lt;/code&gt;が&lt;code&gt;null&lt;/code&gt;のままで表示されない、またはレイアウトがおかしくなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MillisToDecideToPopup.html&quot;&gt;ProgressMonitorがダイアログを表示するまでの待ち時間&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;EDT外で&lt;code&gt;ProgressMonitor&lt;/code&gt;を変更する(&lt;code&gt;monitor.setMinimum(0);&lt;/code&gt;など)のは駄目な気がするので、修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-02-04 (火) 15:05:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/progressmonitorinputstream</link>
                <guid>http://terai.xrea.jp/swing/progressmonitorinputstream</guid>
                <pubDate>2013-04-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ProgressMonitorがダイアログを表示するまでの待ち時間</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ProgressMonitor&lt;/code&gt;のダイアログが表示されるまでの待ち時間を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MillisToDecideToPopup&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-R5-8dJERlmk/UWrm3iXBukI/AAAAAAAABpk/i7YjNRcIkpM/s800/MillisToDecideToPopup.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;monitor = new ProgressMonitor(w, &quot;message&quot;, &quot;note&quot;, 0, 100);
monitor.setMillisToDecideToPopup((int)millisToDecideToPopup.getValue());
monitor.setMillisToPopup((int)millisToPopup.getValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/ProgressMonitor.html#getMillisToDecideToPopup%28%29&quot;&gt;&lt;code&gt;ProgressMonitor#setMillisToDecideToPopup(int)&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitor&lt;/code&gt;のダイアログを表示するかどうかを決めるまでの待ち時間を設定&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;500&lt;/code&gt;ミリ秒&lt;/li&gt;
&lt;li&gt;この待ち時間の間は&lt;code&gt;ProgressMonitor&lt;/code&gt;のダイアログは表示されない

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitor&lt;/code&gt;で使用する&lt;code&gt;JProgressBar&lt;/code&gt;が&lt;code&gt;null&lt;/code&gt;でない場合(&lt;code&gt;ProgressMonitor&lt;/code&gt;を使い回しして&lt;code&gt;ProgressMonitor#close()&lt;/code&gt;されていないなど)は、無視してダイアログが表示される場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/ProgressMonitor.html#getMillisToPopup%28%29&quot;&gt;&lt;code&gt;ProgressMonitor#setMillisToPopup(int)&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitor&lt;/code&gt;のダイアログが表示されるまでの待ち時間を設定&lt;/li&gt;
&lt;li&gt;デフォルト: &lt;code&gt;2000&lt;/code&gt;ミリ秒&lt;/li&gt;
&lt;li&gt;予想残り時間がこの時間より短い場合、ダイアログは表示されない

&lt;ul&gt;
&lt;li&gt;予想残り時間は、&lt;code&gt;JProgressBar&lt;/code&gt;の進捗状況(パーセント)と処理開始からの時間で計算される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitor#getMillisToDecideToPopup()&lt;/code&gt;からの待ち時間ではなく独立している(処理開始からの待ち時間になる)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressMonitor#getMillisToDecideToPopup()&lt;/code&gt;以下の場合は、その直後にダイアログが表示される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressMonitor.html&quot;&gt;ProgressMonitorで処理の進捗を表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/millistodecidetopopup</link>
                <guid>http://terai.xrea.jp/swing/millistodecidetopopup</guid>
                <pubDate>2013-04-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolBarに配置したアイコンをドラッグして並べ替える</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolBar&lt;/code&gt;に配置したアイコンをドラッグ＆ドロップで並べ替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RearrangeToolBarIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-bxLoJ6g9K_I/UWBOghG3kxI/AAAAAAAABpQ/tvVELkL1RV0/s800/RearrangeToolBarIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DragHandler extends MouseAdapter{
  private final JWindow window = new JWindow();
  private Component draggingComonent = null;
  private int index = -1;
  private Component gap = Box.createHorizontalStrut(24);
  private Point startPt = null;
  private int gestureMotionThreshold = DragSource.getDragThreshold();
  public DragHandler() {
    window.setBackground(new Color(0, true));
  }
  @Override public void mousePressed(MouseEvent e) {
    JComponent parent = (JComponent)e.getComponent();
    if(parent.getComponentCount()&amp;lt;=1) {
      startPt = null;
      return;
    }
    startPt = e.getPoint();
  }
  @Override public void mouseDragged(MouseEvent e) {
    Point pt = e.getPoint();
    JComponent parent = (JComponent)e.getComponent();
    int t = Math.sqrt(Math.pow(pt.x-startPt.x, 2)+Math.pow(pt.y-startPt.y, 2))
    if(startPt != null &amp;amp;&amp;amp; t&amp;gt;gestureMotionThreshold) {
      startPt = null;
      Component c = parent.getComponentAt(pt);
      index = parent.getComponentZOrder(c);
      if(c == parent || index &amp;lt; 0) {
        return;
      }
      draggingComonent = c;

      parent.remove(draggingComonent);
      parent.add(gap, index);
      parent.revalidate();
      parent.repaint();

      window.add(draggingComonent);
      window.pack();

      Dimension d = draggingComonent.getPreferredSize();
      Point p = new Point(pt.x - d.width/2, pt.y - d.height/2);
      SwingUtilities.convertPointToScreen(p, parent);
      window.setLocation(p);
      window.setVisible(true);

      return;
    }
    if(!window.isVisible() || draggingComonent==null) {
      return;
    }

    Dimension d = draggingComonent.getPreferredSize();
    Point p = new Point(pt.x - d.width/2, pt.y - d.height/2);
    SwingUtilities.convertPointToScreen(p, parent);
    window.setLocation(p);

    for(int i=0; i&amp;lt;parent.getComponentCount(); i++) {
      Component c = parent.getComponent(i);
      Rectangle r = c.getBounds();
      Rectangle r1 = new Rectangle(r.x, r.y, r.width/2, r.height);
      Rectangle r2 = new Rectangle(r.x+r.width/2, r.y, r.width/2, r.height);
      if(r1.contains(pt)) {
        if(c==gap) {
          return;
        }
        int n = i-1&amp;gt;=0 ? i : 0;
        parent.remove(gap);
        parent.add(gap, n);
        parent.revalidate();
        parent.repaint();
        return;
      }else if(r2.contains(pt)) {
        if(c==gap) {
          return;
        }
        parent.remove(gap);
        parent.add(gap, i);
        parent.revalidate();
        parent.repaint();
        return;
      }
    }
    parent.remove(gap);
    parent.revalidate();
    parent.repaint();
  }

  @Override public void mouseReleased(MouseEvent e) {
    startPt = null;
    if(!window.isVisible() || draggingComonent==null) {
      return;
    }
    Point pt = e.getPoint();
    JComponent parent = (JComponent)e.getComponent();

    Component cmp = draggingComonent;
    draggingComonent = null;
    window.setVisible(false);

    for(int i=0; i&amp;lt;parent.getComponentCount(); i++) {
      Component c = parent.getComponent(i);
      Rectangle r = c.getBounds();
      Rectangle r1 = new Rectangle(r.x, r.y, r.width/2, r.height);
      Rectangle r2 = new Rectangle(r.x+r.width/2, r.y, r.width/2, r.height);
      if(r1.contains(pt)) {
        int n = i-1&amp;gt;=0 ? i : 0;
        parent.remove(gap);
        parent.add(cmp, n);
        parent.revalidate();
        parent.repaint();
        return;
      }else if(r2.contains(pt)) {
        parent.remove(gap);
        parent.add(cmp, i);
        parent.revalidate();
        parent.repaint();
        return;
      }
    }
    if(parent.getBounds().contains(pt)) {
      parent.remove(gap);
      parent.add(cmp);
    }else{
      parent.remove(gap);
      parent.add(cmp, index);
    }
    parent.revalidate();
    parent.repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JToolBar&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;と&lt;code&gt;MouseMotionListener&lt;/code&gt;を追加して、&lt;code&gt;JLabel&lt;/code&gt;に配置したアイコンを並べ替えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドラッグされて移動対象になった&lt;code&gt;JLabel&lt;/code&gt;は、&lt;code&gt;JToolBar&lt;/code&gt;から削除され、透明な&lt;code&gt;JWindow&lt;/code&gt;に移動

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JWindow&lt;/code&gt;なので、元のフレームの外側にも移動可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ドロップする位置に&lt;code&gt;JWindow&lt;/code&gt;が移動してきた場合、&lt;code&gt;JToolBar&lt;/code&gt;に&lt;code&gt;Box.createHorizontalStrut(24);&lt;/code&gt;で作成したアイコンと同じ幅の&lt;code&gt;Box&lt;/code&gt;を配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;がドロップされると、ダミーの&lt;code&gt;Box&lt;/code&gt;は削除され、&lt;code&gt;JLabel&lt;/code&gt;と入れ替え

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JWindow&lt;/code&gt;は非表示に設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JToolBar&lt;/code&gt;以外の場所にドロップされた場合は、ドラッグ前の位置に&lt;code&gt;JLabel&lt;/code&gt;を戻す&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;制限

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JToolBar#setFloatable(false);&lt;/code&gt;にしないとアイコンを移動できない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;などを移動できない&lt;/li&gt;
&lt;li&gt;非表示のコンポーネント(&lt;code&gt;Box.createGlue()&lt;/code&gt;など)がドラッグできてしまう&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;などで移動の描画がチラつく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragSourceMotionListener.html&quot;&gt;JFrameの外側でもドラッグアイコンを表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;code&gt;JLayer&lt;/code&gt;などを使用すれば、&lt;code&gt;JButton&lt;/code&gt;の移動も可能…な気がする。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-04-08 (月) 21:04:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rearrangetoolbaricon</link>
                <guid>http://terai.xrea.jp/swing/rearrangetoolbaricon</guid>
                <pubDate>2013-04-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneで修飾したテキストをJTextAreaにHtmlソースとして表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;を使用する&lt;code&gt;JTextPane&lt;/code&gt;で修飾したテキストを&lt;code&gt;JTextArea&lt;/code&gt;に&lt;code&gt;Html&lt;/code&gt;ソースとして表示、編集、&lt;code&gt;JTextPane&lt;/code&gt;に反映するテストを行なっています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HTMLEditorKit&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-ORS7lITRAUE/UVhL_1G6hPI/AAAAAAAABo4/5WKtBFFthJ0/s800/HTMLEditorKit.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;textPane.setComponentPopupMenu(new HTMLColorPopupMenu());
//textPane.setEditorKit(new HTMLEditorKit());
textPane.setContentType(&quot;text/html&quot;);
textArea.setText(textPane.getText());

JTabbedPane tabbedPane = new JTabbedPane();
tabbedPane.addTab(&quot;JTextPane&quot;, new JScrollPane(textPane));
tabbedPane.addTab(&quot;JTextArea&quot;, new JScrollPane(textArea));
tabbedPane.addChangeListener(new ChangeListener() {
  @Override public void stateChanged(ChangeEvent e) {
    JTabbedPane t = (JTabbedPane)e.getSource();
    int i = t.getSelectedIndex();
    try{
      if(i==0) {
        textPane.setText(textArea.getText());
      }else{
        String str = textPane.getText();
        textArea.setText(str);
      }
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    t.revalidate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;を使用(コンテンツ形式を&lt;code&gt;text/html&lt;/code&gt;に設定)する&lt;code&gt;JTextPane&lt;/code&gt;で&lt;code&gt;JEditorPane#getText()&lt;/code&gt;を実行すると、&lt;code&gt;HTMLEditorKit&lt;/code&gt;からスタイル(文字色)などを設定した&lt;code&gt;Html&lt;/code&gt;ソースとして文字列を取得することができるので、これを&lt;code&gt;JTabbedPane&lt;/code&gt;が&lt;code&gt;JTextArea&lt;/code&gt;に切り替わるときに&lt;code&gt;JTextArea&lt;/code&gt;に流しこんでいます。&lt;/p&gt;

&lt;p&gt;逆に、&lt;code&gt;JTextArea&lt;/code&gt;で&lt;code&gt;Html&lt;/code&gt;ソースを編集し、&lt;code&gt;JTabbedPane&lt;/code&gt;で&lt;code&gt;JTextPane&lt;/code&gt;に切り替える時には、&lt;code&gt;JEditorPane#setText(String)&lt;/code&gt;内で、&lt;code&gt;HTMLEditorKit&lt;/code&gt;に&lt;code&gt;HTML&lt;/code&gt;形式で読み込まれるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textPane.setContentType(&amp;quot;text/html&amp;quot;);&lt;/code&gt;とコンテンツ形式を設定しておかないと、&lt;code&gt;JEditorPane#setText(String)&lt;/code&gt;で&lt;code&gt;Document&lt;/code&gt;が更新されない場合がある？&lt;/li&gt;
&lt;li&gt;この場合、以下のように、&lt;code&gt;textPane.setText(textArea.getText());&lt;/code&gt;ではなく、&lt;code&gt;HTMLEditorKit#insertHTML(...)&lt;/code&gt;を使用する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//textPane.setText(textArea.getText());
textPane.setText(&quot;&quot;);
HTMLEditorKit hek = (HTMLEditorKit)textPane.getEditorKit();
HTMLDocument doc = (HTMLDocument)textPane.getStyledDocument();
hek.insertHTML(doc, 0, textArea.getText(), 0, 0, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;から、&lt;code&gt;HTML Tag&lt;/code&gt;を取り除いた文字列を取得するサンプル

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/240546/removing-html-from-a-java-string&quot;&gt;Removing HTML from a Java String - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//import java.io.StringReader;
//import javax.swing.text.html.parser.*;
ParserDelegator delegator = new ParserDelegator();
final StringBuffer s = new StringBuffer();
delegator.parse(new StringReader(str), new HTMLEditorKit.ParserCallback() {
  @Override public void handleText(char[] text, int pos) {
    s.append(text);
  }
}, Boolean.TRUE);
System.out.println(s.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/htmleditorkit</link>
                <guid>http://terai.xrea.jp/swing/htmleditorkit</guid>
                <pubDate>2013-04-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DisabledなJMenuItemのハイライトをテスト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Disabled&lt;/code&gt;な&lt;code&gt;JMenuItem&lt;/code&gt;がハイライト可能かどうかを&lt;code&gt;LookAndFeel&lt;/code&gt;ごとにテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisabledAreNavigable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/--XCIC-Dhgwk/UU8M_ixmZeI/AAAAAAAABoU/aXonTNvOs0A/s800/DisabledAreNavigable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;MenuItem.disabledAreNavigable&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;UIManager.getBoolean(&amp;quot;MenuItem.disabledAreNavigable&amp;quot;);&lt;/code&gt;のデフォルトは&lt;code&gt;true&lt;/code&gt;で、&lt;code&gt;Disabled&lt;/code&gt;な&lt;code&gt;JMenuItem&lt;/code&gt;でもハイライトが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;UIManager.getBoolean(&amp;quot;MenuItem.disabledAreNavigable&amp;quot;);&lt;/code&gt;のデフォルトは&lt;code&gt;false&lt;/code&gt;だが、&lt;code&gt;UIManager.put(&amp;quot;MenuItem.disabledAreNavigable&amp;quot;, Boolean.TRUE);&lt;/code&gt;とすれば、&lt;code&gt;Disabled&lt;/code&gt;な&lt;code&gt;JMenuItem&lt;/code&gt;でもハイライトが可能になる&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/joshy/archive/2006/08/windows_lf_bugs.html&quot;&gt;Windows L&amp;amp;F Bugs: Part 2 | Java.net&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4515765&quot;&gt;4515765 Win L&amp;amp;F: Disabled menu items should show highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disabledarenavigable</link>
                <guid>http://terai.xrea.jp/swing/disabledarenavigable</guid>
                <pubDate>2013-03-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Animated Gifからフレーム画像を抽出する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AnimatedGif&lt;/code&gt;から各フレームの画像を抽出します。主に&lt;a href=&quot;https://forums.oracle.com/thread/1271862&quot;&gt;Swing - Reading gif animation frame rates and such?&lt;/a&gt;の回答を参考に作成しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExtractFramesFromAnimatedGif&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-_xu1jNmYJe0/UUX3d_PzwKI/AAAAAAAABoA/cyS5ABVZdkM/s800/ExtractFramesFromAnimatedGif.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ImageReader reader = null;
Iterator&amp;lt;ImageReader&amp;gt; readers = ImageIO.getImageReaders(imageStream);
while(readers.hasNext()) {
  reader = readers.next();
  String metaFormat = reader.getOriginatingProvider().getNativeImageMetadataFormatName();
  if(&quot;gif&quot;.equalsIgnoreCase(reader.getFormatName()) &amp;amp;&amp;amp;
            !&quot;javax_imageio_gif_image_1.0&quot;.equals(metaFormat)) {
    continue;
  }else{
    break;
  }
}
if(reader == null) {
  throw new IOException(&quot;Can not read image format!&quot;);
}
boolean isGif = reader.getFormatName().equalsIgnoreCase(&quot;gif&quot;);
reader.setInput(imageStream, false, !isGif);
List&amp;lt;BufferedImage&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
for(int i=0;i&amp;lt;reader.getNumImages(true);i++) {
  IIOImage frame = reader.readAll(i, null);
  list.add((BufferedImage)frame.getRenderedImage());
}
reader.dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;ImageReader&lt;/code&gt;に&lt;code&gt;AnimatedGif&lt;/code&gt;ファイルを読み込ませて、&lt;code&gt;IIOImage#getRenderedImage()&lt;/code&gt;で各フレームの&lt;code&gt;BufferedImage&lt;/code&gt;を取得しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;背景色や差分フレームを無視している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try-with-resources&lt;/code&gt;を使っているので、&lt;code&gt;JDK 1.7.0&lt;/code&gt;以上が必要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1271862&quot;&gt;Swing - Reading gif animation frame rates and such?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IIOMetadata.html&quot;&gt;JPEGファイルのコメントを取り出す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableAnimatedGif.html&quot;&gt;JLabelに表示したAnimated Gifのアニメーションを停止する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimatedGif.html&quot;&gt;Animated GIFでのコマ描画時処理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/extractframesfromanimatedgif</link>
                <guid>http://terai.xrea.jp/swing/extractframesfromanimatedgif</guid>
                <pubDate>2013-03-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuなどからWindowを閉じる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;や、&lt;code&gt;JToolBar&lt;/code&gt;などに親&lt;code&gt;Window&lt;/code&gt;を閉じるための&lt;code&gt;Action&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowClosingAction&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-xWsEbhvjfDY/UT2P-83x0FI/AAAAAAAABmc/7isd5KoGMQc/s800/WindowClosingAction.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static class ExitAction extends AbstractAction{
  public ExitAction() {
    super(&quot;Exit&quot;);
  }
  @Override public void actionPerformed(ActionEvent e) {
    JComponent c = (JComponent)e.getSource();
    Window window = null;
    Container parent = c.getParent();
    if(parent instanceof JPopupMenu) {
      JPopupMenu popup = (JPopupMenu)parent;
      JComponent invoker = (JComponent)popup.getInvoker();
      window = SwingUtilities.getWindowAncestor(invoker);
    }else if(parent instanceof JToolBar) {
      JToolBar toolbar = (JToolBar)parent;
      if(((BasicToolBarUI)toolbar.getUI()).isFloating()) {
        window = SwingUtilities.getWindowAncestor(toolbar).getOwner();
      }else{
        window = SwingUtilities.getWindowAncestor(toolbar);
      }
    }else{
      Component invoker = c.getParent();
      window = SwingUtilities.getWindowAncestor(invoker);
    }
    if(window!=null) {
      //window.dispose();
      window.dispatchEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSING));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、親となる&lt;code&gt;JFrame&lt;/code&gt;を取得し、&lt;code&gt;window.dispatchEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSING));&lt;/code&gt;を
使って、終了イベントを実行しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPopupMenu#getInvoker()&lt;/code&gt;を使って、&lt;code&gt;JComponent#setComponentPopupMenu(popup)&lt;/code&gt;で設定したコンポーネントを取得し、&lt;code&gt;SwingUtilities.getWindowAncestor(...)&lt;/code&gt;で、親&lt;code&gt;Window&lt;/code&gt;を取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuBar&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.getWindowAncestor(...)&lt;/code&gt;で、自身の親&lt;code&gt;Window&lt;/code&gt;を取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JToolBar&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;移動中の場合、&lt;code&gt;JComponent#setComponentPopupMenu(toolbar)&lt;/code&gt;で取得した移動中の&lt;code&gt;Window&lt;/code&gt;の親&lt;code&gt;Window&lt;/code&gt;を&lt;code&gt;Window#getOwner()&lt;/code&gt;で取得&lt;/li&gt;
&lt;li&gt;移動中では無い場合、&lt;code&gt;SwingUtilities.getWindowAncestor(toolbar)&lt;/code&gt;で、自身の親&lt;code&gt;Window&lt;/code&gt;を取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowClosing.html&quot;&gt;JFrameの終了をキャンセル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowAncestor.html&quot;&gt;WindowAncestor(親ウィンドウ)の取得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowclosingaction</link>
                <guid>http://terai.xrea.jp/swing/windowclosingaction</guid>
                <pubDate>2013-03-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarが最後までスクロールしたことを確認する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;が最後までスクロールしたかどうかを確認します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DetectScrollToBottom&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-OoIPVjne_9M/UTPo6KgN_NI/AAAAAAAABlw/7miro8ywcyg/s800/DetectScrollToBottom.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane(c);
scroll.getVerticalScrollBar().getModel().addChangeListener(new ChangeListener() {
  @Override public void stateChanged(ChangeEvent e) {
    BoundedRangeModel m = (BoundedRangeModel)e.getSource();
    int extent  = m.getExtent();
    int maximum = m.getMaximum();
    int value   = m.getValue();
    if(value + extent &amp;gt;= maximum) {
      check.setEnabled(true);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、縦スクロールバーから取得した&lt;code&gt;BoundedRangeModel&lt;/code&gt;に&lt;code&gt;ChangeListener&lt;/code&gt;を追加し、ノブの幅を加えた値が最大値になった時に最後までスクロールしたと判断して、&lt;code&gt;JCheckBox&lt;/code&gt;を有効に設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12916192/how-to-know-if-a-jscrollbar-has-reached-the-bottom-of-the-jscrollpane&quot;&gt;java - How to know if a JScrollBar has reached the bottom of the JScrollPane? - Stack Overflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;に&lt;code&gt;AdjustmentListener&lt;/code&gt;を設定する方法と、&lt;code&gt;BoundedRangeModel&lt;/code&gt;に&lt;code&gt;ChangeListener&lt;/code&gt;を設定する方法が回答されています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollBarAsSlider.html&quot;&gt;JScrollBarをJSliderとして使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/detectscrolltobottom</link>
                <guid>http://terai.xrea.jp/swing/detectscrolltobottom</guid>
                <pubDate>2013-03-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelに表示したAnimated Gifのアニメーションを停止する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;に表示した&lt;code&gt;Animated Gif&lt;/code&gt;のアニメーションを停止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableAnimatedGif&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-pYT15pLG7KY/USoyuJzLxUI/AAAAAAAABfo/JgO7-MbsL5U/s800/DisableAnimatedGif.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label2 = new JLabel() {
  @Override public boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h) {
    if(!isEnabled()) {
      infoflags &amp;amp;= ~FRAMEBITS;
    }
    return super.imageUpdate(img, infoflags, x, y, w, h);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;が&lt;code&gt;Enabled&lt;/code&gt;でない場合にアニメーションを停止するよう設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JLabel&lt;/code&gt;では、&lt;code&gt;JLabel#setEnabled(false);&lt;/code&gt;としてもアニメーションは停止しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Override imageUpdate(...)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel#imageUpdate(...)&lt;/code&gt;の&lt;code&gt;infoflags&lt;/code&gt;から&lt;code&gt;FRAMEBITS&lt;/code&gt;フラグを落とすことでアニメーションを停止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;がリサイズされると？、コマが進んでしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setDisabledIcon&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;別途用意した静止画像を使って、&lt;code&gt;JLabel#setDisabledIcon(...)&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GrayFilter.createDisabledImage(Image)&lt;/code&gt;でアイコンをグレースケール化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://duke.kenai.com/iconSized/index.html&quot;&gt;Duke Images: iconSized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/image/ImageObserver.html&quot;&gt;ImageObserver (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorConvertOp.html&quot;&gt;ColorConvertOpで画像をグレースケールに変換&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExtractFramesFromAnimatedGif.html&quot;&gt;Animated Gifからフレーム画像を抽出する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disableanimatedgif</link>
                <guid>http://terai.xrea.jp/swing/disableanimatedgif</guid>
                <pubDate>2013-02-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuの領域内にマウスカーソルでポップアップメニューを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenu&lt;/code&gt;の領域内にマウスカーソルが入ったときにポップアップメニューが開くように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PopupWithoutClickOnMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-shu8CDTfLvg/USCnbrWYstI/AAAAAAAABd0/qODgUmweras/s800/PopupWithoutClickOnMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;visitAll(menubar, new MouseAdapter() {
  @Override public void mousePressed(MouseEvent e) {
    if(check.isSelected()) {
      ((AbstractButton)e.getSource()).doClick();
    }
  }
  @Override public void mouseEntered(MouseEvent e) {
    if(check.isSelected()) {
      ((AbstractButton)e.getSource()).doClick();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JMenuBar&lt;/code&gt;の子コンポーネントになっている&lt;code&gt;JMenu&lt;/code&gt;の領域内にマウスカーソルが入った場合に自動的にポップアップメニューが開くように、&lt;code&gt;JMenu#doClick()&lt;/code&gt;を実行する&lt;code&gt;MouseListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;マウスボタンを押した場合も、入った場合にすでに表示したポップアップメニューが非表示にならないように&lt;code&gt;JMenu#doClick()&lt;/code&gt;を実行&lt;/li&gt;
&lt;li&gt;このサンプルのすべての&lt;code&gt;JMenuItem&lt;/code&gt;は、&lt;code&gt;beep&lt;/code&gt;音を鳴らすだけのダミー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;この&lt;code&gt;JMenu&lt;/code&gt;の入った、&lt;code&gt;JPopupMenu&lt;/code&gt;を&lt;code&gt;JComponent#setComponentPopupMenu(...)&lt;/code&gt;で&lt;code&gt;JMenuBar&lt;/code&gt;以外のコンポーネントに設定すると無限ループする

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6949414&quot;&gt;Bug ID: JDK-6949414 JMenu.buildMenuElementArray() endless loop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;回避方法:

&lt;ul&gt;
&lt;li&gt;マウスイベントを作成し、&lt;code&gt;menu.dispatchEvent(new MouseEvent(menu, MouseEvent.MOUSE_ENTERED, e.getWhen(), 0, 0, 0, 0, false));&lt;/code&gt;を実行する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/25260684/programmatically-expand-sub-jmenuitems&quot;&gt;java - Programmatically expand sub JMenuItems - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MenuElement&lt;/code&gt;の配列を作成し、&lt;code&gt;MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{...});&lt;/code&gt;を実行する

&lt;ul&gt;
&lt;li&gt;ドキュメントには、&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/MenuSelectionManager.html#setSelectedPath%28javax.swing.MenuElement%5B%5D%29&quot;&gt;「このメソッドは public ですが、Look &amp;amp; Feel エンジンで使用されるため、クライアントアプリケーションからは呼び出さないでください。」&lt;/a&gt;とあるが、現状では&lt;code&gt;JMenu&lt;/code&gt;の&lt;code&gt;buildMenuElementArray(...)&lt;/code&gt;が以下の状態なので仕方ない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;/*
 * Build an array of menu elements - from &amp;lt;code&amp;gt;PopupMenu&amp;lt;/code&amp;gt; to
 * the root &amp;lt;code&amp;gt;JMenuBar&amp;lt;/code&amp;gt;.
 * @param  leaf  the leaf node from which to start building up the array
 * @return the array of menu items
 */
private MenuElement[] buildMenuElementArray(JMenu leaf) {
    Vector&amp;lt;MenuElement&amp;gt; elements = new Vector&amp;lt;MenuElement&amp;gt;();
    Component current = leaf.getPopupMenu();
    JPopupMenu pop;
    JMenu menu;
    JMenuBar bar;

    while (true) {
        if (current instanceof JPopupMenu) {
            pop = (JPopupMenu) current;
            elements.insertElementAt(pop, 0);
            current = pop.getInvoker();
        } else if (current instanceof JMenu) {
            menu = (JMenu) current;
            elements.insertElementAt(menu, 0);
            current = menu.getParent();
        } else if (current instanceof JMenuBar) {
            bar = (JMenuBar) current;
            elements.insertElementAt(bar, 0);
            MenuElement me[] = new MenuElement[elements.size()];
            elements.copyInto(me);
            return me;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?topic=9327&amp;amp;forum=12&quot;&gt;JMenuBarの動作 － Java Solution － ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12125402/activate-jmenubar-on-hover&quot;&gt;java - Activate JMenuBar on hover - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/popupwithoutclickonmenu</link>
                <guid>http://terai.xrea.jp/swing/popupwithoutclickonmenu</guid>
                <pubDate>2013-02-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldを編集不可のJTextPaneに追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;を空欄として編集不可にした&lt;code&gt;JTextPane&lt;/code&gt;に追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextFieldOnReadOnlyTextPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-N1aQ1F9Zrn8/UReetdvfWQI/AAAAAAAABdc/9J_2lkAgW0Y/s800/TextFieldOnReadOnlyTextPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;void insertQuestion(final JTextPane textPane, String str) {
  Document doc = textPane.getDocument();
  try{
    doc.insertString(doc.getLength(), str, null);
    final int pos = doc.getLength();
    System.out.println(pos);
    final JTextField field = new JTextField(4) {
      @Override public Dimension getMaximumSize() {
        return getPreferredSize();
      }
    };
    field.setBorder(BorderFactory.createMatteBorder(0,0,1,0,Color.BLACK));
    field.addFocusListener(new FocusListener() {
      @Override public void focusGained(FocusEvent e) {
        try{
          Rectangle rect = textPane.modelToView(pos);
          rect.grow(0, 4);
          rect.setSize(field.getSize());
          textPane.scrollRectToVisible(rect);
        }catch(BadLocationException ex) {
          ex.printStackTrace();
        }
      }
      @Override public void focusLost(FocusEvent e) {}
    });
    Dimension d = field.getPreferredSize();
    int baseline = field.getBaseline(d.width, d.height);
    field.setAlignmentY(baseline/(float)d.height);

    SimpleAttributeSet a = new SimpleAttributeSet();
    StyleConstants.setLineSpacing(a, 1.5f);
    textPane.setParagraphAttributes(a, true);

    textPane.insertComponent(field);
    doc.insertString(doc.getLength(), &quot;\n&quot;, null);
  }catch(BadLocationException e) {
    e.printStackTrace();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、編集不可にした&lt;code&gt;JTextPane&lt;/code&gt;内の文字列中に、編集可能な空欄として&lt;code&gt;JTextField&lt;/code&gt;を追加(&lt;code&gt;JTextPane#insertComponent(...)&lt;/code&gt;を使用)しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;編集不可に設定&lt;/li&gt;
&lt;li&gt;行間を&lt;code&gt;1.5&lt;/code&gt;倍に設定

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LineSpacing.html&quot;&gt;JEditorPaneやJTextPaneに行間を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField#getMaximumSize()&lt;/code&gt;をオーバーライドして幅を制限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextFieldにMatteBorder&lt;/code&gt;を設定して下線のみ表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField#setAlignmentY(...)&lt;/code&gt;でベースラインを揃える

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InsertComponentBaseline.html&quot;&gt;JTextPaneに追加するコンポーネントのベースラインを揃える&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;に&lt;code&gt;FocusListener&lt;/code&gt;を追加し、&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどで&lt;code&gt;Focus&lt;/code&gt;が移動したら、その&lt;code&gt;JTextField&lt;/code&gt;までスクロールするように設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textfieldonreadonlytextpane</link>
                <guid>http://terai.xrea.jp/swing/textfieldonreadonlytextpane</guid>
                <pubDate>2013-02-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのドロップダウンリストが表示する最大項目数を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストでスクロールバーを使用しないで表示可能な項目数を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MaximumRowCount&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-6YdIN-49R8M/UQ6Cpy8yQdI/AAAAAAAABdE/-6_SS6KCdDE/s800/MaximumRowCount.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;comboBox.setMaximumRowCount(newValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSpinner&lt;/code&gt;で指定した数値を&lt;code&gt;JComboBox#setMaximumRowCount(newValue);&lt;/code&gt;で変更することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JComboBox&lt;/code&gt;最大表示項目数は、&lt;code&gt;8&lt;/code&gt;で固定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;、負の値を設定してもエラーにはならないが、&lt;code&gt;1&lt;/code&gt;の場合より余分な領域が表示される？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/maximumrowcount</link>
                <guid>http://terai.xrea.jp/swing/maximumrowcount</guid>
                <pubDate>2013-02-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarに検索結果をハイライト表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;などに&lt;code&gt;JTextArea&lt;/code&gt;の文字列検索の結果をハイライト表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollBarSearchHighlighter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-69jv_2q3f8g/UQT6FH3HXbI/AAAAAAAABcY/FmYcY3aLr6w/s800/ScrollBarSearchHighlighter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scrollbar.setUI(new WindowsScrollBarUI() {
  @Override protected void paintTrack(
      Graphics g, JComponent c, Rectangle trackBounds) {
    super.paintTrack(g, c, trackBounds);

    Rectangle rect = textArea.getBounds();
    double sy = trackBounds.getHeight() / rect.getHeight();
    AffineTransform at = AffineTransform.getScaleInstance(1.0, sy);
    Highlighter highlighter = textArea.getHighlighter();
    g.setColor(Color.YELLOW);
    try{
      for(Highlighter.Highlight hh: highlighter.getHighlights()) {
        Rectangle r = textArea.modelToView(hh.getStartOffset());
        Rectangle s = at.createTransformedShape(r).getBounds();
        int h = 2; //Math.max(2, s.height-2);
        g.fillRect(trackBounds.x, trackBounds.y+s.y, trackBounds.width, h);
      }
    }catch(BadLocationException e) {
      e.printStackTrace();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;ScrollBarUI#paintTrack(...)&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;JTextArea&lt;/code&gt;内の文字列の検索結果を縦の&lt;code&gt;JScrollBar&lt;/code&gt;内部に描画しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;行分のハイライトの高さは&lt;code&gt;2px&lt;/code&gt;で固定&lt;/li&gt;
&lt;li&gt;検索結果の位置は&lt;code&gt;JTextComponent#modelToView(Matcher#start());&lt;/code&gt;を利用しているため、ハイライト対象の文字列が折り返しで&lt;code&gt;2&lt;/code&gt;行になっても、ハイライトされるのは開始位置のある&lt;code&gt;1&lt;/code&gt;行目のみ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような&lt;code&gt;Icon&lt;/code&gt;を設定した&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;JScrollPane#setRowHeaderView(...)&lt;/code&gt;で追加する方法もあります。こちらは、縦&lt;code&gt;JScrollBar&lt;/code&gt;に直接ハイライトを描画しないので、上下の増減ボタンは考慮せず、またノブの代わりに現在表示位置を示す領域を半透明で描画しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(new Icon() {
  private final Color THUMB_COLOR = new Color(0,0,255,50);
  private final Rectangle thumbRect = new Rectangle();
  private final JTextComponent textArea;
  private final JScrollBar scrollbar;
  public HighlightIcon(JTextComponent textArea, JScrollBar scrollbar) {
    this.textArea  = textArea;
    this.scrollbar = scrollbar;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    //Rectangle rect   = textArea.getBounds();
    //Dimension sbSize = scrollbar.getSize();
    //Insets sbInsets  = scrollbar.getInsets();
    //double sy = (sbSize.height-sbInsets.top-sbInsets.bottom)/rect.getHeight();
    int itop = scrollbar.getInsets().top;
    BoundedRangeModel range = scrollbar.getModel();
    double sy = range.getExtent()/(double)(range.getMaximum()-range.getMinimum());
    AffineTransform at = AffineTransform.getScaleInstance(1.0, sy);
    Highlighter highlighter = textArea.getHighlighter();

    //paint Highlight
    g.setColor(Color.RED);
    try{
      for(Highlighter.Highlight hh: highlighter.getHighlights()) {
        Rectangle r = textArea.modelToView(hh.getStartOffset());
        Rectangle s = at.createTransformedShape(r).getBounds();
        int h = 2; //Math.max(2, s.height-2);
        g.fillRect(x, y+itop+s.y, getIconWidth(), h);
      }
    }catch(BadLocationException e) {
      e.printStackTrace();
    }

    //paint Thumb
    if(scrollbar.isVisible()) {
      //JViewport vport = Objects.requireNonNull(
      //  (JViewport)SwingUtilities.getAncestorOfClass(JViewport.class, textArea));
      //Rectangle thumbRect = vport.getBounds();
      thumbRect.height = range.getExtent();
      thumbRect.y = range.getValue(); //vport.getViewPosition().y;
      g.setColor(THUMB_COLOR);
      Rectangle s = at.createTransformedShape(thumbRect).getBounds();
      g.fillRect(x, y+itop+s.y, getIconWidth(), s.height);
    }
  }
  @Override public int getIconWidth() {
    return 8;
  }
  @Override public int getIconHeight() {
    JViewport vport = Objects.requireNonNull(
        (JViewport)SwingUtilities.getAncestorOfClass(JViewport.class, textArea));
    return vport.getHeight();
  }
});

scroll.setVerticalScrollBar(scrollbar);
/*
// Fixed Versions: 7 (b134)
scroll.setRowHeaderView(label);
/*/
// 6826074 JScrollPane does not revalidate the component hierarchy after scrolling
// http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6826074
// Affected Versions: 6u12,6u16,7
JViewport vp = new JViewport() {
  @Override public void setViewPosition(Point p) {
    super.setViewPosition(p);
    revalidate();
  }
};
vp.setView(label);
scroll.setRowHeader(vp);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;縦&lt;code&gt;JScrollBar&lt;/code&gt;の中ではなく、左横などにハイライト位置用の&lt;code&gt;Icon&lt;/code&gt;を表示したい場合は、&lt;code&gt;MatteBorder&lt;/code&gt;を利用する方法があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollBar scrollBar = new JScrollBar(JScrollBar.VERTICAL) {
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.width += getInsets().left;
    return d;
  }
  @Override public void updateUI() {
    super.updateUI();
    setBorder(BorderFactory.createMatteBorder(0, 4, 0, 0, new Icon() {
      @Override public void paintIcon(Component c, Graphics g, int x, int y) {
        //...略...
      }
      @Override public int getIconWidth() {
        return getInsets().left;
      }
      @Override public int getIconHeight() {
        return getHeight();
      }
    }));
  }
};
scroll.setVerticalScrollBar(scrollBar);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;行ヘッダーを使用したハイライトはJava7以降でのみ有効に機能するようです。 -- &lt;a href=&quot;http://terai.xrea.jp/%E8%AA%AD%E8%80%85.html&quot;&gt;読者&lt;/a&gt; 2013-08-18 (日) 23:10:11

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。仰るとおり、&lt;code&gt;1.6.0_45&lt;/code&gt;で行ヘッダ版が正常に動作しないことを確認しました。回避方法がないか、&lt;code&gt;Bug Database&lt;/code&gt;あたりを調べてみようと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-19 (月) 00:04:59&lt;/li&gt;
&lt;li&gt;修正された時期などから、&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6910490&quot;&gt;Bug ID: JDK-6910490 MatteBorder JScrollpane interaction&lt;/a&gt;が原因かもと&lt;code&gt;MatteBorder&lt;/code&gt;は使用せずに直接&lt;code&gt;Icon&lt;/code&gt;を&lt;code&gt;JLabel&lt;/code&gt;に追加するよう変更したけど、改善しない…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-19 (月) 11:24:23&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6826074&quot;&gt;Bug ID: JDK-6826074 JScrollPane does not revalidate the component hierarchy after scrolling&lt;/a&gt;が原因(&lt;code&gt;HeavyWeight&lt;/code&gt;, &lt;code&gt;LightWeight&lt;/code&gt;だけじゃなくレイアウトがうまく更新されていない？)のようです。&lt;code&gt;JViewport#setViewPosition(...)&lt;/code&gt;をオーバーライドして&lt;code&gt;revalidate()&lt;/code&gt;すれば、&lt;code&gt;1.7.0&lt;/code&gt;と同様の動作をするようになりました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-19 (月) 14:43:11&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Highlighter.Highlight#getStartOffset()&lt;/code&gt;を使用するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-23 (金) 16:14:35&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollbarsearchhighlighter</link>
                <guid>http://terai.xrea.jp/swing/scrollbarsearchhighlighter</guid>
                <pubDate>2013-01-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MetalLookAndFeelで太字フォントを使用しない</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;で太字フォントを使用しないように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BoldMetal&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-7wQtHGyNRDQ/UPv6YyOBReI/AAAAAAAABbk/_vXFoJwk-ug/s800/BoldMetal.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;swing.boldMetal&quot;, Boolean.FALSE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;UIManager.put(&amp;quot;swing.boldMetal&amp;quot;, Boolean.FALSE);&lt;/code&gt;として、&lt;code&gt;JLabel&lt;/code&gt;、&lt;code&gt;JButton&lt;/code&gt;、&lt;code&gt;TitleBorder&lt;/code&gt;などのデフォルトとしてボールド(太字)フォントを使用しないように設定しています。&lt;/p&gt;

&lt;p&gt;システムプロパティー&lt;code&gt;swing.boldMetal&lt;/code&gt;を&lt;code&gt;false&lt;/code&gt;に設定する方法でもボールド(太字)フォントを使用しないように設定することができます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; java -Dswing.boldMetal=false example.MainPanel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトプロパティー&lt;code&gt;swing.boldMetal&lt;/code&gt;が、システムプロパティー&lt;code&gt;swing.boldMetal&lt;/code&gt;より優先される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;で&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;b&amp;gt;...&amp;lt;/b&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;のように装飾した場合は、デフォルトプロパティー&lt;code&gt;swing.boldMetal&lt;/code&gt;より優先される(このサンプルでは、&lt;code&gt;JTabbedPane&lt;/code&gt;の選択タブタイトルを&lt;code&gt;&amp;lt;html&amp;gt;&amp;lt;b&amp;gt;...&amp;lt;/b&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;で装飾)&lt;/li&gt;
&lt;li&gt;以下のようにデフォルトプロパティー&lt;code&gt;swing.boldMetal&lt;/code&gt;を更新することで切り替え可能

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/javax/swing/plaf/metal/DefaultMetalTheme.html&quot;&gt;DefaultMetalTheme (Java Platform SE 8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox check = new JCheckBox(&quot;swing.boldMetal&quot;);
check.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    JCheckBox c = (JCheckBox)e.getSource();
    UIManager.put(&quot;swing.boldMetal&quot;, c.isSelected());
    // re-install the Metal Look and Feel
    try{
      UIManager.setLookAndFeel(new MetalLookAndFeel());
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    // Update the ComponentUIs for all Components. This
    // needs to be invoked for all windows.
    SwingUtilities.updateComponentTreeUI(SwingUtilities.getWindowAncestor(c));
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/javax/swing/plaf/metal/DefaultMetalTheme.html&quot;&gt;DefaultMetalTheme (Java Platform SE 8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/boldmetal</link>
                <guid>http://terai.xrea.jp/swing/boldmetal</guid>
                <pubDate>2013-01-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeを透明にし、選択状態を半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の背景を透明にし、ノードの選択色を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-HxmekrVRX6M/UPLEn6O6-VI/AAAAAAAABbM/XJoGyl2khVM/s800/TranslucentTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TransparentTreeCellRenderer extends DefaultTreeCellRenderer {
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)super.getTreeCellRendererComponent(
        tree, value, isSelected, expanded, leaf, row, hasFocus);
    c.setOpaque(false);
    return c;
  }
  private final Color ALPHA_OF_ZERO = new Color(0, true);
  @Override public Color getBackgroundNonSelectionColor() {
    return ALPHA_OF_ZERO;
  }
  @Override public Color getBackgroundSelectionColor() {
    return ALPHA_OF_ZERO;
  }
}

class TranslucentTreeCellRenderer extends TransparentTreeCellRenderer {
  private final Color backgroundSelectionColor = new Color(100, 100, 255, 100);
  @Override public Color getBackgroundSelectionColor() {
    return backgroundSelectionColor;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;TreeCellRenderer&lt;/code&gt;を半透明化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#setOpaque(false);&lt;/code&gt;として&lt;code&gt;JTree&lt;/code&gt;や&lt;code&gt;JScrollPane&lt;/code&gt;などを透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getBackgroundNonSelectionColor(...)&lt;/code&gt;をオーバーライドしてノードの背景色を透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getBackgroundSelectionColor(...)&lt;/code&gt;をオーバーライドしてノードの選択色を半透明化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;右: &lt;code&gt;TreeCellRenderer&lt;/code&gt;を透明化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#setOpaque(false);&lt;/code&gt;として&lt;code&gt;JTree&lt;/code&gt;や&lt;code&gt;JScrollPane&lt;/code&gt;などを透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getBackgroundNonSelectionColor(...)&lt;/code&gt;をオーバーライドしてノードの背景色を透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getBackgroundSelectionColor(...)&lt;/code&gt;をオーバーライドしてノードの選択色を透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#paintComponent(...)&lt;/code&gt;をオーバーライドして、半透明の選択色で&lt;code&gt;JTree&lt;/code&gt;に直接選択状態を描画

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/TreeRowSelection.html&quot;&gt;JTreeを行クリックで選択し、行全体を選択状態の背景色で描画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;系の&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;や&lt;code&gt;GTKLookAndFeel&lt;/code&gt;などの場合、以下のような何も描画しない&lt;code&gt;Painter&lt;/code&gt;をノード選択に使用することで、選択色を半透明にすることができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//NimbusLookAndFeel(SynthLookAndFeel) JDK 1.7.0
UIDefaults d = new UIDefaults();
d.put(&quot;Tree:TreeCell[Enabled+Selected].backgroundPainter&quot;, new AbstractRegionPainter() {
  @Override protected void doPaint(Graphics2D g, JComponent c, int width, int height, Object[] extendedCacheKeys) {
    //Do nothing
  }
  @Override protected final PaintContext getPaintContext() {
    return null;
  }
});
tree2.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
tree2.putClientProperty(&quot;Nimbus.Overrides.InheritDefaults&quot;, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeRowSelection.html&quot;&gt;JTreeを行クリックで選択し、行全体を選択状態の背景色で描画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RootPaneBackground.html&quot;&gt;JRootPaneの背景として画像を表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucenttree</link>
                <guid>http://terai.xrea.jp/swing/translucenttree</guid>
                <pubDate>2013-01-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JRootPaneの背景として画像を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JRootPane&lt;/code&gt;の背景として画像を表示しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RootPaneBackground&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-2HEcpl-4XqA/UOmSieyPnxI/AAAAAAAABaI/KBA4i6QGH3E/s800/RootPaneBackground.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame frame = new JFrame(&quot;@title@&quot;) {
  @Override protected JRootPane createRootPane() {
    JRootPane rp = new JRootPane() {
      //private final TexturePaint texture = makeCheckerTexture();
      @Override protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g.create();
        g2.setPaint(texture);
        g2.fillRect(0, 0, getWidth(), getHeight());
        g2.dispose();
      }
      @Override public void updateUI() {
        super.updateUI();
        BufferedImage bi = makeBufferedImage(&quot;test.jpg&quot;);
        setBorder(new CentredBackgroundBorder(bi));
        setOpaque(false);
      }
    };
    return rp;
  }
};
//frame.getRootPane().setBackground(Color.BLUE);
//frame.getLayeredPane().setBackground(Color.GREEN);
//frame.getContentPane().setBackground(Color.RED);
((JComponent)frame.getContentPane()).setOpaque(false);
frame.setJMenuBar(createMenubar());
frame.getContentPane().add(new MainPanel());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;このサンプルでは、&lt;code&gt;JFrame#createRootPane()&lt;/code&gt;メソッドをオーバーライドして、以下の方法で背景に画像を描画する&lt;code&gt;JRootPane&lt;/code&gt;を作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中央の画像: &lt;a href=&quot;https://forums.oracle.com/thread/1395763&quot;&gt;CentredBackgroundBorder&lt;/a&gt;を使用&lt;/li&gt;
&lt;li&gt;チェック柄: &lt;code&gt;JRootPane#paintComponent(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JRootPane&lt;/code&gt;の子コンポーネントの透明化、半透明化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentPane&lt;/code&gt;: &lt;code&gt;setOpaque(false);&lt;/code&gt;で透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDesktopPane&lt;/code&gt;:  &lt;code&gt;setOpaque(false);&lt;/code&gt;で透明化

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentFrame.html&quot;&gt;JInternalFrameを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;には未対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenuBar&lt;/code&gt;: &lt;code&gt;setOpaque(false);&lt;/code&gt;で透明化し、&lt;code&gt;JMenuBar#paintComponent(...)&lt;/code&gt;をオーバーライドして半透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JMenu&lt;/code&gt;, &lt;code&gt;JMenuItem&lt;/code&gt;など: &lt;code&gt;setOpaque(false);&lt;/code&gt;で透明化、&lt;code&gt;LookAndFeel&lt;/code&gt;によって、&lt;code&gt;JMenu#setBackground(new Color(0,0,0,0));&lt;/code&gt;、&lt;code&gt;UIManager.put(&amp;quot;Menu.selectionBackground&amp;quot;, new Color(0,0,100,100));&lt;/code&gt;などを使用

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/MenuBarBackground.html&quot;&gt;JMenuBarの背景に画像を表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;: &lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentSubMenu.html&quot;&gt;JMenuなどから開くPopupMenuを半透明化&lt;/a&gt;などで、半透明化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1395763&quot;&gt;Swing - How can I use TextArea with Background Picture ?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CentredBackgroundBorder.html&quot;&gt;JTextAreaの背景に画像を表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rootpanebackground</link>
                <guid>http://terai.xrea.jp/swing/rootpanebackground</guid>
                <pubDate>2013-01-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;半透明な&lt;code&gt;JButton&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-W5o-8ilpY6k/UOCzLo2oOeI/AAAAAAAABZ0/m1_AjYpKqiY/s800/TranslucentButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TranslucentButton extends JButton{
  private static final Color TL = new Color(1f, 1f, 1f, .2f);
  private static final Color BR = new Color(0f, 0f, 0f, .4f);
  private static final Color ST = new Color(1f, 1f, 1f, .2f);
  private static final Color SB = new Color(1f, 1f, 1f, .1f);
  private Color ssc;
  private Color bgc;
  private int r = 8;
  public TranslucentButton(String text) {
    super(text);
  }
  public TranslucentButton(String text, Icon icon) {
    super(text, icon);
  }
  @Override public void updateUI() {
    super.updateUI();
    setContentAreaFilled(false);
    setFocusPainted(false);
    setOpaque(false);
    setForeground(Color.WHITE);
  }
  @Override protected void paintComponent(Graphics g) {
    int x = 0;
    int y = 0;
    int w = getWidth();
    int h = getHeight();
    Graphics2D g2 = (Graphics2D) g.create();
    g2.setRenderingHint(
      RenderingHints.KEY_ANTIALIASING,
      RenderingHints.VALUE_ANTIALIAS_ON);
    Shape area = new RoundRectangle2D.Float(x, y, w - 1, h - 1, r, r);
    ssc = TL;
    bgc = BR;
    ButtonModel m = getModel();
    if (m.isPressed()) {
      ssc = SB;
      bgc = ST;
    } else if (m.isRollover()) {
      ssc = ST;
      bgc = SB;
    }
    g2.setPaint(new GradientPaint(x, y, ssc, x, y + h, bgc, true));
    g2.fill(area);
    g2.setPaint(BR);
    g2.draw(area);
    g2.dispose();
    super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;透明な&lt;code&gt;JButton&lt;/code&gt;、全体を半透明な&lt;code&gt;Icon&lt;/code&gt;、タイトルの&lt;code&gt;Icon&lt;/code&gt;と文字列は&lt;code&gt;align=&amp;#39;middle&amp;#39;&lt;/code&gt;などを指定して配置

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/ToggleButtonBar.html&quot;&gt;JRadioButtonを使ってToggleButtonBarを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false);&lt;/code&gt;, &lt;code&gt;setContentAreaFilled(false);&lt;/code&gt;などで、&lt;code&gt;JButton&lt;/code&gt;自体は透明化&lt;/li&gt;
&lt;li&gt;タイトル&lt;code&gt;Icon&lt;/code&gt;と文字列の&lt;code&gt;align&lt;/code&gt;が、&lt;code&gt;top&lt;/code&gt;、&lt;code&gt;middle&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;のどれにしてもきれいに揃わない&lt;/li&gt;
&lt;li&gt;サイズが固定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;に変更しても、余計なフチが表示されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;を使っているので&lt;code&gt;GTKLookAndFeel&lt;/code&gt;で、&lt;code&gt;Pressed&lt;/code&gt;時の文字色変更に対応していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static String makeTitleWithIcon(URL u, String t, String a) {
  return String.format(
    &quot;&amp;lt;html&amp;gt;&amp;lt;p align=&#39;%s&#39;&amp;gt;&amp;lt;img src=&#39;%s&#39; align=&#39;%s&#39; /&amp;gt;&amp;amp;nbsp;%s&quot;, a, u, a, t);
}
private static AbstractButton makeButton(String title) {
  return new JButton(title) {
    @Override public void updateUI() {
      super.updateUI();
      setVerticalAlignment(SwingConstants.CENTER);
      setVerticalTextPosition(SwingConstants.CENTER);
      setHorizontalAlignment(SwingConstants.CENTER);
      setHorizontalTextPosition(SwingConstants.CENTER);
      setMargin(new Insets(2, 8, 2, 8));
      setBorder(BorderFactory.createEmptyBorder(2, 8, 2, 8));
      //setBorderPainted(false);
      setContentAreaFilled(false);
      setFocusPainted(false);
      setOpaque(false);
      setForeground(Color.WHITE);
      setIcon(new TranslucentButtonIcon());
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;透明な&lt;code&gt;JButton&lt;/code&gt;、全体を半透明な&lt;code&gt;Icon&lt;/code&gt;、タイトルの&lt;code&gt;Icon&lt;/code&gt;と文字列は&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;OverlayLayout&lt;/code&gt;で配置

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;の&lt;code&gt;align&lt;/code&gt;ではなく、&lt;code&gt;Baseline&lt;/code&gt;の揃った&lt;code&gt;JLabel&lt;/code&gt;を半透明な&lt;code&gt;JButton&lt;/code&gt;に重ねて表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;のテキストは空なので、&lt;code&gt;GTKLookAndFeel&lt;/code&gt;で、&lt;code&gt;Pressed&lt;/code&gt;時の文字色変更に対応していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(&quot;JLabel&quot;, icon, SwingConstants.CENTER);
label.setForeground(Color.WHITE);
label.setAlignmentX(.5f);
b = makeButton(&quot;&quot;);
b.setAlignmentX(.5f);
JPanel p = new JPanel();
p.setLayout(new OverlayLayout(p));
p.setOpaque(false);
p.add(label);
p.add(b);
add(p);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;透明な&lt;code&gt;JButton&lt;/code&gt;、全体を半透明な&lt;code&gt;Icon&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false);&lt;/code&gt;, &lt;code&gt;setContentAreaFilled(false);&lt;/code&gt;などを設定して&lt;code&gt;JButton&lt;/code&gt;は透明にし、&lt;code&gt;JButton#paintComponent(...)&lt;/code&gt;をオーバーライドして半透明の影などを描画&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;で、余計なフチ？が表示される&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#setBorderPainted(false);&lt;/code&gt;で、フチを非表示にできる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setBorder(BorderFactory.createEmptyBorder(2, 8, 2, 8));&lt;/code&gt;で設定した余白は、&lt;code&gt;Icon&lt;/code&gt;自体のサイズには含めないが、&lt;code&gt;Icon&lt;/code&gt;の描画は使用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#setMargin(new Insets(2, 8, 2, 8));&lt;/code&gt;が有効かどうかは、環境または&lt;code&gt;LookAndFeel&lt;/code&gt;に依存する？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TranslucentButtonIcon implements Icon {
  private static final Color TL = new Color(1f, 1f, 1f, .2f);
  private static final Color BR = new Color(0f, 0f, 0f, .4f);
  private static final Color ST = new Color(1f, 1f, 1f, .2f);
  private static final Color SB = new Color(1f, 1f, 1f, .1f);
  private static final int R = 8;
  private int width;
  private int height;
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    if (c instanceof AbstractButton) {
      AbstractButton b = (AbstractButton) c;
      //XXX: Insets i = b.getMargin();
      Insets i = b.getBorder().getBorderInsets(b);
      int w = c.getWidth();
      int h = c.getHeight();
      width  = w - i.left - i.right;
      height = h - i.top - i.bottom;
      Graphics2D g2 = (Graphics2D) g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      Shape area = new RoundRectangle2D.Float(
          x - i.left, y - i.top, w - 1, h - 1, R, R);
      Color ssc = TL;
      Color bgc = BR;
      ButtonModel m = b.getModel();
      if (m.isPressed()) {
        ssc = SB;
        bgc = ST;
      } else if (m.isRollover()) {
        ssc = ST;
        bgc = SB;
      }
      g2.setPaint(new GradientPaint(0, 0, ssc, 0, h, bgc, true));
      g2.fill(area);
      g2.setPaint(BR);
      g2.draw(area);
      g2.dispose();
    }
  }
  @Override public int getIconWidth()  {
    return Math.max(width, 100);
  }
  @Override public int getIconHeight() {
    return Math.max(height, 20);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToggleButtonBar.html&quot;&gt;JRadioButtonを使ってToggleButtonBarを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chrfb.deviantart.com/art/quot-ecqlipse-2-quot-PNG-59941546&quot;&gt;&amp;quot;ecqlipse 2&amp;quot; PNG by ~chrfb on deviantART&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentbutton</link>
                <guid>http://terai.xrea.jp/swing/translucentbutton</guid>
                <pubDate>2012-12-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaの最終行だけ編集可能になるよう設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DocumentFilter&lt;/code&gt;を使用して最終行のみ編集可能な&lt;code&gt;JTextArea&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LastLineEditableTextArea&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-WoZIsdy2Qd0/UNcd6P73NAI/AAAAAAAABZg/a2O8KLk4hVQ/s800/LastLineEditableTextArea.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class NonEditableLineDocumentFilter extends DocumentFilter {
  public static final String PROMPT = &quot;&amp;gt; &quot;;
  @Override public void insertString(
      DocumentFilter.FilterBypass fb, int offset, String string,
      AttributeSet attr) throws BadLocationException {
    if(string == null) {
      return;
    }else{
      replace(fb, offset, 0, string, attr);
    }
  }
  @Override public void remove(
      DocumentFilter.FilterBypass fb,
      int offset, int length) throws BadLocationException {
    replace(fb, offset, length, &quot;&quot;, null);
  }
  @Override public void replace(
      DocumentFilter.FilterBypass fb, int offset, int length,
      String text, AttributeSet attrs) throws BadLocationException {
    Document doc = fb.getDocument();
    Element root = doc.getDefaultRootElement();
    int count = root.getElementCount();
    int index = root.getElementIndex(offset);
    Element cur = root.getElement(index);
    int promptPosition = cur.getStartOffset()+PROMPT.length();
    if(index==count-1 &amp;amp;&amp;amp; offset-promptPosition&amp;gt;=0) {
      if(text.equals(&quot;\n&quot;)) {
        String line = doc.getText(promptPosition, offset-promptPosition);
        String[] args = line.split(&quot; &quot;);
        String cmd = args[0];
        if(cmd.isEmpty()) {
          text = &quot;&quot;;
        }else{
          text = String.format(&quot;%n%s: command not found&quot;, cmd);
        }
        text += &quot;\n&quot;+PROMPT;
      }
      fb.replace(offset, length, text, attrs);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DocumentFilter#replace(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Document#getDefaultRootElement()&lt;/code&gt;でルートエレメントを取得し、&lt;code&gt;Element#getElementCount()&lt;/code&gt;で全体の行数を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset&lt;/code&gt;(文字挿入位置)から&lt;code&gt;Element#getElementIndex(offset)&lt;/code&gt;で、挿入位置の行番号と、&lt;code&gt;Element&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;上記の「挿入位置の行番号」と「全体の行数-1」が等しい場合だけ、&lt;code&gt;DocumentFilter.FilterBypass#replace(...)&lt;/code&gt;を実行(編集可能)する

&lt;ul&gt;
&lt;li&gt;上記のサンプルでは、コマンドプロンプト風に、最終行の行頭にあるプロンプトは編集不可で、改行の入力ごとに最終行の文字列を評価してメッセージを追加表示している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NonEditableLine.html&quot;&gt;JTextAreaの一部を編集不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/lastlineeditabletextarea</link>
                <guid>http://terai.xrea.jp/swing/lastlineeditabletextarea</guid>
                <pubDate>2012-12-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderのノブをドラッグ中にToolTipで値を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;のノブをドラッグ中に&lt;code&gt;ToolTip&lt;/code&gt;でその現在値を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SliderToolTips&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-RBRHhAqSA3A/UM3gOvnmIOI/AAAAAAAABZM/LdLir_Y4dQc/s800/SliderToolTips.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SliderPopupListener extends MouseAdapter{
  private final JWindow toolTip = new JWindow();
  private final JLabel label = new JLabel(&quot;&quot;, SwingConstants.CENTER);
  private final Dimension size = new Dimension(30, 20);
  public SliderPopupListener() {
    label.setOpaque(false);
    label.setBackground(UIManager.getColor(&quot;ToolTip.background&quot;));
    label.setBorder(UIManager.getBorder(&quot;ToolTip.border&quot;));
    toolTip.add(label);
    toolTip.setSize(size);
  }
  private int prevValue = -1;
  protected void updateToolTip(MouseEvent me) {
    JSlider slider = (JSlider)me.getSource();
    int intValue = (int)slider.getValue();
    if(prevValue!=intValue) {
      label.setText(String.format(&quot;%03d&quot;, slider.getValue()));
      Point pt = me.getPoint();
      pt.y = -size.height;
      SwingUtilities.convertPointToScreen(pt, (Component)me.getSource());
      pt.translate(-size.width/2, 0);
      toolTip.setLocation(pt);
    }
    prevValue = intValue;
  }
  @Override public void mouseDragged(MouseEvent me) {
    updateToolTip(me);
  }
  @Override public void mousePressed(MouseEvent me) {
    toolTip.setVisible(true);
    updateToolTip(me);
  }
  @Override public void mouseReleased(MouseEvent me) {
    toolTip.setVisible(false);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ドラッグ中だけ&lt;code&gt;ToolTip&lt;/code&gt;で値を表示したいので、&lt;code&gt;JToolTip&lt;/code&gt;ではなくその背景色などが同じになるように設定した&lt;code&gt;JWindow&lt;/code&gt;を使用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MouseListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JWindow&lt;/code&gt;の表示非表示の切り替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MouseMotionListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider&lt;/code&gt;が指す値と&lt;code&gt;JWindow&lt;/code&gt;の位置(中心がマウスカーソルの&lt;code&gt;x&lt;/code&gt;座標、&lt;code&gt;JWindow&lt;/code&gt;の下端が&lt;code&gt;JSlider&lt;/code&gt;の上端)の更新&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JSlider&lt;/code&gt;では、ノブ以外の位置をクリックすると段階的に位置が変化するため、上記の&lt;code&gt;MouseListener&lt;/code&gt;を使用するとマウスカーソルの位置とノブの表示位置がずれる&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/JumpToClickedPositionSlider.html&quot;&gt;JSliderでクリックした位置にノブをスライド&lt;/a&gt;を使用して、クリック直後にその位置にノブ移動するように設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSlider.VERTICAL&lt;/code&gt;には未対応&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/JumpToClickedPositionSlider.html&quot;&gt;JSliderでクリックした位置にノブをスライド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToolTipLocation.html&quot;&gt;JToolTipの表示位置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/slidertooltips</link>
                <guid>http://terai.xrea.jp/swing/slidertooltips</guid>
                <pubDate>2012-12-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneのStyleSheetを使ってlist bulletを画像に変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;の&lt;code&gt;HTMLEditorKit&lt;/code&gt;から&lt;code&gt;StyleSheet&lt;/code&gt;を取得し、&lt;code&gt;list-style-image&lt;/code&gt;を使って&lt;code&gt;List bullet&lt;/code&gt;を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EditorPaneListStyle&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-cVKrTqKAhYk/UMSbt8J09jI/AAAAAAAABY0/IWonqNua5dM/s800/EditorPaneListStyle.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;HTMLEditorKit htmlEditorKit = (HTMLEditorKit)pane.getEditorKit();
StyleSheet styleSheet = htmlEditorKit.getStyleSheet();
String u = getClass().getResource(bullet).toString();
styleSheet.addRule(String.format(&quot;ul{list-style-image:url(%s);margin:0px 20px;}&quot;, u));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;Default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;ul{list-style-image:url(bullet.png);}&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CSS&lt;/code&gt;の&lt;code&gt;list-style-image&lt;/code&gt;プロパティを使って、&lt;code&gt;bullet&lt;/code&gt;を画像に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AlignmentY&lt;/code&gt;が中心にならない？ので、画像の下に余白を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt;のマージンも&lt;code&gt;margin:0px 20px;&lt;/code&gt;に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.swing.text.html.CSS&lt;/code&gt;は、&lt;code&gt;list-style-type&lt;/code&gt;プロパティも対応しているので、&lt;code&gt;circle&lt;/code&gt;, &lt;code&gt;square&lt;/code&gt;, &lt;code&gt;decimal&lt;/code&gt;などが&lt;code&gt;bullet&lt;/code&gt;として使用できるが、サイズは固定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;styleSheet.addRule(&quot;ul{list-style-type:circle;margin:0px 20px;}&quot;);
//styleSheet.addRule(&quot;ul{list-style-type:disc;margin:0px 20px;}&quot;);
//styleSheet.addRule(&quot;ul{list-style-type:square;margin:0px 20px;}&quot;);
//styleSheet.addRule(&quot;ul{list-style-type:decimal;margin:0px 20px;}&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.swing.text.html.CSS&lt;/code&gt;は、&lt;code&gt;a:hover&lt;/code&gt;などの擬似クラス(&lt;code&gt;pseudo-classes&lt;/code&gt;)や、&lt;code&gt;:before&lt;/code&gt;などの擬似要素(&lt;code&gt;pseudo elements&lt;/code&gt;)に対応していないので、以下のように&lt;code&gt;list-style-type:none&lt;/code&gt;として&lt;code&gt;:before&lt;/code&gt;で任意の文字を&lt;code&gt;bullet&lt;/code&gt;に適用することができない&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;styleSheet.addRule(&quot;ul{list-style-type:none;margin:0px 20px;}&quot;);
styleSheet.addRule(&quot;ul li:before{content: &quot;\u00BB&quot;;}&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.swing.text.html.StyleSheet.ListPainter#drawShape(...)&lt;/code&gt;などをオーバーライドできれば直接&lt;code&gt;bullet&lt;/code&gt;の形やサイズを変更できそうだが、コンストラクタがパッケージプライベート&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StyleSheet.html&quot;&gt;JEditorPaneのHTMLEditorKitにCSSを適用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/editorpaneliststyle</link>
                <guid>http://terai.xrea.jp/swing/editorpaneliststyle</guid>
                <pubDate>2012-12-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルに複数配置したコンポーネントのJToolTip</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中に複数個配置したコンポーネントにそれぞれ&lt;code&gt;JToolTip&lt;/code&gt;が表示されるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TooltipInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-OhwzDU_Mys4/ULuQJmYCRiI/AAAAAAAABYQ/Y3Q5mVlliHs/s800/TooltipInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public String getToolTipText(MouseEvent e) {
    Point pt = e.getPoint();
    int vrow = rowAtPoint(pt);
    int vcol = columnAtPoint(pt);
    int mcol = convertColumnIndexToModel(vcol);
    if(mcol==1) {
      TableCellRenderer tcr = getCellRenderer(vrow, vcol);
      Component c = prepareRenderer(tcr, vrow, vcol);
      if(c instanceof JPanel) {
        Rectangle r = getCellRect(vrow, vcol, true);
        c.setBounds(r);
        c.doLayout();
        pt.translate(-r.x, -r.y);
        Component l = SwingUtilities.getDeepestComponentAt(c, pt.x, pt.y);
        if(l instanceof JLabel) {
          ImageIcon icon = (ImageIcon)((JLabel)l).getIcon();
          return icon.getDescription();
        }
      }
    }
    return super.getToolTipText(e);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable#getToolTipText(MouseEvent)&lt;/code&gt;をオーバーライドして、&lt;code&gt;JTable&lt;/code&gt;のセルに複数配置したコンポーネントの情報を&lt;code&gt;ToolTipText&lt;/code&gt;として返すように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#getCellRect(...)&lt;/code&gt;で、カーソル下のセル描画に使用されるコンポーネントを取得&lt;/li&gt;
&lt;li&gt;取得したコンポーネントの位置、サイズ、レイアウトを更新

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://stackoverflow.com/questions/10854831/tool-tip-in-jpanel-in-jtable-not-working&quot;&gt;java - Tool tip in JPanel in JTable not working - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;更新したコンポーネント内から、&lt;code&gt;SwingUtilities.getDeepestComponentAt()&lt;/code&gt;で、カーソル下のアイコン(&lt;code&gt;JLabel&lt;/code&gt;)を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImageIcon#getDescription()&lt;/code&gt;で取得した文字列を&lt;code&gt;ToolTipText&lt;/code&gt;として返す&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10854831/tool-tip-in-jpanel-in-jtable-not-working&quot;&gt;java - Tool tip in JPanel in JTable not working - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowTooltips.html&quot;&gt;JTableのTooltipsを行ごとに変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CursorOfCellComponent.html&quot;&gt;JListのセル中に配置したコンポーネント毎にカーソルを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltipintablecell</link>
                <guid>http://terai.xrea.jp/swing/tooltipintablecell</guid>
                <pubDate>2012-12-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>OverlayLayoutで複数のJButtonを重ねて複合ボタンを作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;4&lt;/code&gt;つの扇形ボタンと円形ボタンを、&lt;code&gt;OverlayLayout&lt;/code&gt;を設定した&lt;code&gt;JPanel&lt;/code&gt;に配置して、複合ボタンを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CompoundButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-0bLp9wWHHOw/ULIxE5DUtzI/AAAAAAAABX4/pRUF7k-l4D0/s800/CompoundButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JComponent makeCompoundButton(final Dimension d) {
  JPanel p = new JPanel() {
    @Override public Dimension getPreferredSize() {
      return d;
    }
  };
  p.setLayout(new OverlayLayout(p));
  p.add(new CompoundButton(d, ButtonLocation.NOTH));
  p.add(new CompoundButton(d, ButtonLocation.SOUTH));
  p.add(new CompoundButton(d, ButtonLocation.EAST));
  p.add(new CompoundButton(d, ButtonLocation.WEST));
  p.add(new CompoundButton(d, ButtonLocation.CENTER));
  return p;
}

class CompoundButton extends JButton {
  protected final Color fc = new Color(100,150,255,200);
  protected final Color ac = new Color(230,230,230);
  protected final Color rc = Color.ORANGE;
  protected Shape shape;
  protected Shape base = null;
  private final ButtonLocation bl;
  private final Dimension dim;
  public CompoundButton(Dimension d, ButtonLocation bl) {
    super();
    this.dim = d;
    this.bl = bl;
    setIcon(new Icon() {
      @Override public void paintIcon(Component c, Graphics g, int x, int y) {
        Graphics2D g2 = (Graphics2D)g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                  RenderingHints.VALUE_ANTIALIAS_ON);
        if(getModel().isArmed()) {
          g2.setColor(ac);
          g2.fill(shape);
        }else if(isRolloverEnabled() &amp;amp;&amp;amp; getModel().isRollover()) {
          paintFocusAndRollover(g2, rc);
        }else if(hasFocus()) {
          paintFocusAndRollover(g2, fc);
        }else{
          g2.setColor(getBackground());
          g2.fill(shape);
        }
        g2.dispose();
      }
      @Override public int getIconWidth()  {
        return dim.width;
      }
      @Override public int getIconHeight() {
        return dim.height;
      }
    });
    setFocusPainted(false);
    setContentAreaFilled(false);
    setBackground(new Color(250, 250, 250));
    initShape();
  }
  @Override public Dimension getPreferredSize() {
    return dim;
  }
  protected void initShape() {
    if(!getBounds().equals(base)) {
      base = getBounds();
      float ww = getWidth() * 0.5f;
      float xx = ww * 0.5f;
      Shape inner = new Ellipse2D.Float(xx, xx, ww, ww);
      if(ButtonLocation.CENTER==bl) {
        shape = inner;
      }else{
        Shape outer = new Arc2D.Float(
          1, 1, getWidth()-2, getHeight()-2,
          bl.getStartDegree(), 90f, Arc2D.PIE);
        Area area = new Area(outer);
        area.subtract(new Area(inner));
        shape = area;
      }
    }
  }
  private void paintFocusAndRollover(Graphics2D g2, Color color) {
    g2.setPaint(new GradientPaint(0, 0, color,
                    getWidth()-1, getHeight()-1, color.brighter(), true));
    g2.fill(shape);
    g2.setColor(getBackground());
  }
  @Override protected void paintComponent(Graphics g) {
    initShape();
    super.paintComponent(g);
  }
  @Override protected void paintBorder(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
              RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getForeground());
    g2.draw(shape);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
              RenderingHints.VALUE_ANTIALIAS_OFF);
  }
  @Override public boolean contains(int x, int y) {
    //initShape();
    return shape.contains(x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;円形ボタン

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundButton.html&quot;&gt;JButtonの形を変更&lt;/a&gt;を使って、幅高さの半分の直径をもつ円ボタンを作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#contains(...)&lt;/code&gt;をオーバーライドして、図形内のみマウスカーソルが反応するように変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;扇形ボタン

&lt;ul&gt;
&lt;li&gt;東西南北に&lt;code&gt;4&lt;/code&gt;つ配置するので、角の大きさは&lt;code&gt;90&lt;/code&gt;度、始角はそれぞれ、&lt;code&gt;45&lt;/code&gt;、&lt;code&gt;135&lt;/code&gt;、&lt;code&gt;225&lt;/code&gt;、&lt;code&gt;-45&lt;/code&gt;度で&lt;code&gt;Arc2D&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;これらの&lt;code&gt;Arc2D&lt;/code&gt;から上記の円形ボタンの領域を取り去って扇形に変形(&lt;code&gt;Area#subtract(Area)&lt;/code&gt;を使用)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MouseDrivenImageRotation.html&quot;&gt;Mouseで画像を移動、回転&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#contains(...)&lt;/code&gt;をオーバーライドして、図形内のみマウスカーソルが反応するように変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;複合ボタン

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;つのボタンを、&lt;code&gt;OverlayLayout&lt;/code&gt;を設定した&lt;code&gt;JPanel&lt;/code&gt;に配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel#getPreferredSize()&lt;/code&gt;をオーバーライドして、サイズが&lt;code&gt;5&lt;/code&gt;つのボタンと同じになるように設定

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OverlayLayout.html&quot;&gt;OverlayLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OverlayLayout.html&quot;&gt;OverlayLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundButton.html&quot;&gt;JButtonの形を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MouseDrivenImageRotation.html&quot;&gt;Mouseで画像を移動、回転&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/compoundbutton</link>
                <guid>http://terai.xrea.jp/swing/compoundbutton</guid>
                <pubDate>2012-11-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JRadioButtonを使ってToggleButtonBarを作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JRadioButton&lt;/code&gt;のアイコンを変更して、&lt;code&gt;ToggleButtonBar&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToggleButtonBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-5-1KU3hp2co/UKjlTJyKvRI/AAAAAAAABW8/QuYQcKDeeyM/s800/ToggleButtonBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ToggleButtonBarCellIcon implements Icon{
  private static final Color TL = new Color(1f,1f,1f,.2f);
  private static final Color BR = new Color(0f,0f,0f,.2f);
  private static final Color ST = new Color(1f,1f,1f,.4f);
  private static final Color SB = new Color(1f,1f,1f,.1f);

  private Color ssc;
  private Color bgc;

  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    int r = 8;
    int w = c.getWidth();
    int h = c.getHeight();

    Container parent = c.getParent();
    if(parent==null) {
      return;
    }

    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    Path2D.Float p = new Path2D.Float();

    if(c==parent.getComponent(0)) {
      //:first-child
      p.moveTo(x, y + r);
      p.quadTo(x, y, x + r, y);
      p.lineTo(x + w, y);
      p.lineTo(x + w, y + h);
      p.lineTo(x + r, y + h);
      p.quadTo(x, y + h, x, y + h - r);
    }else if(c==parent.getComponent(parent.getComponentCount()-1)) {
      //:last-child
      p.moveTo(x, y);
      p.lineTo(x + w - r, y);
      p.quadTo(x + w, y, x + w, y + r);
      p.lineTo(x + w, y + h - r);
      p.quadTo(x + w, y + h, x + w -r, y + h);
      p.lineTo(x, y + h);
    }else{
      p.moveTo(x, y);
      p.lineTo(x + w, y);
      p.lineTo(x + w, y + h);
      p.lineTo(x, y + h);
    }
    p.closePath();
    Area area = new Area(p);

    g2.setPaint(c.getBackground());
    g2.fill(area);

    ssc = TL;
    bgc = BR;
    if(c instanceof AbstractButton) {
      ButtonModel m = ((AbstractButton)c).getModel();
      if(m.isSelected() || m.isRollover()) {
        ssc = ST;
        bgc = SB;
      }
    }
    g2.setPaint(new GradientPaint(x, y, ssc, x, y+h, bgc, true));
    g2.fill(area);

    g2.setPaint(BR);
    g2.draw(area);

    g2.dispose();
  }
  @Override public int getIconWidth()  {
    return 80;
  }
  @Override public int getIconHeight() {
    return 20;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JRadioButton&lt;/code&gt;に選択またはロールオーバーでグラデーションが変化する&lt;code&gt;Icon&lt;/code&gt;を設定し、これらを&lt;code&gt;ButtonGroup&lt;/code&gt;に追加することで、&lt;code&gt;ToggleButtonBar&lt;/code&gt;を作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配色は、&lt;a href=&quot;http://weboook.blog22.fc2.com/blog-entry-342.html&quot;&gt;簡単、きれい！RGBaカラーを使って横メニューを作ってみる｜Webpark&lt;/a&gt; をそのまま引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JRadioButton&lt;/code&gt;のサイズは&lt;code&gt;Icon&lt;/code&gt;のサイズと等しくなるように、テキストとアイコンは中央揃えで重ねて表示し、&lt;code&gt;Border&lt;/code&gt;も&lt;code&gt;0&lt;/code&gt;に設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GridLayout&lt;/code&gt;の水平間隔なども&lt;code&gt;0&lt;/code&gt;にして隙間ができないように配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最初の&lt;code&gt;JRadioButton&lt;/code&gt;は左、最後の&lt;code&gt;JRadioButton&lt;/code&gt;は右の角を丸める

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/RoundedComboBox.html&quot;&gt;JComboBoxの角を丸める&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JRadioButton#setContentAreaFilled(false)&lt;/code&gt;として、描画をすべてアイコンで行う(角を丸めた時に背景色を描画しないように)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weboook.blog22.fc2.com/blog-entry-342.html&quot;&gt;簡単、きれい！RGBaカラーを使って横メニューを作ってみる｜Webpark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CardLayoutTabbedPane.html&quot;&gt;CardLayoutを使ってJTabbedPane風のコンポーネントを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundedComboBox.html&quot;&gt;JComboBoxの角を丸める&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/togglebuttonbar</link>
                <guid>http://terai.xrea.jp/swing/togglebuttonbar</guid>
                <pubDate>2012-11-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneに2つのJTableを配置してスクロールを同期する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;の左右に、&lt;code&gt;JTable&lt;/code&gt;をそれぞれ配置し、スクロールや追加などが同期するようにモデルを共有します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SynchronizedScrollingTables&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-mAnvPJlUJSI/UJ_bYI_kJsI/AAAAAAAABWo/a_jdyUqFLwM/s800/SynchronizedScrollingTables.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll1 = new JScrollPane(leftTable);
//scroll1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
scroll1.setVerticalScrollBar(new JScrollBar(JScrollBar.VERTICAL) {
  @Override public Dimension getPreferredSize() {
    Dimension dim = super.getPreferredSize();
    return new Dimension(0, dim.height);
  }
});
JScrollPane scroll2 = new JScrollPane(table);
scroll2.getVerticalScrollBar().setModel(scroll1.getVerticalScrollBar().getModel());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableModel&lt;/code&gt;を共有し、&lt;code&gt;JTable#removeColumn()&lt;/code&gt;で、それぞれで非表示にする列を指定&lt;/li&gt;
&lt;li&gt;左右で&lt;code&gt;RowSorter&lt;/code&gt;、&lt;code&gt;SelectionModel&lt;/code&gt;を共有&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;それぞれ内部に配置する&lt;code&gt;JTable&lt;/code&gt;の高さは、常に同じになるので、&lt;code&gt;VerticalScrollBar&lt;/code&gt;の&lt;code&gt;BoundedRangeModel&lt;/code&gt;を共有&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FixedColumnTableSorting.html&quot;&gt;JTableの列固定とソート&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ChangeListener&lt;/code&gt;を使用、&lt;code&gt;1&lt;/code&gt;つの&lt;code&gt;JScrollPane&lt;/code&gt;に、&lt;code&gt;JTable&lt;/code&gt;を&lt;code&gt;2&lt;/code&gt;つ配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SynchronizedScroll.html&quot;&gt;JScrollPaneのスクロールを同期&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ChangeListener&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/argius/20080325/1206454660&quot;&gt;2つのJTableを同時にスクロール - argius note&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AdjustmentListener&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/synchronizedscrollingtables</link>
                <guid>http://terai.xrea.jp/swing/synchronizedscrollingtables</guid>
                <pubDate>2012-11-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行ヘッダに列ヘッダのRendererを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行の描画に、&lt;code&gt;JTableHeader&lt;/code&gt;から取得した列ヘッダの&lt;code&gt;Renderer&lt;/code&gt;を適用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RowHeaderStyle&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-FSdrv2BDUCo/UJaJTUVXcdI/AAAAAAAABWU/gBeKokda9h8/s800/RowHeaderStyle.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RowHeaderRenderer extends JLabel implements TableCellRenderer {
  public RowHeaderRenderer(JTable table) {
    super();
    RollOverListener rol = new RollOverListener();
    table.addMouseListener(rol);
    table.addMouseMotionListener(rol);
  }
  @Override public Component getTableCellRendererComponent(
      JTable tbl, Object val, boolean isS, boolean hasF, int row, int col) {
    TableCellRenderer tcr = tbl.getTableHeader().getDefaultRenderer();
    boolean f = row==rollOverRowIndex;
    JLabel l = (JLabel)tcr.getTableCellRendererComponent(
        tbl, val, isS, f?f:hasF, -1, -1);
    if(tcr.getClass().getName().indexOf(&quot;XPDefaultRenderer&quot;)&amp;gt;0) {
      l.setOpaque(!f);
      this.setIcon(new ComponentIcon(l));
      return this;
    } else {
      return l;
    }
  }
  private int rollOverRowIndex = -1;
  class RollOverListener extends MouseAdapter {
    @Override public void mouseMoved(MouseEvent e) {
      JTable table = (JTable)e.getSource();
      Point pt = e.getPoint();
      int col = table.columnAtPoint(pt);
      int column = table.convertColumnIndexToModel(col);
      if(column!=0) return;

      int prev_row = rollOverRowIndex;
      rollOverRowIndex = table.rowAtPoint(pt);
      if(rollOverRowIndex == prev_row) return;
      Rectangle repaintRect;
      if(rollOverRowIndex &amp;gt;= 0) {
        Rectangle r = table.getCellRect(rollOverRowIndex, col, false);
        if(prev_row &amp;gt;= 0) {
          repaintRect = r.union(table.getCellRect(prev_row, col, false));
        } else {
          repaintRect = r;
        }
      } else {
        repaintRect = table.getCellRect(prev_row, col, false);
      }
      table.repaint(repaintRect);
    }
    @Override public void mouseExited(MouseEvent e) {
      JTable table = (JTable)e.getSource();
      Point pt = e.getPoint();
      int col = table.columnAtPoint(pt);
      int column = table.convertColumnIndexToModel(col);
      if(column!=0) return;

      if(rollOverRowIndex &amp;gt;= 0) {
        table.repaint(table.getCellRect(rollOverRowIndex, col, false));
      }
      rollOverRowIndex = -1;
    }
  }
}
class ComponentIcon implements Icon {
  private final JComponent cmp;
  public ComponentIcon(JComponent cmp) {
    this.cmp = cmp;
  }
  @Override public int getIconWidth() {
    return 4000; //Short.MAX_VALUE;
  }
  @Override public int getIconHeight() {
    return cmp.getPreferredSize().height + 4; //XXX: +4 for Windows 7
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    SwingUtilities.paintComponent(
        g, cmp, (Container)c, x, y, getIconWidth(), getIconHeight());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;0&lt;/code&gt;列目のセルの描画に、&lt;code&gt;JTable#getTableHeader()#getDefaultRenderer()&lt;/code&gt;で取得したレンダラーを使用する&lt;code&gt;TableCellRenderer&lt;/code&gt;を適用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソートアイコンが列ヘッダに表示されていても、行ヘッダには表示しない

&lt;ul&gt;
&lt;li&gt;引数の行と列を両方&lt;code&gt;-1&lt;/code&gt;にして、&lt;code&gt;TableCellRenderer#getTableCellRendererComponent(...)&lt;/code&gt;で描画用コンポーネント(&lt;code&gt;JLabel&lt;/code&gt;)をヘッダレンダラーから取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ロールオーバーを描画する場合は、&lt;code&gt;TableCellRenderer#getTableCellRendererComponent(...)&lt;/code&gt;で取得したコンポーネントを透明にする&lt;/li&gt;
&lt;li&gt;右と下側に余白が発生するので、ヘッダレンダラーからサイズを変更したアイコンを作成して、&lt;code&gt;JLabel#setIcon(Icon)&lt;/code&gt;で表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowHeader.html&quot;&gt;JTableに行ヘッダを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CellHighlight.html&quot;&gt;JTableのセルのハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rowheaderstyle</link>
                <guid>http://terai.xrea.jp/swing/rowheaderstyle</guid>
                <pubDate>2012-11-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの選択背景色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード条件によって、その選択背景色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeBackgroundSelectionColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-7JA4jpNa55U/UI1VhdHlkwI/AAAAAAAABVw/dAUHGh4q014/s800/TreeBackgroundSelectionColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SelectionColorTreeCellRenderer extends DefaultTreeCellRenderer {
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)super.getTreeCellRendererComponent(
        tree, value, isSelected, expanded, leaf, row, hasFocus);
    if(isSelected) {
      setParticularCondition(value);
      c.setForeground(getTextSelectionColor());
      c.setBackground(getBackgroundSelectionColor());
      if(leaf &amp;amp;&amp;amp; value.toString().startsWith(&quot;a&quot;)) {
        c.setOpaque(true);
        c.setBackground(Color.RED);
      }else{
        c.setOpaque(false);
        c.setBackground(getBackgroundSelectionColor());
      }
    }else{
      c.setForeground(getTextNonSelectionColor());
      c.setBackground(getBackgroundNonSelectionColor());
    }
    return c;
  }
  private Color color = null;
  private void setParticularCondition(Object value) {
    if(value instanceof DefaultMutableTreeNode) {
      Object uo = ((DefaultMutableTreeNode)value).getUserObject();
      if(uo instanceof Color) {
        color = (Color)uo;
        return;
      }
    }
    color = null;
  }
  @Override public Color getBackgroundSelectionColor() {
    return color!=null ? color : super.getBackgroundSelectionColor();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の条件でノードの選択背景色を変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultMutableTreeNode#getUserObject()&lt;/code&gt;が&lt;code&gt;Color&lt;/code&gt;の場合、その色を選択背景色に変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getBackgroundSelectionColor()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;li&gt;ノードアイコンの背景は選択状態にならず、ノードテキストの背景色のみ変更される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ノードテキストが&lt;code&gt;a&lt;/code&gt;で始まる場合、選択背景色を&lt;code&gt;Color.RED&lt;/code&gt;に変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreeCellRenderer#getTreeCellRendererComponent(...)&lt;/code&gt;で取得したコンポーネント(=&lt;code&gt;JLabel&lt;/code&gt;)を&lt;code&gt;setOpaque(true)&lt;/code&gt;で不透明、&lt;code&gt;setBackground(Color.RED)&lt;/code&gt;で背景色を赤に変更&lt;/li&gt;
&lt;li&gt;ノードアイコン、テキストの背景色が共に選択状態になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;で作成されている&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;などでは、上記のような選択背景色にならない場合があります。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treebackgroundselectioncolor</link>
                <guid>http://terai.xrea.jp/swing/treebackgroundselectioncolor</guid>
                <pubDate>2012-10-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuなどから開くPopupMenuを半透明化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;の親の&lt;code&gt;JWindow&lt;/code&gt;、&lt;code&gt;JMenu&lt;/code&gt;や&lt;code&gt;JMenuItem&lt;/code&gt;などを透明にして、&lt;code&gt;JPopupMenu&lt;/code&gt;を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentSubMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-MKRZgWcSrRw/UIT3NRGfX9I/AAAAAAAABUk/fOYdfJmIt4g/s800/TranslucentSubMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TransparentMenu extends JMenu {
  public TransparentMenu(String title) {
    super(title);
  }
  //http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4688783
  private JPopupMenu popupMenu;
  private void ensurePopupMenuCreated() {
    if(popupMenu == null) {
      this.popupMenu = new TranslucentPopupMenu();
      popupMenu.setInvoker(this);
      popupListener = createWinListener(popupMenu);
    }
  }
  @Override public JPopupMenu getPopupMenu() {
    ensurePopupMenuCreated();
    return popupMenu;
  }
  @Override public JMenuItem add(JMenuItem menuItem) {
    ensurePopupMenuCreated();
    menuItem.setOpaque(false);
    return popupMenu.add(menuItem);
  }
  @Override public Component add(Component c) {
    ensurePopupMenuCreated();
    if(c instanceof JComponent) {
      ((JComponent)c).setOpaque(false);
    }
    popupMenu.add(c);
    return c;
  }
  @Override public void addSeparator() {
    ensurePopupMenuCreated();
    popupMenu.addSeparator();
  }
  @Override public void insert(String s, int pos) {
    if(pos &amp;lt; 0) {
      throw new IllegalArgumentException(&quot;index less than zero.&quot;);
    }
    ensurePopupMenuCreated();
    popupMenu.insert(new JMenuItem(s), pos);
  }
  @Override public JMenuItem insert(JMenuItem mi, int pos) {
    if(pos &amp;lt; 0) {
      throw new IllegalArgumentException(&quot;index less than zero.&quot;);
    }
    ensurePopupMenuCreated();
    popupMenu.insert(mi, pos);
    return mi;
  }
  @Override public void insertSeparator(int index) {
    if(index &amp;lt; 0) {
      throw new IllegalArgumentException(&quot;index less than zero.&quot;);
    }
    ensurePopupMenuCreated();
    popupMenu.insert( new JPopupMenu.Separator(), index );
  }
  @Override public boolean isPopupMenuVisible() {
    ensurePopupMenuCreated();
    return popupMenu.isVisible();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JMenu&lt;/code&gt;を継承する&lt;code&gt;TransparentMenu&lt;/code&gt;を作成して、自身と&lt;code&gt;JMenuItem&lt;/code&gt;などを透明化し、&lt;code&gt;JMenu&lt;/code&gt;から開く&lt;code&gt;JPopupMenu&lt;/code&gt;は、&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentPopupMenu.html&quot;&gt;JPopupMenuを半透明にする&lt;/a&gt;を使用して半透明にしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://today.java.net/pub/a/today/2008/03/18/translucent-and-shaped-swing-windows.html&quot;&gt;Translucent and Shaped Swing Windows | Java.net&lt;/a&gt; を参考に &lt;code&gt;PopupFactory#getPopup(...)&lt;/code&gt;をオーバーライドし、常に&lt;code&gt;JPopupMenu&lt;/code&gt;(半透明)の親に&lt;code&gt;JWindow&lt;/code&gt;(完全に透明、&lt;code&gt;Heavy weight&lt;/code&gt;)を使用するように設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;PopupFactory.setSharedInstance(new TranslucentPopupFactory());
//...
class TranslucentPopupFactory extends PopupFactory {
  @Override public Popup getPopup(Component owner, Component contents, int x, int y)
                                                   throws IllegalArgumentException {
     return new TranslucentPopup(owner, contents, x, y);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentPopupMenu.html&quot;&gt;JPopupMenuを半透明にする&lt;/a&gt;では、&lt;code&gt;JPopupMenu#show(...)&lt;/code&gt;メソッドをオーバーライドし、ポップアップが親フレームからはみ出して &lt;code&gt;Heavy weight&lt;/code&gt;の&lt;code&gt;JWindow&lt;/code&gt;が&lt;code&gt;JPopupMenu&lt;/code&gt;の親となる場合のみ、&lt;code&gt;JWindow#setBackground(ALPHA_ZERO)&lt;/code&gt;などで透明化(&lt;code&gt;JPopupMenu&lt;/code&gt;は半透明)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156657&quot;&gt;Bug ID: 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt; が原因？で、&lt;code&gt;1.7.0_06&lt;/code&gt;以前では、サブメニューが半透明化されない場合がある&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PopupFactory.setSharedInstance(new TranslucentPopupFactory())&lt;/code&gt;を使用する場合はバグの影響を受けない&lt;/li&gt;
&lt;li&gt;上記のバグ？以外にも、&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentPopupMenu.html&quot;&gt;JPopupMenuを半透明にする&lt;/a&gt;でサブメニューを半透明にする場合、&lt;code&gt;Heavy weight&lt;/code&gt;の&lt;code&gt;JPopupMenu&lt;/code&gt;に使用する&lt;code&gt;JWindow&lt;/code&gt;の&lt;code&gt;ContentPane&lt;/code&gt;と&lt;code&gt;JRootPane&lt;/code&gt;の不透明設定(&lt;code&gt;isOpaque()&lt;/code&gt;)に注意する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;----
HeavyWeightWindow: win0, JPopupMenu: base
javax.swing.JPanel: false
javax.swing.JLayeredPane: false
javax.swing.JRootPane: false
----
HeavyWeightWindow: win1, JPopupMenu: sub
javax.swing.JPanel: true
javax.swing.JLayeredPane: false
javax.swing.JRootPane: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TranslucentPopupMenu extends JPopupMenu {
  @Override public void show(Component c, int x, int y) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        Window p = SwingUtilities.getWindowAncestor(TranslucentPopupMenu.this);
        if(p!=null &amp;amp;&amp;amp; p instanceof JWindow) {
          JWindow w = (JWindow)p;
          w.setBackground(ALPHA_ZERO);
          System.out.format(&quot;HeavyWeightWindow: %s, JPopupMenu: %s\n&quot;, w.getName(), getName());
          Container c = (Container)w.getContentPane();
          while(c!=null &amp;amp;&amp;amp; c instanceof JComponent) {
            JComponent jc = (JComponent)c;
            System.out.format(&quot;%s: %s\n&quot;, c.getClass().getName(), jc.isOpaque());
            if(jc.isOpaque()) {
              jc.setOpaque(false);
            }
            c = c.getParent();
          }
        }else{
          System.out.println(&quot;Light weight&quot;);
        }
      }
    });
    super.show(c, x, y);
  }
  @Override protected void paintComponent(Graphics g) {
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://today.java.net/pub/a/today/2008/03/18/translucent-and-shaped-swing-windows.html&quot;&gt;Translucent and Shaped Swing Windows | Java.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156657&quot;&gt;Bug ID: 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentPopupMenu.html&quot;&gt;JPopupMenuを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/&quot;&gt;Java Bug Database&lt;/a&gt;の見た目が新しくなっている？ &lt;code&gt;Fixed Versions&lt;/code&gt;の表示がシンプルになりすぎているような…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-10-22 (月) 20:22:51&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentsubmenu</link>
                <guid>http://terai.xrea.jp/swing/translucentsubmenu</guid>
                <pubDate>2012-10-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>UndoManagerを使用した文字列選択ペーストの動作を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;などに&lt;code&gt;UndoManager&lt;/code&gt;を設定し、文字列を選択してペーストした後の&lt;code&gt;Undo&lt;/code&gt;の動作を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ReplaceUndoableEdit&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-GEc9R-QZvos/UKt2czK61tI/AAAAAAAABXk/vqH8TKxkqCM/s800/ReplaceUndoableEdit.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CustomUndoPlainDocument extends PlainDocument {
  private CompoundEdit compoundEdit;
  @Override protected void fireUndoableEditUpdate(UndoableEditEvent e) {
    if (compoundEdit == null) {
      super.fireUndoableEditUpdate(e);
    } else {
      compoundEdit.addEdit(e.getEdit());
    }
  }
  @Override public void replace(int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
    if (length == 0) { //insert
      System.out.println(&quot;insert&quot;);
      super.replace(offset, length, text, attrs);
    } else { //replace
      System.out.println(&quot;replace&quot;);
      compoundEdit = new CompoundEdit();
      super.fireUndoableEditUpdate(new UndoableEditEvent(this, compoundEdit));
      super.replace(offset, length, text, attrs);
      compoundEdit.end();
      compoundEdit = null;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextComponent#setText(String)&lt;/code&gt;や、文字列を選択してペーストした場合、&lt;code&gt;Document#replace(...)&lt;/code&gt;で実行される&lt;code&gt;Document#remove(...)&lt;/code&gt;と&lt;code&gt;Document#insertString(...)&lt;/code&gt;が別々に&lt;code&gt;UndoManager&lt;/code&gt;に登録される仕様?なので、二回&lt;code&gt;Undo&lt;/code&gt;しないとペースト前の状態に戻らない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;Document#replace()+AbstractDocument#fireUndoableEditUpdate()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Document#replace(...)&lt;/code&gt;をオーバーライドし、&lt;del&gt;直接&lt;code&gt;UndoManager#undoableEditHappened(...)&lt;/code&gt;を使って取り消し可能な編集を登録&lt;/del&gt; &lt;code&gt;setText(...)&lt;/code&gt;での文字列の削除と追加を&lt;code&gt;CompoundEdit&lt;/code&gt;にまとめる&lt;/li&gt;
&lt;li&gt;&lt;del&gt;実際の置換は、&lt;code&gt;removeUndoableEditListener(...)&lt;/code&gt;で&lt;code&gt;UndoManager&lt;/code&gt;を一時的に削除した後に行う(直後に&lt;code&gt;addUndoableEditListener()&lt;/code&gt;で再登録)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;登録する&lt;code&gt;UndoableEdit&lt;/code&gt;での&lt;code&gt;Undo&lt;/code&gt;, &lt;code&gt;Redo&lt;/code&gt;時の置換も&lt;code&gt;UndoManager&lt;/code&gt;を一時的に削除して行う&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;メモ: このサンプルでは選択状態を復元していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;DocumentFilter#replace()+UndoableEditListener#undoableEditHappened()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DocumentFilter#replace(...)&lt;/code&gt;をオーバーライドし、文字列の置換で発生する削除と追加の&lt;code&gt;UndoableEdit&lt;/code&gt;を別途用意した&lt;code&gt;CompoundEdit&lt;/code&gt;にまとめてから&lt;code&gt;UndoManager#addEdit(...)&lt;/code&gt;で追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://community.oracle.com/thread/1509622&quot;&gt;Undo two or more actions at once | Oracle Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java2s.com/Code/Java/Swing-JFC/Undomanager.htm&quot;&gt;Undo manager : Undo Redo « Swing JFC « Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/10/27/compound-undo-manager/&quot;&gt;Compound Undo Manager ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-sl.com/tip_merge_undo_edits.html&quot;&gt;Merging UndoableEdits in one to be undone all together in JEditorPane.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24433089/jtextarea-settext-undomanager&quot;&gt;java - JTextArea setText() &amp;amp; UndoManager - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12844520/undo-in-jtextfield-and-settext&quot;&gt;java - Undo in JTextField and setText - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/swing/UndoManager.html&quot;&gt;Java Swing「UndoManager」メモ(Hishidama&amp;#39;s Swing-UndoManager Memo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kyopc.at.webry.info/201007/article_1.html&quot;&gt;Java Swingで複数のJTextFieldに対してUndo、Redoを行う（その2）－解決編 kyoはパソコンMaster or Slave?/ウェブリブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bakagaiku.hsbt.org/entry/20100316&quot;&gt;バカが征く on Rails 2010年03月16日()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/UndoManager.html&quot;&gt;UndoManagerでJTextFieldのUndo、Redoを行う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/replaceundoableedit</link>
                <guid>http://terai.xrea.jp/swing/replaceundoableedit</guid>
                <pubDate>2012-10-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarにUIを設定してインジケータの色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;のインジケータの色を進行に応じてパレットから取得した色に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GradientPalletProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-EjSzEK0Wc6g/UHJrTUTxG9I/AAAAAAAABT8/4AKSHxe6PNE/s800/GradientPalletProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class GradientPalletProgressBarUI extends BasicProgressBarUI{
  private final int[] pallet;
  public GradientPalletProgressBarUI() {
    super();
    this.pallet = makeGradientPallet();
  }
  private static int[] makeGradientPallet() {
    BufferedImage image = new BufferedImage(100, 1, BufferedImage.TYPE_INT_RGB);
    Graphics2D g2  = image.createGraphics();
    Point2D start  = new Point2D.Float(0f, 0f);
    Point2D end  = new Point2D.Float(99f, 0f);
    float[] dist   = {0.0f, 0.5f, 1.0f};
    Color[] colors = { Color.RED, Color.YELLOW, Color.GREEN };
    g2.setPaint(new LinearGradientPaint(start, end, dist, colors));
    g2.fillRect(0, 0, 100, 1);
    g2.dispose();

    int width  = image.getWidth(null);
    int[] pallet = new int[width];
    PixelGrabber pg = new PixelGrabber(image, 0, 0, width, 1, pallet, 0, width);
    try{
      pg.grabPixels();
    }catch(Exception e) {
      e.printStackTrace();
    }
    return pallet;
  }
  private static Color getColorFromPallet(int[] pallet, float x) {
    if(x &amp;lt; 0.0 || x &amp;gt; 1.0) {
      throw new IllegalArgumentException(&quot;Parameter outside of expected range&quot;);
    }
    int i = (int)(pallet.length * x);
    int max = pallet.length-1;
    int index = i&amp;lt;0?0:i&amp;gt;max?max:i;
    int pix = pallet[index] &amp;amp; 0x00ffffff;
    return new Color(pix);
  }
  @Override public void paintDeterminate(Graphics g, JComponent c) {
    Insets b = progressBar.getInsets(); // area for border
    int barRectWidth  = progressBar.getWidth()  - (b.right + b.left);
    int barRectHeight = progressBar.getHeight() - (b.top + b.bottom);
    if(barRectWidth &amp;lt;= 0 || barRectHeight &amp;lt;= 0) {
      return;
    }
    // amount of progress to draw
    int amountFull = getAmountFull(b, barRectWidth, barRectHeight);

    if(progressBar.getOrientation() == JProgressBar.HORIZONTAL) {
      // draw the cells
      float x = amountFull / (float)barRectWidth;
      g.setColor(getColorFromPallet(pallet, x));
      g.fillRect(b.left, b.top, amountFull, barRectHeight);

    }else{ // VERTICAL
      //...
    }
    // Deal with possible text painting
    if(progressBar.isStringPainted()) {
      paintString(g, b.left, b.top, barRectWidth, barRectHeight, amountFull, b);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは高さ&lt;code&gt;1px&lt;/code&gt;の画像をパレットとして予め作成し、それから&lt;code&gt;JProgressBar&lt;/code&gt;の進捗に応じた色を取得して、&lt;code&gt;BasicProgressBarUI#paintDeterminate(...)&lt;/code&gt;内で使用することで、色の変更を行なっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パレット用の画像作成は、&lt;a href=&quot;http://terai.xrea.jp/Swing/GradientTrackSlider.html&quot;&gt;JSliderのスタイルを変更する&lt;/a&gt;と同じ&lt;/li&gt;
&lt;li&gt;注: &lt;code&gt;VERTICAL&lt;/code&gt;と、不確定モードには未対応&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://harmoniccode.blogspot.jp/2011/05/varying-gradients.html&quot;&gt;Harmonic Code: Varying gradients...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GradientTrackSlider.html&quot;&gt;JSliderのスタイルを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/gradientpalletprogressbar</link>
                <guid>http://terai.xrea.jp/swing/gradientpalletprogressbar</guid>
                <pubDate>2012-10-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldでのBeep音の設定を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;などで、&lt;kbd&gt;Delete&lt;/kbd&gt;、&lt;kbd&gt;Back Space&lt;/kbd&gt;キーを押した時に鳴らす&lt;code&gt;Beep&lt;/code&gt;音の設定を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DeleteKeyBeep&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-zIUmkF2C9FA/UGkqdcWDLVI/AAAAAAAABTk/F4nun0GDLZc/s800/DeleteKeyBeep.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;String key = DefaultEditorKit.deletePrevCharAction; //&quot;delete-previous&quot;;
final Action deletePreviousAction = am.get(key);
am.put(key, new TextAction(key) {
  //@see javax/swing/text/DefaultEditorKit.java DeletePrevCharAction
  @Override public void actionPerformed(ActionEvent e) {
    JTextComponent target = getTextComponent(e);
    if(target != null &amp;amp;&amp;amp; target.isEditable()) {
      Caret caret = target.getCaret();
      int dot = caret.getDot();
      int mark = caret.getMark();
      if(dot==0 &amp;amp;&amp;amp; mark==0) {
        return;
      }
    }
    deletePreviousAction.actionPerformed(e);
  }
});
key = DefaultEditorKit.deleteNextCharAction; //&quot;delete-next&quot;;
final Action deleteNextAction = am.get(key);
am.put(key, new TextAction(key) {
  //@see javax/swing/text/DefaultEditorKit.java DeleteNextCharAction
  @Override public void actionPerformed(ActionEvent e) {
    JTextComponent target = getTextComponent(e);
    if(target != null &amp;amp;&amp;amp; target.isEditable()) {
      Document doc = target.getDocument();
      Caret caret = target.getCaret();
      int dot = caret.getDot();
      int mark = caret.getMark();
      if(dot==mark &amp;amp;&amp;amp; doc.getLength()==dot) {
        return;
      }
    }
    deleteNextAction.actionPerformed(e);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の二点を変更して、&lt;code&gt;Beep&lt;/code&gt;音の設定を変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextAction(DefaultEditorKit.deleteNextCharAction)#actionPerformed(ActionEvent)&lt;/code&gt;などをオーバーライドして、&lt;kbd&gt;Delete&lt;/kbd&gt;キーや&lt;kbd&gt;Back Space&lt;/kbd&gt;キーで文字の削除がなくても、&lt;code&gt;Beep&lt;/code&gt;音を鳴らさないように変更したアクションを&lt;code&gt;ActionMap&lt;/code&gt;に設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;文字以上入力できないように制限し、超える場合は&lt;code&gt;Beep&lt;/code&gt;音を鳴らす&lt;code&gt;DocumentFilter&lt;/code&gt;を作成して、&lt;code&gt;AbstractDocument#setDocumentFilter(DocumentFilter)&lt;/code&gt;で設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/displayCode.html?code=http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TextComponentDemoProject/src/components/DocumentSizeFilter.java&quot;&gt;DocumentSizeFilter.java&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/generaltext.html&quot;&gt;Text Component Features (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/deletekeybeep</link>
                <guid>http://terai.xrea.jp/swing/deletekeybeep</guid>
                <pubDate>2012-10-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの選択されたノードを展開する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の選択されたノードまでのパスをすべて展開して可視状態にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExpandsSelectedPaths&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-sOsnOftT8xE/UF_b7dSxzQI/AAAAAAAABS0/i_xYkTfxbZg/s800/ExpandsSelectedPaths.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.setExpandsSelectedPaths(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#setExpandsSelectedPaths(false);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ノード選択を変更しても親パスを展開しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#setExpandsSelectedPaths(true);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト(&lt;code&gt;JDK 1.3&lt;/code&gt;から)&lt;/li&gt;
&lt;li&gt;マウスによる選択ではない、&lt;code&gt;JTree#addSelectionPath(TreePath)&lt;/code&gt;などによるノード選択が行われた場合、選択されたノードまでのパスをすべて展開して可視化(スクロールはしない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/1.3/docs/guide/swing/JTreeChanges.html&quot;&gt;http://docs.oracle.com/javase/1.3/docs/guide/swing/JTreeChanges.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/1.3/guide/swing/JTreeChanges.html&quot;&gt;http://docs.oracle.com/javase/jp/1.3/guide/swing/JTreeChanges.html&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;メモ: 日本語版には&lt;code&gt;docs&lt;/code&gt;が付かない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/expandsselectedpaths</link>
                <guid>http://terai.xrea.jp/swing/expandsselectedpaths</guid>
                <pubDate>2012-09-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserを開いた時のカレントディレクトリを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;を開いた時のカレントディレクトリを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileChooserCurrentDirectory&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-L0xUhPSuu1Y/UFaopCvyPFI/AAAAAAAABSg/JUQJkTi-0BI/s800/FileChooserCurrentDirectory.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;File f = new File(field.getText().trim());
JFileChooser fc = check1.isSelected()?fc2:fc0;
fc.setCurrentDirectory(f);
int retvalue = fc.showOpenDialog(p);
if(retvalue==JFileChooser.APPROVE_OPTION) {
  log.setText(fc.getSelectedFile().getAbsolutePath());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser.DIRECTORIES_ONLY&lt;/code&gt;で、ディレクトリのみ表示する場合のカレントディレクトリの設定をテストします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JFileChooser.html#setCurrentDirectory%28java.io.File%29&quot;&gt;setCurrentDirectory&lt;/a&gt;: &lt;code&gt;JFileChooser#setCurrentDirectory(File)&lt;/code&gt;で&lt;code&gt;CurrentDirectory&lt;/code&gt;を設定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参照:コンボボックスにディレクトリ名&lt;/li&gt;
&lt;li&gt;リストには、&lt;code&gt;CurrentDirectory&lt;/code&gt;内のディレクトリ一覧&lt;/li&gt;
&lt;li&gt;フォルダ名: テキストフィールドは前回の文字列(&lt;code&gt;setCurrentDirectory&lt;/code&gt;では変化しない)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存在しないファイルを&lt;code&gt;setCurrentDirectory&lt;/code&gt;で設定すると、前回の&lt;code&gt;CurrentDirectory&lt;/code&gt;(初回に存在しないファイルが設定された場合は&lt;code&gt;OS&lt;/code&gt;のデフォルト)が表示される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記のサンプルで、&lt;code&gt;Change !dir.exists() case&lt;/code&gt;にチェックをした場合、前回のディレクトリではなく、参照可能な親ディレクトリを検索するよう、&lt;code&gt;setCurrentDirectory&lt;/code&gt;をオーバーライドした&lt;code&gt;JFileChooser&lt;/code&gt;を使用する&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFileChooser fc2 = new JFileChooser() {
  @Override public void setCurrentDirectory(File dir) {
    if(dir!=null &amp;amp;&amp;amp; !dir.exists()) {
      this.setCurrentDirectory(dir.getParentFile());
    }
    super.setCurrentDirectory(dir);
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JFileChooser.html#setSelectedFile%28java.io.File%29&quot;&gt;setSelectedFile&lt;/a&gt;: &lt;code&gt;JFileChooser#setSelectedFile(File)&lt;/code&gt;で選択ファイルとしてディレクトリを設定&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参照: コンボボックスには、選択ファイルとして設定したディレクトリの親ディレクトリ名&lt;/li&gt;
&lt;li&gt;リストには、親ディレクトリ内のディレクトリ一覧

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Metal&lt;/code&gt;や&lt;code&gt;Nimbus LookAndFeel&lt;/code&gt;では、選択ファイルとして設定したディレクトリが選択状態になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Metal&lt;/code&gt;などの&lt;code&gt;LookAndFeel&lt;/code&gt;でも、ディレクトリが選択状態にならない場合がある&lt;/li&gt;
&lt;li&gt;上記のサンプルで、&lt;code&gt;isParent reset?&lt;/code&gt;にチェックをした場合、&lt;code&gt;!fileChooser.getFileSystemView().isParent(fileChooser.getCurrentDirectory(), dir)==false&lt;/code&gt;になるように？&lt;code&gt;setSelectedFile&lt;/code&gt;で選択ファイルをリセットする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォルダ名:テキストフィールドは選択ファイルとして設定したディレクトリ&lt;/li&gt;
&lt;li&gt;存在しないディレクトリを&lt;code&gt;setSelectedFile&lt;/code&gt;で設定するとその親ディレクトリ、親ディレクトリも存在しない場合は、&lt;code&gt;OS&lt;/code&gt;のデフォルトがカレントディレクトリとなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filechoosercurrentdirectory</link>
                <guid>http://terai.xrea.jp/swing/filechoosercurrentdirectory</guid>
                <pubDate>2012-09-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPane内にあるJTableなどで追加した行が可視化されるようにスクロールする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;の&lt;code&gt;JViewport&lt;/code&gt;内にある&lt;code&gt;JTable&lt;/code&gt;、&lt;code&gt;JList&lt;/code&gt;、&lt;code&gt;JTree&lt;/code&gt;で、それぞれ追加された最終行が可視化されるようにスクロールします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollRectToVisible&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-t_4BD1mGUGk/UE1eF0Ead3I/AAAAAAAABSM/4a4aPSpMDM4/s800/ScrollRectToVisible.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;model.addRow(new Object[] {date.toString(), model.getRowCount(), false});
int i = table.convertRowIndexToView(model.getRowCount()-1);
Rectangle r = table.getCellRect(i, 0, true);
table.scrollRectToVisible(r);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;追加した行の&lt;code&gt;0&lt;/code&gt;列目のセル領域を取得して、&lt;code&gt;scrollRectToVisible&lt;/code&gt;で可視化&lt;/li&gt;
&lt;li&gt;ソートやフィルタが使用されている場合を考慮して、追加した行のインデックスを&lt;code&gt;JTable#convertRowIndexToView(int)&lt;/code&gt;で変換してから、セル領域を取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JList.html#ensureIndexIsVisible%28int%29&quot;&gt;JList#ensureIndexIsVisible(int)&lt;/a&gt;を使って、追加した最終行を可視化(このメソッド内部で&lt;code&gt;scrollRectToVisible&lt;/code&gt;を使用)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Rectangle cellBounds = list.getCellBounds(index, index);
if(cellBounds != null) {
  list.scrollRectToVisible(cellBounds);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTree.html#scrollRowToVisible%28int%29&quot;&gt;JTree#scrollRowToVisible(int)&lt;/a&gt;、または&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTree.html#scrollPathToVisible%28javax.swing.tree.TreePath%29&quot;&gt;JTree#scrollPathToVisible(TreePath)&lt;/a&gt;で追加した最終行を可視化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tree.scrollRowToVisible(row)&lt;/code&gt;は &lt;code&gt;tree.scrollPathToVisible(tree.getPathForRow(row))&lt;/code&gt;と同等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#scrollPathToVisible(TreePath)&lt;/code&gt;は内部で、&lt;code&gt;tree.scrollRectToVisible(tree.getPathBounds(path))&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultTreeModel treeModel = (DefaultTreeModel)tree.getModel();
DefaultMutableTreeNode parent   = (DefaultMutableTreeNode)treeModel.getRoot();
DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(date);
treeModel.insertNodeInto(newChild, parent, parent.getChildCount());
/* //tree.scrollRowToVisible(row) == tree.scrollPathToVisible(tree.getPathForRow(row))
tree.scrollRowToVisible(tree.getRowCount()-1);
/*/
tree.scrollPathToVisible(new TreePath(newChild.getPath()));
//*/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComponent#scrollRectToVisible(...)&lt;/code&gt;を使用してスクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CaretPosition.html&quot;&gt;JTextPaneで最終行に移動&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;キャレットの移動でスクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollrecttovisible</link>
                <guid>http://terai.xrea.jp/swing/scrollrecttovisible</guid>
                <pubDate>2012-09-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneに追加するコンポーネントのベースラインを揃える</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;に追加するコンポーネントのベースラインが他の文字列などとを揃うように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InsertComponentBaseline&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-JveOiooEbAg/UEPEjv1VW2I/AAAAAAAABR4/qts-97h_JuA/s800/InsertComponentBaseline.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox check1 = new JCheckBox(&quot;JComponent.setAlignmentY(...)&quot;);
Dimension d = check1.getPreferredSize();
int baseline = check1.getBaseline(d.width, d.height);
check1.setAlignmentY(baseline/(float)d.height);
textPane.replaceSelection(&quot;\n\n Baseline: &quot;);
textPane.insertComponent(check1);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane#insertComponent(...)&lt;/code&gt;で、&lt;code&gt;JCheckBox&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;のデフォルトの&lt;code&gt;AlignmentY&lt;/code&gt;は&lt;code&gt;0.5&lt;/code&gt;なのでテキストのベースラインと揃わない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;JComponent#setAlignmentY(...)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComponent#getBaseline()&lt;/code&gt;でベースラインを取得し、&lt;code&gt;JComponent#setAlignmentY(baseline/(float)d.height)&lt;/code&gt;でテキストベースラインの相対位置に配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;setAlignmentY+setCursor+...&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;「中: &lt;code&gt;JComponent#setAlignmentY(...)&lt;/code&gt;」+&lt;code&gt;Cursor+Opaque+Focusable&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;check2.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
check2.setOpaque(false);
check2.setFocusable(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTextPane.html#insertComponent%28java.awt.Component%29&quot;&gt;JTextPane#insertComponent(java.awt.Component) (Java Platform SE 6)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;引用: コンポーネントは、&lt;code&gt;Component.getAlignmentY&lt;/code&gt;によって返された値に従って、テキストベースラインに相対的に配置されます。&lt;code&gt;Swing&lt;/code&gt;コンポーネントの場合、&lt;code&gt;JComponent.setAlignmentY&lt;/code&gt;メソッドを使うと、この値を簡単に設定できます。たとえば、値を&lt;code&gt;0.75&lt;/code&gt;に設定すると、コンポーネントの&lt;code&gt;75%&lt;/code&gt;がベースラインの上に、&lt;code&gt;25%&lt;/code&gt;がベースラインの下になります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12151158/how-to-appropriately-adding-jlabel-to-jeditorpane&quot;&gt;java - How to appropriately adding JLabel to JEditorPane? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/insertcomponentbaseline</link>
                <guid>http://terai.xrea.jp/swing/insertcomponentbaseline</guid>
                <pubDate>2012-09-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TitledBorderとMatteBorderを使用してTitledSeparatorを作成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TitledBorder&lt;/code&gt;と&lt;code&gt;MatteBorder&lt;/code&gt;を使用して&lt;code&gt;Title&lt;/code&gt;付きの&lt;code&gt;Separator&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TitledSeparator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-sRtVayYL37Q/UDs_iiXRk7I/AAAAAAAABRk/71qZoe9vM60/s800/TitledSeparator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TitledSeparator extends JLabel{
  private Color color;
  private final String title;
  private final Color target;
  private final int height;
  private final int titlePosition;
  public TitledSeparator(String title, int height, int titlePosition) {
    this(title, null, height, titlePosition);
  }
  public TitledSeparator(String _title, Color _target, int _height, int _titlePosition) {
    super();
    this.title = _title;
    this.target = _target;
    this.height = _height;
    this.titlePosition = _titlePosition;
    Icon icon = new Icon() {
      private int width = -1;
      private Paint painter1, painter2;
      @Override public void paintIcon(Component c, Graphics g, int x, int y) {
        int w = c.getWidth();
        if(w!=width || painter1==null || painter2==null || color==null) {
          width = w;
          Point2D start = new Point2D.Float(0f, 0f);
          Point2D end   = new Point2D.Float((float)width, 0f);
          float[] dist  = {0.0f, 1.0f};
          color = getBackground();
          color = color==null ? UIManager.getColor(&quot;Panel.background&quot;) : color;
          Color tc = target==null ? color : target;
          painter1 = new LinearGradientPaint(start, end, dist, new Color[] {tc.darker(),   color});
          painter2 = new LinearGradientPaint(start, end, dist, new Color[] {tc.brighter(), color});
        }
        int h = getIconHeight()/2;
        Graphics2D g2  = (Graphics2D)g.create();
        g2.setPaint(painter1);
        g2.fillRect(x, y,   width, getIconHeight());
        g2.setPaint(painter2);
        g2.fillRect(x, y+h, width, getIconHeight()-h);
        g2.dispose();
      }
      @Override public int getIconWidth()  { return 200; } //dummy width
      @Override public int getIconHeight() { return height; }
    };
    this.setBorder(BorderFactory.createTitledBorder(
      BorderFactory.createMatteBorder(height, 0, 0, 0, icon), title,
      TitledBorder.DEFAULT_JUSTIFICATION, titlePosition));
    //System.out.println(getInsets());
  }
  @Override public Dimension getMaximumSize() {
    Dimension d = super.getPreferredSize();
    d.width = Short.MAX_VALUE;
    return d;
  }
  @Override public void updateUI() {
    super.updateUI();
    color = null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TitledBorder&lt;/code&gt;と、左下右の&lt;code&gt;Insets&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;(上余白のみ設定)でタイルアイコンでグラデーションを行う&lt;code&gt;MatteBorder&lt;/code&gt;を組み合わせ、これを空の&lt;code&gt;JLabel&lt;/code&gt;に設定することで、&lt;code&gt;TitledSeparator&lt;/code&gt;を作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;タイトルの垂直位置をデフォルトの&lt;code&gt;TitledBorder.DEFAULT_POSITION&lt;/code&gt;にして、&lt;code&gt;Separator&lt;/code&gt;上に重なるように表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt;では、タイトルの上に&lt;code&gt;Separator&lt;/code&gt;が表示される場合がある？(&lt;code&gt;1.7.0&lt;/code&gt;では正常)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;タイトルの垂直位置が上(&lt;code&gt;TitledBorder.ABOVE_TOP&lt;/code&gt;)で、&lt;code&gt;Separator&lt;/code&gt;の上に表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSeparator&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;注: 縦のセパレータには未対応&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TitledBorder.html&quot;&gt;TitledBorderのタイトル位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Gradient.html&quot;&gt;Separatorのグラデーション&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/titledseparator</link>
                <guid>http://terai.xrea.jp/swing/titledseparator</guid>
                <pubDate>2012-08-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelに設定したニーモニックでフォーカス移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;にニーモニックを設定し、これに関連付けした&lt;code&gt;JTextField&lt;/code&gt;へのフォーカス移動を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LabelForDisplayedMnemonic&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-c8oDt2QGtY0/UDHQKTuRMGI/AAAAAAAABRQ/dzH-cDi9lEw/s800/LabelForDisplayedMnemonic.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(&quot;Mail Adress: &quot;);
label.setDisplayedMnemonic(&#39;M&#39;);
JTextField textField = new JTextField(12);
label.setLabelFor(textField);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;に&lt;code&gt;setDisplayedMnemonic(...)&lt;/code&gt;メソッドを使って、ニーモニックを設定し、&lt;code&gt;setLabelFor(...)&lt;/code&gt;メソッドでニーモニックがアクティブになった時にフォーカス移動の対象となるコンポーネントを指定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;編集不可の&lt;code&gt;JComboBox&lt;/code&gt;などで、この方法ではフォーカスが移動しない？

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどによるフォーカス移動や&lt;code&gt;JComboBox#requestFocusInWindow()&lt;/code&gt;を実行した場合のようにならない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JLabel.html#setLabelFor%28java.awt.Component%29&quot;&gt;JLabel#setLabelFor(Component) (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「ニーモニックがアクティブになったときに、&lt;code&gt;labelFor&lt;/code&gt;プロパティーで指定されているコンポーネントの&lt;code&gt;requestFocus&lt;/code&gt;メソッドを呼び出します。」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextComponent&lt;/code&gt;などのフォーカスアクセラレータ: &lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/text/JTextComponent.html#setFocusAccelerator%28char%29&quot;&gt;JTextComponent#setFocusAccelerator(char) (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/labelfordisplayedmnemonic</link>
                <guid>http://terai.xrea.jp/swing/labelfordisplayedmnemonic</guid>
                <pubDate>2012-08-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GridLayoutとJScrollPaneを使ったグリッド単位での表示切り替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;に&lt;code&gt;GridLayout&lt;/code&gt;でコンポーネントを追加し、これを&lt;code&gt;JScrollPane&lt;/code&gt;に配置して、グリッド単位での表示、スクロールアニメーションによる切り替えを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GridScrollAnimation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-V2E4xmdHmBE/UCiUOuOlrLI/AAAAAAAABQg/IYqzH9-WdsI/s800/GridScrollAnimation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class GridPanel extends JPanel implements Scrollable {
  public static int cols = 3, rows = 4;
  public static Dimension size = new Dimension(160*cols, 120*rows);
  public GridPanel() {
    super(new GridLayout(rows, cols, 0, 0));
    //putClientProperty(&quot;JScrollBar.fastWheelScrolling&quot;, Boolean.FALSE);
  }
  @Override public Dimension getPreferredScrollableViewportSize() {
    Dimension d = getPreferredSize();
    return new Dimension(d.width/cols, d.height/rows);
  }
  @Override public int getScrollableUnitIncrement(
      Rectangle visibleRect, int orientation, int direction) {
    return orientation==SwingConstants.HORIZONTAL ?
      visibleRect.width : visibleRect.height;
  }
  @Override public int getScrollableBlockIncrement(
      Rectangle visibleRect, int orientation, int direction) {
    return orientation==SwingConstants.HORIZONTAL ?
      visibleRect.width : visibleRect.height;
  }
  @Override public boolean getScrollableTracksViewportWidth() {
    return false;
  }
  @Override public boolean getScrollableTracksViewportHeight() {
    return false;
  }
  @Override public Dimension getPreferredSize() {
    return size;
  }
}

class ScrollAction extends AbstractAction {
  private static Timer scroller;
  private final Point vec;
  private final JScrollPane scrollPane;
  public ScrollAction(String name, JScrollPane scrollPane, Point vec) {
    super(name);
    this.scrollPane = scrollPane;
    this.vec = vec;
  }
  @Override public void actionPerformed(ActionEvent e) {
    final JViewport vport = scrollPane.getViewport();
    final JComponent v = (JComponent)vport.getView();
    final int w   = vport.getWidth(),
              h   = vport.getHeight(),
              sx  = vport.getViewPosition().x,
              sy  = vport.getViewPosition().y;
    final Rectangle rect = new Rectangle(w, h);
    if(scroller!=null &amp;amp;&amp;amp; scroller.isRunning()) return;
    scroller = new Timer(5, new ActionListener() {
      double MAX = 100d;
      int count = (int)MAX;
      @Override public void actionPerformed(ActionEvent e) {
        double a = easeInOut(--count/MAX);
        int dx = (int)(w - a*w + 0.5d);
        int dy = (int)(h - a*h + 0.5d);
        if(count&amp;lt;=0) {
          dx = w;
          dy = h;
          scroller.stop();
        }
        rect.setLocation(sx + vec.x * dx, sy + vec.y * dy);
        v.scrollRectToVisible(rect);
      }
    });
    scroller.start();
  }
  private static double easeInOut(double t) {
    //range: 0.0&amp;lt;=t&amp;lt;=1.0
    if(t&amp;lt;0.5d) {
      return 0.5d*pow3(t*2d);
    } else {
      return 0.5d*(pow3(t*2d-2d) + 2d);
    }
  }
  private static double pow3(double a) {
    //return Math.pow(a, 3d);
    return a * a * a;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GridLayout&lt;/code&gt;を使ってグリッド状に配置したコンポーネントを、&lt;code&gt;JScrollPane&lt;/code&gt;と&lt;code&gt;scrollRectToVisible(...)&lt;/code&gt;メソッドで、グリッド単位の表示と切り替え(スクロールアニメーション付き)を行なっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最初に表示されるコンポーネントは、左上にある(一番最初に&lt;code&gt;JPanel&lt;/code&gt;に追加した)コンポーネント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PreferredScrollableViewportSize&lt;/code&gt;の変更(グリッドのサイズ変更)には対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;の各スクロールバーは常に非表示なので、マウスホイールによるスクロールには対応していない&lt;/li&gt;
&lt;li&gt;フォーカスの移動に表示切り替えは対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CardLayout&lt;/code&gt;+スクロールアニメーションでも同様の動作が可能？&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/gridscrollanimation</link>
                <guid>http://terai.xrea.jp/swing/gridscrollanimation</guid>
                <pubDate>2012-08-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの外側でもドラッグアイコンを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ドラッグ中のカーソル位置を&lt;code&gt;DragSourceMotionListener&lt;/code&gt;で取得し、そこにアイコンを追加した&lt;code&gt;Window&lt;/code&gt;を移動することで、&lt;code&gt;JFrame&lt;/code&gt;の外側でもドラッグアイコンを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragSourceMotionListener&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-HM5QzW5AZlk/UB9iFlbSZMI/AAAAAAAABQM/fggojAo0b-E/s800/DragSourceMotionListener.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JWindow window = new JWindow();
window.add(label);
//window.setAlwaysOnTop(true);
//com.sun.awt.AWTUtilities.setWindowOpaque(window, false); // JDK 1.6.0
window.setBackground(new Color(0, true)); // JDK 1.7.0
DragSource.getDefaultDragSource().addDragSourceMotionListener(new DragSourceMotionListener() {
  @Override public void dragMouseMoved(DragSourceDragEvent dsde) {
    window.setLocation(dsde.getLocation());
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPanel&lt;/code&gt;中に配置した&lt;code&gt;JLabel&lt;/code&gt;(アイコン)を&lt;code&gt;Drag &amp;amp; Drop&lt;/code&gt;で別の&lt;code&gt;JPanel&lt;/code&gt;など(親の&lt;code&gt;JFrame&lt;/code&gt;が異なる場合も可)に移動することができます。ドラッグ中の&lt;code&gt;JLabel&lt;/code&gt;は透明化した&lt;code&gt;Window&lt;/code&gt;に配置され、ドラッグに合わせてその&lt;code&gt;Window&lt;/code&gt;を移動しているので、&lt;code&gt;JFrame&lt;/code&gt;の外でもドラッグアイコンが表示可能になっています。
ドラッグ中のカーソル位置取得には、&lt;code&gt;MouseMotionListener&lt;/code&gt;を使用する方法もありますが、このサンプルのような&lt;code&gt;TransferHandler&lt;/code&gt;を使ったドラッグでは&lt;code&gt;MouseMotionListener&lt;/code&gt;でマウスイベントを取得することができないので、&lt;code&gt;DefaultDragSource&lt;/code&gt;に&lt;code&gt;DragSourceMotionListener&lt;/code&gt;を追加してドラッグ中のカーソル位置を取得しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DragSourceDragEvent#getLocation()&lt;/code&gt;で取得した位置は、スクリーン座標系なので、そのまま&lt;code&gt;Window#setLocation(...)&lt;/code&gt;で使用可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Point pt = tgtLabel.getLocation();&lt;/code&gt;で取得したドラッグ対象&lt;code&gt;JLabel&lt;/code&gt;の位置は、親コンポーネントの座標系なので、&lt;code&gt;SwingUtilities.convertPointToScreen(pt, parent);&lt;/code&gt;で変換する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDLayerTabbedPane.html&quot;&gt;JLayerを使ってJTabbedPaneのタブの挿入位置を描画する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OSX&lt;/code&gt;などの場合はどうなるか不明(テストしていない)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-06 (月) 15:50:35&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OSX&lt;/code&gt;でも表示しましたよ。ただクリックした時にアイコン周りに枠が表示されるのですが、その位置がアイコンとずれてます -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2012-08-07 (火) 11:04:46

&lt;ul&gt;
&lt;li&gt;ありがとうございます。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4874070&quot;&gt;Bug ID: 4874070 invoking DragSource&amp;#39;s startDrag with an Image renders no image on drag&lt;/a&gt;あたりの修正の詳しい内容がよく分かっていないので、逆に&lt;code&gt;Mac OS X&lt;/code&gt;では競合する(二重になる)のでは？と思っていました。「アイコン周りの枠」はオフセットを変更するか、クリックした時点で&lt;code&gt;JPanel&lt;/code&gt;からは削除してしまえば、何とかなるかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-07 (火) 14:19:12&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;で起動すると、&lt;code&gt;window.setAlwaysOnTop(true);&lt;/code&gt;で&lt;code&gt;AccessControlException&lt;/code&gt;が発生するのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-12-07 (金) 18:20:23&lt;/li&gt;
&lt;li&gt;ドラッグ中カーソルが点滅するので、&lt;code&gt;dragMouseMoved&lt;/code&gt;内で無駄に&lt;code&gt;Window#setVisible(true);&lt;/code&gt;を実行しないように修正(&lt;code&gt;TransferHandler#getSourceActions(...)&lt;/code&gt;内でドラッグ開始時に一回だけ実行する)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-10-25 (金) 18:04:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragsourcemotionlistener</link>
                <guid>http://terai.xrea.jp/swing/dragsourcemotionlistener</guid>
                <pubDate>2012-08-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>NimbusLookAndFeelのカラーパレット</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;のカラーパレットを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NimbusColorPalette&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-ZPZIywXgxwc/UBYR3-EyETI/AAAAAAAABP4/Y2KglYmMKo8/s800/NimbusColorPalette.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIDefaults def = UIManager.getLookAndFeelDefaults();
def.put(&quot;nimbusOrange&quot;, new Color(255,220,35,200));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の&lt;code&gt;Primary Colors&lt;/code&gt;の一つ(上記のサンプルでは&lt;code&gt;nimbusOrange&lt;/code&gt;)を変更して全体で色を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;以下の一覧は、&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html&quot;&gt;Nimbus Defaults (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;より引用
|240|240|80|c
|Key                       |Value                |Preview          |h
|control                   |#d6d9df (214,217,223)|BGCOLOR(#d6d9df):|
|info                      |#f2f2bd (242,242,189)|BGCOLOR(#f2f2bd):|
|nimbusAlertYellow         |#ffdc23 (255,220,35) |BGCOLOR(#ffdc23):|
|nimbusBase                |#33628c (51,98,140)  |BGCOLOR(#33628c):|
|nimbusDisabledText        |#8e8f91 (142,143,145)|BGCOLOR(#8e8f91):|
|nimbusFocus               |#73a4d1 (115,164,209)|BGCOLOR(#73a4d1):|
|nimbusGreen               |#b0b332 (176,179,50) |BGCOLOR(#b0b332):|
|nimbusInfoBlue            |#2f5cb4 (47,92,180)  |BGCOLOR(#2f5cb4):|
|nimbusLightBackground     |#ffffff (255,255,255)|BGCOLOR(#ffffff):|
|nimbusOrange              |#bf6204 (191,98,4)   |BGCOLOR(#bf6204):|
|nimbusRed                 |#a92e22 (169,46,34)  |BGCOLOR(#a92e22):|
|nimbusSelectedText        |#ffffff (255,255,255)|BGCOLOR(#ffffff):|
|nimbusSelectionBackground |#39698a (57,105,138) |BGCOLOR(#39698a):|
|text                      |#000000 (0,0,0)      |BGCOLOR(#000000):|&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下:

&lt;ul&gt;
&lt;li&gt;指定した領域を塗りつぶす&lt;code&gt;Painter&lt;/code&gt;を作成して、&lt;code&gt;JProgressBar#putClientProperty(&amp;quot;Nimbus.Overrides&amp;quot;, d);&lt;/code&gt;で特定のコンポーネントの色を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIDefaults d = new UIDefaults();
d.put(&quot;ProgressBar[Enabled].foregroundPainter&quot;, new Painter&amp;lt;JProgressBar&amp;gt;() { //JDK 1.6.0 new com.sun.java.swing.Painter() {
  @Override public void paint(Graphics2D g, JProgressBar c, int w, int h) {
    g.setColor(new Color(100,250,120,50));
    g.fillRect(0,0,w-1,h-1);
    g.setColor(new Color(100,250,120,150));
    g.fillRect(3,h/2,w-5,h/2-2);
  }
});
progressbar.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html&quot;&gt;Nimbus Defaults (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10847308/how-to-change-the-color-of-a-single-jprogressbar-in-nimbus&quot;&gt;java - How to change the color of a single JProgressBar in Nimbus? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorChannelSwapFilter.html&quot;&gt;JLayerを使ってJProgressBarの色相を変更する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;指定した&lt;code&gt;JProgressBar&lt;/code&gt;の色変更は、&lt;code&gt;JLayer&lt;/code&gt;+&lt;code&gt;RGBImageFilter&lt;/code&gt;+&lt;code&gt;JProgressBar#setOpaque(true);&lt;/code&gt;で可能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/nimbuscolorpalette</link>
                <guid>http://terai.xrea.jp/swing/nimbuscolorpalette</guid>
                <pubDate>2012-07-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>StrokeBorderを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Java 1.7.0&lt;/code&gt;で導入された&lt;code&gt;StrokeBorder&lt;/code&gt;をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StrokeBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-MSfWQgMprsI/UAy_-BOqVII/AAAAAAAABPo/0uH5WtaajqY/s800/StrokeBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;dashedStroke = new BasicStroke(5.0f,
    ((EndCapStyle)endcapCombo.getSelectedItem()).style,
    ((JoinStyle)joinCombo.getSelectedItem()).style,
    5.0f, getDashArray(), 0.0f);
label.setBorder(BorderFactory.createStrokeBorder(dashedStroke, Color.RED));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、破線パターンなどから&lt;code&gt;BasicStroke&lt;/code&gt;を作成し(線幅、接合トリミングの制限値、破線パターン開始位置のオフセットなどは固定)、これを&lt;code&gt;StrokeBorder&lt;/code&gt;に適用(色は固定)して、&lt;code&gt;JLabel&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/javax/swing/border/StrokeBorder.html&quot;&gt;StrokeBorder (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DashedLine.html&quot;&gt;BasicStrokeで点線を作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/strokeborder</link>
                <guid>http://terai.xrea.jp/swing/strokeborder</guid>
                <pubDate>2012-07-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードアイコンサイズとテキストの選択状態</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードアイコンによって行の高さが変更された場合のテキストの選択状態を修正します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeRowHeightCellMargin&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-W4SPLnW3RVY/UAQjez2fI3I/AAAAAAAABPY/c4v9ljR2k40/s800/TreeRowHeightCellMargin.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CompoundTreeCellRenderer extends DefaultTreeCellRenderer {
  private final JPanel p = new JPanel(new BorderLayout());
  private final JLabel icon = new JLabel();
  private final JLabel text = new JLabel();
  private final Border innerBorder = BorderFactory.createEmptyBorder(1,2,1,2);
  private final Border emptyBorder = BorderFactory.createCompoundBorder(
                     BorderFactory.createEmptyBorder(1,1,1,1), innerBorder);
  private final Border hasFocusBorder;

  public CompoundTreeCellRenderer() {
    super();
    Color bsColor = getBorderSelectionColor();
    Color focusBGColor = new Color(~getBackgroundSelectionColor().getRGB());
    hasFocusBorder = BorderFactory.createCompoundBorder(
        new DotBorder(focusBGColor, bsColor), innerBorder);

    icon.setBorder(BorderFactory.createEmptyBorder(0,0,0,2));
    text.setBorder(emptyBorder);
    text.setOpaque(true);
    p.setOpaque(false);
    p.add(icon, BorderLayout.WEST);

    JPanel wrap = new JPanel(new GridBagLayout());
    wrap.setOpaque(false);
    wrap.add(text);
    p.add(wrap);
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean selected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    JLabel l = (JLabel)super.getTreeCellRendererComponent(
        tree, value, selected, expanded, leaf, row, hasFocus);
    Color bColor, fColor;
    if(selected) {
      bColor = getBackgroundSelectionColor();
      fColor = getTextSelectionColor();
    }else{
      bColor = getBackgroundNonSelectionColor();
      fColor = getTextNonSelectionColor();
      if(bColor == null) bColor = getBackground();
      if(fColor == null) fColor = getForeground();
    }
    text.setForeground(fColor);
    text.setBackground(bColor);
    text.setBorder(hasFocus?hasFocusBorder:emptyBorder);
    text.setText(l.getText());
    icon.setIcon(l.getIcon());

    return p;
  }
  @Override public void paint(Graphics g) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;Tree.closedIcon&amp;quot;, icon)&lt;/code&gt;などで、&lt;code&gt;JTree&lt;/code&gt;のノードアイコンを変更&lt;/li&gt;
&lt;li&gt;ノードを選択した場合、アイコン(行)の高さまで選択色で塗られる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右: &lt;code&gt;Label&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;と同じノードアイコンを設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#setRowHeight(0)&lt;/code&gt;として&lt;code&gt;TreeCellRenderer&lt;/code&gt;が各行の高さを決定&lt;/li&gt;
&lt;li&gt;アイコン用とテキスト用の&lt;code&gt;JLabel&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;を用意し、これを使用する&lt;code&gt;TreeCellRenderer&lt;/code&gt;を設定

&lt;ul&gt;
&lt;li&gt;ノードが選択された場合、アイコン(行)の高さではなく、テキスト用の&lt;code&gt;JLabel&lt;/code&gt;のみ背景を選択色で塗る&lt;/li&gt;
&lt;li&gt;このためノードを連続選択すると隙間ができる場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeCellMargin.html&quot;&gt;JTreeのノードの文字列に余白を追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treerowheightcellmargin</link>
                <guid>http://terai.xrea.jp/swing/treerowheightcellmargin</guid>
                <pubDate>2012-07-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのドロップダウンリストにJButtonを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;のドロップダウンリストで、各アイテムにクリック可能な&lt;code&gt;JButton&lt;/code&gt;を追加しこれを削除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RemoveButtonInComboItem&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-x9uTOO9fSds/T_pElwy8GBI/AAAAAAAABPM/Jx30phjG3bM/s800/RemoveButtonInComboItem.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CellButtonsMouseListener extends MouseAdapter{
  private int prevIndex = -1;
  private JButton prevButton = null;
  @Override public void mouseMoved(MouseEvent e) {
    JList list = (JList)e.getComponent();
    Point pt = e.getPoint();
    int index  = list.locationToIndex(pt);
    if(!list.getCellBounds(index, index).contains(pt)) {
      if(prevIndex&amp;gt;=0) {
        Rectangle r = list.getCellBounds(prevIndex, prevIndex);
        if(r!=null) {
          list.repaint(r);
        }
      }
      index = -1;
      prevButton = null;
      return;
    }
    if(index&amp;gt;=0) {
      JButton button = getButton(list, pt, index);
      ButtonsRenderer renderer = (ButtonsRenderer)list.getCellRenderer();
      renderer.button = button;
      if(button != null) {
        button.getModel().setRollover(true);
        renderer.rolloverIndex = index;
        if(!button.equals(prevButton)) {
          Rectangle r = list.getCellBounds(prevIndex, index);
          if(r!=null) {
            list.repaint(r);
          }
        }
      }else{
        renderer.rolloverIndex = -1;
        Rectangle r = null;
        if(prevIndex != index) {
          r = list.getCellBounds(index, index);
        }else if(prevIndex&amp;gt;=0 &amp;amp;&amp;amp; prevButton!=null) {
          r = list.getCellBounds(prevIndex, prevIndex);
        }
        if(r!=null) {
          list.repaint(r);
        }
        prevIndex = -1;
      }
      prevButton = button;
    }
    prevIndex = index;
  }
  @Override public void mousePressed(MouseEvent e) {
    JList list = (JList)e.getComponent();
    Point pt = e.getPoint();
    int index  = list.locationToIndex(pt);
    if(index&amp;gt;=0) {
      JButton button = getButton(list, pt, index);
      if(button != null) {
        ButtonsRenderer renderer = (ButtonsRenderer)list.getCellRenderer();
        renderer.button = button;
        list.repaint(list.getCellBounds(index, index));
      }
    }
  }
  @Override public void mouseReleased(MouseEvent e) {
    JList list = (JList)e.getComponent();
    Point pt = e.getPoint();
    int index  = list.locationToIndex(pt);
    if(index&amp;gt;=0) {
      JButton button = getButton(list, pt, index);
      if(button != null) {
        ButtonsRenderer renderer = (ButtonsRenderer)list.getCellRenderer();
        renderer.button = null;
        button.doClick();
        Rectangle r = list.getCellBounds(index, index);
        if(r!=null) {
          list.repaint(r);
        }
      }
    }
  }
  @SuppressWarnings(&quot;unchecked&quot;)
  private static JButton getButton(JList list, Point pt, int index) {
    Container c = (Container)list.getCellRenderer().getListCellRendererComponent(
        list, &quot;&quot;, index, false, false);
    Rectangle r = list.getCellBounds(index, index);
    c.setBounds(r);
    pt.translate(0,-r.y);
    Component b = SwingUtilities.getDeepestComponentAt(c, pt.x, pt.y);
    if(b instanceof JButton) {
      return (JButton)b;
    }else{
      return null;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリスト(&lt;code&gt;BasicComboPopup&lt;/code&gt;)から&lt;code&gt;JList&lt;/code&gt;を取得し、これに上記のような&lt;code&gt;MouseListener&lt;/code&gt;を追加しています。この&lt;code&gt;JList&lt;/code&gt;がクリックされた場合、レンダラーから対応するセルに表示されている&lt;code&gt;JButton&lt;/code&gt;を取得し、&lt;code&gt;button.doClick()&lt;/code&gt;を呼び出します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Accessible a = getAccessibleContext().getAccessibleChild(0);
if(a instanceof BasicComboPopup) {
  BasicComboPopup pop = (BasicComboPopup)a;
  JList list = pop.getList();
  CellButtonsMouseListener cbml = new CellButtonsMouseListener();
  list.addMouseListener(cbml);
  list.addMouseMotionListener(cbml);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;削除ボタンがクリックされてもドロップダウンリストは表示状態のまま残るように、&lt;code&gt;MutableComboBoxModel#removeElementAt(index);&lt;/code&gt;のあとで&lt;code&gt;comboBox.showPopup();&lt;/code&gt;を実行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicComboPopup&lt;/code&gt;が、フレーム外に表示されている場合(&lt;code&gt;Heavy weight&lt;/code&gt;)、一旦閉じたあとで再度開かれるように見える&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonsInListCell.html&quot;&gt;JListのセル内にJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/removebuttonincomboitem</link>
                <guid>http://terai.xrea.jp/swing/removebuttonincomboitem</guid>
                <pubDate>2012-07-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserを開いたままファイルの上書き警告ダイアログを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;で名前を付けて保存する場合、すでに存在するファイルを選択してセーブボタンを押すと上書き警告ダイアログを表示するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileAlreadyExistsDialog&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-77H8Wl7UgV0/T_E-hZznv2I/AAAAAAAABOo/RIVqWmchCfw/s800/FileAlreadyExistsDialog.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFileChooser fileChooser = new JFileChooser() {
  @Override public void approveSelection() {
    File f = getSelectedFile();
    if(f.exists() &amp;amp;&amp;amp; getDialogType() == SAVE_DIALOG) {
      String m = String.format(
          &quot;&amp;lt;html&amp;gt;%s already exists.&amp;lt;br&amp;gt;Do you want to replace it?&quot;,
          f.getAbsolutePath());
      int rv = JOptionPane.showConfirmDialog(
          this, m, &quot;Save As&quot;, JOptionPane.YES_NO_OPTION);
      if(rv!=JOptionPane.YES_OPTION) {
        return;
      }
    }
    super.approveSelection();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ユーザーが&lt;code&gt;Save&lt;/code&gt;ボタンをクリックした時に呼び出される&lt;code&gt;JFileChooser#approveSelection()&lt;/code&gt;をオーバーライドし、選択されているファイルがすでに存在する場合は、上書きしても良いかを確認する&lt;code&gt;ConfirmDialog&lt;/code&gt;を&lt;code&gt;JFileChooser&lt;/code&gt;を親にして呼び出しています。&lt;code&gt;Yes&lt;/code&gt;の場合は、&lt;code&gt;super.approveSelection()&lt;/code&gt;を実行して結果を返して&lt;code&gt;JFileChooser&lt;/code&gt;を閉じる、&lt;code&gt;No&lt;/code&gt;の場合は、なにもせずに&lt;code&gt;JFileChooser&lt;/code&gt;に戻ります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: このサンプルでは上書きするを選択した場合でも、選択したファイル名をコンソールに出力するだけで、実際にファイルを保存する機能は実装していません。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1391852&quot;&gt;Swing - How to react on events fired by a JFileChooser?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3651494/jfilechooser-with-confirmation-dialog&quot;&gt;java - JFileChooser with confirmation dialog - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filealreadyexistsdialog</link>
                <guid>http://terai.xrea.jp/swing/filealreadyexistsdialog</guid>
                <pubDate>2012-07-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TitledBorderのタイトルを縦(左側)に表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TitledBorder&lt;/code&gt;のタイトル文字列を縦(左側)に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/VerticalTitledBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-ndnU9h6kzPw/T-gQmrTVqdI/AAAAAAAABOQ/KwNEpVGLDa0/s800/VerticalTitledBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class VerticalTitledBorder extends TitledBorder{
  private final JLabel label;
  public VerticalTitledBorder(String title) {
    super(title);
    this.label = new JLabel(title);
    this.label.setOpaque(true);
    //this.label.putClientProperty(BasicHTML.propertyKey, null);
  }
  @Override public void paintBorder(
      Component c, Graphics g, int x, int y, int width, int height) {
    Border border = getBorder();
    String title = getTitle();
    if((title != null) &amp;amp;&amp;amp; !title.isEmpty() &amp;amp;&amp;amp; border != null) {
      int edge = (border instanceof TitledBorder) ? 0 : EDGE_SPACING;
      JLabel label = getLabel(c);
      Dimension size = label.getPreferredSize();
      Insets insets = getBorderInsets(border, c, new Insets(0, 0, 0, 0));

      int borderX = x + edge;
      int borderY = y + edge;
      int borderW = width - edge - edge;
      int borderH = height - edge - edge;

      int labelH = size.height;
      int labelW = height - insets.top - insets.bottom; //TEST: - (edge * 8);
      if(labelW &amp;gt; size.width) {
        labelW = size.width;
      }

      int ileft = edge + insets.left/2 - labelH/2;
      if(ileft &amp;lt; edge) {
        borderX -= ileft;
        borderW += ileft;
      }
      border.paintBorder(c, g, borderX, borderY, borderW, borderH);

      Graphics2D g2 = (Graphics2D)g.create();
      g2.translate(0, (height+labelW)/2);
      g2.rotate(Math.toRadians(-90));
      //or: g2.transform(AffineTransform.getQuadrantRotateInstance(-1));
      label.setSize(labelW, labelH);
      label.paint(g2);
      g2.dispose();
    }else{
      super.paintBorder(c, g, x, y, width, height);
    }
  }
  @Override public Insets getBorderInsets(Component c, Insets insets) {
    Border border = getBorder();
    insets = getBorderInsets(border, c, insets);
    String title = getTitle();
    if((title != null) &amp;amp;&amp;amp; !title.isEmpty()) {
      int edge = (border instanceof TitledBorder) ? 0 : EDGE_SPACING;
      JLabel label = getLabel(c);
      Dimension size = label.getPreferredSize();
      if(insets.left &amp;lt; size.height) {
        insets.left = size.height - edge;
      }
      insets.top += edge + TEXT_SPACING;
      insets.left += edge + TEXT_SPACING;
      insets.right += edge + TEXT_SPACING;
      insets.bottom += edge + TEXT_SPACING;
    }
    return insets;
  }

  //Copied from TitledBorder
  private Color getColor(Component c) {
    Color color = getTitleColor();
    if(color != null) {
      return color;
    }
    color = UIManager.getColor(&quot;TitledBorder.titleColor&quot;);
    if(color != null) {
      return color;
    }
    return (c != null) ? c.getForeground() : null;
  }
  private JLabel getLabel(Component c) {
    this.label.setText(getTitle());
    this.label.setFont(getFont(c));
    this.label.setForeground(getColor(c));
    this.label.setComponentOrientation(c.getComponentOrientation());
    this.label.setEnabled(c.isEnabled());
    this.label.setBackground(c.getBackground()); //???
    return this.label;
  }
  private static Insets getBorderInsets(
      Border border, Component c, Insets insets) {
    if(border == null) {
      insets.set(0, 0, 0, 0);
    }else if(border instanceof AbstractBorder) {
      AbstractBorder ab = (AbstractBorder) border;
      insets = ab.getBorderInsets(c, insets);
    }else{
      Insets i = border.getBorderInsets(c);
      insets.set(i.top, i.left, i.bottom, i.right);
    }
    return insets;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TitledBorder&lt;/code&gt;のデフォルト(上)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK1.7.0&lt;/code&gt;では、文字列が&lt;code&gt;Border&lt;/code&gt;の幅より長い場合、省略記号&lt;code&gt;...&lt;/code&gt;で省略されるようになった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TitledBorder#paintBorder(...)&lt;/code&gt;などをオーバーライドして、縦で左側に表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TitledBorder&lt;/code&gt;と&lt;code&gt;VerticalTitledBorder&lt;/code&gt;の組み合わせ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/verticaltitledborder</link>
                <guid>http://terai.xrea.jp/swing/verticaltitledborder</guid>
                <pubDate>2012-06-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Iconを生成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Icon&lt;/code&gt;インタフェースから固定サイズのアイコンを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragHereIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-PTY9ydf9DFE/T97u-rwg5lI/AAAAAAAABN0/52xJLmkoNak/s800/DragHereIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DragHereIcon implements Icon {
  private static int ICON_SIZE = 100;
  private static float BORDER_WIDTH = 8f;
  private static float SLIT_WIDTH = 8f;
  private static int ARC_SIZE = 16;
  private static int SLIT_NUM = 3;
  private static Shape BORDER = new RoundRectangle2D.Float(
    BORDER_WIDTH,BORDER_WIDTH,
    ICON_SIZE-2*BORDER_WIDTH-1,ICON_SIZE-2*BORDER_WIDTH-1,
    ARC_SIZE,ARC_SIZE);
  private static Font font = new Font(Font.MONOSPACED, Font.BOLD, ICON_SIZE);
  private static FontRenderContext frc = new FontRenderContext(null, true, true);
  //DOWNWARDS WHITE ARROW
  private static Shape ARROW = new TextLayout(&quot;\u21E9&quot;, font, frc).getOutline(null);
  //DOWNWARDS BLACK ARROW
  //private static Shape ARROW = new TextLayout(&quot;\u2B07&quot;, font, frc).getOutline(null);
  private static Color LINE_COLOR = Color.GRAY;
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.translate(x, y);

    g2.setStroke(new BasicStroke(BORDER_WIDTH));
    g2.setPaint(LINE_COLOR);
    g2.draw(BORDER);

    g2.setStroke(new BasicStroke(SLIT_WIDTH));
    g2.setColor(UIManager.getColor(&quot;Panel.background&quot;));

    int n = SLIT_NUM+1;
    int v = ICON_SIZE/n;
    int m = n*v;
    for(int i=1;i&amp;lt;n;i++) {
      int a = i*v;
      g2.drawLine(a,0,a,m);
      g2.drawLine(0,a,m,a);
    }

    //g2.drawLine(1*v,0*v,1*v,4*v);
    //g2.drawLine(2*v,0*v,2*v,4*v);
    //g2.drawLine(3*v,0*v,3*v,4*v);
    //g2.drawLine(0*v,1*v,4*v,1*v);
    //g2.drawLine(0*v,2*v,4*v,2*v);
    //g2.drawLine(0*v,3*v,4*v,3*v);

    g2.setPaint(LINE_COLOR);
    Rectangle2D b = ARROW.getBounds();
    Point2D p = new Point2D.Double(b.getX() + b.getWidth()/2d, b.getY() + b.getHeight()/2d);
    AffineTransform toCenterAT = AffineTransform.getTranslateInstance(
        ICON_SIZE/2d - p.getX(), ICON_SIZE/2d - p.getY());
    g2.fill(toCenterAT.createTransformedShape(ARROW));
    g2.translate(-x,-y);
    g2.dispose();
  }
  @Override public int getIconWidth()  {
    return ICON_SIZE;
  }
  @Override public int getIconHeight() {
    return ICON_SIZE;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のように&lt;code&gt;Icon&lt;/code&gt;インタフェースを実装してアイコンを作成しています。フチもアイコンの内部に描画していますが、&lt;code&gt;BasicStroke&lt;/code&gt;の破線ではなく背景色と同じ色の直線でパターンを表現しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Icon#paintIcon(Component c, Graphics g, int x, int y)&lt;/code&gt;を実装

&lt;ul&gt;
&lt;li&gt;原点を移動&lt;/li&gt;
&lt;li&gt;ラウンド矩形でフチを描画&lt;/li&gt;
&lt;li&gt;直線で格子状のスリットを上書き&lt;/li&gt;
&lt;li&gt;矢印のアウトラインをフォントから取得して中心に描画&lt;/li&gt;
&lt;li&gt;原点を戻す(直接&lt;code&gt;g.translate(x, y)&lt;/code&gt;していた場合、戻しておかないとラベル文字列の描画位置がズレる)

&lt;ul&gt;
&lt;li&gt;もしくは(&lt;code&gt;Graphics2D g2 = (Graphics2D)g.create()&lt;/code&gt;していた場合)、&lt;code&gt;g2.dispose()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Icon#getIconWidth()&lt;/code&gt;, &lt;code&gt;Icon#getIconHeight()&lt;/code&gt;を実装してアイコンのサイズを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;注: ファイルをドロップしてもコンソールにファイル名を表示するだけで他はなにもしていません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileListFlavor.html&quot;&gt;Fileのドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10751001/java-application-with-fancy-drag-drop&quot;&gt;swing - Java application with fancy Drag &amp;amp; Drop - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransferHandler&lt;/code&gt;でファイルがドロップされるとき、カーソルを常にコピーにする(移動ではなく)方法が分からない(のでこのサンプルでは&lt;code&gt;DropTarget&lt;/code&gt;を使用)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-18 (月) 18:25:50&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/draghereicon</link>
                <guid>http://terai.xrea.jp/swing/draghereicon</guid>
                <pubDate>2012-06-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Iconを回転する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;画像ファイルから&lt;code&gt;90&lt;/code&gt;、&lt;code&gt;180&lt;/code&gt;、&lt;code&gt;270&lt;/code&gt;度回転した&lt;code&gt;Icon&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RotatedIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-OK_vUTiAiCA/T9WIzXvRm9I/AAAAAAAABNk/ubus049qH04/s800/RotatedIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RotateIcon implements Icon{
  private int width, height;
  private Image image;
  private AffineTransform trans;
  public RotateIcon(Icon icon, int rotate) {
    if((rotate%90)!=0) {
      throw new IllegalArgumentException(
        rotate + &quot;: Rotate must be (rotate % 90 == 0)&quot;);
    }

    width  = icon.getIconWidth();
    height = icon.getIconHeight();
    image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
    Graphics g = image.getGraphics();
    icon.paintIcon(null, g, 0, 0);
    g.dispose();

    int numquadrants = (rotate / 90) % 4;
    if(numquadrants==1 || numquadrants==-3) {
      trans = AffineTransform.getTranslateInstance(height, 0);
      int v = width; width = height; height = v;
    }else if(numquadrants==-1 || numquadrants==3) {
      trans = AffineTransform.getTranslateInstance(0, width);
      int v = width; width = height; height = v;
    }else if(Math.abs(numquadrants)==2) {
      trans = AffineTransform.getTranslateInstance(width, height);
    }else{
      trans = AffineTransform.getTranslateInstance(0, 0);
    }
    trans.quadrantRotate(numquadrants);
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.translate(x, y);
    g2.drawImage(image, trans, c);
    g2.translate(-x, -y);
    g2.dispose();
  }
  @Override public int getIconWidth()  {
    return width;
  }
  @Override public int getIconHeight() {
    return height;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;幅高さ: &lt;code&gt;83x100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rotate&lt;/code&gt;: &lt;code&gt;180&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;幅高さ: &lt;code&gt;83x100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上下反転と同等: &lt;a href=&quot;http://terai.xrea.jp/Swing/AffineTransformOp.html&quot;&gt;AffineTransformOpで画像を反転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rotate&lt;/code&gt;: &lt;code&gt;90&lt;/code&gt;(時計回りに&lt;code&gt;90&lt;/code&gt;度)

&lt;ul&gt;
&lt;li&gt;幅高さ: &lt;code&gt;100x83&lt;/code&gt;(元画像の幅高さを入れ替え)&lt;/li&gt;
&lt;li&gt;左上を原点に&lt;code&gt;90&lt;/code&gt;度回転し、元画像の高さだけ&lt;code&gt;X&lt;/code&gt;軸プラス方向に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rotate&lt;/code&gt;: &lt;code&gt;-90&lt;/code&gt;(反時計回りに&lt;code&gt;90&lt;/code&gt;度)

&lt;ul&gt;
&lt;li&gt;幅高さ: &lt;code&gt;100x83&lt;/code&gt;(元画像の幅高さを入れ替え)&lt;/li&gt;
&lt;li&gt;左上を原点に&lt;code&gt;270&lt;/code&gt;度回転し、元画像の幅だけ&lt;code&gt;Y&lt;/code&gt;軸プラス方向に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;enum QuadrantRotate {
  CLOCKWISE(1),
  VERTICAL_FLIP(2),
  COUNTER_CLOCKWISE(-1);
  private final int numquadrants;
  private QuadrantRotate(int numquadrants) {
    this.numquadrants = numquadrants;
  }
  public int getNumQuadrants() {
    return numquadrants;
  }
}
class QuadrantRotateIcon implements Icon{
  private final QuadrantRotate rotate;
  private final Icon icon;
  public QuadrantRotateIcon(Icon icon, QuadrantRotate rotate) {
    this.icon = icon;
    this.rotate = rotate;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    int w = icon.getIconWidth();
    int h = icon.getIconHeight();
    Graphics2D g2 = (Graphics2D)g.create();
    g2.translate(x, y);
    switch(rotate) {
      case CLOCKWISE:         g2.translate(h, 0); break;
      case VERTICAL_FLIP:     g2.translate(w, h); break;
      case COUNTER_CLOCKWISE: g2.translate(0, w); break;
    }
    g2.rotate(Math.toRadians(90*rotate.getNumQuadrants()));
    icon.paintIcon(c, g2, 0, 0);
    g2.dispose();
  }
  @Override public int getIconWidth()  {
    return rotate==QuadrantRotate.VERTICAL_FLIP
      ? icon.getIconWidth() : icon.getIconHeight();
  }
  @Override public int getIconHeight() {
    return rotate==QuadrantRotate.VERTICAL_FLIP
      ? icon.getIconHeight() : icon.getIconWidth();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://duke.kenai.com/iconSized/index.html&quot;&gt;Duke Images: iconSized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AffineTransformOp.html&quot;&gt;AffineTransformOpで画像を反転する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MouseDrivenImageRotation.html&quot;&gt;Mouseで画像を移動、回転&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rotatedicon</link>
                <guid>http://terai.xrea.jp/swing/rotatedicon</guid>
                <pubDate>2012-06-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPasswordFieldにヒント文字列を描画する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPasswordField&lt;/code&gt;に入力がない場合、ヒント文字列を描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InputHintPasswordField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-UKh7dosDsR4/T8xFLnpMGwI/AAAAAAAABNY/nxgzH2XN1vo/s800/InputHintPasswordField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WatermarkPasswordField extends JPasswordField
                             implements FocusListener, DocumentListener {
  private boolean showWatermark = true;
  public WatermarkPasswordField() {
    super();
    addFocusListener(this);
    getDocument().addDocumentListener(this);
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    if(showWatermark) {
      Graphics2D g2 = (Graphics2D)g.create();
      Insets i = getInsets();
      Font font = getFont();
      FontRenderContext frc = g2.getFontRenderContext();
      TextLayout tl = new TextLayout(&quot;Password&quot;, font, frc);
      g2.setPaint(hasFocus()?Color.GRAY:Color.BLACK);
      int baseline = getBaseline(getWidth(), getHeight());
      tl.draw(g2, i.left+1, baseline);
      g2.dispose();
    }
  }
  @Override public void focusGained(FocusEvent e) {
    repaint();
  }
  @Override public void focusLost(FocusEvent e) {
    showWatermark = getPassword().length==0;
    repaint();
  }
  @Override public void insertUpdate(DocumentEvent e) {
    showWatermark = e.getDocument().getLength()==0;
    repaint();
  }
  @Override public void removeUpdate(DocumentEvent e) {
    showWatermark = e.getDocument().getLength()==0;
    repaint();
  }
  @Override public void changedUpdate(DocumentEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPasswordField#paintComponent(...)&lt;/code&gt;をオーバーライドしてヒント文字列を描画しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;paintComponent(...)&lt;/code&gt;メソッドをオーバーライドするのは同じですが、&lt;a href=&quot;http://terai.xrea.jp/Swing/WatermarkInTextField.html&quot;&gt;JTextFieldに透かし画像を表示する&lt;/a&gt;とは異なり、&lt;code&gt;JPasswordField&lt;/code&gt;にフォーカスがあっても、まだ入力がない場合(&lt;code&gt;DocumentListener&lt;/code&gt;を追加)などに、ヒント文字列を非表示にはせず、薄く表示するようにしています(参考: &lt;a href=&quot;http://tips4java.wordpress.com/2009/11/29/text-prompt/&quot;&gt;Text Prompt « Java Tips Weblog&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/11/29/text-prompt/&quot;&gt;Text Prompt « Java Tips Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextComponent&lt;/code&gt;に&lt;code&gt;BorderLayout&lt;/code&gt;を設定して、文字列やアイコンを設定した&lt;code&gt;JLabel&lt;/code&gt;を追加し、これを&lt;code&gt;JLabel#setVisible(boolean)&lt;/code&gt;で切り替えているので、汎用的に使用することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GhostText.html&quot;&gt;JTextFieldにフォーカスと文字列が無い場合の表示&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setText()&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WatermarkInTextField.html&quot;&gt;JTextFieldに透かし画像を表示する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;paintComponent(...)&lt;/code&gt;メソッドをオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/inputhintpasswordfield</link>
                <guid>http://terai.xrea.jp/swing/inputhintpasswordfield</guid>
                <pubDate>2012-06-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderの高さを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;の高さを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableHeaderHeight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-l20IOO5wKSo/T8MIf7FVUwI/AAAAAAAABNM/9BNN63T96Fo/s800/TableHeaderHeight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane(table);
scroll.setColumnHeader(new JViewport() {
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.height = 32;
    return d;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;に&lt;code&gt;null&lt;/code&gt;(デフォルト)以外のサイズを&lt;code&gt;setPreferredSize(...)&lt;/code&gt;で設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable.AUTO_RESIZE_OFF&lt;/code&gt;の場合、設定されたこのサイズが列の追加や列幅の変更で更新されない(仕様？)ため、ヘッダの描画が不正になる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kensir0u/20090416/1239898154&quot;&gt;JTableのJTalbeHeaderの高さを変更して列幅の合計が１２００ピクセルを超えて横スクロールするとバグった。 - kensir0uのしくみ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable.AUTO_RESIZE_OFF&lt;/code&gt;以外の場合は、&lt;code&gt;setPreferredSize(...)&lt;/code&gt;で設定された幅は無視されて、&lt;code&gt;JTable&lt;/code&gt;の幅が使用される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JViewport#getPreferredSize()&lt;/code&gt;もしくは、&lt;code&gt;JTableHeader#getPreferredSize()&lt;/code&gt;をオーバーライドして、&lt;code&gt;JTableHeader&lt;/code&gt;の高さを変更&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setTableHeader(new JTableHeader(table.getColumnModel()) {
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.height = 32;
    return d;
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;viewport.setPreferredSize(...)&lt;/code&gt;と設定しても可?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JTableHeader#getHeight()&lt;/code&gt;をオーバーライドすると、ヘッダ文字列などの描画だけ変更される&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getHeight()&lt;/code&gt;は&lt;code&gt;JTableHeader#getHeaderRect()&lt;/code&gt;で使用されているため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/kensir0u/20090416/1239898154&quot;&gt;JTableのJTalbeHeaderの高さを変更して列幅の合計が１２００ピクセルを超えて横スクロールするとバグった。 - kensir0uのしくみ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;このバグ？の状態を適切に示す良いサンプルコードがあります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tableheaderheight</link>
                <guid>http://terai.xrea.jp/swing/tableheaderheight</guid>
                <pubDate>2012-05-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの列にEnumSetを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の列に&lt;code&gt;EnumSet&lt;/code&gt;を設定し、その状態を&lt;code&gt;JCheckBox&lt;/code&gt;を使ったレンダラーで表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EnumSet&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-sFAMn6DioFo/T7nL6BrEaHI/AAAAAAAABM0/QqVOr4uGNdE/s800/EnumSet.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;enum Permissions { EXECUTE, WRITE, READ; }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Object[][] data = {
  {&quot;owner&quot;, EnumSet.of(Permissions.READ, Permissions.WRITE, Permissions.EXECUTE)},
  {&quot;group&quot;, EnumSet.of(Permissions.READ)},
  {&quot;other&quot;, EnumSet.noneOf(Permissions.class)}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public Object getCellEditorValue() {
  EnumSet&amp;lt;Permissions&amp;gt; f = EnumSet.noneOf(Permissions.class);
  if(buttons[0].isSelected()) f.add(Permissions.READ);
  if(buttons[1].isSelected()) f.add(Permissions.WRITE);
  if(buttons[2].isSelected()) f.add(Permissions.EXECUTE);
  return f;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxesInTableCell.html&quot;&gt;JTableのCellにJCheckBoxを複数配置する&lt;/a&gt;と同様に、パーミッション(第&lt;code&gt;1&lt;/code&gt;列目)を&lt;code&gt;JCheckBox&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;で作成したセルレンダラーで表現していますが、モデルのデータはビットフラグではなく、&lt;code&gt;EnumSet&lt;/code&gt;を使用するように変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxesInTableCell.html&quot;&gt;JTableのCellにJCheckBoxを複数配置する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/enum.html#h2_flag&quot;&gt;フラグとしての論理和(EnumSetの例) - Java列挙型メモ(Hishidama&amp;#39;s Java enum Memo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/enumset</link>
                <guid>http://terai.xrea.jp/swing/enumset</guid>
                <pubDate>2012-05-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextComponentでサロゲートペアのテスト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;などで数値文字参照や&lt;code&gt;Unicode&lt;/code&gt;エスケープを使ってサロゲートペアのテストをします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SurrogatePair&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-BY6N3kDDUG8/T7ByWIn0mgI/AAAAAAAABMo/4dpU-rm8zAQ/s800/SurrogatePair.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final URL url = getClass().getResource(&quot;SurrogatePair.html&quot;);
try{
  editor1.read(new InputStreamReader(url.openStream(), &quot;UTF-8&quot;), &quot;html&quot;);
}catch(Exception ex) {
  editor1.setText(&quot;&amp;lt;html&amp;gt;&amp;lt;p&amp;gt;(&amp;amp;#xD85B;&amp;amp;#xDE40;) (&amp;amp;#x26E40;)&amp;lt;br /&amp;gt;(&amp;amp;#xD842;&amp;amp;#xDF9F;) (&amp;amp;#x00020B9F;)&amp;lt;/p&amp;gt;&amp;lt;/html&amp;gt;&quot;);
}

JEditorPane editor2 = new JEditorPane();
//editor2.setFont(new Font(&quot;IPAexGothic&quot;, Font.PLAIN, 24));
editor2.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
editor2.setText(&quot;(\uD85B\uDE40) (\u26E40)\n(\uD842\uDF9F) (\u20B9F)&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;以下、サロゲートペア対応フォントを使えるようにしてテストしています。&lt;code&gt;Java Web Start&lt;/code&gt;で起動した場合、このサンプルの&lt;code&gt;browse&lt;/code&gt;ボタンで&lt;code&gt;jar&lt;/code&gt;ファイル内の&lt;code&gt;SurrogatePair.html&lt;/code&gt;を表示することはできません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上: 数値文字参照(&lt;code&gt;Numeric character reference&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JEditorPane(HTMLEditorKit)&lt;/code&gt;の場合&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;JEditorPane OK: &amp;amp;amp;#xD85B;&amp;amp;amp;#xDE40;
JEditorPane NG: &amp;amp;amp;#x26E40;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ブラウザ(試したのは&lt;code&gt;IE&lt;/code&gt;, &lt;code&gt;FireFox&lt;/code&gt;, &lt;code&gt;Chrome&lt;/code&gt;, &lt;code&gt;Opera&lt;/code&gt;)の場合&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Browser NG: &amp;amp;amp;#xD85B;&amp;amp;amp;#xDE40;
Browser OK: &amp;amp;amp;#x26E40;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下: &lt;code&gt;Unicode&lt;/code&gt;エスケープ(&lt;code&gt;Unicode escapes&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;JEditorPane OK: \uD85B\uDE40
JEditorPane NG: \u26E40
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTextComponent&lt;/code&gt;とブラウザでサロゲートペアの表現が異なるようなので、これらの文字をどちらの環境でも正しく表示したい場合は、数値文字参照や&lt;code&gt;Unicode&lt;/code&gt;エスケープは使用せず、ソースコードなどを&lt;code&gt;UTF-8&lt;/code&gt;にしてそのまま𦹀や𠮟と書く(メモ帳などの対応済みエディタで)のがよさそうです。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Windows 7&lt;/code&gt;, &lt;code&gt;JDK 1.7.0_02&lt;/code&gt;の環境では、&lt;code&gt;JTextComponent&lt;/code&gt;からメモ帳などにサロゲートペアの文字をコピーペーストは可能ですが、逆にメモ帳やブラウザから&lt;code&gt;JTextComponent&lt;/code&gt;にサロゲートペアの文字をコピーペーストすることができないようです。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTextComponent&lt;/code&gt;(&lt;code&gt;Java 1.7.0&lt;/code&gt;)は、異体字セレクタに対応していない&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォントを&lt;code&gt;IVS&lt;/code&gt;に対応している&lt;code&gt;IPAmj明朝&lt;/code&gt;などに変更し、異体字セレクタ付き文字列のある&lt;code&gt;UTF-8&lt;/code&gt;のテキストを&lt;code&gt;JTextArea&lt;/code&gt;などに読み込んでも異体字セレクタが下駄になる&lt;/li&gt;
&lt;li&gt;数値文字参照、&lt;code&gt;Unicode&lt;/code&gt;エスケープを使う方法でも下駄になる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/terazzo/20110115/1295047469&quot;&gt;Java IVSの異体字を元の字と同一視して比較する - terazzoの日記&lt;/a&gt;のように、&lt;code&gt;VS&lt;/code&gt;を&lt;code&gt;UTF-16&lt;/code&gt;に(例えば&lt;code&gt;U+E0101&lt;/code&gt;を&lt;code&gt;\uDB40\uDD01&lt;/code&gt;に)しても、&lt;code&gt;JTextComponent&lt;/code&gt;では駄目&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;参考メモ: &lt;a href=&quot;http://d.hatena.ne.jp/akane_neko/20121115/1352932112&quot;&gt;MS IVSアドインでDTPにはどんな影響があるのか - ちくちく日記&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Adobe-Japan1 collection&lt;/code&gt;: &lt;code&gt;小塚明朝 Pr6N&lt;/code&gt;など&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hanyo-Denshi collection&lt;/code&gt;: &lt;code&gt;IPAmj明朝&lt;/code&gt;など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;、&lt;code&gt;JDK 1.7.0_21&lt;/code&gt;、&lt;code&gt;小塚明朝 Pr6N R&lt;/code&gt;(&lt;code&gt;KozMinPr6N-Regular.otf&lt;/code&gt;)で、&lt;code&gt;Font.createFont(...)&lt;/code&gt;を使って&lt;code&gt;Font&lt;/code&gt;を作成すると&lt;code&gt;IllegalArgumentException&lt;/code&gt;が発生する場合がある

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5092191&quot;&gt;Bug ID: 5092191 RFE: CFF/Type2 embedded fonts not supported with Font.createFont()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.lang.IllegalArgumentException: Length must be &amp;gt;= 0.
   at javax.swing.text.GlyphPainter2.getBoundedPosition(GlyphPainter2.java: 205)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
public class OTFTest {
  public JComponent makeUI() {
    JTextArea textArea = new JTextArea(&quot;1234567890\n \uD85B\uDE40&quot;);
    String str = &quot;file:///C:/Program Files (x86)/Adobe/Reader 11.0/Resource/CIDFont/KozMinPr6N-Regular.otf&quot;; //6.014
    //String str = &quot;file:///C:/Program Files (x86)/Adobe/Acrobat 9.0/Resource/CIDFont/KozMinPr6N-Regular.otf&quot;; //6.004
    //String str = &quot;file:///C:/Windows/Fonts/meiryo.ttc&quot;;
    //String str = &quot;file:///C:/Windows/Fonts/ipaexg.ttf&quot;;
    //String str = &quot;file:///C:/Windows/Fonts/A-OTF-ShinGoPro-Regular.otf&quot;;
    try(InputStream is = (new URL(str)).openStream()) {
      Font font = (Font.createFont(Font.TRUETYPE_FONT, is)).deriveFont(32.0f);
      textArea.setFont(font);
      is.close();
    }catch(IOException|FontFormatException ex) {
      ex.printStackTrace();
    }
    JPanel p = new JPanel(new BorderLayout());
    p.add(new JScrollPane(textArea));
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new OTFTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mindprod.com/jgloss/opentype.html#JAVASUPPORT&quot;&gt;Java Font Support - OpenType : Java Glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/font/OpenType.html&quot;&gt;OpenType (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;結合文字(&lt;code&gt;A&amp;amp;#x0300;&lt;/code&gt;、&lt;code&gt;か&amp;amp;#x3099;&lt;/code&gt;)も&lt;code&gt;JTextComponent&lt;/code&gt;は未対応。&lt;del&gt;ブラウザだと&lt;code&gt;Chrome&lt;/code&gt;は対応されているが、他は部分的な対応になっている？&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-15 (火) 11:17:30&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt; + &lt;code&gt;JDK 1.7.0&lt;/code&gt;で&lt;code&gt;OTF&lt;/code&gt;フォントは使えない？？？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-06 (水) 19:07:01&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6836089&quot;&gt;Bug ID: 6836089 Swing HTML parser can&amp;#39;t properly decode codepoints outside the Unicode Plane 0 into a surrogate pair&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-25 (月) 18:37:16

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://mail.openjdk.java.net/pipermail/swing-dev/2012-June/002145.html&quot;&gt;&lt;Swing Dev&gt; &lt;Swind Dev&gt; &lt;7u6&gt; Review request for 6836089: Swing HTML parser can&amp;#39;t properly decode codepoints outside the Unicode Plane 0 into a surrogate pair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;確かに&lt;code&gt;JDK 1.6.0_33&lt;/code&gt;では、&lt;code&gt;&amp;amp;#x26E40;&lt;/code&gt;などの数値文字参照が&lt;code&gt;JEditorPane&lt;/code&gt;で正常に表示されている。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-25 (月) 20:42:16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/surrogatepair</link>
                <guid>http://terai.xrea.jp/swing/surrogatepair</guid>
                <pubDate>2012-05-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのCellEditorに設定したJComboBoxに余白を追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellEditor&lt;/code&gt;に設定した&lt;code&gt;JComboBox&lt;/code&gt;に余白を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxCellEditorInsets&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-dIea13PoJ70/T6c7YezP1BI/AAAAAAAABMQ/e0IqDjxhjpw/s800/ComboBoxCellEditorInsets.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboBoxPanel extends JPanel {
  public final JComboBox&amp;lt;String&amp;gt; comboBox = new JComboBox&amp;lt;&amp;gt;(
      new String[] {&quot;aaaaaa&quot;, &quot;bbb&quot;, &quot;c&quot;});
  public ComboBoxPanel() {
    super(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();

    c.weightx = 1.0;
    c.insets = new Insets(0, 10, 0, 10);
    c.fill = GridBagConstraints.HORIZONTAL;

    comboBox.setEditable(true);
    setOpaque(true);
    add(comboBox, c);
    comboBox.setSelectedIndex(0);
  }
}
class ComboBoxCellRenderer extends ComboBoxPanel implements TableCellRenderer {
  public ComboBoxCellRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    this.setBackground(isSelected ? table.getSelectionBackground()
                                  : table.getBackground());
    if (value != null) {
      comboBox.setSelectedItem(value);
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Border&lt;/code&gt;(左)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;自身に余白を設定し、これを&lt;code&gt;CellRenderer&lt;/code&gt;, &lt;code&gt;CellEditor&lt;/code&gt;に使用&lt;/li&gt;
&lt;li&gt;ドロップダウンリストの位置、サイズが余白を含んだ幅になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(8,10,8,10), combo.getBorder()));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt; + &lt;code&gt;JComboBox&lt;/code&gt;(右)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GridBagLayout&lt;/code&gt;を使用する&lt;code&gt;JPanel&lt;/code&gt;に&lt;code&gt;JComboBox&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt;フィールドを&lt;code&gt;GridBagConstraints.HORIZONTAL&lt;/code&gt;として、垂直には&lt;code&gt;JComboBox&lt;/code&gt;のサイズを変更しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insets&lt;/code&gt;フィールドを設定して、&lt;code&gt;JComboBox&lt;/code&gt;の外側に別途(ドロップダウンリストの位置、サイズに影響しないように)余白を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;セルの中にある&lt;code&gt;JComboBox&lt;/code&gt;の幅を可変ではなく固定にする場合は、以下のような&lt;code&gt;FlowLayout&lt;/code&gt;のパネルに&lt;code&gt;getPreferredSize()&lt;/code&gt;をオーバーライドして幅を固定した&lt;code&gt;JComboBox&lt;/code&gt;を使用する方法がある。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboBoxPanel extends JPanel {
  private String[] m = new String[] {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
  protected JComboBox&amp;lt;String&amp;gt; comboBox = new JComboBox&amp;lt;String&amp;gt;(m) {
    @Override public Dimension getPreferredSize() {
      Dimension d = super.getPreferredSize();
      return new Dimension(40, d.height);
    }
  };
  public ComboBoxPanel() {
    super();
    setOpaque(true);
    comboBox.setEditable(true);
    add(comboBox);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboCellRenderer.html&quot;&gt;JTableのCellRendererにJComboBoxを設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxcelleditorinsets</link>
                <guid>http://terai.xrea.jp/swing/comboboxcelleditorinsets</guid>
                <pubDate>2012-05-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ClipboardServiceでシステム全体の共有クリップボードにアクセスする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ClipboardService&lt;/code&gt;を使って&lt;code&gt;Java Web Start&lt;/code&gt;で動作中のアプリケーションからシステム全体の共有クリップボードにアクセスします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClipboardService&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/--_lXbzG-H7g/T53noZrOnHI/AAAAAAAABME/FyY8MKdHSg0/s800/ClipboardService.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private ClipboardService cs;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  cs = (ClipboardService)ServiceManager.lookup(&quot;javax.jnlp.ClipboardService&quot;);
}catch(Throwable t) {
  cs = null;
}
JTextArea textArea = new JTextArea() {
  @Override public void copy() {
    if(cs != null) {
      cs.setContents(new StringSelection(getSelectedText()));
    }
    super.copy();
  }
  @Override public void cut() {
    if(cs != null) {
      cs.setContents(new StringSelection(getSelectedText()));
    }
    super.cut();
  }
  @Override public void paste() {
    if(cs != null) {
      Transferable tr = cs.getContents();
      if(tr.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        try{
          getTransferHandler().importData(this, tr);
        }catch(Exception e) {
          e.printStackTrace();
        }
      }
    }else{
      super.paste();
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Java Web Start&lt;/code&gt;から起動された制限付きのランタイム内で動作中するアプリケーションからは、システム全体の共有クリップボードにアクセスすることができないので、&lt;code&gt;ServiceManager&lt;/code&gt;から&lt;code&gt;ClipboardService&lt;/code&gt;を取得し、コピー、ペースト、カットなどでセキュリティ警告ダイアログを表示して、ユーザーにアクセス許可を求めます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;カットの例

&lt;ul&gt;
&lt;li&gt;アプリケーションのクリップボード

&lt;ul&gt;
&lt;li&gt;セキュリティ警告でＯＫ、取り消しのどちらを選択しても、&lt;code&gt;JTextArea&lt;/code&gt;の選択文字列はカットされ、アプリケーションのクリップボードは上書きされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;システム全体の共有クリップボード&lt;/li&gt;
&lt;li&gt;セキュリティ警告でＯＫを選択するとシステム全体の共有クリップボードは上書きされ、取り消しを選択すると上書きされない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/javaws/developersguide/examples.html#ClipboardService&quot;&gt;ClipboardService サービスの使い方 - JNLP API の使用例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/javaws/developersguide/contents.html&quot;&gt;Java Web Start 開発者ガイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clipboardservice</link>
                <guid>http://terai.xrea.jp/swing/clipboardservice</guid>
                <pubDate>2012-04-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの角を丸める</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の左上、右上の角を丸める&lt;code&gt;Border&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RoundedComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-0VloXBzelwQ/T5TD3KZRIzI/AAAAAAAABLs/siwBGiic6Tw/s800/RoundedComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RoundedCornerBorder extends AbstractBorder {
  @Override public void paintBorder(
      Component c, Graphics g, int x, int y, int width, int height) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(
        RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    int r = 12;
    int w = width  - 1;
    int h = height - 1;
    Area round = new Area(new RoundRectangle2D.Float(x, y, w, h, r, r));
    Container parent = c.getParent();
    if(parent!=null) {
      g2.setColor(parent.getBackground());
      Area corner = new Area(new Rectangle2D.Float(x, y, width, height));
      corner.subtract(round);
      g2.fill(corner);
    }
    g2.setPaint(c.getForeground());
    g2.draw(round);
    g2.dispose();
  }
  @Override public Insets getBorderInsets(Component c) {
    return new Insets(4, 8, 4, 8);
  }
  @Override public Insets getBorderInsets(Component c, Insets insets) {
    insets.left = insets.right = 8;
    insets.top = insets.bottom = 4;
    return insets;
  }
}

class KamabokoBorder extends RoundedCornerBorder {
  @Override public void paintBorder(
      Component c, Graphics g, int x, int y, int width, int height) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(
        RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    int r = 12;
    int w = width  - 1;
    int h = height - 1;
    Path2D.Float p = new Path2D.Float();
    p.moveTo(x, y + h);
    p.lineTo(x, y + r);
    p.quadTo(x, y, x + r, y);
    p.lineTo(x + w - r, y);
    p.quadTo(x + w, y, x + w, y + r);
    p.lineTo(x + w, y + h);
    p.closePath();
    Area round = new Area(p);
    Container parent = c.getParent();
    if(parent!=null) {
      g2.setColor(parent.getBackground());
      Area corner = new Area(new Rectangle2D.Float(x, y, width, height));
      corner.subtract(round);
      g2.fill(corner);
    }
    g2.setPaint(c.getForeground());
    g2.draw(round);
    g2.dispose();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Path2D#lineTo&lt;/code&gt;、&lt;code&gt;Path2D#quadTo&lt;/code&gt;を使ってかまぼこ型の図形を作成し、&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;p&gt;以下のような方法でも、かまぼこ型の図形を作成することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Area round = new Area(new RoundRectangle2D.Float(x, y, width-1, height-1, r, r));
Rectangle b = round.getBounds();
b.setBounds(b.x, b.y + r, b.width, b.height - r);
round.add(new Area(b));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;MetalComboBoxUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中: &lt;code&gt;BasicComboBoxUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RoundRectangle2D&lt;/code&gt;に、下の角を上書きするような矩形を追加して作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ComboBox.foreground&amp;quot;, color)&lt;/code&gt;などで、&lt;code&gt;JComboBox&lt;/code&gt;の色を変更しているが、&lt;code&gt;ArrowButton&lt;/code&gt;の色がうまく変更できない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxBorder.html&quot;&gt;JComboBoxのBorderを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下: &lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;をオーバーライドして、&lt;code&gt;ArrowButton&lt;/code&gt;の背景色などを変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;メモ: これらの方法で、角丸の&lt;code&gt;JComboBox&lt;/code&gt;が作成できるのは、&lt;code&gt;BasicLookAndFeel&lt;/code&gt;と&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合のみ？&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxBorder.html&quot;&gt;JComboBoxのBorderを変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundedTextField.html&quot;&gt;JTextFieldの角を丸める&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;編集可不可の切り替えと、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;に適用したサンプルを追加 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-30 (土) 04:07:30&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/roundedcombobox</link>
                <guid>http://terai.xrea.jp/swing/roundedcombobox</guid>
                <pubDate>2012-04-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableで先頭文字のキー入力による検索を行う</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;にフォーカスがある状態でキー入力をした場合、先頭文字が一致する行を検索して選択状態にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableNextMatchKeyHandler&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-UATkJ0JfmBQ/T4u5j_rhkGI/AAAAAAAABLc/1rVNsbM9D98/s800/TableNextMatchKeyHandler.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//@see javax/swing/plaf/basic/BasicListUI.Handler
//@see javax/swing/plaf/basic/BasicTreeUI.Handler
class TableNextMatchKeyHandler extends KeyAdapter{
  private static final int TARGET_COLUMN = 0;
  private String prefix = &quot;&quot;;
  private String typedString = &quot;&quot;;
  private long lastTime = 0L;
  private long timeFactor;
  public TableNextMatchKeyHandler() {
    //Long l = (Long)UIManager.get(&quot;List.timeFactor&quot;);
    timeFactor = 500L; //(l!=null) ? l.longValue() : 1000L;
  }
  private boolean isNavigationKey(KeyEvent e) {
    JTable t = (JTable)e.getSource();
    InputMap im = t.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    KeyStroke key = KeyStroke.getKeyStrokeForEvent(e);
    if(im != null &amp;amp;&amp;amp; im.get(key) != null) {
      return true;
    }
    return false;
  }
  @Override public void keyPressed(KeyEvent e) {
    if(isNavigationKey(e)) {
      prefix = &quot;&quot;;
      typedString = &quot;&quot;;
      lastTime = 0L;
    }
  }
  @Override public void keyTyped(KeyEvent e) {
    JTable src = (JTable)e.getSource();
    int max = src.getRowCount();
    if(max == 0 || e.isAltDown() || isNavigationKey(e)) {
      // Nothing to select
      return;
    }
    boolean startingFromSelection = true;
    char c = e.getKeyChar();
    int increment = e.isShiftDown() ? -1 : 1;
    long time = e.getWhen();
    int startIndex = src.getSelectedRow();
    if(time - lastTime &amp;lt; timeFactor) {
      typedString += c;
      if((prefix.length() == 1) &amp;amp;&amp;amp; (c == prefix.charAt(0))) {
        // Subsequent same key presses move the keyboard focus to the next
        // object that starts with the same letter.
        startIndex += increment;
      }else{
        prefix = typedString;
      }
    }else{
      startIndex += increment;
      typedString = &quot;&quot; + c;
      prefix = typedString;
    }
    lastTime = time;

    if(startIndex &amp;lt; 0 || startIndex &amp;gt;= max) {
      if(e.isShiftDown()) {
        startIndex = max-1;
      }else{
        startingFromSelection = false;
        startIndex = 0;
      }
    }
    Position.Bias bias = e.isShiftDown()?Position.Bias.Backward
                                        :Position.Bias.Forward;
    int index = getNextMatch(src, prefix, startIndex, bias);
    if(index &amp;gt;= 0) {
      src.getSelectionModel().setSelectionInterval(index, index);
      src.scrollRectToVisible(src.getCellRect(index, TARGET_COLUMN, true));
    }else if(startingFromSelection) { // wrap
      index = getNextMatch(src, prefix, 0, bias);
      if(index &amp;gt;= 0) {
        src.getSelectionModel().setSelectionInterval(index, index);
        src.scrollRectToVisible(src.getCellRect(index, TARGET_COLUMN, true));
      }
    }
  }
  //@see JList#getNextMatch(String prefix, int startIndex, Position.Bias bias)
  //@see JTree#getNextMatch(String prefix, int startIndex, Position.Bias bias)
  public static int getNextMatch(
      JTable table, String prefix, int startingRow, Position.Bias bias) {
    int max = table.getRowCount();
    if(prefix == null) {
      throw new IllegalArgumentException();
    }
    if(startingRow &amp;lt; 0 || startingRow &amp;gt;= max) {
      throw new IllegalArgumentException();
    }
    String uprefix = prefix.toUpperCase(Locale.ENGLISH);
    // start search from the next/previous element froom the
    // selected element
    int increment = (bias == Position.Bias.Forward) ? 1 : -1;
    int row = startingRow;
    do{
      Object value = table.getValueAt(row, TARGET_COLUMN);
      String text = Objects.toString(value, &quot;&quot;);
      if (text.toUpperCase(Locale.ENGLISH).startsWith(uprefix)) {
        return row;
      }
      row = (row + increment + max) % max;
    }while(row != startingRow);
    return -1;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、キー入力と&lt;code&gt;0&lt;/code&gt;列目の文字列の先頭文字が一致(大文字小文字は無視)する行を検索、選択し、そこまでスクロールします。
検索方法は、&lt;code&gt;BasicListUI.Handler&lt;/code&gt;、&lt;code&gt;BasicTreeUI.Handler&lt;/code&gt;、&lt;code&gt;JList#getNextMatch(...)&lt;/code&gt;、&lt;code&gt;JTree#getNextMatch(...)&lt;/code&gt;のものと、ほぼ同じ(&lt;kbd&gt;Shift&lt;/kbd&gt;キーを同時に押すと逆検索を追加)です。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.putClientProperty(&amp;quot;JTable.autoStartsEdit&amp;quot;, Boolean.FALSE);&lt;/code&gt;として、キー入力で編集を開始しないように設定

&lt;ul&gt;
&lt;li&gt;マウスクリック、&lt;kbd&gt;F2&lt;/kbd&gt;キーでの編集は可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablenextmatchkeyhandler</link>
                <guid>http://terai.xrea.jp/swing/tablenextmatchkeyhandler</guid>
                <pubDate>2012-04-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AuxiliaryLookAndFeelを追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AuxiliaryLookAndFeel&lt;/code&gt;を追加して、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合の動作を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AuxiliaryLookAndFeel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-SxIyCqWRFhk/T4JxXw96NSI/AAAAAAAABLQ/gM_5mjZPn1o/s800/AuxiliaryLookAndFeel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox check = (JCheckBox)e.getSource();
String lnf = UIManager.getLookAndFeel().getName();
if(check.isSelected() &amp;amp;&amp;amp; lnf.contains(&quot;Windows&quot;)) {
  UIManager.addAuxiliaryLookAndFeel(auxLookAndFeel);
}else{
  UIManager.removeAuxiliaryLookAndFeel(auxLookAndFeel);
}
SwingUtilities.updateComponentTreeUI(MainPanel.this);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストで右クリックを無効にするような&lt;code&gt;ComboBoxUI&lt;/code&gt;を&lt;code&gt;UIManager.addAuxiliaryLookAndFeel(...)&lt;/code&gt;を使って追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableRightClick.html&quot;&gt;JComboBoxのドロップダウンリストで右クリックを無効化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class AuxiliaryWindowsComboBoxUI extends WindowsComboBoxUI {
  public static ComponentUI createUI(JComponent c) {
    return new AuxiliaryWindowsComboBoxUI();
  }
  @Override protected ComboPopup createPopup() {
    return new BasicComboPopup2(comboBox);
  }
  @Override public void addEditor() {
    removeEditor();
    ComboBoxEditor cbe = comboBox.getEditor();
    if(cbe != null) {
      editor = cbe.getEditorComponent();
      if(editor != null) {
        configureEditor();
        comboBox.add(editor);
        if(comboBox.isFocusOwner()) {
          editor.requestFocusInWindow();
        }
      }
    }
  }
  //Override all UI-specific methods your UI classes inherit.
  @Override public void removeEditor() {}
  @Override protected void configureEditor() {}
  @Override protected void unconfigureEditor() {}
  @Override public void update(Graphics g, JComponent c) {}
  @Override public void paint(Graphics g, JComponent c) {}
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;注

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を&lt;code&gt;Nimbus&lt;/code&gt;にすると&lt;code&gt;ClassCastException&lt;/code&gt;が発生する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6631956&quot;&gt;Bug ID: 6631956 Nimbus: ClassCastException when running with MultiLookAndFeel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager.addPropertyChangeListener(new PropertyChangeListener() {...});&lt;/code&gt;を追加して、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;以外の場合は、&lt;code&gt;UIManager.removeAuxiliaryLookAndFeel(auxLookAndFeel);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;編集可能な&lt;code&gt;JComboBox&lt;/code&gt;の場合、&lt;code&gt;NullPointerException&lt;/code&gt;が発生する

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsComboBoxUI#addEditor()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/javax/swing/plaf/multi/doc-files/multi_tsc.html&quot;&gt;Using the Multiplexing Look and Feel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いつか修正: &lt;code&gt;AuxiliaryLookAndFeel&lt;/code&gt;の作成方法、使い方などをいろいろ間違えているような気がする…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-09 (月) 14:41:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/auxiliarylookandfeel</link>
                <guid>http://terai.xrea.jp/swing/auxiliarylookandfeel</guid>
                <pubDate>2012-04-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JProgressBarの進捗文字列の字揃えを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;の進捗文字列を&lt;code&gt;JLabel&lt;/code&gt;にして、字揃えなどを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressStringAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-zRMPjXT7do4/T3lYdJUnilI/AAAAAAAABLA/kcpMYSYoklM/s800/ProgressStringAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JProgressBar bar = new JProgressBar(model) {
  private final JLabel label = new JLabel(getString(), halign);
  private final ChangeListener changeListener = new ChangeListener() {
    @Override public void stateChanged(ChangeEvent e) {
      label.setText(getString());
    }
  };
  @Override public void updateUI() {
    removeChangeListener(changeListener);
    removeAll();
    super.updateUI();
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        setLayout(new BorderLayout());
        addChangeListener(changeListener);
        add(label);
        label.setBorder(BorderFactory.createEmptyBorder(0,4,0,4));
      }
    });
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JProgressBar&lt;/code&gt;のレイアウトを&lt;code&gt;BorderLayout&lt;/code&gt;に変更し、水平方向の配置方法を設定した&lt;code&gt;JLabel&lt;/code&gt;を追加することで、字揃えを変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JProgressBar#setStringPainted(true)&lt;/code&gt;を同時に使用すると、二重に表示される&lt;/li&gt;
&lt;li&gt;進捗状況に応じた文字色の変化には対応していない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の場合で、&lt;code&gt;TitleBorder&lt;/code&gt;などを直接&lt;code&gt;JProgressBar&lt;/code&gt;に設定しても、進捗文字列の垂直位置がずれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressStringLayer.html&quot;&gt;JProgressBarの文字列をJLayerを使って表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progressstringalignment</link>
                <guid>http://terai.xrea.jp/swing/progressstringalignment</guid>
                <pubDate>2012-04-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>PersistenceServiceを使ってJFrameの位置・サイズを記憶</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ServiceManager&lt;/code&gt;から&lt;code&gt;PersistenceService&lt;/code&gt;を取得し、&lt;code&gt;JFrame&lt;/code&gt;などの位置・サイズの保存、呼び出しを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PersistenceService&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-PyOW5DW5kHU/T3APD_Cq_bI/AAAAAAAABKk/i9eivMuQZ0Y/s800/PersistenceService.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final WindowState ws = new WindowState();
SwingWorker&amp;lt;WindowAdapter,Void&amp;gt; worker = new SwingWorker&amp;lt;WindowAdapter,Void&amp;gt;() {
  @Override public WindowAdapter doInBackground() {
    PersistenceService ps;
    BasicService bs;
    try{
      bs = (BasicService)ServiceManager.lookup(&quot;javax.jnlp.BasicService&quot;);
      ps = (PersistenceService)ServiceManager.lookup(&quot;javax.jnlp.PersistenceService&quot;);
    }catch(UnavailableServiceException use) {
      use.printStackTrace();
      ps = null;
      bs = null;
    }
    if(ps != null &amp;amp;&amp;amp; bs != null) {
      final PersistenceService persistenceService = ps;
      final URL codebase = bs.getCodeBase();
      loadWindowState(persistenceService, codebase, ws);
      return new WindowAdapter() {
        @Override public void windowClosing(WindowEvent e) {
          JFrame f = (JFrame)e.getComponent();
          if(f.getExtendedState()==JFrame.NORMAL) {
            ws.setSize(f.getSize());
            ws.setLocation(f.getLocationOnScreen());
          }
          saveWindowState(persistenceService, codebase, ws);
        }
      };
    }else{
      return null;
    }
  }
  @Override public void done() {
    WindowAdapter wa = null;
    try{
      wa = get();
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }catch(Exception e) {
      e.printStackTrace();
    }
    JFrame frame = new JFrame();
    if(wa!=null) frame.addWindowListener(wa);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(new MainPanel());
    frame.setSize(ws.getSize());
    frame.setLocation(ws.getLocation());
    frame.setVisible(true);
  }
};
worker.execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;PersistenceService&lt;/code&gt;で確保したファイルに、&lt;code&gt;HashMap&amp;lt;String, Serializable&amp;gt;&lt;/code&gt;に格納した&lt;code&gt;JFrame&lt;/code&gt;の位置、サイズを&lt;code&gt;XMLEncoder&lt;/code&gt;、&lt;code&gt;XMLDecoder&lt;/code&gt;を使って読み書きしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;、&lt;code&gt;JDK 1.7.0_03&lt;/code&gt;では、&lt;code&gt;C:\Users\(user)\AppData\LocalLow\Sun\Java\Deployment\cache\6.0\muffin&lt;/code&gt;以下に&lt;code&gt;muf&lt;/code&gt;ファイルなどが作成されるようです。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;java version=&quot;1.7.0_03&quot; class=&quot;java.beans.XMLDecoder&quot;&amp;gt;
 &amp;lt;object class=&quot;java.util.HashMap&quot;&amp;gt;
  &amp;lt;void method=&quot;put&quot;&amp;gt;
   &amp;lt;string&amp;gt;location&amp;lt;/string&amp;gt;
   &amp;lt;object idref=&quot;Point0&quot;/&amp;gt;
  &amp;lt;/void&amp;gt;
  &amp;lt;void method=&quot;put&quot;&amp;gt;
   &amp;lt;string&amp;gt;size&amp;lt;/string&amp;gt;
   &amp;lt;object idref=&quot;Dimension0&quot;/&amp;gt;
  &amp;lt;/void&amp;gt;
 &amp;lt;/object&amp;gt;
&amp;lt;/java&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;XMLEncoder&lt;/code&gt;で直接上記の&lt;code&gt;JFrame&lt;/code&gt;を書きだす場合、以下のような&lt;code&gt;IllegalAccessException&lt;/code&gt;が発生する&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalAccessException: Class sun.reflect.misc.Trampoline can not access a member of class MainPanel$2 with modifiers &amp;quot;&amp;quot;
Continuing ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回避するには、&lt;code&gt;WindowListener&lt;/code&gt;を実装する匿名内部クラスを&lt;code&gt;public class&lt;/code&gt;(&lt;code&gt;Java Beans&lt;/code&gt;)に変更するか、&lt;code&gt;removeWindowListener&lt;/code&gt;で取り除く必要がある&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//package example;
//-*- mode:java; encoding:utf-8 -*-
// vim:set fileencoding=utf-8:
//@homepage@
import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import javax.swing.*;

public class MainPanel extends JPanel {
  private static final String PROPERTIES_XML = &quot;properties.xml&quot;;
  public MainPanel() {
    super(new BorderLayout());
    JTextArea textArea = new JTextArea();
    try(Reader fr = new InputStreamReader(
        new FileInputStream(PROPERTIES_XML), &quot;UTF-8&quot;)) {
      textArea.read(fr, &quot;File&quot;);
    } catch(Exception ex) {
      ex.printStackTrace();
    }
    add(new JScrollPane(textArea));
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    try {
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    } catch(Exception e) {
      e.printStackTrace();
    }
    JFrame frame = loadFrame();
    frame.setVisible(true);
  }
  private static JFrame loadFrame() {
    JFrame frame = null;
    try(XMLDecoder d = new XMLDecoder(new BufferedInputStream(
        //MainPanel.class.getResourceAsStream(PROPERTIES_XML)))) {
        new FileInputStream(PROPERTIES_XML)))) {

      frame = (JFrame)d.readObject();
      //d.close();
    } catch(Exception ex) {
      ex.printStackTrace();
    }
    if(frame==null) {
      frame = new JFrame(&quot;title&quot;);
      frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      frame.getContentPane().add(new MainPanel());
      frame.setSize(320, 240);
      frame.setLocationRelativeTo(null);
    }
    frame.addWindowListener(new WindowAdapter() {
      @Override public void windowClosing(WindowEvent e) {
        JFrame frame = (JFrame)e.getComponent();
        frame.removeWindowListener(this);
        File file = new File(PROPERTIES_XML);
        try(XMLEncoder xe = new XMLEncoder(new BufferedOutputStream(
            new FileOutputStream(file)))) {
          xe.writeObject(frame);
          xe.flush();
          //xe.close();
        } catch(Exception ex) {
          ex.printStackTrace();
        }
      }
    });
    return frame;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pscode.org/jws/api.html&quot;&gt;JWS javax.jnlp.* API demos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/javaws/developersguide/examples.html#PersistenceService&quot;&gt;PersistenceService&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.finnw.me.uk/persistencetest.html&quot;&gt;PersistenceService Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Preferences.html&quot;&gt;JFrameの位置・サイズを記憶する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt; + &lt;code&gt;JTable&lt;/code&gt; + &lt;code&gt;DefalutTableModel&lt;/code&gt;を&lt;code&gt;XMLEncoder&lt;/code&gt;で&lt;code&gt;XML&lt;/code&gt;書出しする場合のエラーなどについて: &lt;a href=&quot;http://wiki.byte-welt.net/wiki/JTable_speichern&quot;&gt;JTable speichern – Byte-Welt Wiki&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-14 (木) 19:06:49&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.InstantiationException: javax.swing.plaf.basic.BasicTableHeaderUI$MouseInputHandler
Continuing ...
java.lang.Exception: XMLEncoder: discarding statement JTableHeader.removeMouseMotionListener(BasicTableHeaderUI$MouseInputHandler);
Continuing ...
java.lang.InstantiationException: javax.swing.plaf.basic.BasicTableUI$Handler
Continuing ...
java.lang.Exception: XMLEncoder: discarding statement JTable.removeMouseMotionListener(BasicTableUI$Handler);
Continuing ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://terai.xrea.jp/swing/persistenceservice</link>
                <guid>http://terai.xrea.jp/swing/persistenceservice</guid>
                <pubDate>2012-03-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarのKnobの最小サイズを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;Knob&lt;/code&gt;の最小サイズを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MinimumThumbSize&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-A8TRDbOQ1p4/T2bKeM8dcvI/AAAAAAAABKI/iBKMsL6eGfM/s800/MinimumThumbSize.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;ScrollBar.minimumThumbSize&quot;, new Dimension(32, 32));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、右の&lt;code&gt;JScrollPane&lt;/code&gt;で、&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;Knob&lt;/code&gt;(&lt;code&gt;Thumb&lt;/code&gt;)が短くなりすぎないように、最小サイズ(&lt;code&gt;Horizontal&lt;/code&gt;の場合は幅、&lt;code&gt;Vertical&lt;/code&gt;の場合は高さ)を設定します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: &lt;code&gt;LookAndFeel&lt;/code&gt;によって、&lt;code&gt;UIManager.put(&amp;quot;ScrollBar.minimumThumbSize&amp;quot;, new Dimension(32, 32));&lt;/code&gt;が有効かどうかは異なる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicLookAndFeel&lt;/code&gt;、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;: 有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;: 無効

&lt;ul&gt;
&lt;li&gt;以下のように、縦スクロールバーならその幅が最小サイズになるよう上書きされているため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;// @see javax/swing/plaf/metal/MetalScrollBarUI.java
protected Dimension getMinimumThumbSize() {
  return new Dimension(scrollBarWidth, scrollBarWidth);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Windows 7&lt;/code&gt;の&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で&lt;code&gt;JSlider&lt;/code&gt;を使った場合も、つまみ？のサイズが小さすぎるが、&lt;code&gt;UIManager.put(&amp;quot;Slider.minimumHorizontalSize&amp;quot;, new Dimension(32, 32))&lt;/code&gt;などとしても効果がない？&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Slider.horizontalSize
Slider.verticalSize
Slider.minimumHorizontalSize
Slider.minimumVerticalSize
Slider.horizontalThumbIcon
Slider.verticalThumbIcon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://stackoverflow.com/questions/2754306/java-swing-rendering-bug-on-windows-7-look-and-feel&quot;&gt;Java Swing rendering bug on Windows 7 look-and-feel? - Stack Overflow&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slider.setPaintTicks(true)&lt;/code&gt;とした場合は、正常なサイズにみえる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ThumbArrowShape.html&quot;&gt;JSliderのつまみの形状を変更&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;トラックを表示したくない場合は、&lt;code&gt;slider.putClientProperty(&amp;quot;Slider.paintThumbArrowShape&amp;quot;, Boolean.TRUE);&lt;/code&gt;で、つまみの形だけ変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2754306/java-swing-rendering-bug-on-windows-7-look-and-feel&quot;&gt;Java Swing rendering bug on Windows 7 look-and-feel? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ThumbArrowShape.html&quot;&gt;JSliderのつまみの形状を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/minimumthumbsize</link>
                <guid>http://terai.xrea.jp/swing/minimumthumbsize</guid>
                <pubDate>2012-03-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxにAnimated GIFを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;と、そのドロップダウンリストに&lt;code&gt;Animated GIF&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedIconInComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-kS7gIhaebeM/T12ukNN94JI/AAAAAAAABJ8/wM8SvLNzWEE/s800/AnimatedIconInComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static ImageIcon makeImageIcon(URL url, final JComboBox combo, final int row) {
  ImageIcon icon = new ImageIcon(url);
  //Wastefulness: icon.setImageObserver(combo);
  icon.setImageObserver(new ImageObserver() {
    //@see http://www2.gol.com/users/tame/swing/examples/SwingExamples.html
    @Override public boolean imageUpdate(Image img, int infoflags, int x, int y, int w, int h) {
      if(combo.isShowing() &amp;amp;&amp;amp; (infoflags &amp;amp; (FRAMEBITS|ALLBITS)) != 0) {
        if(combo.getSelectedIndex()==row) {
          combo.repaint();
        }
        BasicComboPopup p = (BasicComboPopup)combo.getAccessibleContext().getAccessibleChild(0);
        JList list = p.getList();
        if(list.isShowing()) {
          list.repaint(list.getCellBounds(row, row));
        }
      }
      return (infoflags &amp;amp; (ALLBITS|ABORT)) == 0;
    };
  });
  return icon;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;自体が非表示(&lt;code&gt;JComboBox#isShowing(...)==false&lt;/code&gt;)の場合は、再描画しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animated GIF&lt;/code&gt;が選択されている(&lt;code&gt;JComboBox#getSelectedIndex()==row&lt;/code&gt;)場合のみ、&lt;code&gt;JComboBox#repaint()&lt;/code&gt;で再描画する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ドロップダウンリスト&lt;/code&gt;が表示されている場合、&lt;code&gt;Animated GIF&lt;/code&gt;の表示されている領域(&lt;code&gt;JList#getCellBounds(row, row)&lt;/code&gt;で取得)だけ再描画&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimatedIconInTableCell.html&quot;&gt;JTableのセルにAnimated GIFを表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatediconincombobox</link>
                <guid>http://terai.xrea.jp/swing/animatediconincombobox</guid>
                <pubDate>2012-03-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにAnimated GIFを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ImageIcon&lt;/code&gt;に&lt;code&gt;ImageObserver&lt;/code&gt;を設定して、&lt;code&gt;JTable&lt;/code&gt;のセル中で&lt;code&gt;Animated GIF&lt;/code&gt;のアニメーションを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedIconInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-138Snht85-E/T1B6iHoG1pI/AAAAAAAABJw/XaESowuWEC4/s800/AnimatedIconInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ImageIcon icon = new ImageIcon(url);
//Wastefulness: icon.setImageObserver((ImageObserver)table);
icon.setImageObserver(new ImageObserver() {
  //@see http://www2.gol.com/users/tame/swing/examples/SwingExamples.html
  @Override public boolean imageUpdate(
      Image img, int infoflags, int x, int y, int w, int h) {
    //@see javax.swing.JLabel#imageUpdate(...)
    if(!table.isShowing()) return false;
    //@see java.awt.Component#imageUpdate(...)
    if((infoflags &amp;amp; (FRAMEBITS|ALLBITS)) != 0) {
      int vr = table.convertRowIndexToView(row); //JDK 1.6.0
      int vc = table.convertColumnIndexToView(col);
      table.repaint(table.getCellRect(vr, vc, false));
    }
    return (infoflags &amp;amp; (ALLBITS|ABORT)) == 0;
  };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://www2.gol.com/users/tame/swing/examples/SwingExamples.html&quot;&gt;AnimatedIconTableExample.java&lt;/a&gt;を参考にして、&lt;code&gt;Animated GIF&lt;/code&gt;ファイルから作成した&lt;code&gt;ImageIcon&lt;/code&gt;に、&lt;code&gt;setImageObserver(ImageObserver)&lt;/code&gt;を設定しています。直接&lt;code&gt;JTable&lt;/code&gt;を&lt;code&gt;ImageObserver&lt;/code&gt;として設定するとすべてのセルが再描画されて無駄なので、&lt;code&gt;JTable#getCellRect(row, col, false)&lt;/code&gt;で対象セルのみ&lt;code&gt;repaint&lt;/code&gt;するようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.gol.com/users/tame/swing/examples/SwingExamples.html&quot;&gt;AnimatedIconTableExample.java&lt;/a&gt;からの変更点

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#isShowing(...)==false&lt;/code&gt;で、非表示の場合は&lt;code&gt;JTable#repaint(...)&lt;/code&gt;しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;以降に導入された&lt;code&gt;JTable#convertRowIndexToView(row)&lt;/code&gt;を使って、行がソートされていても正しいセルを再描画する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#convertColumnIndexToView(col)&lt;/code&gt;を使って、列の入れ替えがあっても正しいセルを再描画する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www2.gol.com/users/tame/swing/examples/SwingExamples.html&quot;&gt;AnimatedIconTableExample.java&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;元サイトには繋がらないので、&lt;a href=&quot;https://www.google.com/search?q=AnimatedIconTableExample.java&quot;&gt;animatedicontableexample.java - Google 検索&lt;/a&gt;などのミラーを参考&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatediconintablecell</link>
                <guid>http://terai.xrea.jp/swing/animatediconintablecell</guid>
                <pubDate>2012-03-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-SKQis3B-SmY/T0dd531MovI/AAAAAAAABJk/fWIZIAeE3oE/s800/TranslucentPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TranslucentPopupMenu extends JPopupMenu{
  private static final Color ALPHA_ZERO = new Color(0, true);
  private static final Color POPUP_BACK = new Color(250,250,250,200);
  private static final Color POPUP_LEFT = new Color(230,230,230,200);
  private static final int LEFT_WIDTH = 24;
  @Override public boolean isOpaque() {
    return false;
  }
  @Override public void updateUI() {
    super.updateUI();
    boolean isNimbus = UIManager.getBorder(&quot;PopupMenu.border&quot;)==null;
    if(isNimbus) {
      setBorder(new BorderUIResource(BorderFactory.createLineBorder(Color.GRAY)));
    }
  }
  @Override public JMenuItem add(JMenuItem menuItem) {
    menuItem.setOpaque(false);
    return super.add(menuItem);
  }
  @Override public void show(Component c, int x, int y) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        Window p = SwingUtilities.getWindowAncestor(TranslucentPopupMenu.this);
        if(p!=null &amp;amp;&amp;amp; p instanceof JWindow) {
          System.out.println(&quot;Heavy weight&quot;);
          JWindow w = (JWindow)p;
          if(System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.6.0&quot;)) {
            w.dispose();
            if(com.sun.awt.AWTUtilities.isWindowOpaque(w)) {
              com.sun.awt.AWTUtilities.setWindowOpaque(w, false);
            }
            w.setVisible(true);
          }else{
            w.setBackground(ALPHA_ZERO);
          }
        }else{
          System.out.println(&quot;Light weight&quot;);
        }
      }
    });
    super.show(c, x, y);
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setPaint(POPUP_LEFT);
    g2.fillRect(0,0,LEFT_WIDTH,getHeight());
    g2.setPaint(POPUP_BACK);
    g2.fillRect(LEFT_WIDTH,0,getWidth(),getHeight());
    g2.dispose();
    //super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPopupMenu&lt;/code&gt;は、&lt;code&gt;isOpaque()&lt;/code&gt;メソッドをオーバーライド、&lt;code&gt;JMenuItemはsetOpaque(false)&lt;/code&gt;として、それぞれ透明に設定し、&lt;code&gt;JPopupMenu#paintComponent(...)&lt;/code&gt;で、半透明の背景を描画しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;が親フレームの外にはみ出す場合は、&lt;code&gt;Heavyweight&lt;/code&gt;の&lt;code&gt;JWindow&lt;/code&gt;を使って&lt;code&gt;JPopupMenu&lt;/code&gt;が表示されるので、&lt;code&gt;JWindow#setBackground(new Color(0, true))&lt;/code&gt;で(&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;では、&lt;code&gt;com.sun.awt.AWTUtilities.setWindowOpaque(w, false)&lt;/code&gt;)、&lt;code&gt;JPopupMenu#show(...)&lt;/code&gt;が呼ばれるたびに、毎回(親フレームの透明度を引き継がないように？)&lt;code&gt;JWindow&lt;/code&gt;自体を透明にしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;code&gt;JPopupMenu&lt;/code&gt;(ルート)が&lt;code&gt;Light weight&lt;/code&gt;で、その&lt;code&gt;JMenu&lt;/code&gt;から開く&lt;code&gt;JPopupMenu&lt;/code&gt;(サブメニュー) が&lt;code&gt;Heavy weight&lt;/code&gt;のときに半透明にならない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156657&quot;&gt;Bug ID: 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0_06&lt;/code&gt;などで修正された&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://today.java.net/pub/a/today/2008/03/18/translucent-and-shaped-swing-windows.html&quot;&gt;Translucent and Shaped Swing Windows | Java.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentSubMenu.html&quot;&gt;JMenuなどから開くPopupMenuを半透明化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156657&quot;&gt;Bug ID: 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt;、&lt;a href=&quot;http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/4acd0211f48b&quot;&gt;jdk8/jdk8/jdk: changeset 5453:4acd0211f48b&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-10 (金) 19:22:39

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0_06&lt;/code&gt;で修正されている？ &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/2col/7u6-bugfixes-1733378.html&quot;&gt;Java™ SE Development Kit 7 Update 6 Bug Fixes&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-15 (水) 13:55:37&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/translucentpopupmenu</guid>
                <pubDate>2012-02-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのBorderを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の表示部分、矢印ボタン、ドロップダウンリストの&lt;code&gt;Border&lt;/code&gt;や色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-jHpgdiBwt6s/T0H3deyce_I/AAAAAAAABJY/_3k6-paq4lM/s800/ComboBoxBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//ComboBox.border
UIManager.put(&quot;ComboBox.border&quot;, BorderFactory.createLineBorder(Color.WHITE));

//ArrowButton
combo.setUI(new BasicComboBoxUI() {
  @Override protected JButton createArrowButton() {
    JButton b = new JButton(new ArrowIcon()); //.createArrowButton();
    b.setBackground(Color.BLACK);
    b.setContentAreaFilled(false);
    b.setFocusPainted(false);
    b.setBorder(BorderFactory.createEmptyBorder());
    return b;
  }
});

//DropDownList
Object o = combo.getAccessibleContext().getAccessibleChild(0);
((JComponent)o).setBorder(BorderFactory.createMatteBorder(0,1,1,1,Color.WHITE));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;MetalComboBoxUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ComboBox.border&amp;quot;, border)&lt;/code&gt;などで、&lt;code&gt;Border&lt;/code&gt;を変更しているが、これとは別に、&lt;code&gt;UI&lt;/code&gt;で独自に余白？が描画される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalComboBoxUI&lt;/code&gt;独自の余白を消す場合は、&lt;code&gt;MetalTheme&lt;/code&gt;を変更して&lt;code&gt;MetalLookAndFeel.getControlShadow()&lt;/code&gt;を同色にするか、&lt;code&gt;MetalComboBoxUI#paintCurrentValueBackground(...)&lt;/code&gt;をオーバーライドする必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中: &lt;code&gt;BasicComboBoxUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalComboBoxUI&lt;/code&gt;などにあった余白は消すことができるが、&lt;code&gt;ComboBox.buttonDarkShadow&lt;/code&gt;が&lt;code&gt;ArrowButton&lt;/code&gt;の三角とボタンの影に使用されているため、両方を一度に非表示にすることができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下: &lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;をオーバーライドして、独自のアイコンをもつ&lt;code&gt;JButton&lt;/code&gt;を使用するように変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;を追加して、マウスカーソルが&lt;code&gt;JComboBox&lt;/code&gt;内にある場合、&lt;code&gt;ArrowButton&lt;/code&gt;が&lt;code&gt;Hover&lt;/code&gt;表示されるように設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo.addMouseListener(new MouseAdapter() {
  private ButtonModel getButtonModel(MouseEvent e) {
    JComboBox cb = (JComboBox)e.getSource();
    JButton b = (JButton)cb.getComponent(0);
    return b.getModel();
  }
  @Override public void mouseEntered(MouseEvent e) {
    getButtonModel(e).setRollover(true);
  }
  @Override public void mouseExited(MouseEvent e) {
    getButtonModel(e).setRollover(false);
  }
  @Override public void mousePressed(MouseEvent e) {
    getButtonModel(e).setPressed(true);
  }
  @Override public void mouseReleased(MouseEvent e) {
    getButtonModel(e).setPressed(false);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9322903/how-do-you-change-border-of-the-pop-up-section-of-a-jcombobox&quot;&gt;java - How do you change border of the pop up section of a JComboBox? - Stack Overflow&lt;/a&gt; を参考にして、&lt;code&gt;JComboBox&lt;/code&gt;から以下のように、&lt;code&gt;BasicComboPopup&lt;/code&gt;を取得し、&lt;code&gt;MatteBorder&lt;/code&gt;を設定&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Object o = combo.getAccessibleContext().getAccessibleChild(0);
((JComponent)o).setBorder(BorderFactory.createMatteBorder(0,1,1,1,Color.WHITE));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;MetalComboBoxUI#paintCurrentValueBackground(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;MetalComboBoxUI&lt;/code&gt;独自の余白を描画しないようにするテスト&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.plaf.*;
import javax.swing.plaf.basic.*;
import javax.swing.plaf.metal.*;

public class ComboBoxUIDemo {
  private static Color BORDER = Color.GRAY;
  public JComponent makeUI() {
    //UIManager.put(&quot;ComboBox.foreground&quot;, Color.WHITE);
    //UIManager.put(&quot;ComboBox.background&quot;, Color.BLACK);
    //UIManager.put(&quot;ComboBox.selectionForeground&quot;, Color.CYAN);
    //UIManager.put(&quot;ComboBox.selectionBackground&quot;, Color.BLACK);

    //UIManager.put(&quot;ComboBox.buttonDarkShadow&quot;, Color.WHITE);
    //UIManager.put(&quot;ComboBox.buttonBackground&quot;, Color.GRAY);
    //UIManager.put(&quot;ComboBox.buttonHighlight&quot;, Color.WHITE);
    //UIManager.put(&quot;ComboBox.buttonShadow&quot;, Color.WHITE);
    //UIManager.put(&quot;ComboBox.editorBorder&quot;, BorderFactory.createLineBorder(Color.RED));

    Box box = Box.createVerticalBox();

    UIManager.put(&quot;ComboBox.border&quot;, BorderFactory.createEmptyBorder());
    for(int i=0; i&amp;lt;2; i++) { // Defalut
      JComboBox&amp;lt;String&amp;gt; cb = new JComboBox&amp;lt;&amp;gt;(makeModel());
      if(i%2==0) setEditable(cb);
      setPopupBorder(cb);
      box.add(cb);
      box.add(Box.createVerticalStrut(10));
    }

    {
      // Override MetalComboBoxUI#paintCurrentValueBackground(...)
      JComboBox&amp;lt;String&amp;gt; cb = new JComboBox&amp;lt;&amp;gt;(makeModel());
      cb.setUI(new MetalComboBoxUI() {
        @Override public void paintCurrentValueBackground(
        Graphics g, Rectangle bounds, boolean hasFocus) {
          //if (MetalLookAndFeel.usingOcean()) {
          if(MetalLookAndFeel.getCurrentTheme() instanceof OceanTheme) {
            g.setColor(MetalLookAndFeel.getControlDarkShadow());
            g.drawRect(bounds.x, bounds.y, bounds.width, bounds.height - 1);
            //COMMENTOUT&amp;gt;&amp;gt;&amp;gt;
            //g.setColor(MetalLookAndFeel.getControlShadow());
            //g.drawRect(bounds.x + 1, bounds.y + 1, bounds.width - 2,
            //           bounds.height - 3);
            //&amp;lt;&amp;lt;&amp;lt;COMMENTOUT
            if (hasFocus &amp;amp;&amp;amp; !isPopupVisible(comboBox) &amp;amp;&amp;amp; arrowButton != null) {
              g.setColor(listBox.getSelectionBackground());
              Insets buttonInsets = arrowButton.getInsets();
              if (buttonInsets.top &amp;gt; 2) {
                g.fillRect(bounds.x + 2, bounds.y + 2, bounds.width - 3,
                           buttonInsets.top - 2);
              }
              if (buttonInsets.bottom &amp;gt; 2) {
                g.fillRect(bounds.x + 2, bounds.y + bounds.height -
                           buttonInsets.bottom, bounds.width - 3,
                           buttonInsets.bottom - 2);
              }
            }
          } else if (g == null || bounds == null) {
            throw new NullPointerException(
              &quot;Must supply a non-null Graphics and Rectangle&quot;);
          }
        }
      });
      setPopupBorder(cb);

      box.add(cb);
      box.add(Box.createVerticalStrut(10));
    }

    UIManager.put(&quot;ComboBox.border&quot;, BorderFactory.createLineBorder(BORDER));
    for(int i=0; i&amp;lt;2; i++) { // BasicComboBoxUI
      JComboBox&amp;lt;String&amp;gt; cb = new JComboBox&amp;lt;&amp;gt;(makeModel());
      if(i%2==0) setEditable(cb);
      cb.setUI(new BasicComboBoxUI());
      setPopupBorder(cb);
      box.add(cb);
      box.add(Box.createVerticalStrut(10));
    }

    JPanel p = new JPanel(new BorderLayout());
    p.setBorder(BorderFactory.createEmptyBorder(10,20,10,20));
    p.add(box, BorderLayout.NORTH);
    return p;
  }
  private static void setEditable(JComboBox cb) {
    cb.setEditable(true);
    ComboBoxEditor editor = cb.getEditor();
    Component c = editor.getEditorComponent();
    if(c instanceof JTextField) {
      JTextField tf = (JTextField)c;
      tf.setBorder(BorderFactory.createMatteBorder(1,1,1,0,BORDER));
    }
  }
  private static void setPopupBorder(JComboBox cb) {
    Object o = cb.getAccessibleContext().getAccessibleChild(0);
    JComponent c = (JComponent)o;
    c.setBorder(BorderFactory.createMatteBorder(0,1,1,1,BORDER));
  }
  private static DefaultComboBoxModel&amp;lt;String&amp;gt; makeModel() {
    DefaultComboBoxModel&amp;lt;String&amp;gt; m = new DefaultComboBoxModel&amp;lt;&amp;gt;();
    m.addElement(&quot;1234&quot;);
    m.addElement(&quot;5555555555555555555555&quot;);
    m.addElement(&quot;6789000000000&quot;);
    return m;
  }
  public static void main(String[] args) {
//     OceanTheme theme = new OceanTheme() {
//       @Override protected ColorUIResource getSecondary2() {
//         return new ColorUIResource(Color.RED);
//       }
//     };
//     MetalLookAndFeel.setCurrentTheme(theme);

    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new ComboBoxUIDemo().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9322903/how-do-you-change-border-of-the-pop-up-section-of-a-jcombobox&quot;&gt;java - How do you change border of the pop up section of a JComboBox? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PaddingComboBox.html&quot;&gt;JComboBoxの内余白&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxborder</link>
                <guid>http://terai.xrea.jp/swing/comboboxborder</guid>
                <pubDate>2012-02-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerを使用して無効時のコンポーネントの文字色を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使用して、&lt;code&gt;JButton&lt;/code&gt;などのコンポーネントを無効にしたときの文字色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/JLayerDisabledText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-_2bogxiuOec/TzilFn0ms8I/AAAAAAAABJI/oMz_T6SqCwE/s800/JLayerDisabledText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DisableInputLayerUI extends LayerUI&amp;lt;JComponent&amp;gt; {
  private static final boolean DEBUG_POPUP_BLOCK = true;
  private static final MouseAdapter dummyMouseListener = new MouseAdapter() {};
  private static final KeyAdapter dummyKeyListener = new KeyAdapter() {};
  private boolean isBlocking = false;
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    JLayer jlayer = (JLayer)c;
    if(DEBUG_POPUP_BLOCK) {
      jlayer.getGlassPane().addMouseListener(dummyMouseListener);
      jlayer.getGlassPane().addKeyListener(dummyKeyListener);
    }
    jlayer.setLayerEventMask(
      AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK |
      AWTEvent.MOUSE_WHEEL_EVENT_MASK | AWTEvent.KEY_EVENT_MASK |
      AWTEvent.FOCUS_EVENT_MASK | AWTEvent.COMPONENT_EVENT_MASK);
  }
  @Override public void uninstallUI(JComponent c) {
    JLayer jlayer = (JLayer)c;
    jlayer.setLayerEventMask(0);
    if(DEBUG_POPUP_BLOCK) {
      jlayer.getGlassPane().removeMouseListener(dummyMouseListener);
      jlayer.getGlassPane().removeKeyListener(dummyKeyListener);
    }
    super.uninstallUI(c);
  }
  @Override protected void processComponentEvent(
      ComponentEvent e, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
    System.out.println(&quot;processComponentEvent&quot;);
  }
  @Override protected void processKeyEvent(
      KeyEvent e, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
    System.out.println(&quot;processKeyEvent&quot;);
  }
  @Override protected void processFocusEvent(
      FocusEvent e, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
    System.out.println(&quot;processFocusEvent&quot;);
  }
  @Override public void eventDispatched(
      AWTEvent e, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
    if(isBlocking &amp;amp;&amp;amp; e instanceof InputEvent) {
      ((InputEvent)e).consume();
    }
  }
  private static final String CMD_BLOCKING = &quot;lock&quot;;
  public void setLocked(boolean flag) {
    boolean oldv = isBlocking;
    isBlocking = flag;
    firePropertyChange(CMD_BLOCKING,oldv,isBlocking);
  }
  @Override public void applyPropertyChange(
      PropertyChangeEvent pce, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
    String cmd = pce.getPropertyName();
    if(CMD_BLOCKING.equals(cmd)) {
      JButton b = (JButton)l.getView();
      b.setFocusable(!isBlocking);
      b.setMnemonic(isBlocking?0:b.getText().charAt(0));
      b.setForeground(isBlocking?Color.RED:Color.BLACK);
      l.getGlassPane().setVisible((Boolean)pce.getNewValue());
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;LayerUI#applyPropertyChange(...)&lt;/code&gt;をオーバーライドして、コンポーネントを無効にした場合の文字色、&lt;code&gt;Focus&lt;/code&gt;移動の禁止、&lt;code&gt;Mnemonic&lt;/code&gt;、&lt;code&gt;PopupMenu&lt;/code&gt;、&lt;code&gt;ToolTip&lt;/code&gt;の非表示を行なっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;の場合、無効時の文字色は、&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledTextColor.html&quot;&gt;JCheckBoxなどが無効な状態での文字色を変更&lt;/a&gt;のように、&lt;code&gt;LookAndFeel&lt;/code&gt;によっては反映されないといったことがありません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledTextColor.html&quot;&gt;JCheckBoxなどが無効な状態での文字色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableInputLayer.html&quot;&gt;JLayerで指定したコンポーネントへの入力を禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/jlayerdisabledtext</link>
                <guid>http://terai.xrea.jp/swing/jlayerdisabledtext</guid>
                <pubDate>2012-02-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのすべてのノードにJCheckBoxを追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のすべてのノードに編集可能な&lt;code&gt;JCheckBox&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxNodeEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-DK6aW3VNikg/TygxL3j8UoI/AAAAAAAABIw/6_9FyPe4v7U/s800/CheckBoxNodeEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeEditor extends TriStateCheckBox implements TreeCellEditor {
  private DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
  private final JPanel panel = new JPanel(new BorderLayout());
  private String str = null;
  public CheckBoxNodeEditor() {
    super();
    this.addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        //System.out.println(&quot;actionPerformed: stopCellEditing&quot;);
        stopCellEditing();
      }
    });
    panel.setFocusable(false);
    panel.setRequestFocusEnabled(false);
    panel.setOpaque(false);
    panel.add(this, BorderLayout.WEST);
    this.setOpaque(false);
  }
  @Override public Component getTreeCellEditorComponent(
      JTree tree, Object value, boolean isSelected,
      boolean expanded, boolean leaf, int row) {
    JLabel l = (JLabel)renderer.getTreeCellRendererComponent(
        tree, value, true, expanded, leaf, row, true);
    l.setFont(tree.getFont());
    if(value instanceof DefaultMutableTreeNode) {
      this.setEnabled(tree.isEnabled());
      this.setFont(tree.getFont());
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        CheckBoxNode node = (CheckBoxNode)userObject;
        if(node.status==Status.INDETERMINATE) {
          setIcon(new IndeterminateIcon());
        }else{
          setIcon(null);
        }
        l.setText(node.label);
        setSelected(node.status==Status.SELECTED);
        str = node.label;
      }
      //panel.add(this, BorderLayout.WEST);
      panel.add(l);
      return panel;
    }
    return l;
  }
  @Override public Object getCellEditorValue() {
    return new CheckBoxNode(str, isSelected()?Status.SELECTED:Status.DESELECTED);
  }
  @Override public boolean isCellEditable(EventObject e) {
    if(e instanceof MouseEvent &amp;amp;&amp;amp; e.getSource() instanceof JTree) {
      MouseEvent me = (MouseEvent)e;
      JTree tree = (JTree)e.getSource();
      TreePath path = tree.getPathForLocation(me.getX(), me.getY());
      Rectangle r = tree.getPathBounds(path);
      if (r == null) {
        return false;
      }
      Dimension d = getPreferredSize();
      r.setSize(new Dimension(d.width, r.height));
      if (r.contains(me.getPoint())) {
        return true;
      }
    }
    return false;
  }
  @Override public void updateUI() {
    super.updateUI();
    setName(&quot;Tree.cellEditor&quot;);
    if(panel!=null) {
      //panel.removeAll(); //??? Change to Nimbus LnF, JDK 1.6.0
      panel.updateUI();
      //panel.add(this, BorderLayout.WEST);
    }
    //???#1: JDK 1.6.0 bug??? @see 1.7.0 DefaultTreeCellRenderer#updateUI()
    //if(System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.6.0&quot;)) {
    //  renderer = new DefaultTreeCellRenderer();
    //}
  }
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JCheckBox&lt;/code&gt;を継承する&lt;code&gt;TreeCellEditor&lt;/code&gt;、&lt;code&gt;TreeCellRenderer&lt;/code&gt;を作成し、&lt;code&gt;TreeCellEditor#getTreeCellEditorComponent(...)&lt;/code&gt;などは、この&lt;code&gt;JCheckBox&lt;/code&gt;、&lt;code&gt;JLabel&lt;/code&gt;(文字列、アイコン)などを含む&lt;code&gt;JPanel&lt;/code&gt;を生成して返しています。&lt;/p&gt;

&lt;p&gt;マウスクリックなどでノードのチェック状態が変更されたら、子ノードと親ノードの選択状態も更新する必要があるので、&lt;code&gt;TreeModelListener&lt;/code&gt;をモデルに設定して、その監視を行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;を継承する&lt;code&gt;TreeCellEditor&lt;/code&gt;、&lt;code&gt;TreeCellRenderer&lt;/code&gt;でも、&lt;code&gt;JDK 1.7.0&lt;/code&gt;、&lt;code&gt;JDK 1.6.0_30&lt;/code&gt;などでは、問題なく動作するようです。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeRenderer extends JPanel implements TreeCellRenderer {
  private DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
  private final TriStateCheckBox check = new TriStateCheckBox();
  public CheckBoxNodeRenderer() {
    super(new BorderLayout());
    String uiName = getUI().getClass().getName();
    if(uiName.contains(&quot;Synth&quot;) &amp;amp;&amp;amp; System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.7.0&quot;)) {
      System.out.println(&quot;XXX: FocusBorder bug?, JDK 1.7.0, Nimbus start LnF&quot;);
      renderer.setBackgroundSelectionColor(new Color(0,0,0,0));
    }
    setFocusable(false);
    setRequestFocusEnabled(false);
    setOpaque(false);
    add(check, BorderLayout.WEST);
    check.setOpaque(false);
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean selected,
      boolean expanded, boolean leaf, int row, boolean hasFocus) {
    JLabel l = (JLabel)renderer.getTreeCellRendererComponent(
        tree, value, selected, expanded, leaf, row, hasFocus);
    l.setFont(tree.getFont());
    if(value instanceof DefaultMutableTreeNode) {
      check.setEnabled(tree.isEnabled());
      check.setFont(tree.getFont());
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        CheckBoxNode node = (CheckBoxNode)userObject;
        if(node.status==Status.INDETERMINATE) {
          check.setIcon(new IndeterminateIcon());
        }else{
          check.setIcon(null);
        }
        l.setText(node.label);
        check.setSelected(node.status==Status.SELECTED);
      }
      add(l);
      return this;
    }
    return l;
  }
  @Override public void updateUI() {
    super.updateUI();
    if(check!=null) {
      //removeAll(); //??? Change to Nimbus LnF, JDK 1.6.0
      check.updateUI();
      //add(check, BorderLayout.WEST);
    }
    setName(&quot;Tree.cellRenderer&quot;);
    //???#1: JDK 1.6.0 bug??? @see 1.7.0 DefaultTreeCellRenderer#updateUI()
    //if(System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.6.0&quot;)) {
    //  renderer = new DefaultTreeCellRenderer();
    //}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;で、&lt;code&gt;LookAndFeel&lt;/code&gt;を&lt;code&gt;Nimbus&lt;/code&gt;などに変更すると、セルエディタなどが更新されず？表示がおかしくなる場合があるので、&lt;code&gt;JTree#updateUI()&lt;/code&gt;を以下のようにオーバーライドして回避&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTree tree = new JTree() {
  @Override public void updateUI() {
    setCellRenderer(null);
    setCellEditor(null);
    super.updateUI();
    //???#1: JDK 1.6.0 bug??? Nimbus LnF
    setCellRenderer(new CheckBoxNodeRenderer());
    setCellEditor(new CheckBoxNodeEditor());
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;で、初期&lt;code&gt;LookAndFeel&lt;/code&gt;を&lt;code&gt;Nimbus&lt;/code&gt;にすると、ノードにフォーカスがある場合のグラデーション描画がノードの背景色で塗りつぶされてしまう？のを、以下のようにして回避

&lt;ul&gt;
&lt;li&gt;https://lh3.googleusercontent.com/-DQgyx52YcsQ/T6sfFSWGIpI/AAAAAAAABMc/jAx8XeuMeWI/s800/CheckBoxNodeEditor1.png&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public CheckBoxNodeRenderer() {
  super();
  String uiName = getUI().getClass().getName();
  if(uiName.contains(&quot;Synth&quot;) &amp;amp;&amp;amp;
     System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.7.0&quot;)) {
    System.out.println(&quot;XXX: FocusBorder bug?, JDK 1.7.0, Nimbus start LnF&quot;);
    renderer.setBackgroundSelectionColor(new Color(0,0,0,0));
  }
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;で、ノードのチェックボックスをクリックしても、初回だけ反応しない&lt;/del&gt; &lt;code&gt;1.7.0_60&lt;/code&gt;で修正されている

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_30&lt;/code&gt;などは問題なし&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeCellEditor#isCellEditable()&lt;/code&gt;をオーバーライドして、初回のみセルエディタのサイズを以下のように設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.8.0&lt;/code&gt;では、修正されている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8023474&quot;&gt;Bug ID: JDK-8023474 First mousepress doesn&amp;#39;t start editing in JTree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;if(isFirstTime &amp;amp;&amp;amp; System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.7.0&quot;)) {
  System.out.println(&quot;XXX: Java 7, only on first run\n&quot;+getBounds());
  setBounds(new Rectangle(0,0,d.width,r.height));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeTree.html&quot;&gt;JTreeの葉ノードをJCheckBoxにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TriStateCheckBox.html&quot;&gt;JCheckBoxに不定状態のアイコンを追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;親ノードまでではなく、ルートノードまで不定状態の変更を行うように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-23 (金) 17:43:32&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxnodeeditor</link>
                <guid>http://terai.xrea.jp/swing/checkboxnodeeditor</guid>
                <pubDate>2012-02-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MnemonicをクリアしてJButtonを初期状態に戻す</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;に設定された&lt;code&gt;Mnemonic&lt;/code&gt;をクリアして初期状態に戻します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearMnemonic&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-VBCuKbB3hhs/TyZJM3aWNzI/AAAAAAAABIg/01Dscav-qV4/s800/ClearMnemonic.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;button.setMnemonic(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setMnemonic(...)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;の最初の文字を&lt;code&gt;JButton&lt;/code&gt;の&lt;code&gt;Mnemonic&lt;/code&gt;に設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;が空の場合は、&lt;code&gt;JButton&lt;/code&gt;のラベルの先頭文字を&lt;code&gt;Mnemonic&lt;/code&gt;に設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clear Mnemonic&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mnemonic&lt;/code&gt;に&lt;code&gt;0&lt;/code&gt;を設定して初期状態に戻す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;button.setMnemonic(0);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clearmnemonic</link>
                <guid>http://terai.xrea.jp/swing/clearmnemonic</guid>
                <pubDate>2012-01-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerを使ってJTabbedPaneのタブの挿入位置を描画する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使って、タブのドラッグ＆ドロップでの移動先を&lt;code&gt;JTabbedPane&lt;/code&gt;上に描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDLayerTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-xX0rzgauC5c/Txz4AxE_u2I/AAAAAAAABIM/jHQdxU1yP9g/s800/DnDLayerTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DropLocationLayerUI extends LayerUI&amp;lt;DnDTabbedPane&amp;gt; {
  private static final int LINEWIDTH = 3;
  private final Rectangle lineRect = new Rectangle();
  @Override public void paint(Graphics g, JComponent c) {
    super.paint (g, c);
    JLayer layer = (JLayer)c;
    DnDTabbedPane tabbedPane = (DnDTabbedPane)layer.getView();
    DnDTabbedPane.DropLocation loc = tabbedPane.getDropLocation();
    if(loc != null &amp;amp;&amp;amp; loc.isDropable() &amp;amp;&amp;amp; loc.getIndex()&amp;gt;=0) {
      int index = loc.getIndex();
      boolean isZero = index==0;
      Rectangle r = tabbedPane.getBoundsAt(isZero?0:index-1);
      if(tabbedPane.getTabPlacement()==JTabbedPane.TOP ||
         tabbedPane.getTabPlacement()==JTabbedPane.BOTTOM) {
        lineRect.setRect(
            r.x-LINEWIDTH/2+r.width*(isZero?0:1), r.y,LINEWIDTH,r.height);
      }else{
        lineRect.setRect(
            r.x,r.y-LINEWIDTH/2+r.height*(isZero?0:1), r.width,LINEWIDTH);
      }
      Graphics2D g2 = (Graphics2D)g.create();
      g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
      g2.setColor(Color.RED);
      g2.fill(lineRect);
      g2.dispose();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTabbedPane.html&quot;&gt;JTabbedPaneのタブをドラッグ＆ドロップ&lt;/a&gt;や、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDExportTabbedPane.html&quot;&gt;JTabbedPane間でタブのドラッグ＆ドロップ移動&lt;/a&gt;のように&lt;code&gt;GlassPane&lt;/code&gt;を使用する代わりに、&lt;code&gt;JDK 1.7.0&lt;/code&gt;で導入された&lt;code&gt;JLayer&lt;/code&gt;を使用して、タブの挿入先を描画しています。&lt;code&gt;JLayer&lt;/code&gt;を使用することで、別ウィンドウにある&lt;code&gt;JTabbedPane&lt;/code&gt;へのタブ移動などの描画が簡単にできるようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;メニューバーから、ドラッグ中の半透明タブイメージの描画方法を切り替えてテストすることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lightweight&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK1.7.0&lt;/code&gt;で導入された、&lt;code&gt;TransferHandler#setDragImage(...)&lt;/code&gt;メソッドを使用して描画&lt;/li&gt;
&lt;li&gt;ウィンドウの外では非表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Heavyweight&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;半透明の&lt;code&gt;JWindow&lt;/code&gt;に&lt;code&gt;JLabel&lt;/code&gt;を追加して表示&lt;/li&gt;
&lt;li&gt;ウィンドウの外でも表示可能&lt;/li&gt;
&lt;li&gt;表示位置のオフセットが&lt;code&gt;(0, 0)&lt;/code&gt;の場合、&lt;code&gt;DragOver&lt;/code&gt;イベントが元の&lt;code&gt;JFrame&lt;/code&gt;に伝わらない？

&lt;ul&gt;
&lt;li&gt;オフセットが&lt;code&gt;(0, 0)&lt;/code&gt;でも、&lt;code&gt;JLabel#contains(...)&lt;/code&gt;が常に&lt;code&gt;false&lt;/code&gt;なら問題なし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JLabel label = new JLabel() {
  @Override public boolean contains(int x, int y) {
    return false;
  }
};
private final JWindow dialog = new JWindow();
public TabTransferHandler() {
  dialog.add(label);
  //dialog.setAlwaysOnTop(true); // Web Start
  dialog.setOpacity(0.5f);
  //com.sun.awt.AWTUtilities.setWindowOpacity(dialog, 0.5f); // JDK 1.6.0
  DragSource.getDefaultDragSource().addDragSourceMotionListener(
      new DragSourceMotionListener() {
    @Override public void dragMouseMoved(DragSourceDragEvent dsde) {
      Point pt = dsde.getLocation();
      pt.translate(5, 5); // offset
      dialog.setLocation(pt);
    }
  });
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTabbedPane.html&quot;&gt;JTabbedPaneのタブをドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDExportTabbedPane.html&quot;&gt;JTabbedPane間でタブのドラッグ＆ドロップ移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://free-the-pixel.blogspot.com/2010/04/ghost-drag-and-drop-over-multiple.html&quot;&gt;Free the pixel: GHOST drag and drop, over multiple windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;の外にドロップした場合は、新しいフレームと&lt;code&gt;JTabbedPane&lt;/code&gt;を作成して表示したいけど、&lt;kbd&gt;Esc&lt;/kbd&gt;キーや右クリックでのキャンセルと区別がつかない？ので、難しそう。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-01-25 (水) 19:57:10&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndlayertabbedpane</link>
                <guid>http://terai.xrea.jp/swing/dndlayertabbedpane</guid>
                <pubDate>2012-01-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードを走査する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードから&lt;code&gt;Enumeration&lt;/code&gt;を取得してサブツリーの走査を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TraverseAllNodes&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-m8cdaUCibl0/TxPCZQMYqkI/AAAAAAAABH4/eAK9LyYkv14/s800/TraverseAllNodes.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TreeModel model = tree.getModel();
DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
Enumeration e = root.breadthFirstEnumeration();
while(e.hasMoreElements()) {
  DefaultMutableTreeNode node = (DefaultMutableTreeNode)e.nextElement();
  textArea.append(node.toString()+&quot;\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、この&lt;code&gt;JTree&lt;/code&gt;の最上位ノードをルートにするサブツリーを、深さ優先、幅優先などで全走査しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/tree/DefaultMutableTreeNode.html#depthFirstEnumeration%28%29&quot;&gt;DefaultMutableTreeNode#depthFirstEnumeration()&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/tree/DefaultMutableTreeNode.html#postorderEnumeration%28%29&quot;&gt;DefaultMutableTreeNode#postorderEnumeration()&lt;/a&gt;と同じ&lt;/li&gt;
&lt;li&gt;深さ優先走査(後順走査)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blue, violet, red, yellow, colors, basketball, ... , JTree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/tree/DefaultMutableTreeNode.html#breadthFirstEnumeration%28%29&quot;&gt;DefaultMutableTreeNode#breadthFirstEnumeration()&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;幅優先走査&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree, colors, sports, food, blue, violet, red, ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/tree/DefaultMutableTreeNode.html#preorderEnumeration%28%29&quot;&gt;DefaultMutableTreeNode#preorderEnumeration()&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;前順走査&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree, colors, blue, violet, red, yellow, sports, basketball, soccer, ...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/traverseallnodes</link>
                <guid>http://terai.xrea.jp/swing/traverseallnodes</guid>
                <pubDate>2012-01-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TextLayoutでFontのメトリック情報を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TextLayout&lt;/code&gt;から&lt;code&gt;Font&lt;/code&gt;の&lt;code&gt;Ascent&lt;/code&gt;、&lt;code&gt;Descent&lt;/code&gt;、&lt;code&gt;Leading&lt;/code&gt;などのメトリック情報を取得して描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/--iErOVV0RYk/TwpnJGdl4OI/AAAAAAAABHs/pHLpQWbpTWg/s800/TextLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;String text = &quot;abcdefthijklmnopqrstuvwxyz&quot;;
Font font = new Font(Font.SERIF, Font.ITALIC, 64);
FontRenderContext frc = new FontRenderContext(null,true,true);
TextLayout tl = new TextLayout(text, font, frc);
@Override public void paintComponent(Graphics g) {
  Graphics2D g2 = (Graphics2D)g;
  int w = getWidth();
  float baseline = getHeight()/2f;

  g2.setPaint(Color.RED);
  g2.draw(new Line2D.Float(0, baseline, w, baseline));

  g2.setPaint(Color.GREEN);
  float ascent = baseline - tl.getAscent();
  g2.draw(new Line2D.Float(0, ascent, w, ascent));

  g2.setPaint(Color.BLUE);
  float descent = baseline + tl.getDescent();
  g2.draw(new Line2D.Float(0, descent, w, descent));

  g2.setPaint(Color.ORANGE);
  float leading = baseline + tl.getDescent() + tl.getLeading();
  g2.draw(new Line2D.Float(0, leading, w, leading));

  g2.setPaint(Color.CYAN);
  float xheight = baseline - (float)tl.getBlackBoxBounds(23, 24).getBounds().getHeight();
  g2.draw(new Line2D.Float(0, xheight, w, xheight));

  g2.setPaint(Color.BLACK);
  tl.draw(g2, 0f, baseline);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、上の文字列は&lt;code&gt;TextLayout&lt;/code&gt;を使用して、下は&lt;code&gt;GlyphVector&lt;/code&gt; + &lt;code&gt;LineMetrics&lt;/code&gt;で&lt;code&gt;Font&lt;/code&gt;のメトリック情報を取得して描画しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Color.RED&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ベースライン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color.GREEN&lt;/code&gt;: &lt;code&gt;Ascent&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ベースライン - &lt;code&gt;Ascent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color.BLUE&lt;/code&gt;: &lt;code&gt;Descent&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ベースライン + &lt;code&gt;Descent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color.ORANGE&lt;/code&gt;: &lt;code&gt;Leading&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ベースライン + &lt;code&gt;Descent&lt;/code&gt; + &lt;code&gt;Leading&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Color.CYAN&lt;/code&gt;: &lt;code&gt;x-height&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ベースライン - 文字&amp;quot;x&amp;quot;の高さ;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textlayout</link>
                <guid>http://terai.xrea.jp/swing/textlayout</guid>
                <pubDate>2012-01-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarが非表示でもMouseWheelでScrollする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;が非表示の場合の&lt;code&gt;MouseWheel&lt;/code&gt;による&lt;code&gt;Scroll&lt;/code&gt;をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MouseWheelScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-65-zGNk3eWU/TwFLJU_DP4I/AAAAAAAABHg/mEXoePs30sk/s800/MouseWheelScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollBar vsb = new JScrollBar(JScrollBar.VERTICAL) {
  @Override public Dimension getPreferredSize() {
    Dimension dim = super.getPreferredSize();
    return new Dimension(0, dim.height);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PreferredSize: 0, shift pressed: Horizontal WheelScrolling&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScrollBarPolicy&lt;/code&gt;はそれぞれ&lt;code&gt;ALWAYS&lt;/code&gt;で常に表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VerticalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;VERTICAL_SCROLLBAR_ALWAYS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HorizontalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;HORIZONTAL_SCROLLBAR_ALWAYS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollBar#getPreferredSize()&lt;/code&gt;をオーバーライドして、幅、または高さを&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;垂直スクロールバーの&lt;code&gt;JScrollBar#isVisible()&lt;/code&gt;をオーバーライドして、&lt;kbd&gt;Shift&lt;/kbd&gt;キーが押されている場合は、&lt;code&gt;false&lt;/code&gt;を返す

&lt;ul&gt;
&lt;li&gt;垂直スクロールバーが非表示で、水平スクロールバーが表示されている場合、&lt;code&gt;MouseWheel&lt;/code&gt;で水平スクロール可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SCROLLBAR_ALWAYS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScrollBarPolicy&lt;/code&gt;はそれぞれ&lt;code&gt;ALWAYS&lt;/code&gt;で常に表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VerticalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;VERTICAL_SCROLLBAR_ALWAYS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HorizontalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;HORIZONTAL_SCROLLBAR_ALWAYS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SCROLLBAR_NEVER&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScrollBarPolicy&lt;/code&gt;はそれぞれ&lt;code&gt;NEVER&lt;/code&gt;で常に非表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VerticalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;VERTICAL_SCROLLBAR_NEVER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HorizontalScrollBarPolicy&lt;/code&gt;: &lt;code&gt;HORIZONTAL_SCROLLBAR_NEVER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6911375&quot;&gt;Bug ID: 6911375 mouseWheel has no effect without vertical scrollbar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mousewheelscroll</link>
                <guid>http://terai.xrea.jp/swing/mousewheelscroll</guid>
                <pubDate>2012-01-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの余白をドラッグしてスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の余白などをマウスでドラッグしてスクロールします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeDragScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-8b-0M5bS9Tw/Tvf_XhVVreI/AAAAAAAABHU/BdECxkBAdzU/s800/TreeDragScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DragScrollListener extends MouseAdapter {
  Cursor defCursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);
  Cursor hndCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  Point pp = new Point();
  @Override public void mouseDragged(MouseEvent e) {
    JComponent jc = (JComponent)e.getSource();
    Container c = jc.getParent();
    if(c instanceof JViewport) {
      JViewport vport = (JViewport)c;
      Point cp = SwingUtilities.convertPoint(jc,e.getPoint(),vport);
      Point vp = vport.getViewPosition();
      vp.translate(pp.x-cp.x, pp.y-cp.y);
      jc.scrollRectToVisible(new Rectangle(vp, vport.getSize()));
      pp.setLocation(cp);
    }
  }
  @Override public void mousePressed(MouseEvent e) {
    JComponent jc = (JComponent)e.getSource();
    Container c = jc.getParent();
    if(c instanceof JViewport) {
      jc.setCursor(hndCursor);
      JViewport vport = (JViewport)c;
      Point cp = SwingUtilities.convertPoint(jc,e.getPoint(),vport);
      pp.setLocation(cp);
    }
  }
  @Override public void mouseReleased(MouseEvent e) {
    ((JComponent)e.getSource()).setCursor(defCursor);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTree&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;, &lt;code&gt;MouseMotionListener&lt;/code&gt;を設定し、マウスドラッグを&lt;code&gt;JViewport&lt;/code&gt;の座標に変換して、&lt;code&gt;scrollRectToVisible(...)&lt;/code&gt;メソッドを使ったスクロールをおこなっています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;MouseAdapter ma = new DragScrollListener();
tree2.addMouseMotionListener(ma);
tree2.addMouseListener(ma);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;と、ぼぼ同じことをしていますが、&lt;code&gt;JLabel&lt;/code&gt;とは異なり、&lt;code&gt;JTree&lt;/code&gt;にはデフォルトで&lt;code&gt;MouseListener&lt;/code&gt;, &lt;code&gt;MouseMotionListener&lt;/code&gt;が設定されているため、&lt;code&gt;JViewport&lt;/code&gt;にリスナーを設定しても&lt;code&gt;JTree&lt;/code&gt;までマウスイベントが伝わりません。例えば、以下のように&lt;code&gt;JComponent#dispatchEvent(...)&lt;/code&gt;で、&lt;code&gt;JTree&lt;/code&gt;の親の&lt;code&gt;JViewport&lt;/code&gt;にイベントを投げる必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;MouseAdapter ma = new HandScrollListener();
JScrollPane scroll = new JScrollPane(tree1);
JViewport vport = scroll.getViewport();
vport.addMouseMotionListener(ma);
vport.addMouseListener(ma);
MouseAdapter dummy = new MouseAdapter() {
  private void dispatchEvent(MouseEvent e) {
    JComponent c = (JComponent)e.getComponent();
    JComponent p = (JComponent)e.getComponent().getParent();
    p.dispatchEvent(SwingUtilities.convertMouseEvent(c,e,p));
  }
  @Override public void mouseDragged(MouseEvent e)  { dispatchEvent(e); }
  @Override public void mouseClicked(MouseEvent e)  { dispatchEvent(e); }
  @Override public void mouseEntered(MouseEvent e)  { dispatchEvent(e); }
  @Override public void mouseExited(MouseEvent e)   { dispatchEvent(e); }
  @Override public void mousePressed(MouseEvent e)  { dispatchEvent(e); }
  @Override public void mouseReleased(MouseEvent e) { dispatchEvent(e); }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上記のような&lt;code&gt;JComponent#dispatchEvent(...)&lt;/code&gt;を伝搬させるリスナーを追加なくても、&lt;code&gt;JDK 1.7.0&lt;/code&gt;以上の場合、&lt;code&gt;JLayer&lt;/code&gt;を使用して子コンポーネントのすべての&lt;code&gt;MouseEvent&lt;/code&gt;キャッチする方法を使用することができます。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragScrollLayer.html&quot;&gt;JScrollPane内にある複数Componentを配置したJPanelをJLayerを使ってドラッグスクロール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragScrollLayer.html&quot;&gt;JScrollPane内にある複数Componentを配置したJPanelをJLayerを使ってドラッグスクロール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treedragscroll</link>
                <guid>http://terai.xrea.jp/swing/treedragscroll</guid>
                <pubDate>2011-12-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Windowの形を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Window&lt;/code&gt;の形を非矩形図形に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowShape&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-f54GogC4jCU/Tu7AbPCJhsI/AAAAAAAABGc/EzG0Tf9ITFI/s800/WindowShape.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame frame = new JFrame();
frame.setUndecorated(true);
frame.setAlwaysOnTop(true);
frame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
frame.getContentPane().add(label);
frame.getContentPane().setBackground(Color.GREEN);
frame.pack();

String str = textField.getText().trim();
//label.setText(str);
TextLayout tl = new TextLayout(str, font, frc);
Rectangle2D b = tl.getBounds();
Shape shape = tl.getOutline(AffineTransform.getTranslateInstance(-b.getX(),-b.getY()));

frame.setBounds(shape.getBounds());
//frame.setSize(shape.getBounds().width, shape.getBounds().height);
com.sun.awt.AWTUtilities.setWindowShape(frame, shape);
//frame.setShape(shape); // 1.7.0
frame.setLocationRelativeTo(parent);
frame.setVisible(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;com.sun.awt.AWTUtilities.setWindowShape(...)&lt;/code&gt;メソッドを使用して、&lt;code&gt;JFrame&lt;/code&gt;の形を変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java 1.7.0&lt;/code&gt;の場合は、&lt;code&gt;Window#setShape(Shape)&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.oracle.com/thejavatutorials/entry/translucent_and_shaped_windows_in&quot;&gt;Translucent and Shaped Windows in JDK7 (The Java Tutorials&amp;#39; Weblog)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowshape</link>
                <guid>http://terai.xrea.jp/swing/windowshape</guid>
                <pubDate>2011-12-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxに不定状態のアイコンを追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;の選択状態、非選択状態に加えて、不定状態を表すアイコンを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TriStateCheckBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-Rs-vnlD35Cg/TuTNCuEvU_I/AAAAAAAABF4/IzDezx4Rq8M/s800/TriStateCheckBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox checkBox = new JCheckBox(&quot;TriState JCheckBox&quot;) {
  protected TriStateActionListener listener = null;
  class TriStateActionListener implements ActionListener{
    protected Icon icon;
    public void setIcon(Icon icon) {
      this.icon = icon;
    }
    @Override public void actionPerformed(ActionEvent e) {
      JCheckBox cb = (JCheckBox)e.getSource();
      if(!cb.isSelected()) {
        cb.setIcon(icon);
      }else if(cb.getIcon()!=null){
        cb.setIcon(null);
        cb.setSelected(false);
      }
    }
  }
  @Override public void updateUI() {
    final Icon oi = getIcon();
    removeActionListener(listener);
    setIcon(null);
    super.updateUI();
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        if(listener==null) {
          listener = new TriStateActionListener();
        }
        Icon icon = new IndeterminateIcon();
        listener.setIcon(icon);
        addActionListener(listener);
        if(oi!=null) {
          setIcon(icon);
        }
      }
    });
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class IndeterminateIcon implements Icon {
    private final Color color = UIManager.getColor(&quot;CheckBox.foreground&quot;);
    private final Icon icon = UIManager.getIcon(&quot;CheckBox.icon&quot;);
    @Override public void paintIcon(Component c, Graphics g, int x, int y) {
        icon.paintIcon(c, g, x, y);
        int w = getIconWidth(), h = getIconHeight();
        int a = 4, b = 2;
        Graphics2D g2 = (Graphics2D)g;
        g2.setPaint(Color.BLACK);
        g2.translate(x, y);
        g2.fillRect(a, (h-b)/2, w-a-a, b);
        g2.translate(-x, -y);
    }
    @Override public int getIconWidth()  { return icon.getIconWidth();  }
    @Override public int getIconHeight() { return icon.getIconHeight(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;UIManager.getIcon(&amp;quot;CheckBox.icon&amp;quot;);&lt;/code&gt;で取得した非選択状態のチェックボックスアイコンの上に横棒を引いて不定状態のアイコンを作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不定状態かどうかは、&lt;code&gt;JCheckBox#getIcon()&lt;/code&gt;が&lt;code&gt;null&lt;/code&gt;かどうかで判断する手抜き版&lt;/li&gt;
&lt;li&gt;横棒の色は&lt;code&gt;UIManager.getColor(&amp;quot;CheckBox.foreground&amp;quot;);&lt;/code&gt;を使用しているが、&lt;code&gt;LookAndFeel&lt;/code&gt;によっては無意味&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableHeaderCheckBox.html&quot;&gt;JTableHeaderにJCheckBoxを追加してセルの値を切り替える&lt;/a&gt;で使用すると、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の場合だけ、アイコンと文字列のベースラインがずれる？

&lt;ul&gt;
&lt;li&gt;文字列も&lt;code&gt;ImageIcon&lt;/code&gt;にして回避&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;で、不定状態アイコンのフォーカスやロールオーバーが表示されない&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javaspecialists.eu/archive/Issue145.html&quot;&gt;JavaSpecialists 145 - TristateCheckBox Revisited&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://www.javaspecialists.eu/archive/Issue082.html&quot;&gt;JavaSpecialists 082 - TristateCheckBox based on the Swing JCheckBox&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1263323/tristate-checkboxes-in-java&quot;&gt;swing - Tristate Checkboxes in Java - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tristatecheckbox</link>
                <guid>http://terai.xrea.jp/swing/tristatecheckbox</guid>
                <pubDate>2011-12-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブを固定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;に&lt;code&gt;JPopupMenu&lt;/code&gt;を追加して、指定したタブのタイトルと位置を変更し、タブの固定を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PinTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-QqKPFV0ZzIc/TttWYFUshII/AAAAAAAABFk/6HcCBI_bg-0/s800/PinTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBoxMenuItem pinTabMenuItem = new JCheckBoxMenuItem(new AbstractAction(&quot;pin tab&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JTabbedPane t = (JTabbedPane)getInvoker();
    JCheckBoxMenuItem check = (JCheckBoxMenuItem)e.getSource();
    int idx       = t.getSelectedIndex();
    Component cmp = t.getComponentAt(idx);
    Component tab = t.getTabComponentAt(idx);
    Icon icon     = t.getIconAt(idx);
    String tip    = t.getToolTipTextAt(idx);
    boolean flg   = t.isEnabledAt(idx);

    int i;
    if(check.isSelected()) {
      for(i=0;i&amp;lt;idx;i++) {
        String s = t.getTitleAt(i);
        if(s==null || s.length()==0) continue;
        break;
      }
    }else{
      for(i=t.getTabCount()-1;i&amp;gt;idx;i--) {
        String s = t.getTitleAt(i);
        if(s!=null &amp;amp;&amp;amp; s.length()&amp;gt;0) continue;
        break;
      }
    }
    t.remove(idx);
    t.insertTab(check.isSelected()?&quot;&quot;:tip, icon, cmp, tip, i);
    t.setTabComponentAt(i, tab);
    t.setEnabledAt(i, flg);
    if(flg) t.setSelectedIndex(i);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タブを固定

&lt;ul&gt;
&lt;li&gt;タブタイトルを空にする&lt;/li&gt;
&lt;li&gt;タブの位置を左側に移動&lt;/li&gt;
&lt;li&gt;固定したタブは削除しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タブの固定を解除

&lt;ul&gt;
&lt;li&gt;タブタイトルを&lt;code&gt;TooltipText&lt;/code&gt;から復元する&lt;/li&gt;
&lt;li&gt;タブの位置を固定されていないタブの右側に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TabPlacement&lt;/code&gt;: &lt;code&gt;LEFT&lt;/code&gt;, &lt;code&gt;RIGHT&lt;/code&gt;は考慮していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/pintabbedpane</link>
                <guid>http://terai.xrea.jp/swing/pintabbedpane</guid>
                <pubDate>2011-12-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerで子コンポーネントへの入力を制限する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayer&lt;/code&gt;を使って、子コンポーネントへのすべての入力を制限します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PopupMenuBlockLayer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-Svne2X0djJ8/TtJGGlPU-OI/AAAAAAAABFM/xjZfqHHbkJ0/s800/PopupMenuBlockLayer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DisableInputLayerUI extends LayerUI&amp;lt;JComponent&amp;gt; {
  private static final MouseAdapter dummyMouseListener = new MouseAdapter() {};
  private boolean isBlocking = false;
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    JLayer jlayer = (JLayer)c;
    jlayer.getGlassPane().addMouseListener(dummyMouseListener);
    jlayer.setLayerEventMask(
      AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK |
      AWTEvent.MOUSE_WHEEL_EVENT_MASK | AWTEvent.KEY_EVENT_MASK);
  }
  @Override public void uninstallUI(JComponent c) {
    JLayer jlayer = (JLayer)c;
    jlayer.setLayerEventMask(0);
    jlayer.getGlassPane().removeMouseListener(dummyMouseListener);
    super.uninstallUI(c);
  }
  @Override public void eventDispatched(AWTEvent e, JLayer l) {
    if(isBlocking &amp;amp;&amp;amp; e instanceof InputEvent) {
      ((InputEvent)e).consume();
    }
  }
  private static final String CMD_REPAINT = &quot;lock&quot;;
  public void setLocked(boolean flag) {
    firePropertyChange(CMD_REPAINT,isBlocking,flag);
    isBlocking = flag;
  }
  @Override public void applyPropertyChange(PropertyChangeEvent pce, JLayer l) {
    String cmd = pce.getPropertyName();
    if(CMD_REPAINT.equals(cmd)) {
      l.getGlassPane().setVisible((Boolean)pce.getNewValue());
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLayer&lt;/code&gt;を使って、&lt;code&gt;JScrollPane(JScrollBar)&lt;/code&gt;のスクロール、&lt;code&gt;JTable&lt;/code&gt;のセル選択、&lt;code&gt;JToolTip&lt;/code&gt;、&lt;code&gt;JTableHeader&lt;/code&gt;の移動など、子コンポーネントへのすべての入力をまとめて制限しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableScrolling.html&quot;&gt;JScrollPaneのスクロールを禁止&lt;/a&gt;のように、&lt;code&gt;JScrollPane&lt;/code&gt;、&lt;code&gt;JTable&lt;/code&gt;などを個別に入力禁止にする必要がない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableInputLayer.html&quot;&gt;JLayerで指定したコンポーネントへの入力を禁止&lt;/a&gt;と、ほとんど同じだが、その場合、&lt;code&gt;setComponentPopupMenu(...)&lt;/code&gt;で設定した&lt;code&gt;JPopupMenu&lt;/code&gt;が制限できない

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLayer#setLayerEventMask(...)&lt;/code&gt;でポップアップメニュー表示の入力イベントが取得できない？(&lt;code&gt;Windows7&lt;/code&gt;, &lt;code&gt;JDK 1.7.0_01&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WaitCursor.html&quot;&gt;Cursorを砂時計に変更&lt;/a&gt;のように、&lt;code&gt;GlassPane&lt;/code&gt;にダミーのマウスリスナーを追加してポップアップメニューの表示トリガーを無視する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableInputLayer.html&quot;&gt;JLayerで指定したコンポーネントへの入力を禁止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableScrolling.html&quot;&gt;JScrollPaneのスクロールを禁止&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WaitCursor.html&quot;&gt;Cursorを砂時計に変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;また&lt;code&gt;src.zip&lt;/code&gt;などを上げ忘れていたので修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-11-29 (火) 17:16:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/popupmenublocklayer</link>
                <guid>http://terai.xrea.jp/swing/popupmenublocklayer</guid>
                <pubDate>2011-11-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Borderの右下にJComponentを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SpringLayout&lt;/code&gt;を設定した&lt;code&gt;JLayeredPane&lt;/code&gt;を使って、&lt;code&gt;Border&lt;/code&gt;の右下に&lt;code&gt;JComponent&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RightAlignComponentBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-IPUQvbcJ2NM/TsjbIEMsMeI/AAAAAAAABE8/Fg16E6wkLtY/s800/RightAlignComponentBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JComponent makePanel(JComponent m, JComponent c) {
  int ir = 20; //inset.right
  int ch = c.getPreferredSize().height/2;
  Border ib = BorderFactory.createEmptyBorder(0, 0, ch, 0);
  Border eb = BorderFactory.createEtchedBorder();
  Border bo = BorderFactory.createCompoundBorder(eb, ib);
  m.setBorder(BorderFactory.createCompoundBorder(ib, bo));

  SpringLayout layout = new SpringLayout();
  JLayeredPane p = new JLayeredPane();
  p.setLayout(layout);

  Spring x     = layout.getConstraint(SpringLayout.WIDTH, p);
  Spring y     = layout.getConstraint(SpringLayout.HEIGHT, p);
  Spring g     = Spring.minus(Spring.constant(ir));

  SpringLayout.Constraints constraints = layout.getConstraints(c);
  constraints.setConstraint(SpringLayout.EAST,  Spring.sum(x, g));
  constraints.setConstraint(SpringLayout.SOUTH, y);
  p.setLayer(c, JLayeredPane.DEFAULT_LAYER+1);
  p.add(c);

  constraints = layout.getConstraints(m);
  constraints.setConstraint(SpringLayout.WEST,  Spring.constant(0));
  constraints.setConstraint(SpringLayout.NORTH, Spring.constant(0));
  constraints.setConstraint(SpringLayout.EAST,  x);
  constraints.setConstraint(SpringLayout.SOUTH, y);
  p.setLayer(m, JLayeredPane.DEFAULT_LAYER);
  p.add(m);

  return p;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;中央に表示するコンポーネントに、右下に配置するコンポーネントと同じ高さの&lt;code&gt;EtchedBorder&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;を設定した&lt;code&gt;JLayeredPane&lt;/code&gt;の&lt;code&gt;DEFAULT_LAYER&lt;/code&gt;に中央に表示するコンポーネント、&lt;code&gt;DEFAULT_LAYER+1&lt;/code&gt;に右下に配置するコンポーネントを追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout.Constraints&lt;/code&gt;を設定して、中央に表示するコンポーネントは親の&lt;code&gt;JLayeredPane&lt;/code&gt;のサイズとおなじになるように、右下に配置するコンポーネントは右下になるようにレイアウト

&lt;ul&gt;
&lt;li&gt;右下に配置するコンポーネントと親の&lt;code&gt;JLayeredPane&lt;/code&gt;の右端同士は、固定で&lt;code&gt;20px&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComponentTitledBorder.html&quot;&gt;BorderにJComponentを配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SpringLayout.html&quot;&gt;SpringLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rightaligncomponentborder</link>
                <guid>http://terai.xrea.jp/swing/rightaligncomponentborder</guid>
                <pubDate>2011-11-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneのDividerの位置を最大化後に変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;を最大化した後で&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;Divider&lt;/code&gt;の位置を変更する場合のテストをします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DividerSplitRatio&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-w5-YQDwojUs/TsB7EdoVlLI/AAAAAAAABEw/p_PcxHKKeRk/s800/DividerSplitRatio.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SplitPaneWrapper extends JPanel {
  public SplitPaneWrapper(JSplitPane splitPane) {
    super(new BorderLayout());
    this.sp = splitPane;
    add(sp);
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        sp.setDividerLocation(0.5);
      }
    });
  }
  private static int getOrientedSize(JSplitPane sp) {
    return (sp.getOrientation() == JSplitPane.VERTICAL_SPLIT)
      ? sp.getHeight() - sp.getDividerSize()
      : sp.getWidth()  - sp.getDividerSize();
  }
  private int prev_state = Frame.NORMAL;
  @Override public void doLayout() {
    int size = getOrientedSize(sp);
    final double proportionalLocation = sp.getDividerLocation()/(double)size;
    super.doLayout();
    if(!flag) return;
    int state = ((Frame)SwingUtilities.getWindowAncestor(sp)).getExtendedState();
    if(sp.isShowing() &amp;amp;&amp;amp; state!=prev_state) {
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          int s = getOrientedSize(sp);
          int iv = (int)Math.round(s * proportionalLocation);
          sp.setDividerLocation(iv);
        }
      });
      prev_state = state;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane#setResizeWeight(0.0)&lt;/code&gt;なので、&lt;code&gt;JFrame&lt;/code&gt;をマウスでリサイズしても上コンポーネントの高さが維持される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSplitPane&lt;/code&gt;をラップする&lt;code&gt;JPanel&lt;/code&gt;の&lt;code&gt;doLayout()&lt;/code&gt;メソッドをオーバーライドして、最大化、通常化の前後で上下コンポーネントの高さの比率を維持する

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EventQueue.invokeLater(...)&lt;/code&gt;を使って、後で&lt;code&gt;JSplitPane#setDividerLocation(int)&lt;/code&gt;でディバイダの位置を調節&lt;/li&gt;
&lt;li&gt;デフォルト(&lt;code&gt;MAXIMIZED_BOTH: keep the same splitting ratio&lt;/code&gt;チェックボックスのチェックを外している状態):

&lt;ul&gt;
&lt;li&gt;例えば、最大化後にディバイダをすこし上に移動して&lt;code&gt;JFrame&lt;/code&gt;を元に戻す(縮小)と、上コンポーネントの方が下コンポーネントより高くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JSplitPane#setDividerLocation(double)&lt;/code&gt;は、内部で&lt;code&gt;JSplitPane#setDividerLocation(int)&lt;/code&gt;を呼び出しているが、その変換の際に値を切り捨てているので、上記のサンプルでは最大化、元に戻す(縮小)を行なっても、同じ値になるように四捨五入するよう変更している。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DividerLocation.html&quot;&gt;JSplitPaneを等分割する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dividersplitratio</link>
                <guid>http://terai.xrea.jp/swing/dividersplitratio</guid>
                <pubDate>2011-11-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderにJButtonを追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;にクリックするとポップアップメニューを表示する&lt;code&gt;JButton&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonInTableHeader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-ccZ08VSXYwE/Trd27UaeD2I/AAAAAAAABEk/1NAYoZ1NGV0/s800/ButtonInTableHeader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void mouseClicked(MouseEvent e) {
  JTableHeader header = (JTableHeader)e.getSource();
  JTable table = header.getTable();
  TableColumnModel columnModel = table.getColumnModel();
  int vci = columnModel.getColumnIndexAtX(e.getX());
  int mci = table.convertColumnIndexToModel(vci);
  TableColumn column = table.getColumnModel().getColumn(mci);
  Rectangle r = header.getHeaderRect(vci);
  Container c = (Container)getTableCellRendererComponent(table, &quot;&quot;, true, true, -1, vci);
  //if(!isNimbus) {
  //  Insets i = c.getInsets();
  //  r.translate(r.width-i.right, 0);
  //}else{
  r.translate(r.width-BUTTON_WIDTH, 0);
  r.setSize(BUTTON_WIDTH, r.height);
  Point pt = e.getPoint();
  if(c.getComponentCount()&amp;gt;0 &amp;amp;&amp;amp; r.contains(pt) &amp;amp;&amp;amp; pop!=null) {
    pop.show(header, r.x, r.height);
    JButton b = (JButton)c.getComponent(0);
    b.doClick();
    e.consume();
  }
}
@Override public void mouseExited(MouseEvent e) {
  rolloverIndex = -1;
}
@Override public void mouseMoved(MouseEvent e) {
  JTableHeader header = (JTableHeader)e.getSource();
  JTable table = header.getTable();
  TableColumnModel columnModel = table.getColumnModel();
  int vci = columnModel.getColumnIndexAtX(e.getX());
  int mci = table.convertColumnIndexToModel(vci);
  rolloverIndex = mci;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTableHeader&lt;/code&gt;の各カラムにマウスカーソルがある場合、&lt;code&gt;HeaderRenderer#getTableCellRendererComponent(...)&lt;/code&gt;内で、右端に&lt;code&gt;JButton&lt;/code&gt;を追加しています。ボタンがクリックされたときに表示する&lt;code&gt;JPopupMenu&lt;/code&gt;は、&lt;code&gt;JTableHeader&lt;/code&gt;に追加したマウスリスナーでクリックされた位置などを取得して表示するようになっています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;で、&lt;code&gt;JPopupMenu&lt;/code&gt;が表示されないのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-11-07 (月) 22:15:02&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonintableheader</link>
                <guid>http://terai.xrea.jp/swing/buttonintableheader</guid>
                <pubDate>2011-11-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontサイズをコンポーネントの幅に応じて変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;のフォントサイズをその幅に応じて自動変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AutomaticallyResizeFont&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-RTjWJaRHh4E/Tq4_8nk91OI/AAAAAAAABEY/mwfxMScDHec/s800/AutomaticallyResizeFont.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Font font = new Font(Font.MONOSPACED, Font.PLAIN, 12);
private final JTextPane editor = new JTextPane() {
  float font_size = 0.0f;
  @Override public void doLayout() {
    Insets i = getInsets();
    float f = .08f * (getWidth() - i.left - i.right);
    if(Math.abs(font_size-f) &amp;gt; 1.0e-1) {
      setFont(font.deriveFont(f));
      font_size = f;
    }
    super.doLayout();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextPane#doLayout&lt;/code&gt;メソッドをオーバーライドし、幅の変更に応じて使用するフォントサイズを変更(&lt;code&gt;Font#deriveFont(float)&lt;/code&gt;)しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://harmoniccode.blogspot.com/2011/10/friday-fun-component-xi.html&quot;&gt;Harmonic Code: Friday Fun Component XI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/automaticallyresizefont</link>
                <guid>http://terai.xrea.jp/swing/automaticallyresizefont</guid>
                <pubDate>2011-10-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの透明化と再描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;半透明にした&lt;code&gt;JFrame&lt;/code&gt;の再描画を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentFrameRepaint&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-ujoDf8eD4vE/TqLcC0f2CHI/AAAAAAAABD4/LHaXXW6HW1k/s800/TranslucentFrameRepaint.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final SimpleDateFormat df = new SimpleDateFormat(&quot;HH:mm:ss&quot;);
private final JLabel label = new JLabel(df.format(new Date()));
private final Timer timer = new Timer(1000, new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    label.setText(df.format(new Date()));
    Container parent = SwingUtilities.getUnwrappedParent(label);
    if(parent!=null &amp;amp;&amp;amp; parent.isOpaque()) {
      repaintWindowAncestor(label);
    }
  }
});
private void repaintWindowAncestor(JComponent c) {
  JRootPane root = c.getRootPane();
  if(root==null) {
    return;
  }
  Rectangle r = SwingUtilities.convertRectangle(c, c.getBounds(), root);
  root.repaint(r.x, r.y, r.width, r.height);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、実際は&lt;code&gt;JFrame&lt;/code&gt;が半透明ではなく、以下のように&lt;del&gt;半透明にした&lt;/del&gt;透明にした&lt;code&gt;JFrame&lt;/code&gt;に、半透明の&lt;code&gt;JPanel&lt;/code&gt;を追加、さらにその子として一秒ごとに文字列が変化する&lt;code&gt;JLabel&lt;/code&gt;(時計)を配置しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;透明&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;com.sun.awt.AWTUtilities.setWindowOpaque(frame, false); //JDK 1.6.0
frame.setBackground(new Color(0,0,0,0)); //1.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Window#setOpacity(...)&lt;/code&gt;(または&lt;code&gt;JDK 1.6.0&lt;/code&gt;で&lt;code&gt;AWTUtilities.setWindowOpacity(...)&lt;/code&gt;)は、子コンポーネントを含めてすべて半透明になるので、このサンプルでは使用していない&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frame.getContentPane().add(panel)&lt;/code&gt;で追加&lt;/li&gt;
&lt;li&gt;半透明(二種類)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setOpaque(true)&lt;/code&gt;+半透明のアルファ成分をもつ色を&lt;code&gt;setBackground()&lt;/code&gt;で設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt;が&lt;code&gt;setOpaque(true)&lt;/code&gt;なので、&lt;code&gt;ContentPane&lt;/code&gt;から再描画しないと、&lt;code&gt;JPanel&lt;/code&gt;に設定した半透明の背景色が重複して上書きされる(色が濃くなる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false)&lt;/code&gt;+&lt;code&gt;paintComponent()&lt;/code&gt;をオーバーライドして背景画像などを描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;panel.add(label)&lt;/code&gt;で追加&lt;/li&gt;
&lt;li&gt;一秒ごとに文字列を変更する時計&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false)&lt;/code&gt;で背景は透明&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viva-edo.com/komon/edokomon.html&quot;&gt;江戸の文様（和風素材・デスクトップ壁紙）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yourname.jp/soft/digitalfonts-20090306.shtml&quot;&gt;ユアネーム・7セグ・12セグフォント大全集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;フォントをデジタル時計ぽいものに変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-10 (金) 17:35:12

&lt;ul&gt;
&lt;li&gt;スクリーンショットは入れ替えるのが面倒なので、古いフォントのまま。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-17 (火) 17:26:14&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentframerepaint</link>
                <guid>http://terai.xrea.jp/swing/translucentframerepaint</guid>
                <pubDate>2011-10-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserで読み取り専用ファイルのリネームを禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;で読み取り専用属性ファイルのリネームを禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RenameIfCanWriteFileChooser&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-7ODSj6DaIig/TpsQEay0NqI/AAAAAAAABDs/8fz14wjADj0/s800/RenameIfCanWriteFileChooser.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CanWriteFileChooserUI extends MetalFileChooserUI{
  protected CanWriteFileChooserUI(JFileChooser chooser) {
    super(chooser);
  }
  public static ComponentUI createUI(JComponent c) {
    return new CanWriteFileChooserUI((JFileChooser)c);
  }
  private BasicDirectoryModel model2 = null;
  @Override public void createModel() {
    if(model2!=null) {
      model2.invalidateFileCache();
    }
    model2 = new BasicDirectoryModel(getFileChooser()) {
      @Override public boolean renameFile(File oldFile, File newFile) {
        return oldFile.canWrite()?super.renameFile(oldFile, newFile):false;
      }
    };
  }
  @Override public BasicDirectoryModel getModel() {
    return model2;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicDirectoryModel#renameFile(...)&lt;/code&gt;をオーバーライドして取り専用属性ファイルのリネームを確定しようとすると警告ダイアログが表示されるようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;sun.swing.FilePane#canWrite(File)&lt;/code&gt;をオーバーライドすれば、編集開始自体を禁止にすることもできそうですが、&lt;code&gt;MetalFileChooserUI&lt;/code&gt;などの&lt;code&gt;UI&lt;/code&gt;で&lt;code&gt;FilePane&lt;/code&gt;が&lt;code&gt;private&lt;/code&gt;になっているためかなり面倒です。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/2300004&quot;&gt;Swing - How does the JFileChooser &amp;quot;readOnly&amp;quot; property work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ROFileChooser.html&quot;&gt;JFileChooserを編集不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/renameifcanwritefilechooser</link>
                <guid>http://terai.xrea.jp/swing/renameifcanwritefilechooser</guid>
                <pubDate>2011-10-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayerで指定したコンポーネントへの入力を禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 7&lt;/code&gt;で導入された、&lt;code&gt;JLayer&lt;/code&gt;を利用して、指定したコンポーネントへの入力を禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableInputLayer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-fJbneWE3WB4/TpLGoNbk1TI/AAAAAAAABDk/GJWfhRR4UB0/s800/DisableInputLayer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DisableInputLayerUI extends LayerUI&amp;lt;JPanel&amp;gt; {
  private boolean isRunning = false;
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    if(!isRunning) return;
    Graphics2D g2 = (Graphics2D) g.create();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .5f));
    g2.setPaint(Color.GRAY);
    g2.fillRect(0, 0, c.getWidth(), c.getHeight());
    g2.dispose();
  }
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    JLayer jlayer = (JLayer)c;
    jlayer.getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    jlayer.setLayerEventMask(
        AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK
      | AWTEvent.MOUSE_WHEEL_EVENT_MASK | AWTEvent.KEY_EVENT_MASK
      | AWTEvent.FOCUS_EVENT_MASK | AWTEvent.COMPONENT_EVENT_MASK);
  }
  @Override public void uninstallUI(JComponent c) {
    JLayer jlayer = (JLayer)c;
    jlayer.setLayerEventMask(0);
    super.uninstallUI(c);
  }
  @Override public void eventDispatched(AWTEvent e, JLayer l) {
    if(isRunning &amp;amp;&amp;amp; e instanceof InputEvent) {
        ((InputEvent)e).consume();
    }
  }
  private static final String CMD_REPAINT = &quot;repaint&quot;;
  public void start() {
    if (isRunning) return;
    isRunning = true;
    firePropertyChange(CMD_REPAINT,false,true);
  }
  public void stop() {
    isRunning = false;
    firePropertyChange(CMD_REPAINT,true,false);
  }
  @Override public void applyPropertyChange(PropertyChangeEvent pce, JLayer l) {
    String cmd = pce.getPropertyName();
    if(CMD_REPAINT.equals(cmd)) {
      l.getGlassPane().setVisible((Boolean)pce.getNewValue());
      l.repaint();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLayer&lt;/code&gt;を設定した任意のコンポーネントへの入力可不可を切り替えることができるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;入力禁止中の半透明グレー表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LayerUI&amp;lt;JPanel&amp;gt;#paint(...)&lt;/code&gt;をオーバーライドして表示を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マウス、キー入力の禁止

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LayerUI&amp;lt;JPanel&amp;gt;#eventDispatched(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;((InputEvent)e).consume()&lt;/code&gt;を使用し、イベントを消費&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マウスカーソルを砂時計に変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cursor.WAIT_CURSOR&lt;/code&gt;を設定した&lt;code&gt;GlassPane&lt;/code&gt;の表示を切り替える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WaitCursor.html&quot;&gt;Cursorを砂時計に変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disableinputlayer</link>
                <guid>http://terai.xrea.jp/swing/disableinputlayer</guid>
                <pubDate>2011-10-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセル内にJButtonを配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のセル内に複数の&lt;code&gt;JButton&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonsInListCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-j4_Xv9F17Jc/TolDAZSkQUI/AAAAAAAABDU/GK_sK9k5aJE/s800/ButtonsInListCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ButtonsRenderer extends JPanel implements ListCellRenderer {
  public JTextArea label = new JTextArea();
  private final JButton viewButton = new JButton(new AbstractAction(&quot;view&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      System.out.println(&quot;aaa&quot;);
    }
  });
  private final JButton editButton = new JButton(new AbstractAction(&quot;edit&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      System.out.println(&quot;bbb&quot;);
    }
  });
  public ButtonsRenderer() {
    super(new BorderLayout());
    setBorder(BorderFactory.createEmptyBorder(5,5,5,0));
    setOpaque(true);
    label.setLineWrap(true);
    label.setOpaque(false);
    add(label);

    Box box = Box.createHorizontalBox();
    for(JButton b: java.util.Arrays.asList(viewButton, editButton)) {
      b.setFocusable(false);
      b.setRolloverEnabled(false);
      box.add(b);
      box.add(Box.createHorizontalStrut(5));
    }
    add(box, BorderLayout.EAST);
  }
  private final Color evenColor = new Color(230,255,230);
  @Override public Component getListCellRendererComponent(
      JList list, Object value, int index, boolean isSelected, boolean hasFocus) {
    label.setText((value==null)?&quot;&quot;:value.toString());
    if(isSelected) {
      setBackground(list.getSelectionBackground());
      label.setForeground(list.getSelectionForeground());
    }else{
      setBackground(index%2==0 ? evenColor : list.getBackground());
      label.setForeground(list.getForeground());
    }
    for(JButton b: java.util.Arrays.asList(viewButton, editButton)) {
      b.getModel().setRollover(false);
      b.getModel().setArmed(false);
      b.getModel().setPressed(false);
      b.getModel().setSelected(false);
    }
    if(button!=null) {
      if(index==pressedIndex) {
        button.getModel().setSelected(true);
        button.getModel().setArmed(true);
        button.getModel().setPressed(true);
      }else if(index==rolloverIndex) {
        button.getModel().setRollover(true);
      }
    }
    return this;
  }
  public int pressedIndex  = -1;
  public int rolloverIndex = -1;
  public JButton button = null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JList&lt;/code&gt;のセルに&lt;code&gt;2&lt;/code&gt;つの&lt;code&gt;JButton&lt;/code&gt;を配置する&lt;code&gt;ListCellRenderer&lt;/code&gt;を設定しています。
&lt;code&gt;JButton&lt;/code&gt;のクリックイベントは、&lt;code&gt;JList&lt;/code&gt;に追加したマウスリスナーで&lt;code&gt;SwingUtilities.getDeepestComponentAt(...)&lt;/code&gt;を使用して対象の&lt;code&gt;JButton&lt;/code&gt;を取得し、&lt;code&gt;JButton#doClick()&lt;/code&gt;を呼び出すようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ダミーの&lt;code&gt;view, edit&lt;/code&gt;ボタンを実際に動作する行の&lt;code&gt;delete, copy&lt;/code&gt;ボタンに変更(ソースを修正したのは2011年10月、スクリーンショットは未変更)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-20 (水) 16:13:40&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonsinlistcell</link>
                <guid>http://terai.xrea.jp/swing/buttonsinlistcell</guid>
                <pubDate>2011-10-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontのアウトラインを取得して文字列の内部を修飾する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;クリップを設定することで描画範囲を制限し、文字列の内部を異なる色で修飾します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineSplittingLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-1UyXoR9Qkyo/ToAw2259JmI/AAAAAAAABC4/xHq03u7R3v4/s800/LineSplittingLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TricoloreLabel extends JComponent {
  private final GlyphVector gv;
  public TricoloreLabel(String str) {
    super();
    Font font = new Font(Font.SERIF, Font.PLAIN, 64);
    FontRenderContext frc = new FontRenderContext(null, true, true);
    gv = font.createGlyphVector(frc, str);
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    int w = getWidth();
    int h = getHeight();
    g.setColor(Color.WHITE);
    g.fillRect(0,0,w,h);

    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    Rectangle2D b = gv.getVisualBounds();
    Point2D.Double p = new Point2D.Double(
        b.getX() + b.getWidth()/2d, b.getY() + b.getHeight()/2d);
    AffineTransform toCenterAT = AffineTransform.getTranslateInstance(
        w/2d - p.getX(), h/2d - p.getY());

    double d = b.getHeight()/3;
    Rectangle2D.Double clip  = new Rectangle2D.Double(
        b.getX(), b.getY(), b.getWidth(), b.getHeight());
    Rectangle2D.Double clip1 = new Rectangle2D.Double(
        b.getX(), b.getY(), b.getWidth(), d);
    Rectangle2D.Double clip2 = new Rectangle2D.Double(
        b.getX(), b.getY()+2*d, b.getWidth(), d);

    Shape s = toCenterAT.createTransformedShape(gv.getOutline());

    g2.setClip(toCenterAT.createTransformedShape(clip1));
    g2.setPaint(Color.BLUE);
    g2.fill(s);

    g2.setClip(toCenterAT.createTransformedShape(clip2));
    g2.setPaint(Color.RED);
    g2.fill(s);

    g2.setClip(toCenterAT.createTransformedShape(clip));
    g2.setPaint(Color.BLACK);
    g2.draw(s);
    g2.dispose();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextLayout&lt;/code&gt;からアウトラインを取得し、上下にクリップを設定して色分け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GlyphVector&lt;/code&gt;からアウトラインを取得し、上中下にクリップを設定して色分け&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/linesplittinglabel</link>
                <guid>http://terai.xrea.jp/swing/linesplittinglabel</guid>
                <pubDate>2011-09-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolBarの半透明化とアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;コンポーネントにマウスカーソルがある場合だけ表示される半透明の&lt;code&gt;JToolBar&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentToolBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-36mkZfbor58/Tnb1d-2vaPI/AAAAAAAABCM/Hoor7aG7K-g/s800/TranslucentToolBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ImageCaptionLabel extends JLabel implements HierarchyListener {
  private float alpha = 0.0f;
  private javax.swing.Timer animator;
  private int yy = 0;
  private JToolBar toolBox = new JToolBar() {
    @Override protected void paintComponent(Graphics g) {
      Graphics2D g2 = (Graphics2D)g;
      g2.setPaint(getBackground());
      g2.fillRect(0, 0, getWidth(), getHeight());
      super.paintComponent(g);
    }
  };
  public ImageCaptionLabel(String caption, Icon image) {
    setIcon(image);
    toolBox.setFloatable(false);
    toolBox.setOpaque(false);
    toolBox.setBackground(new Color(0,0,0,0));
    toolBox.setForeground(Color.WHITE);
    toolBox.setBorder(BorderFactory.createEmptyBorder(2,4,4,4));

    //toolBox.setLayout(new BoxLayout(toolBox, BoxLayout.X_AXIS));
    toolBox.add(Box.createGlue());
    toolBox.add(makeToolButton(&quot;ATTACHMENT_16x16-32.png&quot;));
    toolBox.add(Box.createHorizontalStrut(2));
    toolBox.add(makeToolButton(&quot;RECYCLE BIN - EMPTY_16x16-32.png&quot;));

    MouseAdapter ma = new MouseAdapter() {
      @Override public void mouseEntered(MouseEvent e) {
        dispatchMouseEvent(e);
      }
      @Override public void mouseExited(MouseEvent e) {
        dispatchMouseEvent(e);
      }
      private void dispatchMouseEvent(MouseEvent e) {
        Component src = e.getComponent();
        Component tgt = ImageCaptionLabel.this;
        tgt.dispatchEvent(SwingUtilities.convertMouseEvent(src, e, tgt));
      }
    };
    toolBox.addMouseListener(ma);
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、画像を表示した&lt;code&gt;JLabel&lt;/code&gt;に半透明にした&lt;code&gt;JToolBar&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JToolBar&lt;/code&gt;などの透明化は、&lt;a href=&quot;http://terai.xrea.jp/Swing/MenuBarBackground.html&quot;&gt;JMenuBarの背景に画像を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;表示アニメーションは、&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JToolBar&lt;/code&gt;内部の&lt;code&gt;JButton&lt;/code&gt;は、&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonPainted.html&quot;&gt;JButtonの描画&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://chrfb.deviantart.com/art/quot-ecqlipse-2-quot-PNG-59941546&quot;&gt;&amp;quot;ecqlipse 2&amp;quot; PNG by ~chrfb on deviantART&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを借りています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucenttoolbar</link>
                <guid>http://terai.xrea.jp/swing/translucenttoolbar</guid>
                <pubDate>2011-09-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListの先頭文字キー入力による検索選択を無効にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;にフォーカスがある状態で英数字キー入力をしたときに先頭文字が一致するアイテムを検索して選択する機能を無効にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisablePrefixMatchSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-_wtzuIN_MvU/Tm2wga2X4hI/AAAAAAAABBs/dUuDS1gj9mM/s800/DisablePrefixMatchSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list = new JList() {
  @Override public int getNextMatch(String prefix, int startIndex, Position.Bias bias) {
    return -1;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JList#getNextMatch(...)&lt;/code&gt;メソッドをオーバーライドして、戻り値の次にマッチする要素のインデックスが常に&lt;code&gt;-1&lt;/code&gt;を返すようにすることで、キー入力による先頭文字検索選択を無効にしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;にも&lt;code&gt;JTree#getNextMatch(...)&lt;/code&gt;メソッドが存在し、同様のキー入力による選択機能がありますが、こちらはインデックスではなく、&lt;code&gt;TreePath&lt;/code&gt;が戻り値なので、&lt;code&gt;null&lt;/code&gt;を返すことで無効にすることができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTree tree = new JTree() {
  @Override public TreePath getNextMatch(String prefix, int startingRow, Position.Bias bias) {
    return null;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disableprefixmatchselection</link>
                <guid>http://terai.xrea.jp/swing/disableprefixmatchselection</guid>
                <pubDate>2011-09-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBox内にJProgressBarを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;内に&lt;code&gt;JProgressBar&lt;/code&gt;を設定して進捗を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-wtOABuv6qdQ/TmR3t1oq-qI/AAAAAAAABBg/jbHLwwMR1gc/s800/ProgressComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ProgressCellRenderer extends DefaultListCellRenderer {
  private final JProgressBar bar = new JProgressBar() {
    @Override public Dimension getPreferredSize() {
      return ProgressCellRenderer.this.getPreferredSize();
    }
  };
  @Override public Component getListCellRendererComponent(
      JList list, Object value, int index,
      boolean isSelected, boolean cellHasFocus) {
    if(index&amp;lt;0 &amp;amp;&amp;amp; worker!=null &amp;amp;&amp;amp; !worker.isDone()) {
      bar.setFont(list.getFont());
      bar.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
      bar.setValue(count);
      return bar;
    }else{
      return super.getListCellRendererComponent(
          list,value,index,isSelected,cellHasFocus);
    }
  }
  @Override public void updateUI() {
    super.updateUI();
    if(bar!=null) SwingUtilities.updateComponentTreeUI(bar);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;index&lt;/code&gt;が負(アイテムリストではない)の場合、&lt;code&gt;JProgressBar&lt;/code&gt;を返すセルレンダラーを&lt;code&gt;JComboBox&lt;/code&gt;に設定して進捗を表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;ロードボタンが押されたら、以下のような&lt;code&gt;SwingWorker&lt;/code&gt;で、&lt;code&gt;JComboBox&lt;/code&gt;にアイテムを追加しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;button = new JButton(new AbstractAction(&quot;load&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    button.setEnabled(false);
    combo.setEnabled(false);
    combo.removeAllItems();
    worker = new SwingWorker&amp;lt;String, String&amp;gt;() {
      private int max = 30;
      @Override public String doInBackground() {
        int current = 0;
        while(current&amp;lt;=max &amp;amp;&amp;amp; !isCancelled()) {
          try {
            Thread.sleep(50);
            //setProgress(100 * current / max);
            count = 100 * current / max;
            publish(&quot;test: &quot;+current);
          }catch(Exception ie) {
            return &quot;Exception&quot;;
          }
          current++;
        }
        return &quot;Done&quot;;
      }
      @Override protected void process(java.util.List&amp;lt;String&amp;gt; chunks) {
        DefaultComboBoxModel m = (DefaultComboBoxModel)combo.getModel();
        for(String s: chunks) {
          m.addElement(s);
        }
        combo.setSelectedIndex(-1);
        combo.repaint();
      }
      @Override public void done() {
        String text = null;
        if(!isCancelled()) {
          combo.setSelectedIndex(0);
        }
        combo.setEnabled(true);
        button.setEnabled(true);
        count = 0;
      }
    };
    worker.execute();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progresscombobox</link>
                <guid>http://terai.xrea.jp/swing/progresscombobox</guid>
                <pubDate>2011-09-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル内でリンクだけHover可能にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル内ではなく、内部のリンク上にカーソルがきた場合だけ&lt;code&gt;Hover&lt;/code&gt;するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PointInsidePrefSize&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-OQfktkzVBD4/Tlsepf4ePZI/AAAAAAAABBQ/bikhWupFHEk/s800/PointInsidePrefSize.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//@see SwingUtilities2.pointOutsidePrefSize(...)
private static boolean pointInsidePrefSize(JTable table, Point p) {
  int row = table.rowAtPoint(p);
  int col = table.columnAtPoint(p);
  TableCellRenderer tcr = table.getCellRenderer(row, col);
  Object value = table.getValueAt(row, col);
  Component cell = tcr.getTableCellRendererComponent(table, value, false, false, row, col);
  Dimension itemSize = cell.getPreferredSize();
  Insets i = ((JComponent)cell).getInsets();
  Rectangle cellBounds = table.getCellRect(row, col, false);
  cellBounds.width = itemSize.width-i.right-i.left;
  cellBounds.translate(i.left, i.top);
  return cellBounds.contains(p);
}
private boolean isRollover = false;
private static boolean isURLColumn(JTable table, int column) {
  return column&amp;gt;=0 &amp;amp;&amp;amp; table.getColumnClass(column).equals(URL.class);
}
@Override public void mouseMoved(MouseEvent e) {
  JTable table = (JTable)e.getSource();
  Point pt = e.getPoint();
  int prev_row = row;
  int prev_col = col;
  boolean prev_ro = isRollover;
  row = table.rowAtPoint(pt);
  col = table.columnAtPoint(pt);
  isRollover = isURLColumn(table, col) &amp;amp;&amp;amp; pointInsidePrefSize(table, pt);
  if((row==prev_row&amp;amp;&amp;amp;col==prev_col&amp;amp;&amp;amp;isRollover==prev_ro) || (!isRollover&amp;amp;&amp;amp;!prev_ro)) {
    return;
  }
  // &amp;gt;&amp;gt;&amp;gt;&amp;gt; HyperlinkCellRenderer.java
  Rectangle repaintRect;
  if(isRollover) {
    Rectangle r = table.getCellRect(row, col, false);
    repaintRect = prev_ro ?
      r.union(table.getCellRect(prev_row, prev_col, false)) : r;
  }else{ //if(prev_ro) {
    repaintRect = table.getCellRect(prev_row, prev_col, false);
  }
  table.repaint(repaintRect);
  // &amp;lt;&amp;lt;&amp;lt;&amp;lt;
  //table.repaint();
}
@Override public void mouseExited(MouseEvent e)  {
  JTable table = (JTable)e.getSource();
  if(isURLColumn(table, col)) {
    table.repaint(table.getCellRect(row, col, false));
    row = -1;
    col = -1;
    isRollover = false;
  }
}
@Override public void mouseClicked(MouseEvent e) {
  JTable table = (JTable)e.getSource();
  Point pt = e.getPoint();
  int ccol = table.columnAtPoint(pt);
  if(isURLColumn(table, ccol) &amp;amp;&amp;amp; pointInsidePrefSize(table, pt)) {
    int crow = table.rowAtPoint(pt);
    URL url = (URL)table.getValueAt(crow, ccol);
    System.out.println(url);
    try{
      Desktop.getDesktop().browse(url.toURI());
    }catch(Exception ex) {
      ex.printStackTrace();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SwingUtilities2.pointOutsidePrefSize(...)&lt;/code&gt;を参考にして、セルの表示に使用するコンポーネント(&lt;code&gt;JLabel&lt;/code&gt;)の標準サイズ(幅)内にカーソルがあるかどうかを比較するメソッドを作成しています。&lt;code&gt;JTable&lt;/code&gt;に追加した&lt;code&gt;MouseListener&lt;/code&gt;でこれを使用し、&lt;code&gt;URL&lt;/code&gt;の文字列を&lt;code&gt;Hover&lt;/code&gt;するか、それがクリックされたかを判断しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkInTableCell.html&quot;&gt;JTableのセルにHyperlinkを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedHtmlLabel.html&quot;&gt;Htmlで修飾した文字列のクリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableFileList.html&quot;&gt;JTableで文字列をクリックした場合だけセルを選択状態にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.net/projects/swingset3/sources/svn/content/trunk/SwingSet3/src/com/sun/swingset3/demos/table/HyperlinkCellRenderer.java&quot;&gt;SwingSet3: HyperlinkCellRenderer.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingSet3&lt;/code&gt;の&amp;quot;HyperlinkCellRenderer.java&amp;quot;を参考にして、再描画するセルの範囲を最適化、ついでに&lt;code&gt;HyperlinkCellRenderer#checkIfPointInsideHyperlink(Point)&lt;/code&gt;ではセルコンポーネントの内余白(&lt;code&gt;Insets&lt;/code&gt;)が考慮されていないので修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-16 (金) 18:45:29&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/pointinsideprefsize</link>
                <guid>http://terai.xrea.jp/swing/pointinsideprefsize</guid>
                <pubDate>2011-08-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerで日付を設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;を使って日付を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerDateModel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-llHXaOVDQbQ/TlH5yRAODSI/AAAAAAAABBE/XsSUtm7J_U0/s800/SpinnerDateModel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final String dateFormatPattern = &quot;yyyy/MM/dd&quot;;
JSpinner s = new JSpinner(
    new SpinnerDateModel(date, start, null, Calendar.DAY_OF_MONTH));
final JSpinner.DateEditor editor = new JSpinner.DateEditor(s, dateFormatPattern);
s.setEditor(editor);
editor.getTextField().addFocusListener(new FocusAdapter() {
  @Override public void focusGained(FocusEvent e) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        int i = dateFormatPattern.lastIndexOf(&quot;dd&quot;);
        editor.getTextField().select(i, i+2);
      }
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;本日を現在の値と下限値、上限値は&lt;code&gt;null&lt;/code&gt;(制限無し)、増減値を&lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;とした&lt;code&gt;SpinnerDateModel&lt;/code&gt;を使用

&lt;ul&gt;
&lt;li&gt;下限値が現在時刻(例: &lt;code&gt;Mon Aug 22 15:09:27 JST 2011&lt;/code&gt;)なので、現在の値(&lt;code&gt;Mon Aug 22 00:00:00 JST 2011&lt;/code&gt;)が範囲外となり、矢印ボタンで日付を変更できない&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;https://forums.oracle.com/thread/2268752&quot;&gt;Swing - DateSpinner spins only after an edit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;min&lt;/code&gt;: &lt;code&gt;set(Calendar.HOUR_OF_DAY, 0)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下限値を以下のように本日の始めにリセット&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例: &lt;code&gt;Mon Aug 22 15:09:27 JST 2011&lt;/code&gt;を&lt;code&gt;Mon Aug 22 00:00:00 JST 2011&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Calendar today = Calendar.getInstance();
today.clear(Calendar.MILLISECOND);
today.clear(Calendar.SECOND);
today.clear(Calendar.MINUTE);
today.set(Calendar.HOUR_OF_DAY, 0);
Date start = today.getTime();

System.out.println(date);
System.out.println(start);

JSpinner spinner2 = new JSpinner(new SpinnerDateModel(
    date, start, null, Calendar.DAY_OF_MONTH));
spinner2.setEditor(new JSpinner.DateEditor(spinner2, dateFormatPattern));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JSpinner.DateEditor&lt;/code&gt; + &lt;code&gt;FocusListener&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォーカスがエディタに移動した場合、日付部分が選択状態になるようリスナーを設定

&lt;ul&gt;
&lt;li&gt;矢印ボタンのクリックで編集開始した場合、先頭の年度部分ではなく日付が増減する&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/DateCellEditor.html&quot;&gt;CellEditorをJSpinnerにして日付を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/2268752&quot;&gt;Swing - DateSpinner spins only after an edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DateCellEditor.html&quot;&gt;CellEditorをJSpinnerにして日付を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnerdatemodel</link>
                <guid>http://terai.xrea.jp/swing/spinnerdatemodel</guid>
                <pubDate>2011-08-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBox付きJTreeでディレクトリ構造を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;編集可能な&lt;code&gt;JCheckBox&lt;/code&gt;をノードに追加した&lt;code&gt;JTree&lt;/code&gt;でディレクトリ構造を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileSystemTreeWithCheckBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-5ihZ2R-e4Ug/Tki-blUTxaI/AAAAAAAABA0/5KCjlm9CkSY/s800/FileSystemTreeWithCheckBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeEditor extends TriStateCheckBox implements TreeCellEditor {
  private final FileSystemView fileSystemView;
  private final JPanel panel = new JPanel(new BorderLayout());
  private DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
  private File file;
  public CheckBoxNodeEditor(FileSystemView fileSystemView) {
    super();
    this.fileSystemView = fileSystemView;
    this.addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        stopCellEditing();
      }
    });
    panel.setFocusable(false);
    panel.setRequestFocusEnabled(false);
    panel.setOpaque(false);
    panel.add(this, BorderLayout.WEST);
    this.setOpaque(false);
  }
  @Override public Component getTreeCellEditorComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row) {
    JLabel l = (JLabel)renderer.getTreeCellRendererComponent(
        tree, value, true, expanded, leaf, row, true);
    l.setFont(tree.getFont());
    setOpaque(false);
    if(value instanceof DefaultMutableTreeNode) {
      this.setEnabled(tree.isEnabled());
      this.setFont(tree.getFont());
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        CheckBoxNode node = (CheckBoxNode)userObject;
        if(node.status==Status.INDETERMINATE) {
          setIcon(new IndeterminateIcon());
        }else{
          setIcon(null);
        }
        file = node.file;
        l.setIcon(fileSystemView.getSystemIcon(file));
        l.setText(fileSystemView.getSystemDisplayName(file));
        setSelected(node.status==Status.SELECTED);
      }
      //panel.add(this, BorderLayout.WEST);
      panel.add(l);
      return panel;
    }
    return l;
  }
  @Override public Object getCellEditorValue() {
    return new CheckBoxNode(file, isSelected()?Status.SELECTED:Status.DESELECTED);
  }
  @Override public boolean isCellEditable(EventObject e) {
    if(e instanceof MouseEvent &amp;amp;&amp;amp; e.getSource() instanceof JTree) {
      MouseEvent me = (MouseEvent)e;
      JTree tree = (JTree)e.getSource();
      TreePath path = tree.getPathForLocation(me.getX(), me.getY());
      Rectangle r = tree.getPathBounds(path);
      if(r==null) return false;
      Dimension d = getPreferredSize();
      r.setSize(new Dimension(d.width, r.height));
      if(r.contains(me.getX(), me.getY())) {
        if(file==null &amp;amp;&amp;amp; System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.7.0&quot;)) {
          System.out.println(&quot;XXX: Java 7, only on first run\n&quot;+getBounds());
          setBounds(new Rectangle(0,0,d.width,r.height));
        }
        return true;
      }
    }
    return false;
  }
  @Override public void updateUI() {
    super.updateUI();
    if(panel!=null) panel.updateUI();
    //1.6.0_24 bug??? @see 1.7.0 DefaultTreeCellRenderer#updateUI()
    renderer = new DefaultTreeCellRenderer();
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;このサンプルは、&lt;a href=&quot;http://terai.xrea.jp/Swing/DirectoryTree.html&quot;&gt;FileSystemViewを使ってディレクトリ構造をJTreeに表示する&lt;/a&gt;と、&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeTree.html&quot;&gt;JTreeの葉ノードをJCheckBoxにする&lt;/a&gt;を組み合わせて作成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;TreeCellEditor#isCellEditable(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;JCheckBox&lt;/code&gt;付近をクリックした場合のみ編集可能(チェックの有無を切り替えることができる)にし、ラベルやアイコンなどをクリックした場合は、編集状態にせずノードの展開や折り畳みができるように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DirectoryTree.html&quot;&gt;FileSystemViewを使ってディレクトリ構造をJTreeに表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeTree.html&quot;&gt;JTreeの葉ノードをJCheckBoxにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeEditor.html&quot;&gt;JTreeのすべてのノードにJCheckBoxを追加する&lt;/a&gt; で使用している&lt;code&gt;TreeModelListener&lt;/code&gt;を追加して&lt;code&gt;JCheckBox&lt;/code&gt;の状態を変更するように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-13 (金) 20:12:08&lt;/li&gt;
&lt;li&gt;チェックされたノード(最上位となる)の一覧をコンソールに表示する&lt;code&gt;JButton&lt;/code&gt;を追加(スクリーンショットなどは面倒なので更新しない)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-19 (木) 19:50:07&lt;/li&gt;
&lt;li&gt;ノードをチェックしてから、そのディレクトリを開いても子ディレクトリにチェックが反映されない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-07-31 (火) 18:15:44&lt;/li&gt;
&lt;li&gt;いつも勉強させていただいております。サンプルではrootはデスクトップとなっていますが、もし例えばZ:\またはZ:\aaaとTOPにしたい場合、どこを修正すれば宜しいでしょうか？ご教示をお願いいたします。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2013-12-25 (水) 14:11:08

&lt;ul&gt;
&lt;li&gt;こんばんは。このサンプルでは、&lt;code&gt;fileSystemView.getRoots()&lt;/code&gt;で&lt;code&gt;Desktop&lt;/code&gt;フォルダ(&lt;code&gt;Windows&lt;/code&gt;の場合)を取得しているので、この箇所を、例えば&lt;code&gt;File fileSystemRoot = new File(&amp;quot;Z:/&amp;quot;); /* for(File fileSystemRoot: fileSystemView.getRoots()) */ {&lt;/code&gt;のように変更するのはどうでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-12-25 (水) 16:34:38&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ご教示、ありがとうございました。ご指摘のところを見落としました。やり方は理解できました。ついでに、もしrootはデスクトップにしておいて、C:\を表示させないで(または展開させないで)、X:\,Y:\のみ操作させるには、どこを弄れば宜しいでしょうか？ありがとうございました。来年もよろしくお願いします。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2013-12-26 (木) 13:36:28

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fileSystemView.getRoots()&lt;/code&gt;で&lt;code&gt;Desktop&lt;/code&gt;フォルダを取得すると、 マイコンピュータとか、&lt;code&gt;Desktop&lt;/code&gt;フォルダが&lt;code&gt;C:\&lt;/code&gt;にある場合はマイドキュメントなどを選択不可にするのが、面倒な気がします。以下のように&lt;code&gt;new File(System.getProperty(&amp;quot;user.home&amp;quot;)+&amp;quot;/Desktop&amp;quot;)&lt;/code&gt;とデスクトップを決め打ちにしてノードを作ってしまうのが簡単かもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-12-26 (木) 21:55:24&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final FileSystemView fileSystemView = FileSystemView.getFileSystemView();
DefaultMutableTreeNode root = new DefaultMutableTreeNode();
final DefaultTreeModel treeModel = new DefaultTreeModel(root);
File desktopFile = new File(System.getProperty(&quot;user.home&quot;)+&quot;/Desktop&quot;);
DefaultMutableTreeNode desktop = new DefaultMutableTreeNode(new CheckBoxNode(desktopFile, Status.DESELECTED));
root.add(desktop);
for(File file: fileSystemView.getFiles(desktopFile, true)) {
  if(file.isDirectory()) {
    desktop.add(new DefaultMutableTreeNode(new CheckBoxNode(file, Status.DESELECTED)));
  }
}
for(File fileSystemRoot: Arrays.asList(new File(&quot;X:/&quot;), new File(&quot;Y:/&quot;))) {
  DefaultMutableTreeNode node = new DefaultMutableTreeNode(new CheckBoxNode(fileSystemRoot, Status.DESELECTED));
  desktop.add(node);
  for(File file: fileSystemView.getFiles(fileSystemRoot, true)) {
    System.out.println(file.getAbsolutePath());
    if(file.isDirectory()) {
      node.add(new DefaultMutableTreeNode(new CheckBoxNode(file, Status.DESELECTED)));
    }
  }
}
treeModel.addTreeModelListener(new CheckBoxStatusUpdateListener());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;いつも勉強させていただいております。チェックしたファイルまたはフォルダーのチェックマークの外し方を教えていただけませんか？ -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2014-03-04 (火) 13:55:30

&lt;ul&gt;
&lt;li&gt;こんばんは。マウスを使わずにチェックを外したいということですよね。このサンプルの場合、&lt;code&gt;MutableTreeNode#setUserObject(...)&lt;/code&gt;でチェックを外した&lt;code&gt;new CheckBoxNode(node.file, Status.DESELECTED)&lt;/code&gt;を設定し、そのあと&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/tree/DefaultTreeModel.html#nodeChanged%28javax.swing.tree.TreeNode%29&quot;&gt;DefaultTreeModel#nodeChanged(...) (Java Platform SE 7)&lt;/a&gt;を呼べばいいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-03-05 (水) 18:23:39&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//例えば、すべてのチェックを外す場合...
private static void deselectedAll(DefaultTreeModel model, TreePath path) {
  Object o = path.getLastPathComponent();
  if (!(o instanceof DefaultMutableTreeNode)) {
    return;
  }
  DefaultMutableTreeNode node = (DefaultMutableTreeNode) o;
  o = node.getUserObject();
  if (!(o instanceof CheckBoxNode)) {
    return;
  }
  CheckBoxNode check = (CheckBoxNode) o;
  if (check.status == Status.SELECTED) {
    node.setUserObject(new CheckBoxNode(check.file, Status.DESELECTED));
    model.nodeChanged(node);
    //or: model.valueForPathChanged(path, new CheckBoxNode(check.file, Status.DESELECTED));
  } else if (!node.isLeaf() &amp;amp;&amp;amp; node.getChildCount() &amp;gt;= 0) {
    Enumeration e = node.children();
    while (e.hasMoreElements()) {
      deselectedAll(model, path.pathByAddingChild(e.nextElement()));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://terai.xrea.jp/swing/filesystemtreewithcheckbox</link>
                <guid>http://terai.xrea.jp/swing/filesystemtreewithcheckbox</guid>
                <pubDate>2011-08-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneのHTMLタグにToolTipTextを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;で&lt;code&gt;div&lt;/code&gt;や&lt;code&gt;span&lt;/code&gt;タグの&lt;code&gt;title&lt;/code&gt;属性を&lt;code&gt;ToolTip&lt;/code&gt;で表示できるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ElementAttribute&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-3HQ42PjgBfs/Tj97O_2VS6I/AAAAAAAABAc/EnrOPXrJxfE/s800/ElementAttribute.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextPane editor1 = new JTextPane() {
  private transient Position.Bias[] bias = new Position.Bias[1];
  @Override public String getToolTipText(MouseEvent e) {
    String title = super.getToolTipText(e);
    JEditorPane editor = (JEditorPane) e.getSource();
    if(!editor.isEditable()) {
      Point pt = new Point(e.getX(), e.getY());
      int pos = editor.getUI().viewToModel(editor, pt, bias);
      if(bias[0] == Position.Bias.Backward &amp;amp;&amp;amp; pos &amp;gt; 0) {
        pos--;
      }
      if(pos &amp;gt;= 0 &amp;amp;&amp;amp;(editor.getDocument() instanceof HTMLDocument)) {
        HTMLDocument hdoc = (HTMLDocument)editor.getDocument();
        Element elem = hdoc.getCharacterElement(pos);
        if(elem != null) {
          AttributeSet a = elem.getAttributes();
          AttributeSet span = (AttributeSet)a.getAttribute(HTML.Tag.SPAN);
          if(span != null) {
            title = (String)span.getAttribute(HTML.Attribute.TITLE);
          }
        }
      }
    }
    return title;
  }
};
editor1.setEditorKit(new HTMLEditorKit());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JEditorPane&lt;/code&gt;で&lt;code&gt;HTMLEditorKit&lt;/code&gt;を使った場合の&lt;code&gt;ToolTip&lt;/code&gt;表示についてテストしています。&lt;code&gt;img&lt;/code&gt;タグの&lt;code&gt;alt&lt;/code&gt;属性は自動的に&lt;code&gt;ToolTip&lt;/code&gt;表示され、リンクは&lt;code&gt;HyperlinkListener&lt;/code&gt;を追加することで&lt;code&gt;ToolTip&lt;/code&gt;を変更することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final String htmlText =
  &quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&quot; +
  &quot;&amp;lt;span style=&#39;background:#88ff88;&#39; title=&#39;tooltip: span[@title]&#39;&amp;gt;span&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;&quot; +
  &quot;&amp;lt;div title=&#39;tooltip: div[@title]&#39;&amp;gt;div tag: div div div div&amp;lt;/div&amp;gt;&quot; +
  &quot;&amp;lt;div style=&#39;padding: 2 24;&#39;&amp;gt;&amp;lt;img src=&#39;&quot;+ image +&quot;&#39; alt=&#39;16x16 favicon&#39; /&amp;gt;&amp;amp;nbsp;&quot; +
  &quot;&amp;lt;a href=&#39;http://terai.xrea.jp/&#39;&amp;gt;Java Swing Tips&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&quot; +
  &quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;span&lt;/code&gt;タグの&lt;code&gt;title&lt;/code&gt;属性を&lt;code&gt;ToolTip&lt;/code&gt;で表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;の&lt;code&gt;LinkController&lt;/code&gt;クラスを参考に&lt;code&gt;JEditorPane#getToolTipText(MouseEvent)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;dvi&lt;/code&gt;タグの&lt;code&gt;title&lt;/code&gt;属性を&lt;code&gt;ToolTip&lt;/code&gt;で表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ImageView#getToolTipText(...)&lt;/code&gt;を参考&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HyperlinkListener&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TooltipEditorKit extends HTMLEditorKit {
  @Override public ViewFactory getViewFactory() {
    return new HTMLFactory() {
      @Override public View create(Element elem) {
        AttributeSet attrs = elem.getAttributes();
        Object elementName = attrs.getAttribute(
            AbstractDocument.ElementNameAttribute);
        Object o = (elementName != null)
          ? null : attrs.getAttribute(StyleConstants.NameAttribute);
        if(o instanceof HTML.Tag) {
          HTML.Tag kind = (HTML.Tag) o;
          if(kind == HTML.Tag.DIV) {
            return new BlockView(elem, View.Y_AXIS) {
              @Override public String getToolTipText(
                  float x, float y, Shape allocation) {
                String s = super.getToolTipText(x, y, allocation);
                if(s==null) {
                  s = (String)getElement().getAttributes().getAttribute(
                      HTML.Attribute.TITLE);
                }
                return s;
              }
            };
          }
        }
        return super.create(elem);
      }
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkListener.html&quot;&gt;JEditorPaneにリンクを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/elementattribute</link>
                <guid>http://terai.xrea.jp/swing/elementattribute</guid>
                <pubDate>2011-08-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの選択モードを切り替える</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の選択モードを切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-bPltus2wD6w/TjZCCGnH40I/AAAAAAAABAE/tgmolSg-2Ys/s800/TreeSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.getSelectionModel().setSelectionMode(TreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;tree.getSelectionModel().setSelectionMode(...)&lt;/code&gt;メソッドを使用して、選択モードを設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Ctrl-クリック、Shift-クリックなどで、自由に&lt;code&gt;TreePath&lt;/code&gt;を選択状態にすることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeSelectionModel.SINGLE_TREE_SELECTION&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreePath&lt;/code&gt;をひとつだけ選択状態にすることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeSelectionModel.CONTIGUOUS_TREE_SELECTION&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreePath&lt;/code&gt;が連続している場合は、複数選択できます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treeselection</link>
                <guid>http://terai.xrea.jp/swing/treeselection</guid>
                <pubDate>2011-08-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SwingWorkerの一時停止と再開</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SwingWorker&lt;/code&gt;で処理の一時停止と再開を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PauseResumeSwingWorker&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-3BCjKLnQbGM/Ti0AQV5nkwI/AAAAAAAAA_s/RY75ol3pFak/s800/PauseResumeSwingWorker.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RunAction extends AbstractAction{
  public RunAction() {
    super(&quot;run&quot;);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    final JProgressBar bar1 = new JProgressBar(0, 100);
    final JProgressBar bar2 = new JProgressBar(0, 100);
    runButton.setEnabled(false);
    canButton.setEnabled(true);
    pauseButton.setEnabled(true);
    statusPanel.removeAll();
    statusPanel.add(bar1, BorderLayout.NORTH);
    statusPanel.add(bar2, BorderLayout.SOUTH);
    statusPanel.revalidate();
    worker = new SwingWorker&amp;lt;String, Progress&amp;gt;() {
      @Override public String doInBackground() {
        int current = 0;
        int lengthOfTask = 12; //filelist.size();
        publish(new Progress(Component.LOG, &quot;Length Of Task: &quot; + lengthOfTask));
        publish(new Progress(Component.LOG, &quot;\n---------------------------\n&quot;));
        while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
          publish(new Progress(Component.LOG, &quot;*&quot;));
          if(!bar1.isDisplayable()) {
            return &quot;Disposed&quot;;
          }
          try{
            convertFileToSomething();
          }catch(InterruptedException ie) {
            return &quot;Interrupted&quot;;
          }
          publish(new Progress(Component.TOTAL, 100 * current / lengthOfTask));
          current++;
        }
        publish(new Progress(Component.LOG, &quot;\n&quot;));
        return &quot;Done&quot;;
      }
      private final Random r = new Random();
      private void convertFileToSomething() throws InterruptedException{
        boolean flag = false;
        int current = 0;
        int lengthOfTask = 10+r.nextInt(50);
        while(current&amp;lt;=lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
          if(isPaused) {
            try{
              Thread.sleep(500);
            }catch(InterruptedException ie) {
              return;
            }
            publish(new Progress(Component.PAUSE, flag));
            flag ^= true;
            continue;
          }
          int iv = 100 * current / lengthOfTask;
          Thread.sleep(20); // dummy
          publish(new Progress(Component.FILE, iv+1));
          current++;
        }
      }
      @Override protected void process(java.util.List&amp;lt;Progress&amp;gt; chunks) {
        for(Progress s: chunks) {
          switch(s.component) {
            case TOTAL: bar1.setValue((Integer)s.value); break;
            case FILE:  bar2.setValue((Integer)s.value); break;
            case LOG:   area.append((String)s.value); break;
            case PAUSE: {
              if((Boolean)s.value) {
                area.append(&quot;*&quot;);
              }else{
                try{
                  Document doc = area.getDocument();
                  doc.remove(area.getDocument().getLength()-1, 1);
                }catch(Exception ex) {
                    ex.printStackTrace();
                }
              }
              break;
            }
          }
        }
      }
      @Override public void done() {
        //...
      }
    };
    worker.execute();
  }
}
private boolean isPaused = false;
class PauseAction extends AbstractAction{
  public PauseAction() {
    super(&quot;pause&quot;);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    isPaused = (worker!=null &amp;amp;&amp;amp; !worker.isCancelled() &amp;amp;&amp;amp; !isPaused);
    JButton b = (JButton)evt.getSource();
    b.setText(isPaused?&quot;resume&quot;:&quot;pause&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SwingWorker#doInBackground()&lt;/code&gt;内のループで一時停止のフラグを参照し、一時停止状態の場合は本来の処理(上記のサンプルではカウントアップするだけ)を行わずに、&lt;code&gt;Thread.sleep(...)&lt;/code&gt;と停止中を表現するコンポーネントの更新(&lt;code&gt;JTextArea&lt;/code&gt;の文字列を点滅)のみ繰り返すようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SwingWorker.html&quot;&gt;SwingWorkerを使った処理の中断と進捗状況表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TwoProgressBars.html&quot;&gt;SwingWorkerで複数のJProgressBarを使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/pauseresumeswingworker</link>
                <guid>http://terai.xrea.jp/swing/pauseresumeswingworker</guid>
                <pubDate>2011-07-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListをマウスクリックのみで複数選択する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;をアイテムをマウスクリックだけで複数選択できるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ListMouseSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-wj2xm8BlBbA/TiPrjr1sQ5I/AAAAAAAAA_c/NiXO891B5fs/s800/ListMouseSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list = new JList(model) {
  private ClearSelectionListener listener;
  @Override public void setSelectionInterval(int anchor, int lead) {
    if(anchor==lead &amp;amp;&amp;amp; lead&amp;gt;=0 &amp;amp;&amp;amp; anchor&amp;gt;=0) {
      if(listener.isDragging) {
        addSelectionInterval(anchor, anchor);
      }else if(!listener.isInCellDragging) {
        if(isSelectedIndex(anchor)) {
          removeSelectionInterval(anchor, anchor);
        }else{
          addSelectionInterval(anchor, anchor);
        }
        listener.isInCellDragging = true;
      }
    }else{
      super.setSelectionInterval(anchor, lead);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;Default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;MouseEvent&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#processMouseEvent&lt;/code&gt;, &lt;code&gt;JList#processMouseMotionEvent&lt;/code&gt;をオーバーライドして、常に&lt;kbd&gt;Ctrl&lt;/kbd&gt;キーが押されている状態にする&lt;/li&gt;
&lt;li&gt;マウスでアイテムをドラッグしても選択状態は変わらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JList&lt;/code&gt;の空白部分をクリックした場合、アイテムの選択状態は変更せず(&lt;code&gt;MouseEvent#consume()&lt;/code&gt;)、フォーカスだけ&lt;code&gt;JList&lt;/code&gt;に移動&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;https://forums.oracle.com/thread/1351452&quot;&gt;Swing - JList where mouse click acts like ctrl-mouse click&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list = new JList(model) {
  @Override protected void processMouseMotionEvent(MouseEvent e) {
    super.processMouseMotionEvent(convertMouseEvent(e));
  }
  @Override protected void processMouseEvent(MouseEvent e) {
    if(e.getID()==MouseEvent.MOUSE_PRESSED &amp;amp;&amp;amp;
       !getCellBounds(0, getModel().getSize()-1).contains(e.getPoint())) {
      e.consume();
      requestFocusInWindow();
    }else{
      super.processMouseEvent(convertMouseEvent(e));
    }
  }
  private MouseEvent convertMouseEvent(MouseEvent e) {
    //Swing - JList where mouse click acts like ctrl-mouse click
    //https://forums.oracle.com/thread/1351452
    return new MouseEvent(
      (Component) e.getSource(),
      e.getID(), e.getWhen(),
      //e.getModifiers() | InputEvent.CTRL_MASK,
      //select multiple objects in OS X: Command+click
      //pointed out by nsby
      e.getModifiers() | Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(),
      e.getX(), e.getY(),
      e.getXOnScreen(), e.getYOnScreen(),
      e.getClickCount(),
      e.isPopupTrigger(),
      e.getButton());
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;右: &lt;code&gt;SelectionInterval&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#setSelectionInterval&lt;/code&gt;をオーバーライドして、ひとつのアイテムのセルを選択した場合は、&lt;code&gt;JList#addSelectionInterval&lt;/code&gt;、&lt;code&gt;JList#removeSelectionInterval&lt;/code&gt;を使用するように変更&lt;/li&gt;
&lt;li&gt;マウスでアイテムをドラッグすると、選択状態になる&lt;/li&gt;
&lt;li&gt;ひとつのアイテムのセル内でのドラッグでは、選択状態を変更しない&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;https://forums.oracle.com/thread/1351452#5694413&quot;&gt;Swing - Re: JList where mouse click acts like ctrl-mouse click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JList&lt;/code&gt;の空白部分をクリックした場合、アイテムの選択状態をすべてクリア(&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSelection.html&quot;&gt;JListの選択を解除&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1351452&quot;&gt;Swing - JList where mouse click acts like ctrl-mouse click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSelection.html&quot;&gt;JListの選択を解除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxCellList.html&quot;&gt;JListのセルにJCheckBoxを使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OSX(snow leopard)&lt;/code&gt;では、&lt;code&gt;MouseEvent&lt;/code&gt;は複数選択が出来ません。キーボードを使っても(&lt;kbd&gt;command&lt;/kbd&gt;+クリック)無理でした。 -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-20 (水) 13:15:30

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。&lt;code&gt;OSX&lt;/code&gt;では「&lt;kbd&gt;command&lt;/kbd&gt;+クリック」で複数選択でしたっけ？ &lt;code&gt;InputEvent.CTRL_MASK&lt;/code&gt;決め打ちではなく、&lt;code&gt;Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()&lt;/code&gt;に修正した方がいいのかもしれません(ソースなどを更新しましたが、正常に動作するかは確認していません…)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-20 (水) 19:33:29&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;でもう一度実行してみましたが、やはり出来ませんでした。&lt;code&gt;MouseEvent&lt;/code&gt;で複数選択ha -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-22 (金) 15:59:14&lt;/li&gt;
&lt;li&gt;あ、変な所で切れてしまいました。すみません。あらためて、&lt;code&gt;MouseEvent&lt;/code&gt;で複数選択出来るのは、&lt;kbd&gt;Shift&lt;/kbd&gt;+クリックで選択した場合のみです。それ意外はダメでした。(&lt;kbd&gt;Ctrl&lt;/kbd&gt;+クリックとかでもダメ) -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-22 (金) 16:02:20

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;のキャッシュは、…関係なさそうですね。&lt;code&gt;src.zip&lt;/code&gt;をダウンロードして&lt;code&gt;JList#processMouseEvent(...)&lt;/code&gt;内で、&lt;code&gt;System.out.println(e);&lt;/code&gt;したり&lt;code&gt;super.processMouseEvent(convertMouseEvent(e));&lt;/code&gt;だけにしてみるとどうなるでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-24 (日) 07:58:36&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MouseEvent e&lt;/code&gt;を出力してみました。ちゃんと処理してるように見えるんですが・・・&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() : 0x04 InputEvent.CTRL_MASK : 0x02
[ただのクリック]
java.awt.event.MouseEvent[MOUSE_PRESSED,(57,4),absolute(971,484),button=1,modifiers=Button1,extModifiers=Button1,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alignmentY
=0.0,border=,flags=50331944,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFactory$Sy
stemColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x10

java.awt.event.MouseEvent[MOUSE_RELEASED,(57,4),absolute(971,484),button=1,modifiers=Button1,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alignmentY=0.0,border=,flags=5
0331944,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=39,
g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x10

java.awt.event.MouseEvent[MOUSE_CLICKED,(57,4),absolute(971,484),button=1,modifiers=Button1,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alignmentY=0.0,border=,flags=50
331944,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=39,g
=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x10

[Cntl + クリック]
java.awt.event.MouseEvent[MOUSE_PRESSED,(57,40),absolute(971,520),button=1,modifiers=?+Button1,extModifiers=?+Button1,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,align
mentY=0.0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFacto
ry$SystemColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x12

java.awt.event.MouseEvent[MOUSE_RELEASED,(57,40),absolute(971,520),button=1,modifiers=?+Button1,extModifiers=?,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alignmentY=0
.0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFactory$Syst
emColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x12

java.awt.event.MouseEvent[MOUSE_CLICKED,(57,40),absolute(971,520),button=1,modifiers=?+Button1,extModifiers=?,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alignmentY=0.
0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFactory$Syste
mColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x12

[Command + クリック]
java.awt.event.MouseEvent[MOUSE_PRESSED,(56,72),absolute(970,552),button=1,modifiers=?+Button1+Button3,extModifiers=?+Button1,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0
.0,alignmentY=0.0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaIm
ageFactory$SystemColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x14

java.awt.event.MouseEvent[MOUSE_RELEASED,(56,72),absolute(970,552),button=1,modifiers=?+Button1+Button3,extModifiers=?,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,alig
nmentY=0.0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFact
ory$SystemColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x14

java.awt.event.MouseEvent[MOUSE_CLICKED,(56,72),absolute(970,552),button=1,modifiers=?+Button1+Button3,extModifiers=?,clickCount=1] on example.MainPanel$1[,0,0,106x193,alignmentX=0.0,align
mentY=0.0,border=,flags=50332008,maximumSize=,minimumSize=,preferredSize=,fixedCellHeight=-1,fixedCellWidth=-1,horizontalScrollIncrement=-1,selectionBackground=com.apple.laf.AquaImageFacto
ry$SystemColorProxy[r=39,g=118,b=218],selectionForeground=com.apple.laf.AquaImageFactory$SystemColorProxy[r=255,g=255,b=255],visibleRowCount=8,layoutOrientation=0] e.getModifiers() : 0x14
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ちなみに &lt;code&gt;e.getModifiers() | Toolkit.getDefaultToolkit().getMenuShortcutKeyMask(),&lt;/code&gt;を&lt;code&gt;e.getModifiers() | 0x01&lt;/code&gt;, &lt;code&gt;#0x01&lt;/code&gt;は &lt;kbd&gt;Shift&lt;/kbd&gt;とかに無理矢理するとクリックだけで&lt;kbd&gt;Shift&lt;/kbd&gt;と同じ動作になるんですけどね・・・。もう意味が分かりません。 -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-27 (水) 10:52:51&lt;/li&gt;
&lt;li&gt;あら見づらくなりすみません。 -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-27 (水) 10:54:02&lt;/li&gt;
&lt;li&gt;ようするに、&lt;code&gt;convertMouseEvent&lt;/code&gt;内の&lt;code&gt;e.getModifiers()&lt;/code&gt;に&lt;code&gt;0x02/0x04&lt;/code&gt;を&lt;code&gt;or&lt;/code&gt;しても&lt;code&gt;OSX&lt;/code&gt;では無視されてるようです。なぜなんでしょう？ -- &lt;a href=&quot;http://terai.xrea.jp/nsby.html&quot;&gt;nsby&lt;/a&gt; 2011-07-27 (水) 10:58:53

&lt;ul&gt;
&lt;li&gt;ログ(勝手にすこし整形しました)どうもです。たしかにうまくいっているっぽいのに、不思議な感じですね。 &lt;del&gt;&lt;code&gt;InputEvent.CTRL_DOWN_MASK&lt;/code&gt;と&lt;code&gt;InputEvent.CTRL_MASK&lt;/code&gt;の違い？&lt;/del&gt; もうすこし調べてみます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-27 (水) 15:04:05&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Java 8&lt;/code&gt;で修正されているかも？ &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7170657&quot;&gt;Bug ID: JDK-7170657 macosx - There seems to be no keyboard/mouse action to select non-contiguous items in List&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-08-12 (火) 02:10:09&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://developer.apple.com/jp/technotes/tn2042.html&quot;&gt;Tailoring Java Applications for Mac OS X&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-27 (水) 15:18:46&lt;/li&gt;
&lt;li&gt;ドラッグによる&lt;code&gt;JList&lt;/code&gt;の複数選択は、&lt;a href=&quot;http://terai.xrea.jp/Swing/RubberBanding.html&quot;&gt;JListのアイテムを範囲指定で選択&lt;/a&gt;を使用する方法もあります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-30 (水) 15:18:25&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/listmouseselection</link>
                <guid>http://terai.xrea.jp/swing/listmouseselection</guid>
                <pubDate>2011-07-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのItemをTree状に表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストに表示する&lt;code&gt;Item&lt;/code&gt;を&lt;code&gt;Tree&lt;/code&gt;状に配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-5GlQEjeLoH8/ThqUIL9b4UI/AAAAAAAAA_E/9h5dxYzSSm8/s800/TreeComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TreeComboBox extends JComboBox {
  public TreeComboBox() {
    super();
    setRenderer(new DefaultListCellRenderer() {
      @Override public Component getListCellRendererComponent(
          JList list, Object value, int index,
          boolean isSelected, boolean cellHasFocus) {
        JComponent c;
        if(value instanceof DefaultMutableTreeNode) {
          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;
          int indent = 2 + (index&amp;lt;0?0:(node.getPath().length-2)*16);
          if(node.isLeaf()) {
            c = (JComponent)super.getListCellRendererComponent(
                list,value,index,isSelected,cellHasFocus);
          }else{
            c = (JComponent)super.getListCellRendererComponent(
                list,value,index,false,false);
            JLabel l = (JLabel)c;
            l.setForeground(Color.WHITE);
            l.setBackground(Color.GRAY.darker());
          }
          c.setBorder(BorderFactory.createEmptyBorder(0,indent,0,0));
        }else{
          c = (JComponent)super.getListCellRendererComponent(
              list,value,index,isSelected,cellHasFocus);
        }
        return c;
      }
    });
    Action up = new AbstractAction() {
      @Override public void actionPerformed(ActionEvent e) {
        int si = getSelectedIndex();
        for(int i = si-1;i&amp;gt;=0;i--) {
          Object o = getItemAt(i);
          if(o instanceof TreeNode &amp;amp;&amp;amp; ((TreeNode)o).isLeaf()) {
            setSelectedIndex(i);
            break;
          }
        }
      }
    };
    Action down = new AbstractAction() {
      @Override public void actionPerformed(ActionEvent e) {
        int si = getSelectedIndex();
        for(int i = si+1;i&amp;lt;getModel().getSize();i++) {
          Object o = getItemAt(i);
          if(o instanceof TreeNode &amp;amp;&amp;amp; ((TreeNode)o).isLeaf()) {
            setSelectedIndex(i);
            break;
          }
        }
      }
    };
    ActionMap am = getActionMap();
    am.put(&quot;selectPrevious3&quot;, up);
    am.put(&quot;selectNext3&quot;, down);
    InputMap im = getInputMap();
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),      &quot;selectPrevious3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),   &quot;selectPrevious3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),    &quot;selectNext3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0), &quot;selectNext3&quot;);
  }
  private boolean isNotSelectableIndex = false;
  @Override public void setPopupVisible(boolean v) {
    if(!v &amp;amp;&amp;amp; isNotSelectableIndex) {
      isNotSelectableIndex = false;
    }else{
      super.setPopupVisible(v);
    }
  }
  @Override public void setSelectedIndex(int index) {
    Object o = getItemAt(index);
    if(o instanceof TreeNode &amp;amp;&amp;amp; !((TreeNode)o).isLeaf()) {
      isNotSelectableIndex = true;
    }else{
      super.setSelectedIndex(index);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;TreeModel&lt;/code&gt;から取得した&lt;code&gt;TreeNode&lt;/code&gt;を&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Item&lt;/code&gt;として、ドロップダウンリストに表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TreeNode#isLeaf()&lt;/code&gt;の場合だけ、選択可能

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableItemComboBox.html&quot;&gt;JComboBoxのアイテムを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;子要素のインデントは&lt;code&gt;BorderFactory.createEmptyBorder(0,indent,0,0)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/tree_inside_jcombobox&quot;&gt;Tree inside JComboBox - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらで解説されているサンプルでは、&lt;code&gt;TreeCellRenderer&lt;/code&gt;を使っているのでノードアイコンなども&lt;code&gt;JTree&lt;/code&gt;のものを表示できるようになっています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableItemComboBox.html&quot;&gt;JComboBoxのアイテムを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src.zip&lt;/code&gt;などが正しいディレクトリに配置されてなかったのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-13 (水) 19:02:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/treecombobox</link>
                <guid>http://terai.xrea.jp/swing/treecombobox</guid>
                <pubDate>2011-07-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FileSystemViewを使ってディレクトリ構造をJTreeに表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FileSystemView&lt;/code&gt;を使ってディレクトリ構造を&lt;code&gt;JTree&lt;/code&gt;上に表示します。主に&lt;a href=&quot;http://stackoverflow.com/questions/6182110/file-browser-gui&quot;&gt;java - File Browser GUI - Stack Overflow&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DirectoryTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-FkX-8X4KxDo/ThFoeY8M64I/AAAAAAAAA-Y/Ry_RA9yVCxc/s800/DirectoryTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class FolderSelectionListener implements TreeSelectionListener{
  private final FileSystemView fileSystemView;
  public FolderSelectionListener(FileSystemView fileSystemView) {
    this.fileSystemView = fileSystemView;
  }
  @Override public void valueChanged(TreeSelectionEvent e) {
    final JTree tree = (JTree)e.getSource();
    final DefaultMutableTreeNode node =
      (DefaultMutableTreeNode)e.getPath().getLastPathComponent();
    final DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
    //final TreePath path = e.getPath();

    if(!node.isLeaf()) return;
    final File parent = (File)node.getUserObject();
    if(!parent.isDirectory()) return;

    SwingWorker&amp;lt;String, File&amp;gt; worker = new SwingWorker&amp;lt;String, File&amp;gt;() {
      @Override public String doInBackground() {
        File[] children = fileSystemView.getFiles(parent, true);
        for(File child: children) {
          if(child.isDirectory()) {
            publish(child);
          }
        }
        return &quot;done&quot;;
      }
      @Override protected void process(java.util.List&amp;lt;File&amp;gt; chunks) {
        for(File file: chunks) {
          node.add(new DefaultMutableTreeNode(file));
        }
        model.nodeStructureChanged(node);
        //tree.expandPath(path);
      }
    };
    worker.execute();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;このサンプルでは、&lt;a href=&quot;http://stackoverflow.com/questions/6182110/file-browser-gui&quot;&gt;java - File Browser GUI - Stack Overflow&lt;/a&gt;のディレクトリ表示部分を抜き出して、ルートパーティション(&lt;code&gt;Windows&lt;/code&gt;の場合、&lt;code&gt;Desktop&lt;/code&gt;フォルダ)をルートノードにして&lt;code&gt;JTree&lt;/code&gt;で表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;クリックされたノードがディレクトリだった場合、子ファイルの検索と&lt;code&gt;JTree&lt;/code&gt;へのそれらの追加が&lt;code&gt;SwingWorker&lt;/code&gt;を使って別々のスレッドで行われます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/filechooser/FileSystemView.html&quot;&gt;FileSystemView (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6182110/file-browser-gui&quot;&gt;java - File Browser GUI - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pushing-pixels.org/2007/07/22/showing-the-file-system-as-a-swing-jtree.html&quot;&gt;Showing the file system as a Swing JTree ・ Pushing Pixels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/directorytree</link>
                <guid>http://terai.xrea.jp/swing/directorytree</guid>
                <pubDate>2011-07-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>LayoutManagerを拡張して曲線上にコンポーネントを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;LayoutManager&lt;/code&gt;を拡張して曲線上にコンポーネントを配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CurveLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-Rww2mulIVEI/TggO-rFh_2I/AAAAAAAAA98/R3ZVsfyu3IU/s800/CurveLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final double A2 = 4.0;
panel2.setLayout(new FlowLayout() {
  @Override public void layoutContainer(Container target) {
    synchronized(target.getTreeLock()) {
      Insets insets = target.getInsets();
      int nmembers  = target.getComponentCount();
      if(nmembers&amp;lt;=0) return;
      int vgap = getVgap();
      int hgap = getHgap();
      int rowh = (target.getHeight()-(insets.top+insets.bottom+vgap*2))/nmembers;
      int x = insets.left + hgap;
      int y = insets.top  + vgap;
      for(int i=0;i&amp;lt;nmembers;i++) {
        Component m = target.getComponent(i);
        if(m.isVisible()) {
          Dimension d = m.getPreferredSize();
          m.setSize(d.width, d.height);
          m.setLocation(x, y);
          y += (vgap + Math.min(rowh, d.height));
          x = (int)(A2 * Math.sqrt(y));
        }
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;panel1 = new JPanel(new FlowLayout(FlowLayout.LEFT));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FlowLayout#layoutContainer(...)&lt;/code&gt;をオーバーライドして、二次曲線の上にコンポーネントを並べる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/curvelayout</link>
                <guid>http://terai.xrea.jp/swing/curvelayout</guid>
                <pubDate>2011-06-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableCellEditorをスクロール可能にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;TableCellEditor&lt;/code&gt;として、&lt;code&gt;JTextArea&lt;/code&gt;と&lt;code&gt;JScrollPane&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollingCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-DDRbJ9WhSJk/Tf7btYjUE7I/AAAAAAAAA9s/yVKIKC55zIw/s800/ScrollingCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TextAreaCellEditor extends JTextArea implements TableCellEditor {
  private final JScrollPane scroll;
  public TextAreaCellEditor() {
    scroll = new JScrollPane(this);
    setLineWrap(true);
    KeyStroke enter = KeyStroke.getKeyStroke(
        KeyEvent.VK_ENTER, InputEvent.CTRL_MASK);
    getInputMap(JComponent.WHEN_FOCUSED).put(enter, new AbstractAction() {
      @Override public void actionPerformed(ActionEvent e) {
        stopCellEditing();
      }
    });
  }
  @Override public Object getCellEditorValue() {
    return getText();
  }
  @Override public Component getTableCellEditorComponent(
      JTable table, Object value, boolean isSelected, int row, int column) {
    setFont(table.getFont());
    setText((value!=null)?value.toString():&quot;&quot;);
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        setCaretPosition(getText().length());
        requestFocusInWindow();
      }
    });
    return scroll;
  }
  @Override public boolean isCellEditable(final EventObject e) {
    if(e instanceof MouseEvent) {
      return ((MouseEvent)e).getClickCount() &amp;gt;= 2;
    }
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        if(e instanceof KeyEvent) {
          KeyEvent ke = (KeyEvent)e;
          char kc = ke.getKeyChar();
          if(Character.isUnicodeIdentifierStart(kc)) {
            setText(getText()+kc);
          }
        }
      }
    });
    return true;
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;0&lt;/code&gt;列目にデフォルトの&lt;code&gt;TableCellEditor(JTextField)&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;列目に&lt;code&gt;JTextArea&lt;/code&gt;を継承した&lt;code&gt;TableCellEditor&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableCellEditor#isCellEditable&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;マウスのダブルクリックで編集開始&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableCellEditor#getTableCellEditorComponent&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;に現在表示されているセル文字列をコピーし、戻り値の&lt;code&gt;Component&lt;/code&gt;として、&lt;code&gt;JScrollPane&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableCellEditor#isCellEditable&lt;/code&gt;, &lt;code&gt;EventQueue.invokeLater&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;キー入力で編集開始した場合、その入力を&lt;code&gt;JTextArea&lt;/code&gt;の文字列末尾に追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableCellEditor#getTableCellEditorComponent&lt;/code&gt;, &lt;code&gt;EventQueue.invokeLater&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;にフォーカスを移動し、&lt;code&gt;JTextArea&lt;/code&gt;のキャレットも文字列末尾に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CellEditorLayout.html&quot;&gt;TableCellEditorのレイアウトを変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableCellRenderer.html&quot;&gt;JTableのセル幅で文字列を折り返し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollingcelleditor</link>
                <guid>http://terai.xrea.jp/swing/scrollingcelleditor</guid>
                <pubDate>2011-06-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SwingWorkerで複数のJProgressBarを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ひとつの&lt;code&gt;SwingWorker&lt;/code&gt;で、進捗を表示する&lt;code&gt;JProgressBar&lt;/code&gt;をふたつ使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TwoProgressBars&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/-S6ko35_DIi8/TfWPa08dHvI/AAAAAAAAA9I/MNhC-0LF8YQ/s800/TwoProgressBars.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;enum Component { TOTAL, FILE, LOG }
class Progress {
  public final Object value;
  public final Component component;
  public Progress(Component component, Object value) {
    this.component = component;
    this.value = value;
  }
}
//...
worker = new SwingWorker&amp;lt;String, Progress&amp;gt;() {
  @Override public String doInBackground() {
    int current = 0;
    int lengthOfTask = 12; //filelist.size();
    publish(new Progress(Component.LOG, &quot;Length Of Task: &quot; + lengthOfTask));
    publish(new Progress(Component.LOG, &quot;\n------------------------------\n&quot;));
    while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
      if(!bar1.isDisplayable()) {
        return &quot;Disposed&quot;;
      }
      try{
        convertFileToSomething();
      }catch(InterruptedException ie) {
        return &quot;Interrupted&quot;;
      }
      publish(new Progress(Component.LOG, &quot;*&quot;));
      publish(new Progress(Component.TOTAL, 100 * current / lengthOfTask));
      current++;
    }
    publish(new Progress(Component.LOG, &quot;\n&quot;));
    return &quot;Done&quot;;
  }
  private final Random r = new Random();
  private void convertFileToSomething() throws InterruptedException{
    int current = 0;
    int lengthOfTask = 10+r.nextInt(50); //long lengthOfTask = file.length();
    while(current&amp;lt;=lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
      int iv = 100 * current / lengthOfTask;
      Thread.sleep(20); // dummy
      publish(new Progress(Component.FILE, iv+1));
      current++;
    }
  }
  @Override protected void process(java.util.List&amp;lt;Progress&amp;gt; chunks) {
    for(Progress s: chunks) {
      switch(s.component) {
        case TOTAL: bar1.setValue((Integer)s.value); break;
        case FILE:  bar2.setValue((Integer)s.value); break;
        case LOG:  area.append((String)s.value); break;
      }
    }
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、デフォルトで用意されている&lt;code&gt;SwingWorker#setProgress(int)&lt;/code&gt;は使用せず、以下の&lt;code&gt;3&lt;/code&gt;つのコンポーネントの状態を表す&lt;code&gt;Progress&lt;/code&gt;クラスを作成し、これを&lt;code&gt;SwingWorker&amp;lt;String, Progress&amp;gt;#publish(Progress)&lt;/code&gt;メソッドに与えて&lt;code&gt;EDT&lt;/code&gt;上でそれぞれの状態を更新しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全体の進捗を表示する&lt;code&gt;JProgressBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;個々のファイル処理(このサンプルでは&lt;code&gt;Thread.sleep&lt;/code&gt;するだけのダミー)の進捗を表示する&lt;code&gt;JProgressBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ログを表示する&lt;code&gt;JTextArea&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;SwingWorker&lt;/code&gt;に別の&lt;code&gt;PropertyChangeListener&lt;/code&gt;を追加して使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;worker.firePropertyChange(&quot;file-progress&quot;, iv, iv+1);
//...
class SubProgressListener implements PropertyChangeListener {
  private final JProgressBar progressBar;
  public SubProgressListener(JProgressBar progressBar) {
    this.progressBar = progressBar;
    this.progressBar.setValue(0);
  }
  @Override public void propertyChange(PropertyChangeEvent e) {
    String strPropertyName = e.getPropertyName();
    if(&quot;file-progress&quot;.equals(strPropertyName)) {
      int progress = (Integer)e.getNewValue();
      progressBar.setValue(progress);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SwingWorker.html&quot;&gt;SwingWorkerを使った処理の中断と進捗状況表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PauseResumeSwingWorker.html&quot;&gt;SwingWorkerの一時停止と再開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/twoprogressbars</link>
                <guid>http://terai.xrea.jp/swing/twoprogressbars</guid>
                <pubDate>2011-06-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableがデフォルトでソートする列を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;がデフォルトでソートする列とその方向を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DefaultSortingColumn&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-qvzRq_TxwSg/Texuvm22ELI/AAAAAAAAA84/DhfjZ3TEATk/s800/DefaultSortingColumn.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model);
table.setAutoCreateRowSorter(true);
int index = 0;
//table.getRowSorter().toggleSortOrder(index); //SortOrder.ASCENDING
table.getRowSorter().setSortKeys(
    Arrays.asList(new RowSorter.SortKey(index, SortOrder.DESCENDING)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;RowSorter#setSortKeys(...)&lt;/code&gt;を使って、指定の列のソート順序(ここでは、&lt;code&gt;0&lt;/code&gt;列目を&lt;code&gt;SortOrder.DESCENDING&lt;/code&gt;で降順)のリストを設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RowSorter#setSortKeys(null)&lt;/code&gt;で、ソート無し状態になる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSortingState.html&quot;&gt;TableRowSorterのSortKeysをクリアする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;table.getRowSorter().toggleSortOrder(index)&lt;/code&gt;を一回で昇順、二回で降順に設定する方法もあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSortingState.html&quot;&gt;TableRowSorterのSortKeysをクリアする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/defaultsortingcolumn</link>
                <guid>http://terai.xrea.jp/swing/defaultsortingcolumn</guid>
                <pubDate>2011-06-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの罫線の有無とセルの内余白を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の罫線の表示非表示とセルの内余白を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IntercellSpacing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-zDg_KUxGwU4/TeNHkhhJYGI/AAAAAAAAA8M/G5R8rKLVzUg/s800/IntercellSpacing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;add(new JCheckBox(new AbstractAction(&quot;setShowVerticalLines&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    Dimension d = table.getIntercellSpacing();
    if(((JCheckBox)e.getSource()).isSelected()) {
      table.setShowVerticalLines(true);
      table.setIntercellSpacing(new Dimension(1, d.height));
    }else{
      table.setShowVerticalLines(false);
      table.setIntercellSpacing(new Dimension(0, d.height));
    }
  }
}));
add(new JCheckBox(new AbstractAction(&quot;setShowHorizontalLines&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    Dimension d = table.getIntercellSpacing();
    if(((JCheckBox)e.getSource()).isSelected()) {
      table.setShowHorizontalLines(true);
      table.setIntercellSpacing(new Dimension(d.width, 1));
    }else{
      table.setShowHorizontalLines(false);
      table.setIntercellSpacing(new Dimension(d.width, 0));
    }
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の罫線を非表示にしてもセルの内余白が&lt;code&gt;0&lt;/code&gt;でない場合、選択状態でその内余白が表示されるので、上記のサンプルでは、&lt;code&gt;JTable#setShowVerticalLines(boolean)&lt;/code&gt;などと一緒に、&lt;code&gt;JTable#setIntercellSpacing(Dimension)&lt;/code&gt;で余白を&lt;code&gt;0&lt;/code&gt;に切り替えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;罫線

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setShowVerticalLines(boolean);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#setShowHorizontalLines(boolean);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;セルの内余白

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setIntercellSpacing(Dimension intercellSpacing);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setRowMargin(intercellSpacing.height);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#getColumnModel().setColumnMargin(intercellSpacing.width);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/intercellspacing</link>
                <guid>http://terai.xrea.jp/swing/intercellspacing</guid>
                <pubDate>2011-05-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderのスタイルを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;のトラックとノブを透明にし、値を半透明の色で描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GradientTrackSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TdnxSfPEQLI/AAAAAAAAA7k/vYTnJ_FPktg/s800/GradientTrackSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;Slider.horizontalThumbIcon&quot;, new Icon() {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {}
  @Override public int getIconWidth()  { return 15; }
  @Override public int getIconHeight() { return 64; }
});
UIManager.put(&quot;Slider.trackWidth&quot;, 64);
UIManager.put(&quot;Slider.majorTickLength&quot;, 6);

JSlider slider = makeSlider();
slider.setUI(new MetalSliderUI() {
  int[] pallet = makeGradientPallet();
  @Override public void paintTrack(Graphics g) {
    //Color trackColor = !slider.isEnabled()
    //  ? MetalLookAndFeel.getControlShadow() : slider.getForeground();
    boolean leftToRight = true; //MetalUtils.isLeftToRight(slider);
    Color controlDarkShadow = Color.GRAY;
    Color controlHighlight = new Color(200,255,200);
    Color controlShadow = new Color(0,100,0);

    g.translate( trackRect.x, trackRect.y );

    int trackLeft = 0;
    int trackTop = 0;
    int trackRight = 0;
    int trackBottom = 0;

    // Draw the track
    if(slider.getOrientation() == JSlider.HORIZONTAL) {
      trackBottom = (trackRect.height - 1) - getThumbOverhang();
      trackTop = trackBottom - (getTrackWidth() - 1);
      trackRight = trackRect.width - 1;
    }else{
      if(leftToRight) {
        trackLeft = (trackRect.width - getThumbOverhang()) - getTrackWidth();
        trackRight = (trackRect.width - getThumbOverhang()) - 1;
      }else{
        trackLeft = getThumbOverhang();
        trackRight = getThumbOverhang() + getTrackWidth() - 1;
      }
      trackBottom = trackRect.height - 1;
    }

    if(slider.isEnabled()) {
      g.setColor(controlDarkShadow);
      g.drawRect(trackLeft, trackTop,
                 (trackRight - trackLeft) - 1, (trackBottom - trackTop) - 1);

      g.setColor(controlHighlight);
      g.drawLine(trackLeft + 1, trackBottom, trackRight, trackBottom);
      g.drawLine(trackRight, trackTop + 1, trackRight, trackBottom);

      g.setColor(controlShadow);
      g.drawLine(trackLeft + 1, trackTop + 1, trackRight - 2, trackTop + 1);
      g.drawLine(trackLeft + 1, trackTop + 1, trackLeft + 1, trackBottom - 2);
    } else {
      g.setColor(controlShadow);
      g.drawRect(trackLeft, trackTop,
                 (trackRight - trackLeft) - 1, (trackBottom - trackTop) - 1);
    }

    // Draw the fill
    int middleOfThumb = 0;
    int fillTop = 0;
    int fillLeft = 0;
    int fillBottom = 0;
    int fillRight = 0;

    if(slider.getOrientation() == JSlider.HORIZONTAL) {
      middleOfThumb = thumbRect.x + (thumbRect.width / 2);
      middleOfThumb -= trackRect.x; // To compensate for the g.translate()
      fillTop = !slider.isEnabled() ? trackTop : trackTop + 1;
      fillBottom = !slider.isEnabled() ? trackBottom - 1 : trackBottom - 2;

      if(!drawInverted()) {
        fillLeft = !slider.isEnabled() ? trackLeft : trackLeft + 1;
        fillRight = middleOfThumb;
      }else{
        fillLeft = middleOfThumb;
        fillRight = !slider.isEnabled() ? trackRight - 1 : trackRight - 2;
      }
    }else{
      middleOfThumb = thumbRect.y + (thumbRect.height / 2);
      middleOfThumb -= trackRect.y; // To compensate for the g.translate()
      fillLeft = !slider.isEnabled() ? trackLeft : trackLeft + 1;
      fillRight = !slider.isEnabled() ? trackRight - 1 : trackRight - 2;

      if(!drawInverted()) {
        fillTop = middleOfThumb;
        fillBottom = !slider.isEnabled() ? trackBottom - 1 : trackBottom - 2;
      }else{
        fillTop = !slider.isEnabled() ? trackTop : trackTop + 1;
        fillBottom = middleOfThumb;
      }
    }

    if(slider.isEnabled()) {
      g.setColor(slider.getBackground());
      g.drawLine(fillLeft, fillTop, fillRight, fillTop );
      g.drawLine(fillLeft, fillTop, fillLeft, fillBottom );

      double x = (fillRight - fillLeft) / (double)(trackRight - trackLeft);
      g.setColor(getColorFromPallet(pallet, x));
      g.fillRect(fillLeft+1,fillTop+1,fillRight-fillLeft,fillBottom-fillTop);
    }else{
      g.setColor(controlShadow);
      g.fillRect(fillLeft,fillTop,fillRight-fillLeft,trackBottom-trackTop);
    }

    int yy = trackTop + (trackBottom - trackTop) /2;
    for(int i=10;i&amp;gt;=0;i--) {
      g.setColor( new Color(1f,1f,1f,i*0.07f) );
      g.drawLine( trackLeft+2, yy, (trackRight - trackLeft), yy );
      yy--;
    }
    g.translate(-trackRect.x, -trackRect.y);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;MetalSliderUI#paintTrack(...)&lt;/code&gt;メソッドをオーバーライドした&lt;code&gt;SliderUI&lt;/code&gt;を設定するなどして、&lt;code&gt;JSlider&lt;/code&gt;の各スタイルを変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Track&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider#setOpaque(false)&lt;/code&gt;で透明化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalSliderUI#paintTrack(...)&lt;/code&gt;内で、&lt;code&gt;Fill&lt;/code&gt;の後でハイライトを描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thumb&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;Slider.horizontalThumbIcon&amp;quot;, emptyIcon)&lt;/code&gt;で、空のアイコンを設定して非表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fill&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalSliderUI#paintTrack(...)&lt;/code&gt;内で、値に応じて&lt;code&gt;LinearGradientPaint&lt;/code&gt;から作成した色で描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static int[] makeGradientPallet() {
  BufferedImage image = new BufferedImage(100, 1, BufferedImage.TYPE_INT_RGB);
  Graphics2D g2  = image.createGraphics();
  Point2D start  = new Point2D.Float(0f, 0f);
  Point2D end  = new Point2D.Float(99f, 0f);
  float[] dist   = {0.0f, 0.5f, 1.0f};
  Color[] colors = { Color.RED, Color.YELLOW, Color.GREEN };
  g2.setPaint(new LinearGradientPaint(start, end, dist, colors));
  g2.fillRect(0, 0, 100, 1);
  int width  = image.getWidth(null);
  int[] pallet = new int[width];
  PixelGrabber pg = new PixelGrabber(image, 0, 0, width, 1, pallet, 0, width);
  try{
    pg.grabPixels();
  }catch(Exception e) {
    e.printStackTrace();
  }
  return pallet;
}
private static Color getColorFromPallet(int[] pallet, float x) {
  int i = (int)(pallet.length * x);
  int max = pallet.length-1;
  int index = i&amp;lt;0?0:i&amp;gt;max?max:i;
  int pix = pallet[index] &amp;amp; 0x00ffffff | (0x64 &amp;lt;&amp;lt; 24);
  return new Color(pix, true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;メモ: 例えば&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;では、&lt;code&gt;UIManager.get(&amp;quot;Slider.trackWidth&amp;quot;)&lt;/code&gt;は&lt;code&gt;null&lt;/code&gt;なので、&lt;code&gt;MetalSliderUI#installUI()&lt;/code&gt;中にある以下のコードでエラーになる。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;trackWidth = ((Integer)UIManager.get(&quot;Slider.trackWidth&quot;)).intValue();
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;なぜ&lt;code&gt;UIManager.getInt(...)&lt;/code&gt;ではないのか不明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;Slider.majorTickLength&amp;quot;, 6);&lt;/code&gt;などで回避&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalSliderUI&lt;/code&gt;ではなく、&lt;code&gt;BasicSliderUI&lt;/code&gt;を継承するぺき？&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://harmoniccode.blogspot.com/2011/05/varying-gradients.html&quot;&gt;Harmonic Code: Varying gradients...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/gradienttrackslider</link>
                <guid>http://terai.xrea.jp/swing/gradienttrackslider</guid>
                <pubDate>2011-05-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarのButtonの位置を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;Button&lt;/code&gt;の位置を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollBarButtonLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TdC-jTZ434I/AAAAAAAAA7I/cnbdjlwODJg/s800/ScrollBarButtonLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scrollbar.setUI(new WindowsScrollBarUI() {
  //Quote from javax.swing.plaf.basic.BasicScrollBarUI
  @Override protected void layoutVScrollbar(JScrollBar sb) {
    Dimension sbSize = sb.getSize();
    Insets sbInsets = sb.getInsets();

    /*
     * Width and left edge of the buttons and thumb.
     */
    int itemW = sbSize.width - (sbInsets.left + sbInsets.right);
    int itemX = sbInsets.left;

    /* Nominal locations of the buttons, assuming their preferred
     * size will fit.
     */
    boolean squareButtons = false;
    //DefaultLookup.getBoolean(scrollbar, this, &quot;ScrollBar.squareButtons&quot;, false);
    int decrButtonH = squareButtons
      ? itemW : decrButton.getPreferredSize().height;
    int incrButtonH = squareButtons
      ? itemW : incrButton.getPreferredSize().height;

    //int decrButtonY = sbInsets.top;
    int decrButtonY = sbSize.height - (sbInsets.bottom + incrButtonH + decrButtonH);
    int incrButtonY = sbSize.height - (sbInsets.bottom + incrButtonH);

    /* The thumb must fit within the height left over after we
     * subtract the preferredSize of the buttons and the insets
     * and the gaps
     */
    int sbInsetsH = sbInsets.top + sbInsets.bottom;
    int sbButtonsH = decrButtonH + incrButtonH;

    //need before 1.7.0 ----&amp;gt;
    int decrGap = 0; //ins
    int incrGap = 0; //ins
    //incrGap = UIManager.getInt(&quot;ScrollBar.incrementButtonGap&quot;);
    //decrGap = UIManager.getInt(&quot;ScrollBar.decrementButtonGap&quot;);
    //&amp;lt;----

    int gaps = decrGap + incrGap;
    float trackH = sbSize.height - (sbInsetsH + sbButtonsH) - gaps;

    /* Compute the height and origin of the thumb.   The case
     * where the thumb is at the bottom edge is handled specially
     * to avoid numerical problems in computing thumbY.  Enforce
     * the thumbs min/max dimensions.  If the thumb doesn&#39;t
     * fit in the track (trackH) we&#39;ll hide it later.
     */
    float min = sb.getMinimum();
    float extent = sb.getVisibleAmount();
    float range = sb.getMaximum() - min;
    //float value = getValue(sb); //del
    float value = sb.getValue(); //ins

    int thumbH = (range &amp;lt;= 0) ? getMaximumThumbSize().height
                              : (int)(trackH * (extent / range));
    thumbH = Math.max(thumbH, getMinimumThumbSize().height);
    thumbH = Math.min(thumbH, getMaximumThumbSize().height);

    int thumbY = incrButtonY - incrGap - thumbH;
    if(value &amp;lt; (sb.getMaximum() - sb.getVisibleAmount())) {
      float thumbRange = trackH - thumbH;
      thumbY = (int)(0.5f + (thumbRange * ((value - min) / (range - extent))));
      //thumbY +=  decrButtonY + decrButtonH + decrGap; //del
    }

    /* If the buttons don&#39;t fit, allocate half of the available
     * space to each and move the lower one (incrButton) down.
     */
    int sbAvailButtonH = (sbSize.height - sbInsetsH);
    if(sbAvailButtonH &amp;lt; sbButtonsH) {
      incrButtonH = decrButtonH = sbAvailButtonH / 2;
      incrButtonY = sbSize.height - (sbInsets.bottom + incrButtonH);
    }
    decrButton.setBounds(itemX, decrButtonY, itemW, decrButtonH);
    incrButton.setBounds(itemX, incrButtonY, itemW, incrButtonH);

    /* Update the trackRect field.
     */
    //int itrackY = decrButtonY + decrButtonH + decrGap; //del
    //int itrackH = incrButtonY - incrGap - itrackY; //del
    int itrackY = 0; //ins
    int itrackH = decrButtonY - itrackY; //ins
    trackRect.setBounds(itemX, itrackY, itemW, itrackH);

    /* If the thumb isn&#39;t going to fit, zero it&#39;s bounds.  Otherwise
     * make sure it fits between the buttons.  Note that setting the
     * thumbs bounds will cause a repaint.
     */
    if(thumbH &amp;gt;= (int)trackH) {
      setThumbBounds(0, 0, 0, 0);
    }else{
      //if((thumbY + thumbH) &amp;gt; incrButtonY - incrGap) {
      //  thumbY = incrButtonY - incrGap - thumbH;
      //}
      //if(thumbY &amp;lt; (decrButtonY + decrButtonH + decrGap)) {
      //  thumbY = decrButtonY + decrButtonH + decrGap + 1;
      //}
      if((thumbY + thumbH) &amp;gt; decrButtonY - decrGap) {
        thumbY = decrButtonY - decrGap - thumbH;
      }
      if(thumbY &amp;lt; 0) { //(decrButtonY + decrButtonH + decrGap)) {
        thumbY = 1; //decrButtonY + decrButtonH + decrGap + 1;
      }
      setThumbBounds(itemX, thumbY, itemW, thumbH);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;WindowsScrollBarUI#layoutVScrollbar(...)&lt;/code&gt;をオーバーライドして、垂直スクロールバーの増加、減少ボタンが両方下側に配置されるようにレイアウトマネージャーを変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- [JScrollBarをJScrollPaneの左と上に配置](http://terai.xrea.jp/Swing/LeftScrollBar.html)
- スクロールバーのボタンの位置ではなく、スクロールバー自体の位置を変更する場合のサンプル
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;水平スクロールバーには今のところ対応していない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-05-16 (月) 15:08:24&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollbarbuttonlayout</link>
                <guid>http://terai.xrea.jp/swing/scrollbarbuttonlayout</guid>
                <pubDate>2011-05-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaをキャプションとして画像上にスライドイン</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;画像の上に&lt;code&gt;JTextArea&lt;/code&gt;をスライドインアニメーションで表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EaseInOut&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/Tcd9MqA6BlI/AAAAAAAAA64/Q7KLCkUETZ4/s800/EaseInOut.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private int delay = 4;
private int count = 0;
@Override public void mouseEntered(MouseEvent e) {
  if(animator!=null &amp;amp;&amp;amp; animator.isRunning() ||
     yy==textArea.getPreferredSize().height) return;
  final double h = (double)textArea.getPreferredSize().height;
  animator = new javax.swing.Timer(delay, new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      double a = easeInOut(++count/h);
      yy = (int)(.5d+a*h);
      textArea.setBackground(new Color(0f,0f,0f,(float)(0.6*a)));
      if(yy&amp;gt;=textArea.getPreferredSize().height) {
        yy = textArea.getPreferredSize().height;
        animator.stop();
      }
      revalidate();
      repaint();
    }
  });
  animator.start();
}
@Override public void mouseExited(MouseEvent e) {
  if(animator!=null &amp;amp;&amp;amp; animator.isRunning() ||
     contains(e.getPoint()) &amp;amp;&amp;amp; yy==textArea.getPreferredSize().height) return;
  final double h = (double)textArea.getPreferredSize().height;
  animator = new javax.swing.Timer(delay, new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      double a = easeInOut(--count/h);
      yy = (int)(.5d+a*h);
      textArea.setBackground(new Color(0f,0f,0f,(float)(0.6*a)));
      if(yy&amp;lt;=0) {
        yy = 0;
        animator.stop();
      }
      revalidate();
      repaint();
    }
  });
  animator.start();
}
//@see Math: EaseIn EaseOut, EaseInOut and Beziér Curves | Anima Entertainment GmbH
//http://www.anima-entertainment.de/math-easein-easeout-easeinout-and-bezier-curves
public double easeInOut(double t) {
  //range: 0.0&amp;lt;=t&amp;lt;=1.0
  if(t&amp;lt;0.5d) {
    return 0.5d*Math.pow(t*2d, 3d);
  }else{
    return 0.5d*(Math.pow(t*2d-2d, 3d) + 2d);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;に画像を表示し、これにマウスカーソルが入った場合、&lt;code&gt;JTextArea&lt;/code&gt;がキャプションとして&lt;code&gt;ease-in&lt;/code&gt;, &lt;code&gt;ease-out&lt;/code&gt;でスライドインするようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OverlayLayout#layoutContainer&lt;/code&gt;内で、&lt;code&gt;JTextArea&lt;/code&gt;の&lt;code&gt;y&lt;/code&gt;座標を変更してアニメーション&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EaseInOut&lt;/code&gt;の計算は、&lt;a href=&quot;http://www.anima-entertainment.de/math-easein-easeout-easeinout-and-bezier-curves&quot;&gt;Math: EaseIn EaseOut, EaseInOut and Beziér Curves | Anima Entertainment GmbH&lt;/a&gt;を参考&lt;/li&gt;
&lt;li&gt;マウスカーソルが&lt;code&gt;JLabel&lt;/code&gt;(画像)内にあっても、そこに&lt;code&gt;JTextArea&lt;/code&gt;がスライドインした場合、&lt;code&gt;mouseExited&lt;/code&gt;が発生するので、注意

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea#contains(int x, int y)&lt;/code&gt;が常に&lt;code&gt;false&lt;/code&gt;を返すようにすれば、上記の場合でも&lt;code&gt;mouseExited&lt;/code&gt;などは発生しないが、&lt;code&gt;JTextArea&lt;/code&gt;内の文字列が選択できなくなるので、このサンプルでは、&lt;code&gt;JTextArea&lt;/code&gt;にマウスイベントを親へ素通しするリスナーを追加している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;の背景色は&lt;code&gt;setOpaque(false)&lt;/code&gt;にして描画せず、別途&lt;code&gt;JTextArea#paintComponent(...)&lt;/code&gt;をオーバーライドしてアルファ成分を&lt;code&gt;EaseInOut&lt;/code&gt;した色で全体を塗りつぶしている&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;メモ: 累乗を&lt;code&gt;Math.pow(...)&lt;/code&gt;の代わりにバイナリ法で&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/pcl/20120617/p1&quot;&gt;指数が整数ならMath.powは使うな - DoMshi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/rexpit/20110328/1301305266&quot;&gt;整数のべき乗 - rexpit&amp;#39;s programming memo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?IntegerPowerAlgorithm&quot;&gt;Integer Power Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.osix.net/modules/article/?id=696&quot;&gt;The Power Algorithm - How a programmer can save time rising a real number to the power of a positive integer number. The code is dot.net but it&amp;#39;s easily adaptable to any other language.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static double intpow(double x, int n) {
  double aux = 1.0;
  if(n &amp;lt; 0) {
    throw new IllegalArgumentException(&quot;n must be a positive integer&quot;);
  }
  for(; n &amp;gt; 0; x *= x, n &amp;gt;&amp;gt;&amp;gt;= 1) {
    if((n &amp;amp; 1) != 0) {
      aux *= x;
    }
  }
  return aux;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.anima-entertainment.de/math-easein-easeout-easeinout-and-bezier-curves&quot;&gt;Math: EaseIn EaseOut, EaseInOut and Beziér Curves | Anima Entertainment GmbH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://css-tricks.com/slide-in-image-captions/&quot;&gt;Slide In Image Captions | CSS-Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://radiumsoftware.tumblr.com/post/5031889912&quot;&gt;指数関数を使ったお手軽イーズ・アウト - Radium Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://radiumsoftware.tumblr.com/post/10719023826&quot;&gt;Soft maximum 関数 - Radium Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wonderfl.net/c/3GhW&quot;&gt;イーズイン/アウトいろいろ - wonderfl build flash online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cpplover.blogspot.jp/2014/03/gccaaaaaa-aaaaaa.html&quot;&gt;本の虫: なんでGCCはa*a*a*a*a*a を (a*a*a)*(a*a*a) に最適化できないの？っと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/easeinout</link>
                <guid>http://terai.xrea.jp/swing/easeinout</guid>
                <pubDate>2011-05-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノード追加、削除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;にノードを追加、削除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AddNode&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/Tb5bkDzXJHI/AAAAAAAAA6c/qxz0Vzwy4Ts/s800/AddNode.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TreePopupMenu extends JPopupMenu {
  private TreePath path;
  public TreePopupMenu() {
    super();
    add(new AbstractAction(&quot;add&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        JTree tree = (JTree)getInvoker();
        DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
        DefaultMutableTreeNode parent =
          (DefaultMutableTreeNode)path.getLastPathComponent();
        DefaultMutableTreeNode child  = new DefaultMutableTreeNode(&quot;New&quot;);
        model.insertNodeInto(child, parent, parent.getChildCount());
        //parent.add(child);
        //model.reload(); //= model.nodeStructureChanged(parent);
        tree.expandPath(path);
      }
    });
    add(new AbstractAction(&quot;remove&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        JTree tree = (JTree)getInvoker();
        DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
        DefaultMutableTreeNode node =
          (DefaultMutableTreeNode)path.getLastPathComponent();
        //if(path.getParentPath()!=null) {
        if(!node.isRoot()) {
          model.removeNodeFromParent(node);
        }
      }
    });
  }
  @Override public void show(Component c, int x, int y) {
    JTree tree = (JTree)c;
    TreePath[] tsp = tree.getSelectionPaths();
    if(tsp!=null) {
      path = tree.getPathForLocation(x, y);
      if(path!=null &amp;amp;&amp;amp; Arrays.asList(tsp).contains(path)) {
        super.show(c, x, y);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPopupMenu&lt;/code&gt;を使って、選択したノードに子ノードの追加、削除、名前変更ができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;追加

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeModel#insertNodeInto(...)&lt;/code&gt;メソッドを使用して、ノードを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;追加とリロード

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultMutableTreeNode#add(DefaultMutableTreeNode)&lt;/code&gt;メソッドを使ってノードを追加し、&lt;code&gt;DefaultTreeModel#reload(...)&lt;/code&gt;、または&lt;code&gt;DefaultTreeModel#nodeStructureChanged(DefaultMutableTreeNode)&lt;/code&gt;で更新を通知

&lt;ul&gt;
&lt;li&gt;兄弟ノードの展開状態などがリセットされてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;削除

&lt;ul&gt;
&lt;li&gt;ルートノードでない場合(&lt;code&gt;DefaultMutableTreeNode#isRoot()&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;)、&lt;code&gt;DefaultTreeModel#removeNodeFromParent(DefaultMutableTreeNode)&lt;/code&gt;で削除&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;名前変更

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StartEditingPopupMenu.html&quot;&gt;JTreeのノード編集をPopupからのみに制限する&lt;/a&gt;と同じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;model.valueForPathChanged(path, str);
//もしくは、
//leaf.setUserObject(str);
//model.nodeChanged(leaf);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeNodePopupMenu.html&quot;&gt;JTreeのノード上でJPopupMenuを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StartEditingPopupMenu.html&quot;&gt;JTreeのノード編集をPopupからのみに制限する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースなどのリンク切れを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-05-06 (金) 18:46:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/addnode</link>
                <guid>http://terai.xrea.jp/swing/addnode</guid>
                <pubDate>2011-05-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにJRadioButton</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに&lt;code&gt;JRadioButton&lt;/code&gt;を配置し、全体で一つだけ選択できるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RadioButtonCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TbUwB1XoMEI/AAAAAAAAA6M/5VwHykCV4OI/s800/RadioButtonCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultTableModel model = new DefaultTableModel(data, columnNames) {
  @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
    return getValueAt(0, column).getClass();
  }
  @Override public void setValueAt(Object v, int row, int column) {
    if(v instanceof Boolean) {
      for(int i=0; i&amp;lt;getRowCount(); i++) {
        super.setValueAt(i==row, i, column);
      }
    }else{
      super.setValueAt(v, row, column);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;2&lt;/code&gt;列目のカラムクラスを&lt;code&gt;Boolean&lt;/code&gt;に設定し、&lt;code&gt;JRadioButton&lt;/code&gt;を継承するセルレンダラ、セルエディタを使って&lt;code&gt;Boolean&lt;/code&gt;値の表示、編集を行っています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ButtonGroup&lt;/code&gt;を使用することが出来ないので、ある&lt;code&gt;2&lt;/code&gt;列目セルの値を&lt;code&gt;TRUE&lt;/code&gt;にすると、ほかの行の&lt;code&gt;2&lt;/code&gt;列目セルの値がすべて&lt;code&gt;FALSE&lt;/code&gt;になるよう、&lt;code&gt;TableModel#setValueAt(...)&lt;/code&gt;メソッドをオーバーライドしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonsInTableCell.html&quot;&gt;JTableのセル中にJRadioButtonを配置&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;一つのセルの中に複数の&lt;code&gt;JRadioButton&lt;/code&gt;を配置(&lt;code&gt;ButtonGroup&lt;/code&gt;を使用して、セル中で一つだけ選択可能)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/radiobuttoncelleditor</link>
                <guid>http://terai.xrea.jp/swing/radiobuttoncelleditor</guid>
                <pubDate>2011-04-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListの選択を解除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のセル選択状態を解除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TavH8_fQKAI/AAAAAAAAA5s/MyUXQnSHPUA/s800/ClearSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ClearSelectionListener extends MouseAdapter {
  private static void clearSelectionAndFocus(JList list) {
    list.clearSelection();
    list.getSelectionModel().setAnchorSelectionIndex(-1);
    list.getSelectionModel().setLeadSelectionIndex(-1);
  }
  private static boolean contains(JList list, Point pt) {
    for(int i=0;i&amp;lt;list.getModel().getSize();i++) {
      Rectangle r = list.getCellBounds(i, i);
      if(r.contains(pt)) return true;
    }
    return false;
  }
  private boolean startOutside = false;
  @Override public void mousePressed(MouseEvent e) {
    JList list = (JList)e.getSource();
    startOutside = !contains(list, e.getPoint());
    if(startOutside) {
      clearSelectionAndFocus(list);
    }
  }
  @Override public void mouseReleased(MouseEvent e) {
    startOutside = false;
  }
  @Override public void mouseDragged(MouseEvent e) {
    JList list = (JList)e.getSource();
    if(contains(list, e.getPoint())) {
      startOutside = false;
    }else if(startOutside) {
      clearSelectionAndFocus(list);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JList&lt;/code&gt;のセル以外の領域をクリックすると、選択とフォーカスを解除するようにマウスリスナーなどを設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;選択解除

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#clearSelection();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ListSelectionModel#clearSelection()&lt;/code&gt;のラッパー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フォーカス解除

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.getSelectionModel().setAnchorSelectionIndex(-1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.getSelectionModel().setLeadSelectionIndex(-1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;アンカー(アイテムのハイライト)、リード(アイテムのフォーカス)の順番で解除する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/events/listselectionlistener.html&quot;&gt;How to Write a List Selection Listener (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Writing Event Listeners)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clearselection</link>
                <guid>http://terai.xrea.jp/swing/clearselection</guid>
                <pubDate>2011-04-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードタイトルを複数行表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の各ノードで改行を使用し、タイトルを複数行表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MultiLineTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TaKbyMKLtkI/AAAAAAAAA5M/NoozvykYAUE/s800/MultiLineTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MultiLineCellRenderer extends JPanel implements TreeCellRenderer {
  private DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
  private final JLabel icon = new JLabel();
  private final JTextArea text = new CellTextArea2();

  public MultiLineCellRenderer() {
    super(new BorderLayout(0, 0));
    text.setOpaque(true);
    text.setFont(icon.getFont());
    text.setBorder(BorderFactory.createEmptyBorder());
    icon.setOpaque(true);
    icon.setBorder(BorderFactory.createEmptyBorder(1,1,1,2));
    icon.setVerticalAlignment(JLabel.TOP);
    setOpaque(false);
    setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
    add(icon, BorderLayout.WEST);
    add(text);
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    JLabel l = (JLabel)renderer.getTreeCellRendererComponent(
      tree, value, isSelected, expanded, leaf, row, hasFocus);
    Color bColor, fColor;
    if(isSelected) {
      bColor = renderer.getBackgroundSelectionColor();
      fColor = renderer.getTextSelectionColor();
    } else {
      bColor = renderer.getBackgroundNonSelectionColor();
      fColor = renderer.getTextNonSelectionColor();
      if(bColor == null) bColor = renderer.getBackground();
      if(fColor == null) fColor = renderer.getForeground();
    }
    text.setFont(l.getFont());
    text.setText(l.getText());
    text.setForeground(fColor);
    text.setBackground(bColor);
    icon.setIcon(l.getIcon());
    icon.setBackground(bColor);
    return this;
  }
  @Override public void updateUI() {
    super.updateUI();
    renderer = new DefaultTreeCellRenderer();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CellTextArea2 extends JTextArea {
  @Override public Dimension getPreferredSize() {
    Dimension d = new Dimension(10, 10);
    Insets i = getInsets();
    d.width  = Math.max(
      d.width,  getColumns()*getColumnWidth() + i.left + i.right);
    d.height = Math.max(
      d.height, getRows()*getRowHeight() + i.top + i.bottom);
    return d;
  }
  @Override public void setText(String str) {
    super.setText(str);
    FontMetrics fm = getFontMetrics(getFont());
    Document doc   = getDocument();
    Element root   = doc.getDefaultRootElement();
    int lineCount  = root.getElementCount();
    int maxWidth   = 10;
    try{
      for(int i = 0; i &amp;lt; lineCount; i++) {
        Element e = root.getElement(i);
        int rangeStart = e.getStartOffset();
        int rangeEnd = e.getEndOffset();
        String line = doc.getText(rangeStart, rangeEnd - rangeStart);
        int width = fm.stringWidth(line);
        if(maxWidth &amp;lt; width) {
          maxWidth = width;
        }
      }
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    setRows(lineCount);
    setColumns(1+maxWidth/getColumnWidth());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTree#setRowHeight(0)&lt;/code&gt;として、セルレンダラーが高さを決めるように設定し、以下の&lt;code&gt;2&lt;/code&gt;つの方法で改行を行っています(&lt;code&gt;JTree#getRowHeight()&lt;/code&gt;の初期値は&lt;code&gt;LookAndFeel&lt;/code&gt;で異なり、例えば&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合&lt;code&gt;0&lt;/code&gt;以下ではない)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使用し、&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;で改行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent.add(new DefaultMutableTreeNode(&amp;quot;&amp;lt;html&amp;gt;blue&amp;lt;br&amp;gt;blue, blue&amp;quot;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextAreaRenderer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;をノードタイトルの表示に使用する&lt;code&gt;TreeCellRenderer&lt;/code&gt;を作成し、&lt;code&gt;\n&lt;/code&gt;で改行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent.add(new DefaultMutableTreeNode(&amp;quot;blue\nblue, blue&amp;quot;));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codeguru.com/java/articles/141.shtml&quot;&gt;Multi-line tree items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/multilinetree</link>
                <guid>http://terai.xrea.jp/swing/multilinetree</guid>
                <pubDate>2011-04-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのヘッダを透明化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のヘッダ背景、セル間の垂直罫線を非表示にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TransparentTableHeader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TZl3Ci_GNnI/AAAAAAAAA40/wSbo6ySTlz0/s800/TransparentTableHeader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TransparentHeader extends JLabel implements TableCellRenderer {
  private final Border b = BorderFactory.createCompoundBorder(
      BorderFactory.createMatteBorder(0,0,1,0,Color.BLACK),
      BorderFactory.createEmptyBorder(2,2,1,2));
  private final Color alphaZero = new Color(0, true);
  @Override public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    this.setText(Objects.toString(value, &quot;&quot;));
    this.setHorizontalAlignment(JLabel.CENTER);
    this.setOpaque(false);
    this.setBackground(alphaZero);
    this.setForeground(Color.BLACK);
    this.setBorder(b);
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;とヘッダレンダラーの両方を、&lt;code&gt;setOpaque(false)&lt;/code&gt;, 背景色: &lt;code&gt;Color(0, true)&lt;/code&gt;と設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;, &lt;code&gt;JScrollPane&lt;/code&gt;(&lt;code&gt;Viewport&lt;/code&gt;, &lt;code&gt;ColumnHeader&lt;/code&gt;)も&lt;code&gt;setOpaque(false)&lt;/code&gt;, 背景色: &lt;code&gt;Color(0, true)&lt;/code&gt;と設定

&lt;ul&gt;
&lt;li&gt;背景パターンは、&lt;code&gt;JScrollPane#paintComponent(...)&lt;/code&gt;をオーバーライドして描画

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentTable.html&quot;&gt;JTableを半透明にする&lt;/a&gt;は、&lt;code&gt;JViewport#paintComponent(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VerticalLine&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;セル間の垂直線を非表示: &lt;code&gt;table.setShowVerticalLines(false);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;セル間の幅を&lt;code&gt;0&lt;/code&gt;にして、選択時に罫線のあとが表示されないように設定: &lt;code&gt;table.setIntercellSpacing(new Dimension(0,1));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Boolean.class&lt;/code&gt;の&lt;code&gt;DefaultRenderer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;透明化した&lt;code&gt;BooleanCellRenderer&lt;/code&gt;や&lt;code&gt;BooleanCellEditor&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentTable.html&quot;&gt;JTableを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RemoveTableHeader.html&quot;&gt;JTableHeaderを非表示にする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のヘッダ自体を非表示にする場合のサンプル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/transparenttableheader</link>
                <guid>http://terai.xrea.jp/swing/transparenttableheader</guid>
                <pubDate>2011-04-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセルにJCheckBoxを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のセルに&lt;code&gt;JCheckBox&lt;/code&gt;を使用して、チェックボックスの一覧を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxCellList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-EfbwsqycTvg/UlyukvM4ivI/AAAAAAAAB3o/NJBvrfM4xPA/s800/CheckBoxCellList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxCellRenderer&amp;lt;E extends CheckBoxNode&amp;gt; extends JCheckBox
          implements ListCellRenderer&amp;lt;E&amp;gt;, MouseListener, MouseMotionListener {
  private int rollOverRowIndex = -1;
  @Override public Component getListCellRendererComponent(
      JList&amp;lt;? extends E&amp;gt; list, E value, int index, boolean isSelected, boolean cellHasFocus) {
    this.setOpaque(true);
    if(isSelected) {
      this.setBackground(list.getSelectionBackground());
      this.setForeground(list.getSelectionForeground());
    }else{
      this.setBackground(list.getBackground());
      this.setForeground(list.getForeground());
    }
    this.setSelected(value.selected);
    this.getModel().setRollover(index==rollOverRowIndex);
    this.setText(value.text);
    return this;
  }
  @Override public void mouseExited(MouseEvent e) {
    if(rollOverRowIndex&amp;gt;=0) {
      JList l = (JList)e.getComponent();
      l.repaint(l.getCellBounds(rollOverRowIndex, rollOverRowIndex));
      rollOverRowIndex = -1;
    }
  }
  @Override public void mouseClicked(MouseEvent e) {
    if(e.getButton()==MouseEvent.BUTTON1) {
      JList l = (JList)e.getComponent();
      Point p = e.getPoint();
      int index  = l.locationToIndex(p);
      if(index&amp;gt;=0) {
        @SuppressWarnings(&quot;unchecked&quot;)
        DefaultListModel&amp;lt;CheckBoxNode&amp;gt; m = (DefaultListModel&amp;lt;CheckBoxNode&amp;gt;)l.getModel();
        CheckBoxNode n = m.get(index);
        m.set(index, new CheckBoxNode(n.text, !n.selected));
        l.repaint(l.getCellBounds(index, index));
      }
    }
  }
  @Override public void mouseMoved(MouseEvent e) {
    JList l = (JList)e.getComponent();
    int index = l.locationToIndex(e.getPoint());
    if(index != rollOverRowIndex) {
      rollOverRowIndex = index;
      l.repaint();
    }
  }
  @Override public void mouseEntered(MouseEvent e)  { /* not needed */ }
  @Override public void mousePressed(MouseEvent e)  { /* not needed */ }
  @Override public void mouseReleased(MouseEvent e) { /* not needed */ }
  @Override public void mouseDragged(MouseEvent e)  { /* not needed */ }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左: &lt;code&gt;Box&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box.createVerticalBox()&lt;/code&gt;に&lt;code&gt;JCheckBox&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JCheckBox#setAlignmentX(Component.LEFT_ALIGNMENT);&lt;/code&gt;で左揃えに設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中: &lt;code&gt;JList&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;を継承する&lt;code&gt;ListCellRenderer&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;チェックボックスのロールオーバーなどは、&lt;code&gt;JList&lt;/code&gt;にマウスリスナーを設定して表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JList#processMouseEvent&lt;/code&gt;、&lt;code&gt;JList#processMouseMotionEvent&lt;/code&gt;のオーバーライドと、&lt;code&gt;JList#putClientProperty(&amp;quot;List.isFileList&amp;quot;, Boolean.TRUE);&lt;/code&gt;で、クリックが有効になる領域をチェックボックスの幅に制限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list1 = new JList(model) {
  private CheckBoxCellRenderer renderer;
  @Override public void updateUI() {
    setForeground(null);
    setBackground(null);
    setSelectionForeground(null);
    setSelectionBackground(null);
    if(renderer!=null) {
      removeMouseListener(renderer);
      removeMouseMotionListener(renderer);
    }
    super.updateUI();
    renderer = new CheckBoxCellRenderer();
    setCellRenderer(renderer);
    addMouseListener(renderer);
    addMouseMotionListener(renderer);
  }
  //@see SwingUtilities2.pointOutsidePrefSize(...)
  private boolean pointOutsidePrefSize(Point p) {
    int index = locationToIndex(p);
    DefaultListModel m = (DefaultListModel)getModel();
    CheckBoxNode n = (CheckBoxNode)m.get(index);
    Component c = getCellRenderer().getListCellRendererComponent(
        this, n, index, false, false);
    //c.doLayout();
    Dimension d = c.getPreferredSize();
    Rectangle rect = getCellBounds(index, index);
    rect.width = d.width;
    return index &amp;lt; 0 || !rect.contains(p);
  }
  @Override protected void processMouseEvent(MouseEvent e) {
    if(!pointOutsidePrefSize(e.getPoint())) {
      super.processMouseEvent(e);
    }
  }
  @Override protected void processMouseMotionEvent(MouseEvent e) {
    if(!pointOutsidePrefSize(e.getPoint())) {
      super.processMouseMotionEvent(e);
    }else{
      e = new MouseEvent(
          (Component)e.getSource(), MouseEvent.MOUSE_EXITED, e.getWhen(),
          e.getModifiers(), e.getX(), e.getY(),
          e.getXOnScreen(), e.getYOnScreen(),
          e.getClickCount(), e.isPopupTrigger(), MouseEvent.NOBUTTON);
      super.processMouseEvent(e);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;右: &lt;code&gt;JTree&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;を継承する&lt;code&gt;TreeCellRenderer&lt;/code&gt;を設定

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeTree.html&quot;&gt;JTreeの葉ノードをJCheckBoxにする&lt;/a&gt;のセルレンダラーを使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree#setRootVisible(false)&lt;/code&gt;でルートノードを非表示に設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeRenderer extends JCheckBox implements TreeCellRenderer {
  private TreeCellRenderer renderer = new DefaultTreeCellRenderer();
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean selected, boolean expanded,
      boolean leaf, int row, boolean hasFocus) {
    if(leaf &amp;amp;&amp;amp; value instanceof DefaultMutableTreeNode) {
      this.setOpaque(false);
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        CheckBoxNode node = (CheckBoxNode)userObject;
        this.setText(node.text);
        this.setSelected(node.selected);
      }
      return this;
    }
    return renderer.getTreeCellRendererComponent(
        tree, value, selected, expanded, leaf, row, hasFocus);
  }
}

class CheckBoxNodeEditor extends JCheckBox implements TreeCellEditor {
  private final JTree tree;
  public CheckBoxNodeEditor(JTree tree) {
    super();
    this.tree = tree;
    setOpaque(false);
    setFocusable(false);
    addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        stopCellEditing();
      }
    });
  }
  @Override public Component getTreeCellEditorComponent(
      JTree tree, Object value, boolean isSelected, boolean expanded,
      boolean leaf, int row) {
    if(leaf &amp;amp;&amp;amp; value instanceof DefaultMutableTreeNode) {
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        this.setSelected(((CheckBoxNode)userObject).selected);
      } else {
        this.setSelected(false);
      }
      this.setText(value.toString());
    }
    return this;
  }
  @Override public Object getCellEditorValue() {
    return new CheckBoxNode(getText(), isSelected());
  }
  @Override public boolean isCellEditable(EventObject e) {
    return (e instanceof MouseEvent);
  }
  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  //transient protected ChangeEvent changeEvent = null;
  @Override public boolean shouldSelectCell(java.util.EventObject anEvent) {
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeTree.html&quot;&gt;JTreeの葉ノードをJCheckBoxにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;補足として追記していた&lt;code&gt;JTree&lt;/code&gt;を使用するサンプルを本体に取り込んで、スクリーンショットなどを更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-10-15 (火) 11:56:41&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxcelllist</link>
                <guid>http://terai.xrea.jp/swing/checkboxcelllist</guid>
                <pubDate>2011-03-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの葉ノードをJCheckBoxにする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の葉ノードを編集可能な&lt;code&gt;JCheckBox&lt;/code&gt;にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxNodeTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TYb2-BFsTHI/AAAAAAAAA4U/Fs8-t9x9XSw/s800/CheckBoxNodeTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNode {
  public final String text;
  public final boolean selected;
  public CheckBoxNode(String text, boolean selected) {
    this.text = text;
    this.selected = selected;
  }
  @Override public String toString() {
    return text;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTree tree = new JTree() {
  @Override public void updateUI() {
    setCellRenderer(null);
    setCellEditor(null);
    super.updateUI();
    //???: JDK 1.6.0 LnF bug???
    setCellRenderer(new CheckBoxNodeRenderer());
    setCellEditor(new CheckBoxNodeEditor());
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeRenderer extends JCheckBox implements TreeCellRenderer {
  @Override public Component getTreeCellRendererComponent(JTree tree,
      Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
    this.tree = tree;
    if(leaf &amp;amp;&amp;amp; value instanceof DefaultMutableTreeNode) {
      this.setEnabled(tree.isEnabled());
      this.setFont(tree.getFont());
      this.setOpaque(false);
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        CheckBoxNode node = (CheckBoxNode)userObject;
        this.setText(node.text);
        this.setSelected(node.selected);
      }
      return this;
    }
    return renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
  }
  private JTree tree = null;
  private DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
  @Override public void updateUI() {
    super.updateUI();
    setName(&quot;Tree.cellRenderer&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxNodeEditor extends JCheckBox implements TreeCellEditor {
  private final JTree tree;
  public CheckBoxNodeEditor(JTree tree) {
    super();
    this.tree = tree;
    setFocusable(false);
    setRequestFocusEnabled(false);
    setOpaque(false);
    addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        stopCellEditing();
      }
    });
  }
  @Override public Component getTreeCellEditorComponent(JTree tree,
      Object value, boolean isSelected, boolean expanded, boolean leaf, int row) {
    if(leaf &amp;amp;&amp;amp; value instanceof DefaultMutableTreeNode) {
      Object userObject = ((DefaultMutableTreeNode)value).getUserObject();
      if(userObject instanceof CheckBoxNode) {
        this.setSelected(((CheckBoxNode)userObject).selected);
      }else{
        this.setSelected(false);
      }
      this.setText(value.toString());
    }
    return this;
  }
  @Override public Object getCellEditorValue() {
    return new CheckBoxNode(getText(), isSelected());
  }
  @Override public boolean isCellEditable(EventObject e) {
    if(e instanceof MouseEvent) {
      TreePath path = tree.getPathForLocation(
          ((MouseEvent)e).getX(), ((MouseEvent)e).getY());
      Object o = path.getLastPathComponent();
      if(o instanceof TreeNode) {
        return ((TreeNode)o).isLeaf();
      }
    }
    return false;
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;を継承する&lt;code&gt;TreeCellRenderer&lt;/code&gt;、&lt;code&gt;TreeCellEditor&lt;/code&gt;を作成して、&lt;code&gt;setEditable(true)&lt;/code&gt;とした&lt;code&gt;JTree&lt;/code&gt;に設定し、葉ノードをチェックできるようにしています。ノードがチェックされているかどうかといった状態の保存は、&lt;code&gt;DefaultMutableTreeNode#setUserObject(Object)&lt;/code&gt;でタイトルと選択状態をもつオブジェクトを設定することで行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;葉ノードでない場合、表示には&lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;を使っています。逆に&lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;を継承する&lt;code&gt;TreeCellRenderer&lt;/code&gt;で、葉ノードの表示を&lt;code&gt;JCheckBox&lt;/code&gt;に委譲する方法でも同様となりますが、この場合、&lt;code&gt;JDK 1.6.0&lt;/code&gt;では&lt;code&gt;Look And Feel&lt;/code&gt;を変更してもアイコンや選択色が更新されないようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;で修正されている&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;葉ノードだけ編集可能に制限するため、&lt;code&gt;TreeCellEditor#isCellEditable(EventObject)&lt;/code&gt;でクリックしたノードが&lt;code&gt;TreeNode#isLeaf()&lt;/code&gt;かを判断しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LeafTreeCellEditor.html&quot;&gt;JTreeの葉ノードだけ編集可能にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTreeExamples2.html&quot;&gt;CheckNode - JTree Examples 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LeafTreeCellEditor.html&quot;&gt;JTreeの葉ノードだけ編集可能にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxNodeEditor.html&quot;&gt;JTreeのすべてのノードにJCheckBoxを追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxnodetree</link>
                <guid>http://terai.xrea.jp/swing/checkboxnodetree</guid>
                <pubDate>2011-03-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのOpenIcon、ClosedIcon、LeafIconを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の&lt;code&gt;OpenIcon&lt;/code&gt;、&lt;code&gt;ClosedIcon&lt;/code&gt;、&lt;code&gt;LeafIcon&lt;/code&gt;の表示表示を切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeLeafIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TX24gbN5bHI/AAAAAAAAA30/l8Pn8nUfJiA/s800/TreeLeafIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;folderCheck.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    DefaultTreeCellRenderer r = (DefaultTreeCellRenderer)tree.getCellRenderer();
    if(((JCheckBox)e.getSource()).isSelected()) {
      r.setOpenIcon(r.getDefaultOpenIcon());
      r.setClosedIcon(r.getDefaultClosedIcon());
    }else{
      r.setOpenIcon(emptyIcon);
      r.setClosedIcon(emptyIcon);
    }
    allNodesChanged(tree);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#setOpenIcon(Icon)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getDefaultOpenIcon()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#setClosedIcon(Icon)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getDefaultClosedIcon()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#setLeafIcon(Icon)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getDefaultLeafIcon()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;上記のメソッドを使用して、デフォルトアイコンと空アイコンを設定し、表示非表示を切り替えています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;各アイコンの幅が変化するので、表示を切り替えた後で、以下のようにすべてのノードを更新しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void allNodesChanged(JTree tree) {
  DefaultTreeModel model = (DefaultTreeModel)tree.getModel();
  DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
  java.util.Enumeration depth = root.depthFirstEnumeration();
  while(depth.hasMoreElements()) {
    model.nodeChanged((TreeNode)depth.nextElement());
  }
  //tree.revalidate();
  //tree.repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeExpandedIcon.html&quot;&gt;JTreeの展開、折畳みアイコンを非表示にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treeleaficon</link>
                <guid>http://terai.xrea.jp/swing/treeleaficon</guid>
                <pubDate>2011-03-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableでキー入力によるセル編集自動開始を一部禁止する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル編集自動開始をファンクションキーの場合だけ無効にします。&lt;a href=&quot;https://forums.oracle.com/thread/1350192&quot;&gt;Swing - JTable starts editing when F3 is pressed - howto disable?&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FunctionKeyStartEditing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TXR_CO_Z9UI/AAAAAAAAA3I/7_3ml86ybo8/s800/FunctionKeyStartEditing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  //Swing - JTable starts editing when F3 is pressed - howto disable?
  //https://forums.oracle.com/thread/1350192
  @Override public boolean editCellAt(int row, int column, EventObject e) {
    if(e instanceof KeyEvent) {
      int c = ((KeyEvent)e).getKeyCode();
      if(KeyEvent.VK_F1&amp;lt;=c &amp;amp;&amp;amp; c&amp;lt;=KeyEvent.VK_F21) {
        return false;
      }
    }
    return super.editCellAt(row, column, e);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ignore: F1,F4-F7,F9-&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;チェックボックスをチェックしている場合、ファンクションキー(&lt;kbd&gt;Shift&lt;/kbd&gt;, &lt;kbd&gt;Ctrl+Function&lt;/kbd&gt;キーも含む)を押しても、セルの編集が開始されないように&lt;code&gt;JTable#editCellAt(...)&lt;/code&gt;メソッドをオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.putClientProperty(&amp;quot;JTable.autoStartsEdit&amp;quot;, Boolean.FALSE);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;キー入力(&lt;kbd&gt;F2&lt;/kbd&gt;は除く)によるセルの編集開始を禁止&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PreventStartCellEditing.html&quot;&gt;JTableでキー入力によるセル編集開始を禁止する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;上記のサンプルには、&lt;code&gt;InputMap&lt;/code&gt;、&lt;code&gt;ActionMap&lt;/code&gt;に&lt;kbd&gt;F3&lt;/kbd&gt;キーで&lt;code&gt;beep&lt;/code&gt;が鳴るようにキーストロークとアクションを追加しています。このキーストロークは&lt;code&gt;JTable#editCellAt&lt;/code&gt;メソッドでのキー入力チェックとは別に実行されるので、デフォルトの&lt;kbd&gt;F2&lt;/kbd&gt;キーでの&lt;code&gt;startEditing&lt;/code&gt;、&lt;kbd&gt;F8&lt;/kbd&gt;キーでの&lt;code&gt;focusHeader&lt;/code&gt;は、&lt;code&gt;JTable#editCellAt(...)&lt;/code&gt;の戻り値とは関係なく有効になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#processKeyBinding(...)&lt;/code&gt;をオーバーライドしてキー入力自体を弾くと、&lt;code&gt;InputMap&lt;/code&gt;に追加したキーストロークも除かれるので、これらのアクションも実行されない&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1350192&quot;&gt;Swing - JTable starts editing when F3 is pressed - howto disable?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PreventStartCellEditing.html&quot;&gt;JTableでキー入力によるセル編集開始を禁止する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/functionkeystartediting</link>
                <guid>http://terai.xrea.jp/swing/functionkeystartediting</guid>
                <pubDate>2011-03-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのCellにJCheckBoxを複数配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中に&lt;code&gt;JCheckBox&lt;/code&gt;を複数個配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxesInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TWs6JY73P8I/AAAAAAAAA2M/wwrwT7R5K4k/s800/CheckBoxesInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxesPanel extends JPanel {
  protected final String[] title = {&quot;r&quot;, &quot;w&quot;, &quot;x&quot;};
  public JCheckBox[] buttons;
  public CheckBoxesPanel() {
    super();
    setOpaque(false);
    setBackground(new Color(0,0,0,0));
    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
    initButtons();
  }
  protected void initButtons() {
    buttons = new JCheckBox[title.length];
    for(int i=0; i&amp;lt;buttons.length; i++) {
      JCheckBox b = new JCheckBox(title[i]);
      b.setOpaque(false);
      b.setFocusable(false);
      b.setRolloverEnabled(false);
      b.setBackground(new Color(0,0,0,0));
      buttons[i] = b;
      add(b);
      add(Box.createHorizontalStrut(5));
    }
  }
  private static final String OSNAME = System.getProperty(&quot;os.name&quot;);
  protected void updateButtons(Object v) {
    if(&quot;Windows 7&quot;.equals(OSNAME)) { //Windows aero?
      removeAll();
      initButtons();
    }
    Integer i = (Integer)(v==null?0:v);
    buttons[0].setSelected((i&amp;amp;(1&amp;lt;&amp;lt;2))!=0);
    buttons[1].setSelected((i&amp;amp;(1&amp;lt;&amp;lt;1))!=0);
    buttons[2].setSelected((i&amp;amp;(1&amp;lt;&amp;lt;0))!=0);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxesRenderer extends CheckBoxesPanel
                         implements TableCellRenderer, Serializable {
  public CheckBoxesRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    updateButtons(value);
    return this;
  }
  public static class UIResource extends CheckBoxesRenderer
                                 implements UIResource{}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CheckBoxesEditor extends CheckBoxesPanel
                       implements TableCellEditor, Serializable {
  public CheckBoxesEditor() {
    ActionListener al = new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        fireEditingStopped();
      }
    };
    ActionMap am = getActionMap();
    for(int i=0; i&amp;lt;buttons.length; i++) {
      final JCheckBox b = buttons[i];
      b.addActionListener(al);
      am.put(title[i], new AbstractAction(title[i]) {
        @Override public void actionPerformed(ActionEvent e) {
          b.setSelected(!b.isSelected());
          fireEditingStopped();
        }
      });
    }
    InputMap im = getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_R, 0), title[0]);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_W, 0), title[1]);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_X, 0), title[2]);
  }
  @Override public Component getTableCellEditorComponent(JTable table,
        Object value, boolean isSelected, int row, int column) {
    updateButtons(value);
    return this;
  }
  @Override public Object getCellEditorValue() {
    int i = 0;
    if(buttons[0].isSelected()) i|=1&amp;lt;&amp;lt;2;
    if(buttons[1].isSelected()) i|=1&amp;lt;&amp;lt;1;
    if(buttons[2].isSelected()) i|=1&amp;lt;&amp;lt;0;
    return i;
  }

  //Copied from AbstractCellEditor
  protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;
  //......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;のセル内に&lt;code&gt;3&lt;/code&gt;つの&lt;code&gt;JCheckBox&lt;/code&gt;を配置した&lt;code&gt;JPanel&lt;/code&gt;を作成し、これを&lt;code&gt;CellRenderer&lt;/code&gt;と&lt;code&gt;CellEditor&lt;/code&gt;として別々に使用しています。&lt;code&gt;JCheckBox&lt;/code&gt;をマウスでクリックすると、その&lt;code&gt;JCheckBox&lt;/code&gt;の選択状態だけが変化します。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;ヘッダカラムの移動、リサイズ(&lt;code&gt;JFrame&lt;/code&gt;などのリサイズ)で、チェックした内容が消えてしまわないように、&lt;code&gt;CellEditor&lt;/code&gt;のチェックボックスがクリックされたら&lt;code&gt;fireEditingStopped()&lt;/code&gt;メソッドを呼び出して編集を終了し更新を確定するようにしています。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;code&gt;JTable&lt;/code&gt;自体に以下の様な&lt;code&gt;MouseListener&lt;/code&gt;を追加してチェックボックスがクリックされるたびに&lt;code&gt;table.getCellEditor(row, col).stopCellEditing();&lt;/code&gt;を呼び出しています。&lt;/del&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonsInTableCell.html&quot;&gt;JTableのセル中にJRadioButtonを配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RolloverBooleanRenderer.html&quot;&gt;JCheckBoxのセルをロールオーバーする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ビットフラグを&lt;code&gt;EnumSet&lt;/code&gt;に変更するテスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-01 (火) 14:22:06

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EnumSet.html&quot;&gt;JTableの列にEnumSetを使用する&lt;/a&gt;に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rwx&lt;/code&gt;セルを選択中に&lt;kbd&gt;R&lt;/kbd&gt;, &lt;kbd&gt;W&lt;/kbd&gt;, &lt;kbd&gt;X&lt;/kbd&gt;キーを入力するとチェックが切り替わるように&lt;code&gt;InputMap, ActionMap&lt;/code&gt;を追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-09 (水) 22:33:39&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows&lt;/code&gt;環境で&lt;code&gt;Aero&lt;/code&gt;効果を有効にしていると？、残像が表示される場合がある？のを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-11-01 (火) 18:12:50&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxesintablecell</link>
                <guid>http://terai.xrea.jp/swing/checkboxesintablecell</guid>
                <pubDate>2011-02-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Caretの点滅を停止する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextComponent&lt;/code&gt;の&lt;code&gt;Caret&lt;/code&gt;が点滅する速さを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BlinkRate&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TWH8aAgoyiI/AAAAAAAAA1o/J-ljyl_h_i8/s800/BlinkRate.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;((DefaultCaret)textField.getCaret()).setBlinkRate(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField#getCaret()&lt;/code&gt;で取得した&lt;code&gt;CaretにsetBlinkRate(0)&lt;/code&gt;で点滅間隔を&lt;code&gt;0&lt;/code&gt;と設定し、キャレットが点滅しないように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6289635&quot;&gt;Bug ID: 6289635 getDesktopProperty(&amp;quot;awt.cursorBlinkRate&amp;quot;) returns null&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/blinkrate</link>
                <guid>http://terai.xrea.jp/swing/blinkrate</guid>
                <pubDate>2011-02-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの文字色を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の文字色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxForegroundColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TVjIM1AMFkI/AAAAAAAAA1M/BSd3As9dxZE/s800/ComboBoxForegroundColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboForegroundRenderer extends DefaultListCellRenderer {
  private final Color selectionBackground = new Color(240,245,250);
  private final JComboBox combo;
  public ComboForegroundRenderer(JComboBox combo) {
    this.combo = combo;
  }
  @Override public Component getListCellRendererComponent(JList list,
      Object value, int index, boolean isSelected, boolean hasFocus) {
    if(value instanceof ColorItem) {
      ColorItem item = (ColorItem) value;
      Color ic = item.color;
      if(index&amp;lt;0 &amp;amp;&amp;amp; ic!=null &amp;amp;&amp;amp; !ic.equals(combo.getForeground())) {
        combo.setForeground(ic); //Windows, Motif Look&amp;amp;Feel
        list.setSelectionForeground(ic);
        list.setSelectionBackground(selectionBackground);
      }
      JLabel l = (JLabel)super.getListCellRendererComponent(
          list, item.description, index, isSelected, hasFocus);
      l.setForeground(ic);
      l.setBackground(isSelected?selectionBackground:list.getBackground());
      return l;
    }else{
      super.getListCellRendererComponent(
          list, value, index, isSelected, hasFocus);
      return this;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、編集不可になっている&lt;code&gt;JComboBox&lt;/code&gt;の文字色を、選択中のアイテムから取得した色に変更するようなセルレンダラを設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;セルレンダラはデフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setForeground&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ListCellRenderer&lt;/code&gt;で&lt;code&gt;JList&lt;/code&gt;の選択時文字色(&lt;code&gt;JList#setSelectionForeground&lt;/code&gt;)、選択時背景色(&lt;code&gt;JList#setSelectionBackground&lt;/code&gt;)を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XPStyle.getXP()!=null&lt;/code&gt;な&lt;code&gt;Windows LookAndFeel&lt;/code&gt;や、&lt;code&gt;Motif LookAndFeel&lt;/code&gt;の場合、フィールド部分の非選択時文字色は、&lt;code&gt;JComboBox&lt;/code&gt;の文字色(&lt;code&gt;getForeground()&lt;/code&gt;)が使用されるため、セルレンダラで、&lt;code&gt;JComboBox#setForeground(Color)&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html tag&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;選択時背景色は、上記の&lt;code&gt;setForeground&lt;/code&gt;と同様に、&lt;code&gt;JList#setSelectionBackground&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;セルレンダラで文字色を&lt;code&gt;Html&lt;/code&gt;タグで変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboHtmlRenderer extends DefaultListCellRenderer {
  private final Color selectionBackground = new Color(240,245,250);
  @Override public Component getListCellRendererComponent(JList list,
      Object value, int index, boolean isSelected, boolean hasFocus) {
    ColorItem item = (ColorItem) value;
    if(index&amp;lt;0) {
      list.setSelectionBackground(selectionBackground);
    }
    JLabel l = (JLabel)super.getListCellRendererComponent(
      list, value, index, isSelected, hasFocus);
    l.setText(&quot;&amp;lt;html&amp;gt;&amp;lt;font color=&quot;+hex(item.color)+&quot;&amp;gt;&quot;+item.description);
    l.setBackground(isSelected?selectionBackground:list.getBackground());
    return l;
  }
  private static String hex(Color c) {
    return String.format(&quot;#%06x&quot;, c.getRGB() &amp;amp; 0xffffff); //Integer.toHexString(c.getRGB() &amp;amp; 0xffffff)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorComboBox.html&quot;&gt;JComboBoxの色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxforegroundcolor</link>
                <guid>http://terai.xrea.jp/swing/comboboxforegroundcolor</guid>
                <pubDate>2011-02-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TrayIconのポップアップメッセージをテスト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TrayIcon&lt;/code&gt;のポップアップメッセージ表示をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisplayMessage&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TU-dbe20pkI/AAAAAAAAA0g/3fG2yE_NmHw/s800/DisplayMessage.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;trayIcon.displayMessage(&quot;caption&quot;, &quot;text&quot;, TrayIcon.MessageType.ERROR);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;TrayIcon.displayMessage(...)&lt;/code&gt;メソッドを使用して、ポップアップメッセージを表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;TrayIcon&lt;/code&gt;に&lt;code&gt;ActionListener&lt;/code&gt;を追加しておくと、ポップアップメッセージのクリックイベントを取得することができます。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/displaymessage</link>
                <guid>http://terai.xrea.jp/swing/displaymessage</guid>
                <pubDate>2011-02-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TrayIconでJPopupMenuを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TrayIcon&lt;/code&gt;をクリックして&lt;code&gt;JPopupMenu&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TrayIconPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TUZUBCgOGJI/AAAAAAAAA0A/Ox5g3HoxmoI/s800/TrayIconPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final SystemTray tray  = SystemTray.getSystemTray();
final Image image      = new ImageIcon(getClass().getResource(&quot;16x16.png&quot;)).getImage();
final TrayIcon icon    = new TrayIcon(image, &quot;TRAY&quot;, null);
final JPopupMenu popup = new JPopupMenu();
final JDialog dummy    = new JDialog();
// This code is inspired from:
// http://weblogs.java.net/blog/alexfromsun/archive/2008/02/jtrayicon_updat.html
dummy.setUndecorated(true);
popup.addPopupMenuListener(new PopupMenuListener() {
  @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
    dummy.setVisible(false);
  }
  @Override public void popupMenuCanceled(PopupMenuEvent e) {
    dummy.setVisible(false);
  }
});
icon.addMouseListener(new MouseAdapter() {
  private void showJPopupMenu(MouseEvent e) {
    if(e.isPopupTrigger()) {
      Point p = adjustPopupLocation(popup, e.getX(), e.getY());
      dummy.setLocation(p);
      dummy.setVisible(true);
      popup.show(dummy, 0, 0);
    }
  }
  @Override public void mouseReleased(MouseEvent e) {
    showJPopupMenu(e);
  }
  @Override public void mousePressed(MouseEvent e) {
    showJPopupMenu(e);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt;では、&lt;code&gt;TrayIcon&lt;/code&gt;には&lt;code&gt;java.awt.PopupMenu&lt;/code&gt;しか使用できないので、&lt;code&gt;setUndecorated(true)&lt;/code&gt;かつ、サイズが&lt;code&gt;0x0&lt;/code&gt;の&lt;code&gt;JDialog&lt;/code&gt;を適当な位置(&lt;code&gt;TrayIcon&lt;/code&gt;のクリックで&lt;code&gt;JPopupMenu&lt;/code&gt;が開いたように見える場所)に配置し、これを親にして&lt;code&gt;javax.swing.JPopupMenu&lt;/code&gt;を表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;PopupMenu&lt;/code&gt;ではなく、&lt;code&gt;JPopupMenu&lt;/code&gt;が使用できるので、以下のようなことが可能になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBoxMenuItem&lt;/code&gt;、&lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;の使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;の変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;このサンプルでは、&lt;code&gt;JPopupMenu#adjustPopupLocationToFitScreen(...)&lt;/code&gt;メソッドを改変して、&lt;code&gt;SystemTray&lt;/code&gt;の位置によって&lt;code&gt;JPopupMenu&lt;/code&gt;が画面外にはみ出さないように調整しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//Copied from JPopupMenu.java: JPopupMenu#adjustPopupLocationToFitScreen(...)
private static Point adjustPopupLocation(JPopupMenu popup, int xposition, int yposition) {
  Point p = new Point(xposition, yposition);
  if (GraphicsEnvironment.isHeadless()) return p;

  Rectangle screenBounds;
  GraphicsConfiguration gc = null;
  // Try to find GraphicsConfiguration, that includes mouse pointer position
  for (GraphicsDevice gd: GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()) {
    if (gd.getType() == GraphicsDevice.TYPE_RASTER_SCREEN) {
      GraphicsConfiguration dgc = gd.getDefaultConfiguration();
      if (dgc.getBounds().contains(p)) {
        gc = dgc;
        break;
      }
    }
  }

  // If not found and popup have invoker, ask invoker about his gc
  if (gc == null &amp;amp;&amp;amp; popup.getInvoker() != null) {
    gc = popup.getInvoker().getGraphicsConfiguration();
  }

  if (gc != null) {
    // If we have GraphicsConfiguration use it to get
    // screen bounds
    screenBounds = gc.getBounds();
  } else {
    // If we don&#39;t have GraphicsConfiguration use primary screen
    screenBounds = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
  }

  Dimension size = popup.getPreferredSize();

  // Use long variables to prevent overflow
  long pw = (long) p.x + (long) size.width;
  long ph = (long) p.y + (long) size.height;

  if (pw &amp;gt; screenBounds.x + screenBounds.width)  p.x -= size.width;
  if (ph &amp;gt; screenBounds.y + screenBounds.height) p.y -= size.height;

  // Change is made to the desired (X,Y) values, when the
  // PopupMenu is too tall OR too wide for the screen
  if (p.x &amp;lt; screenBounds.x) p.x = screenBounds.x;
  if (p.y &amp;lt; screenBounds.y) p.y = screenBounds.y;

  return p;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/02/jtrayicon_updat.html&quot;&gt;JTrayIcon update | Java.net&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://java.net/projects/swinghelper/sources/svn/content/trunk/src/java/org/jdesktop/swinghelper/tray/JXTrayIcon.java&quot;&gt;Swinghelper: Subversion: JXTrayIcon.java — Java.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/systemtray.html&quot;&gt;How to Use the System Tray (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Other Swing Features)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6285881&quot;&gt;Bug ID: 6285881 JTrayIcon: support Swing JPopupMenus for tray icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6453521&quot;&gt;Bug ID: 6453521 TrayIcon should support transparency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースを上げ忘れていたのを修正orz。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-02 (水) 19:07:51&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JRE1.6.0u3&lt;/code&gt;で&lt;code&gt;2&lt;/code&gt;度連続で右クリックすると&lt;code&gt;ClassCastException&lt;/code&gt;起きちゃうんですよね・・・&lt;code&gt;BugParade&lt;/code&gt;でも見つけらんなかったです -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2011-10-25 (火) 18:45:38

&lt;ul&gt;
&lt;li&gt;どうもです。こちらでも&lt;code&gt;WindowsXP&lt;/code&gt;+&lt;code&gt;Java6u3&lt;/code&gt;の環境で、&lt;code&gt;TrayIcon&lt;/code&gt;上で右クリックを繰り返すと、&lt;code&gt;ClassCastException: java.awt.TrayIcon cannot be cast to java.awt.Component&lt;/code&gt;が発生するのを確認しました。&lt;code&gt;bugs.sun.com&lt;/code&gt;を調べたら、&lt;code&gt;6u10&lt;/code&gt;で修正された &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6583251&quot;&gt;Bug ID: 6583251 One more ClassCastException in Swing with TrayIcon&lt;/a&gt;がそれっぽい気がします。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-26 (水) 00:56:41&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;情報ありがとうございます・・・&lt;code&gt;u10&lt;/code&gt;か・・・&lt;code&gt;SynthUI&lt;/code&gt;がらみの大きなパッケージ変更がイやで古代の&lt;code&gt;Ver&lt;/code&gt;を利用しているのでちょっと工夫してみます -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2011-10-27 (木) 10:45:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/trayiconpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/trayiconpopupmenu</guid>
                <pubDate>2011-01-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerのボタンを左右に配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;のレイアウトを変更して、矢印ボタンを左右に配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerButtonLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TT0IT-0k7EI/AAAAAAAAAzA/8LBM7qgDVvw/s800/SpinnerButtonLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SpinnerLayout extends BorderLayout {
  @Override public void addLayoutComponent(Component comp, Object constraints) {
    String str = &quot;&quot;;
    if(&quot;Editor&quot;.equals(constraints)) {
      str = &quot;Center&quot;;
    } else if(&quot;Next&quot;.equals(constraints)) {
      str = &quot;East&quot;;
    } else if(&quot;Previous&quot;.equals(constraints)) {
      str = &quot;West&quot;;
    }
    super.addLayoutComponent(comp, str);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT_TO_LEFT&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner#setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT)&lt;/code&gt;で、ボタンを左側に配置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L(Prev), R(Next): 1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BorderLayout#addLayoutComponent(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;Editor&lt;/code&gt;を&lt;code&gt;Center&lt;/code&gt;、&lt;code&gt;Next&lt;/code&gt;を&lt;code&gt;East&lt;/code&gt;、&lt;code&gt;Prev&lt;/code&gt;を&lt;code&gt;West&lt;/code&gt;に配置するレイアウトマネージャーを作成して使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner = new JSpinner(model) {
  @Override public void updateUI() {
    super.updateUI();
    setUI(new BasicSpinnerUI() {
      @Override protected LayoutManager createLayout() {
        return new SpinnerLayout();
      }
    });
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L(Prev), R(Next): 2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;L(Prev), R(Next: 1&lt;/code&gt;と同じレイアウトマネージャーを&lt;code&gt;JSpinner#setLayout(...)&lt;/code&gt;メソッドをオーバーライドして設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner = new JSpinner(model) {
  @Override public void setLayout(LayoutManager mgr) {
    super.setLayout(new SpinnerLayout());
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnerbuttonlayout</link>
                <guid>http://terai.xrea.jp/swing/spinnerbuttonlayout</guid>
                <pubDate>2011-01-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeを行クリックで選択し、行全体を選択状態の背景色で描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の行をクリックして選択し、行全体を選択状態の背景色で描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeRowSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TTPdCvaUyfI/AAAAAAAAAyQ/QnF4vHjyUiM/s800/TreeRowSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final Color SELC = new Color(100,150,200);
JTree tree = new JTree() {
  @Override public void paintComponent(Graphics g) {
    g.setColor(getBackground());
    g.fillRect(0,0,getWidth(),getHeight());
    if(getSelectionCount()&amp;gt;0) {
      for(int i: getSelectionRows()) {
        Rectangle r = getRowBounds(i);
        g.setColor(SELC);
        g.fillRect(0, r.y, getWidth(), r.height);
      }
    }
    super.paintComponent(g);
    if(getLeadSelectionPath()!=null) {
      Rectangle r = getRowBounds(getRowForPath(getLeadSelectionPath()));
      g.setColor(SELC.darker());
      g.drawRect(0, r.y, getWidth()-1, r.height-1);
    }
  }
};
tree.setUI(new javax.swing.plaf.basic.BasicTreeUI() {
  @Override public Rectangle getPathBounds(JTree tree, TreePath path) {
    if(tree != null &amp;amp;&amp;amp; treeState != null) {
      return getPathBounds(path, tree.getInsets(), new Rectangle());
    }
    return null;
  }
  private Rectangle getPathBounds(TreePath path, Insets insets, Rectangle bounds) {
    bounds = treeState.getBounds(path, bounds);
    if(bounds != null) {
      bounds.width = tree.getWidth();
      bounds.y += insets.top;
    }
    return bounds;
  }
});
tree.setOpaque(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;以下のような設定で、&lt;code&gt;JTree&lt;/code&gt;を行選択できるように変更し、表示も&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;風に行全体を選択状態の背景色で描画するようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicTreeUI#getPathBounds(...)&lt;/code&gt;をオーバーライドして、ノードではなく、行のクリックで選択可能に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;の背景を&lt;code&gt;setOpaque(false)&lt;/code&gt;で透明(非描画)にし、&lt;code&gt;JTree#paintComponent(...)&lt;/code&gt;をオーバーライドして選択された行を背景色で描画&lt;/li&gt;
&lt;li&gt;不透明にした&lt;code&gt;TreeCellRenderer&lt;/code&gt;を使用して、ノードの選択色を&lt;code&gt;JTree#paintComponent(...)&lt;/code&gt;の背景色と同じものに変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/KrdLab/20071209/1197143960&quot;&gt;JTable でセルのないところに行っぽい表示を出せますか？ - KrdLabの不定期日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jroller.com/santhosh/entry/highlight_a_node_s_descendants&quot;&gt;Highlight a node&amp;#39;s descendants in JTree - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;https://forums.oracle.com/thread/2160338&quot;&gt;Swing - JTree - highlight entire row on selection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treerowselection</link>
                <guid>http://terai.xrea.jp/swing/treerowselection</guid>
                <pubDate>2011-01-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserのデフォルトをDetails Viewに設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;を開いたときのデフォルトをリストではなく詳細に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DetailsViewFileChooser&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TSq77M-soeI/AAAAAAAAAxg/0nnen-n-cAY/s800/DetailsViewFileChooser.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//java - How can I start the JFileChooser in the Details view? - Stack Overflow]
//http://stackoverflow.com/questions/16292502/how-can-i-start-the-jfilechooser-in-the-details-view
//for(Object key: chooser.getActionMap().allKeys()) {
//    System.out.println(key);
//}
Action detailsAction = chooser.getActionMap().get(&quot;viewTypeDetails&quot;);
if(detailsAction!=null) detailsAction.actionPerformed(null);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下のリンクで紹介されているように、&lt;code&gt;ActionMap&lt;/code&gt;から&lt;code&gt;viewTypeDetails&lt;/code&gt;アクションを取得する方法が一番簡単なようです。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16292502/how-can-i-start-the-jfilechooser-in-the-details-view&quot;&gt;java - How can I start the JFileChooser in the Details view? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;何時から使用できるようになったのか、それとも元から使用可能だったのかなどを調査中。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;の子で&lt;code&gt;UIManager.getIcon(&amp;quot;FileChooser.detailsViewIcon&amp;quot;)&lt;/code&gt;アイコンが設定されている&lt;code&gt;JToggleButton&lt;/code&gt;を検索、&lt;code&gt;doClick()&lt;/code&gt;することで、&lt;code&gt;List&lt;/code&gt;から&lt;code&gt;DetailsView&lt;/code&gt;(詳細)に切り替える方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//searchAndClick(chooser, UIManager.getIcon(&quot;FileChooser.detailsViewIcon&quot;));
private static boolean searchAndClick(Container parent, Icon icon) {
  for(Component c:parent.getComponents()) {
    if(c instanceof JToggleButton &amp;amp;&amp;amp; ((JToggleButton)c).getIcon()==icon) {
      ((AbstractButton)c).doClick();
      return true;
    }else{
      if(searchAndClick((Container)c, icon)) return true;
    }
  }
  return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;警告されますが、以下のように&lt;code&gt;sun.swing.FilePane#setViewType(sun.swing.FilePane.VIEWTYPE_DETAILS)&lt;/code&gt;メソッドを使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;FilePane filePane = (FilePane)findChildComponent(chooser, FilePane.class);
filePane.setViewType(FilePane.VIEWTYPE_DETAILS);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16292502/how-can-i-start-the-jfilechooser-in-the-details-view&quot;&gt;java - How can I start the JFileChooser in the Details view? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/13/swing-utils/&quot;&gt;Swing Utils « Java Tips Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://www.java-forums.org/awt-swing/13733-set-jfilechooser-default-details-view.html&quot;&gt;set jFileChooser default to details view - Java Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.docjar.com/html/api/sun/swing/FilePane.java.html&quot;&gt;sun.swing: FilePane.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/detailsviewfilechooser</link>
                <guid>http://terai.xrea.jp/swing/detailsviewfilechooser</guid>
                <pubDate>2011-01-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブエリア背景色などをテスト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;の&lt;code&gt;JTabbedPane&lt;/code&gt;で、タブエリアの背景色などを変更するテストをしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabAreaBackground&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TSFbcaeJLEI/AAAAAAAAAw0/zQFscoerEGk/s800/TabAreaBackground.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;TabbedPane.shadow&quot;,                Color.GRAY);
UIManager.put(&quot;TabbedPane.darkShadow&quot;,            Color.GRAY);
UIManager.put(&quot;TabbedPane.light&quot;,                 Color.GRAY);
UIManager.put(&quot;TabbedPane.highlight&quot;,             Color.GRAY);
UIManager.put(&quot;TabbedPane.tabAreaBackground&quot;,     Color.GRAY);
UIManager.put(&quot;TabbedPane.unselectedBackground&quot;,  Color.GRAY);
UIManager.put(&quot;TabbedPane.background&quot;,            Color.GRAY);
UIManager.put(&quot;TabbedPane.foreground&quot;,            Color.WHITE);
UIManager.put(&quot;TabbedPane.focus&quot;,                 Color.WHITE);
UIManager.put(&quot;TabbedPane.contentAreaColor&quot;,      Color.WHITE);
UIManager.put(&quot;TabbedPane.selected&quot;,              Color.WHITE);
UIManager.put(&quot;TabbedPane.selectHighlight&quot;,       Color.WHITE);
UIManager.put(&quot;TabbedPane.borderHightlightColor&quot;, Color.WHITE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPanel&lt;/code&gt;タブの&lt;code&gt;JCheckBox&lt;/code&gt;で&lt;code&gt;JTabbedPane&lt;/code&gt;を不透明にしたり、&lt;code&gt;JComboBox&lt;/code&gt;でキーを指定し、&lt;code&gt;UIManager.put(&amp;quot;TabbedPane.unselectedBackground&amp;quot;,  Color.GREEN);&lt;/code&gt;などとして色を変更することができます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;タブ文字色は、&lt;code&gt;JTabbedPane#setForegroundAt(...)&lt;/code&gt;メソッドを使用して切り替えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorTab.html&quot;&gt;JTabbedPaneの選択文字色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleHighlight.html&quot;&gt;JTabbedPaneのタブ文字列をハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabareabackground</link>
                <guid>http://terai.xrea.jp/swing/tabareabackground</guid>
                <pubDate>2011-01-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuBarのJMenuを折り返し</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenuBar&lt;/code&gt;のレイアウトマネージャーを変更して、&lt;code&gt;JMenu&lt;/code&gt;を折り返して表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MenuBarLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TRf4-liTfjI/AAAAAAAAAwk/CURxxE6iDqk/s800/MenuBarLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JMenuBar menuBar = new JMenuBar();
menuBar.setLayout(new FlowLayout(FlowLayout.LEFT,2,2) {
  @Override public Dimension preferredLayoutSize(Container target) {
    synchronized (target.getTreeLock()) {
      int targetWidth = target.getSize().width;
      if (targetWidth == 0) targetWidth = Integer.MAX_VALUE;
      Insets insets = target.getInsets();
      int hgap = getHgap();
      int vgap = getVgap();
      int maxWidth = targetWidth - (insets.left + insets.right);
      int height   = vgap;
      int rowWidth = hgap, rowHeight = 0;
      int nmembers = target.getComponentCount();
      for(int i = 0; i &amp;lt; nmembers; i++) {
        Component m = target.getComponent(i);
        if(m.isVisible()) {
          Dimension d = m.getPreferredSize();
          if(rowWidth + d.width &amp;gt; maxWidth) {
            height += rowHeight;
            rowWidth = hgap;
            rowHeight = 0;
          }
          rowWidth += d.width + hgap;
          rowHeight = Math.max(rowHeight, d.height + vgap);
        }
      }
      height += rowHeight + insets.top  + insets.bottom;
      return new Dimension(targetWidth, height);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JMenuBar&lt;/code&gt;(デフォルトの&lt;code&gt;LayoutManager&lt;/code&gt;は&lt;code&gt;BoxLayout&lt;/code&gt;)に、&lt;code&gt;FlowLayout&lt;/code&gt;を継承して折り返しを行う&lt;code&gt;LayoutManager&lt;/code&gt;を設定して、&lt;code&gt;JMenu&lt;/code&gt;がフレームの幅に収まらない場合は折り返して表示するようにしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BorderLayout&lt;/code&gt;を設定した&lt;code&gt;JPanel#add(menubar, BorderLayout.NORTH)&lt;/code&gt;として&lt;code&gt;JMenuBar&lt;/code&gt;を追加していますが、&lt;code&gt;JFrame#setJMenuBar&lt;/code&gt;メソッドを使用した場合、以下のような不具合？があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;の最大化、最小化で折り返しが更新されない&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下のような、&lt;code&gt;WindowStateListener&lt;/code&gt;を&lt;code&gt;JFrame&lt;/code&gt;に追加し、&lt;code&gt;ContentPane&lt;/code&gt;を&lt;code&gt;revalidate()&lt;/code&gt;して回避&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.addWindowStateListener(new WindowAdapter() {
  @Override public void windowStateChanged(final WindowEvent e) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        System.out.println(&quot;windowStateChanged&quot;);
        JFrame f = (JFrame)e.getWindow();
        ((JComponent)f.getContentPane()).revalidate();
      }
    });
  }
});
//frame.getContentPane().addComponentListener(new ComponentAdapter() {
//  @Override public void componentResized(ComponentEvent e) {
//    ((JComponent)e.getSource()).revalidate();
//  }
//});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;または、以下のように、&lt;code&gt;FlowLayout#layoutContainer&lt;/code&gt;をオーバーライドすることで回避&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//http://tips4java.wordpress.com/2008/11/06/wrap-layout/
//WrapLayout.java
//Rob Camick on November 6, 2008
private Dimension preferredLayoutSize;
@Override public void layoutContainer(Container target) {
  Dimension size = preferredLayoutSize(target);
  if(size.equals(preferredLayoutSize)) {
    super.layoutContainer(target);
  }else{
    preferredLayoutSize = size;
    Container top = target;
    while(!(top instanceof Window) &amp;amp;&amp;amp; top.getParent() != null) {
      top = top.getParent();
    }
    top.validate();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JFrame#pack()&lt;/code&gt;しても、&lt;code&gt;JFrame&lt;/code&gt;のサイズが変更されない&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame#setSize(...)&lt;/code&gt;に変更することで回避&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/06/wrap-layout/&quot;&gt;Wrap Layout « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/menubarlayout</link>
                <guid>http://terai.xrea.jp/swing/menubarlayout</guid>
                <pubDate>2010-12-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル内に二行だけ表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル内に文字列を二行分だけ表示し、あふれる場合は&lt;code&gt;...&lt;/code&gt;で省略します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TwoRowsCellRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQ77KlEsZJI/AAAAAAAAAuE/mc9fcp-ZmBU/s800/TwoRowsCellRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model);
table.setAutoCreateRowSorter(true);
table.setRowHeight(table.getRowHeight() * 2);
table.setDefaultRenderer(String.class, new TwoRowsCellRenderer());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TwoRowsCellRenderer extends JPanel implements TableCellRenderer {
  JLabel top = new JLabel();
  JLabel bottom = new JLabel();
  public TwoRowsCellRenderer() {
    super(new GridLayout(2,1,0,0));
    add(top);
    add(bottom);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value,boolean isSelected,boolean hasFocus,int row,int column) {
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setFont(table.getFont());
    FontMetrics fm  = table.getFontMetrics(table.getFont());
    String text   = (value==null) ? &quot;&quot; : value.toString();
    String first  = text;
    String second   = &quot;&quot;;
    int columnWidth = table.getColumnModel().getColumn(column).getWidth();
    int textWidth   = 0;
    for(int i=0; i&amp;lt;text.length(); i++) {
      textWidth += fm.charWidth(text.charAt(i));
      if(textWidth&amp;gt;columnWidth) {
        first  = text.substring(0,i-1);
        second = text.substring(i-1);
        break;
      }
    }
    top.setText(first);
    bottom.setText(second);
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;を上下に配置した&lt;code&gt;JPanel&lt;/code&gt;を使って、&lt;code&gt;TableCellRenderer&lt;/code&gt;を作成しています。&lt;code&gt;...&lt;/code&gt;での省略は、二行目の&lt;code&gt;JLabel&lt;/code&gt;のデフォルト動作です。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GlyphVector.html&quot;&gt;JLabelの文字列を折り返し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tworowscellrenderer</link>
                <guid>http://terai.xrea.jp/swing/tworowscellrenderer</guid>
                <pubDate>2010-12-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableでファイルとディレクトリを別々にソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;でファイルとディレクトリを別々にソートし、ディレクトリが常に先頭になるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileDirectoryComparator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQXAQuafMsI/AAAAAAAAAqU/BDQdRbMeSnE/s800/FileDirectoryComparator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;// &amp;gt; dir /O:GN
// &amp;gt; ls --group-directories-first
class FileGroupComparator extends DefaultFileComparator{
  private final JTable table;
  public FileGroupComparator(JTable table, int column) {
    super(column);
    this.table = table;
  }
  @Override public int compare((File a, File b) {
    int flag = 1;
    java.util.List&amp;lt;? extends TableRowSorter.SortKey&amp;gt; keys
        = table.getRowSorter().getSortKeys();
    if(!keys.isEmpty()) {
      TableRowSorter.SortKey sortKey = keys.get(0);
      if(sortKey.getColumn()==column &amp;amp;&amp;amp;
         sortKey.getSortOrder()==SortOrder.DESCENDING) {
        flag = -1;
      }
    }
    if(a.isDirectory() &amp;amp;&amp;amp; !b.isDirectory()) {
      return -1*flag;
    }else if(!a.isDirectory() &amp;amp;&amp;amp; b.isDirectory()) {
      return  1*flag;
    }else{
      return super.compare(a, b);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;Drag &amp;amp; Drop&lt;/code&gt;で追加したファイルやディレクトリを、以下の&lt;code&gt;3&lt;/code&gt;つのモードでソートすることが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File#getName()&lt;/code&gt;で取得できる&lt;code&gt;String&lt;/code&gt;などのデフォルトで比較&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Directory &amp;lt; File&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;「ディレクトリ &amp;lt; ファイル」となるような&lt;code&gt;Comparator&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Group Sorting&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;昇順の場合は「ディレクトリ &amp;lt; ファイル」、降順の場合は、「ディレクトリ &amp;gt; ファイル」として、ディレクトリが常に先頭になる&lt;code&gt;Comparator&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;, &lt;code&gt;JDK 1.7.0&lt;/code&gt;で&lt;code&gt;UIManager.getIcon(&amp;quot;FileView.directoryIcon&amp;quot;)&lt;/code&gt;が取得できない？ので、&lt;code&gt;FileSystemView.getSystemIcon(...)&lt;/code&gt;で&lt;code&gt;Icon&lt;/code&gt;を取得するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-14 (月) 16:33:14&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/filedirectorycomparator</link>
                <guid>http://terai.xrea.jp/swing/filedirectorycomparator</guid>
                <pubDate>2010-12-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの選択状態を解除する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;でノード以外の領域をマウスでクリックした場合、選択状態を解除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeClearSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWDzni-uI/AAAAAAAAAoo/r6UW4JENwgI/s800/TreeClearSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.addMouseListener(new MouseAdapter() {
  @Overridepublic void mousePressed(MouseEvent e) {
    JTree tree = (JTree)e.getSource();
    if(tree.getRowForLocation(e.getX(), e.getY())&amp;lt;0) {
      tree.clearSelection();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTree#getRowForLocation(...)&lt;/code&gt;メソッドを使用して、&lt;code&gt;JTree&lt;/code&gt;のノード以外のポイントがクリックされたかどうかを判断しています。ノードの選択解除自体は、&lt;code&gt;JTree#clearSelection()&lt;/code&gt;が使用できます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTree.html&quot;&gt;JTree (Java Platform SE 6)&lt;/a&gt;のサンプルコード&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treeclearselection</link>
                <guid>http://terai.xrea.jp/swing/treeclearselection</guid>
                <pubDate>2010-12-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderの字揃えを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;の字揃えを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HorizontalAlignmentHeaderRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTN5ZuPeZI/AAAAAAAAAbg/Fivi4R1rR-Y/s800/HorizontalAlignmentHeaderRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HorizontalAlignmentHeaderRenderer implements TableCellRenderer{
  private int horizontalAlignment = SwingConstants.LEFT;
  public HorizontalAlignmentHeaderRenderer(int horizontalAlignment) {
    this.horizontalAlignment = horizontalAlignment;
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    TableCellRenderer r = table.getTableHeader().getDefaultRenderer();
    JLabel l = (JLabel)r.getTableCellRendererComponent(
        table,value,isSelected,hasFocus,row,column);
    l.setHorizontalAlignment(horizontalAlignment);
    return l;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Test1&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;から、&lt;code&gt;DefaultRenderer&lt;/code&gt;を取得し、&lt;code&gt;setHorizontalAlignment&lt;/code&gt;メソッドで字揃えを設定&lt;/li&gt;
&lt;li&gt;すべての列の字揃えが変更される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;((JLabel)table.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Test2&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTableCellRenderer&lt;/code&gt;を継承するレンダラーを設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;の色などが表示されない？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent(
        table,value,isSelected,hasFocus,row,column);
    setHorizontalAlignment(SwingConstants.CENTER);
    return this;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Test3&lt;/code&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableCellRenderer#getTableCellRendererComponent(...)&lt;/code&gt;メソッド内で、デフォルトのヘッダレンダラーを取得し、字揃えを設定&lt;/li&gt;
&lt;li&gt;上記の&lt;code&gt;HorizontalAlignmentHeaderRenderer&lt;/code&gt;を全ての列に設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.getColumnModel().getColumn(0).setHeaderRenderer(
    new HorizontalAlignmentHeaderRenderer(SwingConstants.LEFT));
table.getColumnModel().getColumn(1).setHeaderRenderer(
    new HorizontalAlignmentHeaderRenderer(SwingConstants.CENTER));
table.getColumnModel().getColumn(2).setHeaderRenderer(
    new HorizontalAlignmentHeaderRenderer(SwingConstants.RIGHT));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;以下の方法でも &lt;code&gt;0&lt;/code&gt;列目だけ中央揃えにすることが可能だが、初回が&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;などの&lt;code&gt;SystemLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;LookAndFeel&lt;/code&gt;を変更すると&lt;code&gt;NullPointerException&lt;/code&gt;が発生する(それ以外の場合でもヘッダの&lt;code&gt;LookAndFeel&lt;/code&gt;が切り替わらない)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
}catch(Exception e) {
  e.printStackTrace();
}
//...
final TableCellRenderer renderer = table.getTableHeader().getDefaultRenderer();
//table.getColumnModel().getColumn(0).setHeaderRenderer(new TableCellRenderer() {
table.getTableHeader().setDefaultRenderer(new TableCellRenderer() {
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
          boolean isSelected, boolean hasFocus, int row, int column) {
    JLabel l = (JLabel)renderer.getTableCellRendererComponent(
          table,value,isSelected,hasFocus,row,column);
    if(table.convertColumnIndexToModel(column)==0) {
      l.setHorizontalAlignment(SwingConstants.CENTER);
    }else{
      l.setHorizontalAlignment(SwingConstants.LEFT);
    }
    return l;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HeaderFont.html&quot;&gt;JTableHeaderのフォントを変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/horizontalalignmentheaderrenderer</link>
                <guid>http://terai.xrea.jp/swing/horizontalalignmentheaderrenderer</guid>
                <pubDate>2010-11-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>LayoutManagerを使ってパネルの展開アニメーションを行う</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;パネルの展開・収納をアニメーションで行う&lt;code&gt;LayoutManager&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LayoutAnimation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTO_fTHG-I/AAAAAAAAAdQ/9SHzG18aVW0/s800/LayoutAnimation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private javax.swing.Timer animator = null;
private boolean isHidden = true;
private final JPanel controls = new JPanel(new BorderLayout(5, 5) {
  private int controlsHeight = 0;
  private int controlsPreferredHeight = 0;
  @Override public Dimension preferredLayoutSize(Container target) {
    Dimension ps = super.preferredLayoutSize(target);
    controlsPreferredHeight = ps.height;
    if(animator!=null) {
      if(isHidden) {
        if(controls.getHeight()&amp;lt;controlsPreferredHeight) controlsHeight += 5;
      }else{
        if(controls.getHeight()&amp;gt;0) controlsHeight -= 5;
      }
      if(controlsHeight&amp;lt;=0) {
        controlsHeight = 0;
        animator.stop();
      }else if(controlsHeight&amp;gt;=controlsPreferredHeight) {
        controlsHeight = controlsPreferredHeight;
        animator.stop();
      }
    }
    ps.height = controlsHeight;
    return ps;
  }
});
private Action makeShowHideAction() {
  return new AbstractAction(&quot;Show/Hide Search Box&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      if(animator!=null &amp;amp;&amp;amp; animator.isRunning()) return;
      isHidden = controls.getHeight()==0;
      animator = new javax.swing.Timer(5, new ActionListener() {
        @Override public void actionPerformed(ActionEvent e) {
          controls.revalidate();
        }
      });
      animator.start();
    }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;LayoutManager#preferredLayoutSize(...)&lt;/code&gt;をオーバーライドして、パネルの高さを更新するアニメーションを行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;内部の&lt;code&gt;JTree&lt;/code&gt;の高さを縮小せずに、重ねる状態で検索パネルを表示したい場合は、&lt;code&gt;BorderLayout&lt;/code&gt;ではなく、&lt;code&gt;OverlayLayout&lt;/code&gt;を&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;のように使用する方法があります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;このサンプルで省略した、実際に&lt;code&gt;JTree&lt;/code&gt;のノードを検索するコードはこちらにあります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/layoutanimation</link>
                <guid>http://terai.xrea.jp/swing/layoutanimation</guid>
                <pubDate>2010-11-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipにJButtonのMnemonicを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;に&lt;code&gt;Mnemonic&lt;/code&gt;が設定されている場合、&lt;code&gt;JToolTip&lt;/code&gt;にそれを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MnemonicToolTip&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTP7StneAI/AAAAAAAAAew/RwPtDfNOEyg/s800/MnemonicToolTip.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MnemonicToolTip extends JToolTip {
  private final JLabel mnemonicLabel = new JLabel();
  public MnemonicToolTip() {
    setLayout(new BorderLayout());
    mnemonicLabel.setForeground(Color.GRAY);
    mnemonicLabel.setBorder(BorderFactory.createEmptyBorder(0,2,0,2));
    add(mnemonicLabel, BorderLayout.EAST);
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    if(mnemonicLabel.isVisible()) {
      d.width += mnemonicLabel.getPreferredSize().width;
    }
    return d;
  }
  @Override public void setComponent(JComponent c) {
    if(c instanceof AbstractButton) {
      AbstractButton b = (AbstractButton)c;
      int mnemonic = b.getMnemonic();
      if(mnemonic&amp;gt;0) {
        mnemonicLabel.setVisible(true);
        mnemonicLabel.setText(&quot;Alt+&quot;+KeyEvent.getKeyText(mnemonic));
      }else{
        mnemonicLabel.setVisible(false);
      }
    }
    super.setComponent(c);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setToolTipText&lt;/code&gt;で直接&lt;code&gt;Mnemonic&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JToolTip&lt;/code&gt;に&lt;code&gt;BorderLayout&lt;/code&gt;を設定して、&lt;code&gt;Mnemonic&lt;/code&gt;用の&lt;code&gt;JLabel&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToolTipIcon.html&quot;&gt;JToolTipにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mnemonictooltip</link>
                <guid>http://terai.xrea.jp/swing/mnemonictooltip</guid>
                <pubDate>2010-11-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JRadioButtonMenuItemのチェックアイコンを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;のチェックアイコンを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RadioButtonMenuItemIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTRVf_tDmI/AAAAAAAAAhA/1F6GcDuJmcg/s800/RadioButtonMenuItemIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//com.sun.java.swing.plaf.windows.WindowsIconFactory.java
class RadioButtonMenuItemIcon1 implements Icon, UIResource, Serializable {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    AbstractButton b = (AbstractButton) c;
    ButtonModel model = b.getModel();
    if(b.isSelected()) {
      Graphics2D g2 = (Graphics2D)g;
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      g2.fillRoundRect(x+3,y+3, getIconWidth()-6, getIconHeight()-6, 4, 4);
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
    }
  }
  @Override public int getIconWidth()  { return 12; }
  @Override public int getIconHeight() { return 12; }
}
class RadioButtonMenuItemIcon2 implements Icon, UIResource, Serializable {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    AbstractButton b = (AbstractButton) c;
    ButtonModel model = b.getModel();
    if(b.isSelected()) {
      //g.fillRoundRect(x+3,y+3, getIconWidth()-6, getIconHeight()-6, 4, 4);
      g.fillOval(x+2,y+2, getIconWidth()-5, getIconHeight()-5);
      //g.fillArc(x+2,y+2,getIconWidth()-5, getIconHeight()-5, 0, 360);
    }
  }
  @Override public int getIconWidth()  { return 12; }
  @Override public int getIconHeight() { return 12; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;(&lt;code&gt;Java1.6.0&lt;/code&gt;)で、&lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;のチェックアイコンがすこし歪？なので以下のように修正しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ANTIALIASING&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com.sun.java.swing.plaf.windows.WindowsIconFactory&lt;/code&gt;のアイコンを&lt;code&gt;g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)&lt;/code&gt;でアンチエイリアス&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fillOval&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fillRoundRect&lt;/code&gt;ではなく、&lt;code&gt;fillOval&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxMenuItemIcon.html&quot;&gt;JCheckBoxMenuItemのチェックアイコンを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;でテストするとアイコンの歪みはないようです。修正されてたのかも？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-08 (水) 19:51:09&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/radiobuttonmenuitemicon</link>
                <guid>http://terai.xrea.jp/swing/radiobuttonmenuitemicon</guid>
                <pubDate>2010-11-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderを非表示にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;の表示、非表示を切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RemoveTableHeader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTRpYOxz3I/AAAAAAAAAhg/7HdNawHaulI/s800/RemoveTableHeader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JScrollPane scrollPane = new JScrollPane(table);
JCheckBox check = new JCheckBox(&quot;JTableHeader visible: &quot;, true);
check.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    JCheckBox cb = (JCheckBox)e.getSource();
    //table.getTableHeader().setVisible(cb.isSelected());
    scrollPane.getColumnHeader().setVisible(cb.isSelected());
    scrollPane.revalidate();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;table.setTableHeader(null)&lt;/code&gt;や、&lt;code&gt;table.setTableHeader(new JTableHeader(table.getColumnModel()))&lt;/code&gt;は使用せず、&lt;code&gt;JTable&lt;/code&gt;を配置した&lt;code&gt;JScrollPane&lt;/code&gt;の&lt;code&gt;JScrollPane#getColumnHeader().setVisible(boolean)&lt;/code&gt;メソッドを使って、&lt;code&gt;JTableHeader&lt;/code&gt;の表示、非表示を変更しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/removetableheader</link>
                <guid>http://terai.xrea.jp/swing/removetableheader</guid>
                <pubDate>2010-11-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルの高さを自動調整</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルの高さを、文字列の折り返しに応じて自動調整します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AutoWrapTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTH4TWFB1I/AAAAAAAAAR4/8C89wEJ8EUA/s800/AutoWrapTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; rowColHeight = new ArrayList&amp;lt;&amp;gt;();
private void adjustRowHeight(JTable table, int row, int column) {
  //int cWidth = table.getTableHeader().getColumnModel().getColumn(column).getWidth();
  int cWidth = table.getCellRect(row, column, false).width; //セルの内余白は含めない
  //setSize(new Dimension(cWidth, 1000)); //注目
  setBounds(table.getCellRect(row, column, false)); //もしくは？
  //doLayout();

  int prefH = getPreferredSize().height;
  while(rowColHeight.size() &amp;lt;= row) {
    rowColHeight.add(new ArrayList&amp;lt;Integer&amp;gt;(column));
  }
  List&amp;lt;Integer&amp;gt; colHeights = rowColHeight.get(row);
  while(colHeights.size() &amp;lt;= column) {
    colHeights.add(0);
  }
  colHeights.set(column, prefH);
  int maxH = prefH;
  for(Integer colHeight : colHeights) {
    if(colHeight &amp;gt; maxH) {
      maxH = colHeight;
    }
  }
  if(table.getRowHeight(row) != maxH) {
    table.setRowHeight(row, maxH);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、セルレンダラーに、&lt;code&gt;setLineWrap(true)&lt;/code&gt;とした&lt;code&gt;JTextArea&lt;/code&gt;を使用し、カラムサイズの変更などがあったときに、その&lt;code&gt;JTextArea&lt;/code&gt;の高さを取得して&lt;code&gt;JTable#setRowHeight(int)&lt;/code&gt;メソッドで各行の高さとして設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/10/26/text-utilities/&quot;&gt;Text Utilities « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableCellRenderer.html&quot;&gt;JTableのセル幅で文字列を折り返し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;高さが微妙に更新されない場合がある…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-10-27 (水) 14:02:02&lt;/li&gt;
&lt;li&gt;フレームのサイズ(&lt;code&gt;JTable&lt;/code&gt;の高さ)を微妙に調整すると、スクロールバーが表示・非表示を繰り返す場合がある。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-11-02 (火) 20:23:55&lt;/li&gt;
&lt;li&gt;&lt;del&gt;上二つの原因は同じだと思うけど、今のところ何が問題なのか分からず、お手上げ状態です。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-11-02 (火) 20:26:21&lt;/li&gt;
&lt;li&gt;レンダラーに以下のようなコードを追加して調整するサンプルを発見: &lt;a href=&quot;http://blog.botunge.dk/post/2009/10/09/JTable-multiline-cell-renderer.aspx&quot;&gt;JTable multiline cell renderer&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-21 (火) 04:18:52

&lt;ul&gt;
&lt;li&gt;この方法だと、セルを描画する毎に、行の高さを調整するようになるので、これまでのドラッグでリサイズ中の微妙なサイズは無くなるはず(多少重くなるかもしれないけど、違いは全く感じられない)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-21 (火) 18:43:54&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/autowraptablecell</link>
                <guid>http://terai.xrea.jp/swing/autowraptablecell</guid>
                <pubDate>2010-10-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeで条件に一致するノードを検索しハイライト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;を検索し、&lt;code&gt;TreeCellRenderer&lt;/code&gt;を使ってノードをハイライトします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeNodeHighlightSearch&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWIqTzfbI/AAAAAAAAAow/n7eIy_ax-zY/s800/TreeNodeHighlightSearch.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightTreeCellRenderer extends DefaultTreeCellRenderer {
  private static final Color rollOverRowColor = new Color(220, 240, 255);
  private final TreeCellRenderer renderer;
  public String q;
  public HighlightTreeCellRenderer(TreeCellRenderer renderer) {
    this.renderer = renderer;
  }
  @Override public Component getTreeCellRendererComponent(JTree tree, Object value,
        boolean isSelected, boolean expanded,
        boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)renderer.getTreeCellRendererComponent(
        tree, value, isSelected, expanded, leaf, row, hasFocus);
    if(isSelected) {
      c.setOpaque(false);
      c.setForeground(getTextSelectionColor());
      //c.setBackground(Color.BLUE); //getBackgroundSelectionColor());
    }else{
      c.setOpaque(true);
      if(q!=null &amp;amp;&amp;amp; !q.isEmpty() &amp;amp;&amp;amp; value.toString().startsWith(q)) {
        c.setForeground(getTextNonSelectionColor());
        c.setBackground(rollOverRowColor);
      }else{
        c.setForeground(getTextNonSelectionColor());
        c.setBackground(getBackgroundNonSelectionColor());
      }
    }
    return c;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField&lt;/code&gt;に入力した文字列に&lt;code&gt;startsWith(...)&lt;/code&gt;で一致するノードをハイライトしています。デフォルトの&lt;code&gt;TreeCellRenderer&lt;/code&gt;は、&lt;code&gt;isOpaque()==Boolean.FALSE&lt;/code&gt;で、選択色は&lt;code&gt;DefaultTreeCellRenderer#paint(Graphics g)&lt;/code&gt;で塗りつぶされる(ノードアイコンを除いて選択状態にするため？)ので、検索のハイライトの為にレンダラーを&lt;code&gt;setOpaque(true)&lt;/code&gt;としてしまうと、マウスなどでノードを選択しても背景色が変更されません。このため、&lt;code&gt;DefaultTreeCellRenderer#getTreeCellRendererComponent(...)&lt;/code&gt;内で、検索のハイライトはレンダラーを&lt;code&gt;setOpaque(true)&lt;/code&gt;、ノードの選択は&lt;code&gt;setOpaque(false)&lt;/code&gt;となるように設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;DefaultTreeCellRenderer#getBackgroundNonSelectionColor()&lt;/code&gt;をオーバーライドする方法を使用すれば、デフォルトの選択領域(ノードアイコンは含まず、ノードテキストのみ)で選択色を変更することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeBackgroundSelectionColor.html&quot;&gt;JTreeの選択背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightTreeCellRenderer extends DefaultTreeCellRenderer {
  private static final Color rollOverRowColor = new Color(220, 240, 255);
  public String q;
  @Override public void updateUI() {
    setTextSelectionColor(null);
    setTextNonSelectionColor(null);
    setBackgroundSelectionColor(null);
    setBackgroundNonSelectionColor(null);
    super.updateUI();
  }
  boolean rollOver = false;
  @Override public Color getBackgroundNonSelectionColor() {
    return rollOver ? rollOverRowColor
                    : super.getBackgroundNonSelectionColor();
  }
  @Override public Component getTreeCellRendererComponent(
      JTree tree, Object value, boolean isSelected,
      boolean expanded, boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)super.getTreeCellRendererComponent(
        tree, value, isSelected, expanded, leaf, row, hasFocus);
    if(isSelected) {
      c.setForeground(getTextSelectionColor());
    }else{
      rollOver = q!=null &amp;amp;&amp;amp; !q.isEmpty() &amp;amp;&amp;amp; value.toString().startsWith(q);
      c.setForeground(getTextNonSelectionColor());
      c.setBackground(getBackgroundNonSelectionColor());
    }
    return c;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExpandAllNodes.html&quot;&gt;JTreeのノードを展開・折り畳み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RollOverTree.html&quot;&gt;JTreeのノードをハイライト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeBackgroundSelectionColor.html&quot;&gt;JTreeの選択背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HighlightWordInNode.html&quot;&gt;JTreeのノード中の文字列をハイライトする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ノードではなく一致する文字列だけをハイライトして強調表示する場合のサンプル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treenodehighlightsearch</link>
                <guid>http://terai.xrea.jp/swing/treenodehighlightsearch</guid>
                <pubDate>2010-10-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのTabTitleを左揃えに変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の&lt;code&gt;TabTitle&lt;/code&gt;をデフォルトに中央揃えから左揃えに変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabTitleAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTU2Jp4a6I/AAAAAAAAAms/x6g2ML8eyyQ/s800/TabTitleAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyTabbedPaneUI extends javax.swing.plaf.metal.MetalTabbedPaneUI {
  @Override protected void layoutLabel(int tabPlacement,
                                       FontMetrics metrics, int tabIndex,
                                       String title, Icon icon,
                                       Rectangle tabRect, Rectangle iconRect,
                                       Rectangle textRect, boolean isSelected ) {
    textRect.x = textRect.y = iconRect.x = iconRect.y = 0;
    //...
    SwingUtilities.layoutCompoundLabel((JComponent) tabPane,
                                       metrics, title, icon,
                                       SwingUtilities.CENTER,
                                       SwingUtilities.LEFT, //CENTER, &amp;lt;----
                                       SwingUtilities.CENTER,
                                       SwingUtilities.TRAILING,
                                       tabRect,
                                       iconRect,
                                       textRect,
                                       textIconGap);
    tabPane.putClientProperty(&quot;html&quot;, null);
    textRect.translate(tabInsets.left, 0); //&amp;lt;----
    textRect.width -= tabInsets.left+tabInsets.right;
    //...
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;デフォルト(中央揃え)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsTabbedPaneUI#layoutLabel(...)&lt;/code&gt;などをオーバーライドして左揃えに変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTitleTab.html&quot;&gt;JTabbedPaneのタブを等幅にしてタイトルをクリップ&lt;/a&gt;、&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TabComponentsDemoProject/src/components/ButtonTabComponent.java&quot;&gt;ButtonTabComponent.java&lt;/a&gt;を変更してタイトルを左揃え、&lt;code&gt;TabButton&lt;/code&gt;(閉じる)を右揃え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public ButtonTabComponent(final JTabbedPane pane) {
  //unset default FlowLayout&#39; gaps
  //super(new FlowLayout(FlowLayout.LEFT, 0, 0));
  super(new BorderLayout(0, 0));
  //...
  //add(button);
  add(button, BorderLayout.EAST);
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTitleTab.html&quot;&gt;JTabbedPaneのタブを等幅にしてタイトルをクリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TabComponentsDemoProject/src/components/ButtonTabComponent.java&quot;&gt;ButtonTabComponent.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1556158&quot;&gt;Swing - JTabbedPane title alignment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4220177&quot;&gt;Bug ID: 4220177 labels within JTabbedPane tabs should be alignable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabtitlealignment</link>
                <guid>http://terai.xrea.jp/swing/tabtitlealignment</guid>
                <pubDate>2010-10-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldの角を丸める</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;角丸の&lt;code&gt;JTextField&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RoundedTextField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTSMYm3vgI/AAAAAAAAAiY/37FVcZLSXI0/s800/RoundedTextField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextField textField01 = new JTextField(20) {
  //Unleash Your Creativity with Swing and the Java 2D API!
  //http://web.archive.org/web/20091205092230/http://java.sun.com/products/jfc/tsc/articles/swing2d/index.html
  @Override protected void paintComponent(Graphics g) {
    if(!isOpaque()) {
      int w = getWidth();
      int h = getHeight();
      Graphics2D g2 = (Graphics2D)g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      g2.setColor(UIManager.getColor(&quot;TextField.background&quot;));
      g2.fillRoundRect(0, 0, w-1, h-1, h, h);
      g2.setColor(Color.GRAY);
      g2.drawRoundRect(0, 0, w-1, h-1, h, h);
      g2.dispose();
    }
    super.paintComponent(g);
  }
};
textField01.setOpaque(false);
textField01.setBackground(new Color(0,0,0,0)); //Nimbus
textField01.setBorder(BorderFactory.createEmptyBorder(4, 8, 4, 8));
textField01.setText(&quot;aaaaaaaaaaa&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField#paintComponent(...)&lt;/code&gt;をオーバーライド、&lt;code&gt;BorderをEmptyBorder&lt;/code&gt;、&lt;code&gt;JTextField#setOpaque(false);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://web.archive.org/web/20091205092230/http://java.sun.com/products/jfc/tsc/articles/swing2d/index.html&quot;&gt;Unleash Your Creativity with Swing and the Java 2D API!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RoundedCornerBorder&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RoundedCornerBorder extends AbstractBorder {
  @Override public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    int r = height-1;
    RoundRectangle2D round = new RoundRectangle2D.Float(x, y, width-1, height-1, r, r);
    Container parent = c.getParent();
    if(parent!=null) {
      g2.setColor(parent.getBackground());
      Area corner = new Area(new Rectangle2D.Float(x, y, width, height));
      corner.subtract(new Area(round));
      g2.fill(corner);
    }
    g2.setColor(Color.GRAY);
    g2.draw(round);
    g2.dispose();
  }
  @Override public Insets getBorderInsets(Component c) {
    return new Insets(4, 8, 4, 8);
  }
  @Override public Insets getBorderInsets(Component c, Insets insets) {
    insets.left = insets.right = 8;
    insets.top = insets.bottom = 4;
    return insets;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20091205092230/http://java.sun.com/products/jfc/tsc/articles/swing2d/index.html&quot;&gt;Unleash Your Creativity with Swing and the Java 2D API!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coderanch.com/t/336048/GUI/java/Border-rounded-JTextField&quot;&gt;Border on an rounded JTextField? (Swing / AWT / SWT / JFace forum at JavaRanch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/9785911/how-i-remove-unneeded-background-under-roundedborder&quot;&gt;java - how i remove unneeded background under roundedborder? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextUI#paintSafely(...)&lt;/code&gt;をオーバーライドして、&lt;code&gt;JTextField&lt;/code&gt;内を上書きする方法はやめて、&lt;code&gt;Area#subtract&lt;/code&gt;で切り抜いた図形を親の背景色で描画する方法に変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-21 (水) 02:37:10&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/roundedtextfield</link>
                <guid>http://terai.xrea.jp/swing/roundedtextfield</guid>
                <pubDate>2010-10-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Clipboardから文字列や画像を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Clipboard&lt;/code&gt;から文字列や画像データを取得し、&lt;code&gt;JLabel&lt;/code&gt;に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SystemClipboard&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUB2-qFWI/AAAAAAAAAlY/hlwTEjnyC_g/s800/SystemClipboard.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private ClipboardService cs = null;
public JComponent makeUI() {
  try{
    cs = (ClipboardService)ServiceManager.lookup(&quot;javax.jnlp.ClipboardService&quot;);
  }catch(UnavailableServiceException e) {
    cs = null;
  }
  JPanel p = new JPanel(new BorderLayout());
  p.add(new JScrollPane(label));
  p.add(new JButton(new AbstractAction(&quot;get Clipboard DataFlavor&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      try {
        Transferable t = (cs==null)
          ?Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null)
          :cs.getContents();
        if(t==null) {
          java.awt.Toolkit.getDefaultToolkit().beep();
          return;
        }
        String str = &quot;&quot;;
        ImageIcon image = null;
        if(t.isDataFlavorSupported(DataFlavor.imageFlavor)) {
          image = new ImageIcon((Image)t.getTransferData(DataFlavor.imageFlavor));
        }else if(t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
          str = (String)t.getTransferData(DataFlavor.stringFlavor);
        }
        label.setText(str);
        label.setIcon(image);
      }catch(Exception ex) {
        ex.printStackTrace();
      }
    }
  }), BorderLayout.SOUTH);
  return p;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルを&lt;code&gt;Web Start&lt;/code&gt;で実行した場合は、&lt;code&gt;Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null)&lt;/code&gt;ではなく、&lt;code&gt;ClipboardService#getContents()&lt;/code&gt;を使って、&lt;code&gt;Transferable&lt;/code&gt;を取得するようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文字列

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Transferable#getTransferData(DataFlavor.stringFlavor)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Transferable#getTransferData(DataFlavor.imageFlavor)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/clipboard.html&quot;&gt;Javaクリップボードメモ(Hishidama&amp;#39;s Java Clipboard Memo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/systemclipboard</link>
                <guid>http://terai.xrea.jp/swing/systemclipboard</guid>
                <pubDate>2010-09-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBox内にJButtonを左右に二つレイアウトする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;が使用するレイアウトを変更して、検索欄風のコンポーネントを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SearchBarLayoutComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTSqLxrLoI/AAAAAAAAAjI/M2OZzogy3-Q/s800/SearchBarLayoutComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class BasicSearchBarComboBoxUI extends SearchBarComboBoxUI{
  public static javax.swing.plaf.ComponentUI createUI(JComponent c) {
    return new BasicSearchBarComboBoxUI();
  }
  protected boolean isEditable = true;
  @Override protected void installDefaults() {
    super.installDefaults();
    //comboBox.setEditable(true);
    comboBox.putClientProperty(&quot;JComboBox.isTableCellEditor&quot;, Boolean.TRUE);
    //comboBox.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
  }
  @Override protected LayoutManager createLayoutManager() {
    return new LayoutManager() {
      @Override public void addLayoutComponent(String name, Component comp) {}
      @Override public void removeLayoutComponent(Component comp) {}
      @Override public Dimension preferredLayoutSize(Container parent) {
        return parent.getPreferredSize();
      }
      @Override public Dimension minimumLayoutSize(Container parent) {
        return parent.getMinimumSize();
      }
      @Override public void layoutContainer(Container parent) {
        if(!(parent instanceof JComboBox)) return;
        JComboBox cb     = (JComboBox)parent;
        int width        = cb.getWidth();
        int height       = cb.getHeight();
        Insets insets    = cb.getInsets();
        int buttonHeight = height - (insets.top + insets.bottom);
        int buttonWidth  = buttonHeight;
        int loupeWidth   = buttonHeight;

        JButton arrowButton = (JButton)cb.getComponent(0);
        if(arrowButton != null) {
          Insets arrowInsets = arrowButton.getInsets();
          buttonWidth = arrowButton.getPreferredSize().width +
            arrowInsets.left + arrowInsets.right;
          arrowButton.setBounds(insets.left, insets.top, buttonWidth, buttonHeight);
        }
        JButton loupeButton = null;
        for(Component c: cb.getComponents()) {
          if(&quot;ComboBox.loupeButton&quot;.equals(c.getName())) {
            loupeButton = (JButton)c;
            break;
          }
        }
        //= (JButton)cb.getComponent(3);
        if(loupeButton != null) {
          Insets loupeInsets = loupeButton.getInsets();
          loupeWidth = loupeButton.getPreferredSize().width +
            loupeInsets.left + loupeInsets.right;
          loupeButton.setBounds(width - (insets.right + loupeWidth),
                                insets.top, loupeWidth, buttonHeight);
        }
        JTextField editor = (JTextField)cb.getEditor().getEditorComponent();
        //JTextField editor = (JTextField)cb.getComponent(1);
        if(editor != null) {
          editor.setBounds(insets.left + buttonWidth, insets.top,
               width  - (insets.left + insets.right + buttonWidth + loupeWidth),
               height - (insets.top  + insets.bottom));
        }
      }
    };
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;が使用するレイアウトを以下のように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元の&lt;code&gt;ArrowButton&lt;/code&gt;は、左側に表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);&lt;/code&gt;とした場合のコードを流用&lt;/li&gt;
&lt;li&gt;アイコンも検索エンジンのものと、下向きの三角の二つを表示するように設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoupeButton&lt;/code&gt;として、新たに&lt;code&gt;JButton&lt;/code&gt;を追加し、右側に配置&lt;/li&gt;
&lt;li&gt;常に編集可能として、&lt;code&gt;JTextField&lt;/code&gt;を中央に配置&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;ポップアップを表示、選択しても&lt;code&gt;JTextField&lt;/code&gt;が変更されないようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#putClientProperty(&amp;quot;JComboBox.isTableCellEditor&amp;quot;, Boolean.TRUE);&lt;/code&gt;として、カーソル移動で変更されないように設定&lt;/li&gt;
&lt;li&gt;選択されても&lt;code&gt;PopupMenuListener&lt;/code&gt;で&lt;code&gt;setText&lt;/code&gt;し直すように設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;protected PopupMenuListener createPopupMenuListener() {
  if(popupMenuListener == null) {
    popupMenuListener = new PopupMenuListener() {
      private String str;
      @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
        JComboBox combo = (JComboBox)e.getSource();
        str = combo.getEditor().getItem().toString();
      }
      @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
        Object o = listBox.getSelectedValue();
        if(o instanceof SearchEngine) {
          SearchEngine se = (SearchEngine) o;
          arrowButton.setIcon(se.favicon);
        }
        final JComboBox combo = (JComboBox)e.getSource();
        EventQueue.invokeLater(new Runnable() {
          @Override public void run() {
            combo.getEditor().setItem(str);
          }
        });
      }
      @Override public void popupMenuCanceled(PopupMenuEvent e) {}
    };
  }
  return popupMenuListener;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor&lt;/code&gt;にフォーカスがある場合、左のボタンをクリックしてもポップアップメニューが開かないバグを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-09-24 (金) 20:20:42&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrowButton&lt;/code&gt;をクリックして、カーソルキーを押すと&lt;code&gt;NullPointerException&lt;/code&gt;が発生するバグを修正(この修正？で、ポップアップが表示されている状態で、例えば&lt;kbd&gt;G&lt;/kbd&gt;キーを押しても、項目の&lt;code&gt;google&lt;/code&gt;は選択されなくなった)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-01-07 (金) 16:29:00&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を切り替えると、&lt;code&gt;JComboBox&lt;/code&gt;のフォント設定で、&lt;code&gt;NullPointerException&lt;/code&gt;が発生するのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-05-25 (水) 17:46:55&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/searchbarlayoutcombobox</link>
                <guid>http://terai.xrea.jp/swing/searchbarlayoutcombobox</guid>
                <pubDate>2010-09-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableが空の場合、中央にJComponentを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;が空の場合、表領域の中央に任意の&lt;code&gt;JComponent&lt;/code&gt;が表示されるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PlaceholderForEmptyTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRDxbcszI/AAAAAAAAAgk/5iisfYFJom0/s800/PlaceholderForEmptyTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JEditorPane hint = new JEditorPane(&quot;text/html&quot;, &quot;&amp;lt;html&amp;gt;&amp;lt;a href=&#39;dummy&#39;&amp;gt;No data!&amp;lt;/a&amp;gt;&amp;lt;/html&amp;gt;&quot;);

table.setFillsViewportHeight(true);
table.setLayout(new GridBagLayout());
table.add(hint);

model.addTableModelListener(new TableModelListener() {
  @Override public void tableChanged(TableModelEvent e) {
    DefaultTableModel model = (DefaultTableModel)e.getSource();
    hint.setVisible(model.getRowCount()==0);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;に編集不可にした&lt;code&gt;JEditorPane&lt;/code&gt;を追加し、以下のように設定して、常に中央にレイアウトされるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setFillsViewportHeight(true)&lt;/code&gt;として、&lt;code&gt;JTable&lt;/code&gt;の高さが&lt;code&gt;JViewport&lt;/code&gt;の高さより小さい場合、両者が同じ高さになるように設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のレイアウトを&lt;code&gt;null&lt;/code&gt;から、&lt;code&gt;GridBagLayout&lt;/code&gt;に変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;del&gt;追加した&lt;code&gt;JEditorPane&lt;/code&gt;の表示非表示の切り替えは、ポップアップメニューで行の追加削除を行ったとき、&lt;code&gt;JTable#getRowCount()==0&lt;/code&gt;かどうかで判断しています。&lt;/del&gt; &lt;code&gt;TableModelListener&lt;/code&gt;を使って行の追加削除を行ったときに&lt;code&gt;JEditorPane&lt;/code&gt;の表示非表示を切り替えるように変更しました。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;大変素晴らしいです。参考にさせていただきました。 -- &lt;a href=&quot;http://terai.xrea.jp/shuna.html&quot;&gt;shuna&lt;/a&gt; 2010-09-18 (土) 12:12:50

&lt;ul&gt;
&lt;li&gt;ありがとうございます。どうもです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-09-18 (土) 20:19:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/placeholderforemptytable</link>
                <guid>http://terai.xrea.jp/swing/placeholderforemptytable</guid>
                <pubDate>2010-09-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableが使用するBooleanCellEditorの背景色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;がデフォルトで使用する&lt;code&gt;BooleanCellEditor&lt;/code&gt;の背景色を選択色に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BooleanCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTIJ0rZk-I/AAAAAAAAASU/JvYohArvFpU/s800/BooleanCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public Component prepareEditor(TableCellEditor editor, int row, int column) {
    Component c = super.prepareEditor(editor, row, column);
    if(c instanceof JCheckBox) {
      JCheckBox b = (JCheckBox)c;
      b.setBackground(getSelectionBackground());
      b.setBorderPainted(true);
    }
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上:デフォルト

&lt;ul&gt;
&lt;li&gt;セルをクリックして編集状態になると&lt;code&gt;CellEditor&lt;/code&gt;として、背景色が白の&lt;code&gt;JCheckBox&lt;/code&gt;が表示される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下:&lt;code&gt;JTable#getSelectionBackground()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BooleanCellEditor&lt;/code&gt;として使用する&lt;code&gt;JCheckBox&lt;/code&gt;の背景色が常に&lt;code&gt;JTable#getSelectionBackground()&lt;/code&gt;になるように&lt;code&gt;JTable#prepareEditor(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;キーを押しながら選択されている行にある&lt;code&gt;JCheckBox&lt;/code&gt;をマウスで選択すると、リリースするまで&lt;code&gt;JCheckBox&lt;/code&gt;の背景色が残っている、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;から別の&lt;code&gt;LookAndFeel&lt;/code&gt;に変更すると選択色が残ってしまうなどの問題に対応しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-23 (木) 15:05:20&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/booleancelleditor</link>
                <guid>http://terai.xrea.jp/swing/booleancelleditor</guid>
                <pubDate>2010-09-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TabComponentの名前を更新</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TabComponent&lt;/code&gt;を使用する&lt;code&gt;JTabbedPane&lt;/code&gt;で、タブ名称を編集更新します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RevalidateTabComponent&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTR4c_40eI/AAAAAAAAAh4/dLbGOWvSzSc/s800/RevalidateTabComponent.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TabTitleRenamePopupMenu extends JPopupMenu {
  private final JTextField textField = new JTextField(10);
  private final Action renameAction = new AbstractAction(&quot;rename&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      JTabbedPane t = (JTabbedPane)getInvoker();
      int idx = t.getSelectedIndex();
      String title = t.getTitleAt(idx);
      textField.setText(title);
      int result = JOptionPane.showConfirmDialog(
        t, textField, &quot;Rename&quot;, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      if(result==JOptionPane.OK_OPTION) {
        String str = textField.getText();
        if(!str.trim().isEmpty()) {
          t.setTitleAt(idx, str);
          JComponent c = (JComponent)t.getTabComponentAt(idx);
          c.revalidate();
        }
      }
    }
  };
  private final Action newTabAction = new AbstractAction(&quot;new tab&quot;) {
    @Override public void actionPerformed(ActionEvent evt) {
      JTabbedPane t = (JTabbedPane)getInvoker();
      int count = t.getTabCount();
      String title = &quot;Tab &quot; + count;
      t.add(title, new JLabel(title));
      t.setTabComponentAt(count, new ButtonTabComponent(t));
    }
  };
  private final Action closeAllAction = new AbstractAction(&quot;close all&quot;) {
    @Override public void actionPerformed(ActionEvent evt) {
      JTabbedPane t = (JTabbedPane)getInvoker();
      t.removeAll();
    }
  };
  public TabTitleRenamePopupMenu() {
    super();
    textField.addAncestorListener(new AncestorListener() {
      @Override public void ancestorAdded(AncestorEvent e) {
        textField.requestFocusInWindow();
      }
      @Override public void ancestorMoved(AncestorEvent e) {}
      @Override public void ancestorRemoved(AncestorEvent e) {}
    });
    add(renameAction);
    addSeparator();
    add(newTabAction);
    add(closeAllAction);
  }
  @Override public void show(Component c, int x, int y) {
    JTabbedPane t = (JTabbedPane)c;
    renameAction.setEnabled(t.indexAtLocation(x, y)&amp;gt;=0);
    super.show(c, x, y);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、タブを閉じる&lt;code&gt;JButton&lt;/code&gt;を&lt;code&gt;TabComponent&lt;/code&gt;に追加した&lt;code&gt;JTabbedPane&lt;/code&gt;に、タブ名称を変更する&lt;code&gt;JPopupMenu&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt;How to Use Tabbed Panes (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;の&lt;code&gt;ButtonTabComponent&lt;/code&gt;を使っているので、&lt;code&gt;JTabbedPane#setTitleAt(...)&lt;/code&gt;と名前を変更したときに、&lt;code&gt;tabbedPane.getTabComponentAt(idx)&lt;/code&gt;で取得した&lt;code&gt;JComponent&lt;/code&gt;を&lt;code&gt;revalidate()&lt;/code&gt;することで、文字列の長さに応じたサイズへの変更と、タブの内部レイアウトの更新を行なっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt;How to Use Tabbed Panes (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleEditor.html&quot;&gt;JTabbedPaneのタブにJTextFieldを配置してタイトルを編集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EditTabTitle.html&quot;&gt;JTabbedPaneのタブタイトルを変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/revalidatetabcomponent</link>
                <guid>http://terai.xrea.jp/swing/revalidatetabcomponent</guid>
                <pubDate>2010-08-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerを編集不可にした場合の内余白</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;を編集不可にした場合の背景色や内部余白の色などを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InactiveSpinnerInsets&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTOcTAKgdI/AAAAAAAAAcY/R1dvME0C6UA/s800/InactiveSpinnerInsets.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner3 = new JSpinner() {
  @Override protected void paintComponent(Graphics g) {
    if (getUI() instanceof com.sun.java.swing.plaf.windows.WindowsSpinnerUI) {
      Graphics2D g2d = (Graphics2D) g.create();
      g2d.setPaint(isEnabled()?UIManager.getColor(&quot;FormattedTextField.background&quot;)
                   :UIManager.getColor(&quot;FormattedTextField.inactiveBackground&quot;));
      g2d.fillRect(0,0,getWidth(),getHeight());
      g2d.dispose();
    }
  }
  @Override protected void paintChildren(Graphics g) {
    super.paintChildren(g);
    if (getUI() instanceof com.sun.java.swing.plaf.windows.WindowsSpinnerUI) {
      if (!isEnabled()) {
        Graphics2D g2d = (Graphics2D) g.create();
        Rectangle r = getComponent(0).getBounds();
        r.add(getComponent(1).getBounds());
        r.width--;
        r.height--;
        g2d.setPaint(UIManager.getColor(&quot;FormattedTextField.inactiveBackground&quot;));
        g2d.draw(r);
        g2d.dispose();
      }
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel(XP)&lt;/code&gt;の場合、&lt;code&gt;JSpinner&lt;/code&gt;を編集不可にしても白い余白が表示される。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner#getEditor()&lt;/code&gt;で取得した&lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;と、&lt;code&gt;JSpinner.DefaultEditor#getTextField()&lt;/code&gt;で取得した&lt;code&gt;JTextField&lt;/code&gt;をそれぞれ、&lt;code&gt;setOpaque(false)&lt;/code&gt;としている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel(XP)&lt;/code&gt;で、&lt;code&gt;JSpinner&lt;/code&gt;を編集不可にしても背景色は白いままになる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;FormattedTextField.inactiveBackground&amp;quot;, Color.WHITE);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setBorder(...)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記と同様に取得した&lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;(=&lt;code&gt;JPanel&lt;/code&gt;)と&lt;code&gt;JTextField&lt;/code&gt;に以下のような&lt;code&gt;WindowsLookAndFeel(XP)&lt;/code&gt;用の&lt;code&gt;Border&lt;/code&gt;を設定している。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner2 = new JSpinner();
spinner2.setBorder(BorderFactory.createEmptyBorder());
JSpinner.DefaultEditor editor2 = (JSpinner.DefaultEditor)spinner2.getEditor();
editor2.setBorder(BorderFactory.createMatteBorder(1,1,1,0, new Color(127,157,185)));
JTextField field2 = editor2.getTextField();
field2.setBorder(BorderFactory.createEmptyBorder(2,2,2,0));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;paintComponent, paintChildren&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner#paintComponent()&lt;/code&gt;をオーバーライドして, &lt;code&gt;WindowsLookAndFeel(XP)&lt;/code&gt;の場合表示される余白(背景色)を&lt;code&gt;UIManager.getColor(&amp;quot;FormattedTextField.inactiveBackground&amp;quot;)&lt;/code&gt;で塗りつぶしている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSpinner#paintChildren()&lt;/code&gt;をオーバーライドして,  &lt;code&gt;WindowsLookAndFeel(XP)&lt;/code&gt;の場合表示されるボタン周りの白い余白を塗りつぶしている。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/painting-140037.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/inactivespinnerinsets</link>
                <guid>http://terai.xrea.jp/swing/inactivespinnerinsets</guid>
                <pubDate>2010-08-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneでキネティックスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;にキネティックスクロール(慣性スクロール)風の動作をするマウスリスナーを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/KineticScrolling&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTO32D08pI/AAAAAAAAAdE/TpuoGrYo-Q0/s800/KineticScrolling.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class KineticScrollingListener2 extends MouseAdapter {
  private static final int SPEED = 6;
  private static final double D = 0.7;
  private final Cursor dc;
  private final Cursor hc = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  private final javax.swing.Timer inside;
  private final javax.swing.Timer outside;
  private final JComponent label;
  private Point startPt = new Point();
  private Point delta   = new Point();
  private static boolean isInside(JViewport vport, JComponent comp) {
    Point vp = vport.getViewPosition();
    return (vp.x&amp;gt;=0 &amp;amp;&amp;amp; vp.x+vport.getWidth()-comp.getWidth()&amp;lt;=0 &amp;amp;&amp;amp;
            vp.y&amp;gt;=0 &amp;amp;&amp;amp; vp.y+vport.getHeight()-comp.getHeight()&amp;lt;=0);
  }
  public KineticScrollingListener2(JComponent comp) {
    this.label = comp;
    this.dc = comp.getCursor();
    this.inside = new javax.swing.Timer(20, new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        JViewport vport = (JViewport)label.getParent();
        Point vp = vport.getViewPosition();
        //System.out.format(&quot;s: %s, %s\n&quot;, delta, vp);
        vp.translate(-delta.x, -delta.y);
        vport.setViewPosition(vp);

        if (Math.abs(delta.x)&amp;gt;0 || Math.abs(delta.y)&amp;gt;0) {
          delta.setLocation((int)(delta.x*D), (int)(delta.y*D));
          //Outside
          if (vp.x&amp;lt;0 || vp.x+vport.getWidth()-label.getWidth()&amp;gt;0  ) delta.x = (int)(delta.x*D);
          if (vp.y&amp;lt;0 || vp.y+vport.getHeight()-label.getHeight()&amp;gt;0) delta.y = (int)(delta.y*D);
        } else {
          inside.stop();
          if (!isInside(vport, label)) outside.start();
        }
      }
    });
    this.outside = new javax.swing.Timer(20, new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        JViewport vport = (JViewport)label.getParent();
        Point vp = vport.getViewPosition();
        //System.out.format(&quot;r: %s\n&quot;, vp);
        if (vp.x&amp;lt;0) vp.x = (int)(vp.x*D);
        if (vp.y&amp;lt;0) vp.y = (int)(vp.y*D);
        if (vp.x+vport.getWidth()-label.getWidth()&amp;gt;0)
          vp.x = (int) (vp.x - (vp.x+vport.getWidth()-label.getWidth())*(1.0-D));
        if (vp.y+vport.getHeight()&amp;gt;label.getHeight())
          vp.y = (int) (vp.y - (vp.y+vport.getHeight()-label.getHeight())*(1.0-D));
        vport.setViewPosition(vp);
        if (isInside(vport, label)) outside.stop();
      }
    });
  }
  @Override public void mousePressed(MouseEvent e) {
    label.setCursor(hc);
    startPt.setLocation(e.getPoint());
    inside.stop();
    outside.stop();
  }
  @Override public void mouseDragged(MouseEvent e) {
    Point pt = e.getPoint();
    JViewport vport = (JViewport)label.getParent();
    Point vp = vport.getViewPosition();
    vp.translate(startPt.x-pt.x, startPt.y-pt.y);
    vport.setViewPosition(vp);
    delta.setLocation(SPEED*(pt.x-startPt.x), SPEED*(pt.y-startPt.y));
    startPt.setLocation(pt);
  }
  @Override public void mouseReleased(MouseEvent e) {
    label.setCursor(dc);
    if (isInside((JViewport)label.getParent(), label)) {
      inside.start();
    } else {
      outside.start();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollRectToVisible&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;マウスを放したあと、タイマーを起動し、&lt;code&gt;JComponent#scrollRectToVisible(Rectangle)&lt;/code&gt;メソッドでスクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setViewPosition&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;マウスを放したあと、タイマーを起動し、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;メソッドでスクロール&lt;/li&gt;
&lt;li&gt;&lt;code&gt;View&lt;/code&gt;である&lt;code&gt;JLabel&lt;/code&gt;の外で、移動が止まった(またはマウスがリリースされた)場合は、別のタイマーで&lt;code&gt;JLabel&lt;/code&gt;の縁まで戻る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoScroll.html&quot;&gt;JScrollPaneのオートスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;慣性(モーメンタム)スクロール、フリックスクロール(フリック+慣性スクロール？)、・・・でもやっぱり猫の掌スクロールを最初に思い出してしまう。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-16 (月) 13:41:47&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;では、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;を使って右下外部に移動できなくなっているので、&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;と同じ対応をしてソースを更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-03 (月) 18:08:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/kineticscrolling</link>
                <guid>http://terai.xrea.jp/swing/kineticscrolling</guid>
                <pubDate>2010-08-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JList間でのドラッグ＆ドロップによるアイテムの移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;間でのドラッグ＆ドロップによるアイテムの移動や並べ替えを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDBetweenLists&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLUTkzH4I/AAAAAAAAAXY/tSQriEN1G_Y/s800/DnDBetweenLists.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ListItemTransferHandler extends TransferHandler {
  private JList source = null;
  @Override protected Transferable createTransferable(JComponent c) {
    source = (JList) c;
    indices = source.getSelectedIndices();
    transferedObjects = source.getSelectedValues();
    return new DataHandler(transferedObjects, localObjectFlavor.getMimeType());
  }
  @Override public boolean importData(TransferSupport info) {
    if (!canImport(info)) return false;
    JList target = (JList)info.getComponent();
    JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
    DefaultListModel listModel = (DefaultListModel)target.getModel();
    int index = dl.getIndex();
    int max = listModel.getSize();
    if(index&amp;lt;0 || index&amp;gt;max) index = max;
    addIndex = index;
    try{
      Object[] values = (Object[])info.getTransferable().getTransferData(localObjectFlavor);
      for(int i=0;i&amp;lt;values.length;i++) {
        int idx = index++;
        listModel.add(idx, values[i]);
        target.addSelectionInterval(idx, idx);
      }
      //----&amp;gt;
      addCount = (target==source)? values.length : 0;
      //&amp;lt;----
      return true;
    }catch(UnsupportedFlavorException ufe) {
      ufe.printStackTrace();
    }catch(java.io.IOException ioe) {
      ioe.printStackTrace();
    }
    return false;
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一つの&lt;code&gt;JList&lt;/code&gt;内でのアイテムの並べ替えを行う&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;を元に&lt;code&gt;ListItemTransferHandler&lt;/code&gt;を作成し、&lt;code&gt;JList&lt;/code&gt;間でのアイテム移動もできるようになっています。変更した箇所は、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderTable.html&quot;&gt;TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え&lt;/a&gt;から、&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;と同じで、ドロップ先がドラッグ元と同じかどうかを調べて処理を変更しているだけです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;アイテムをカット(&lt;kbd&gt;Ctrl+X&lt;/kbd&gt;)すると&lt;code&gt;ClassCastException&lt;/code&gt;が発生するのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-25 (金) 20:28:45&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndbetweenlists</link>
                <guid>http://terai.xrea.jp/swing/dndbetweenlists</guid>
                <pubDate>2010-08-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;に透明、半透明の背景色を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TransparentTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTV-0biw5I/AAAAAAAAAog/GI9-wLqeOK8/s800/TransparentTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane(table) {
  private final TexturePaint texture = makeImageTexture();
  @Override protected JViewport createViewport() {
    return new JViewport() {
      @Override public void paintComponent(Graphics g) {
        if(texture!=null) {
          Graphics2D g2 = (Graphics2D)g;
          g2.setPaint(texture);
          g2.fillRect(0,0,getWidth(),getHeight());
        }
        super.paintComponent(g);
      }
    };
  }
};
final Color alphaZero = new Color(0, true);
table.setOpaque(false);
table.setBackground(alphaZero);
scroll.getViewport().setOpaque(false);
scroll.getViewport().setBackground(alphaZero);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JViewport&lt;/code&gt;と&lt;code&gt;JTable&lt;/code&gt;のそれぞれに&lt;code&gt;setOpaque(false)&lt;/code&gt;, &lt;code&gt;setBackground(new Color(0, true));&lt;/code&gt;と設定することで、透明な&lt;code&gt;JTable&lt;/code&gt;を作成しています。テクスチャ画像は&lt;code&gt;JViewport&lt;/code&gt;の&lt;code&gt;paintComponent&lt;/code&gt;メソッドをオーバーライドすることで表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellEditor&lt;/code&gt;は、&lt;code&gt;JTable#prepareEditor(...)&lt;/code&gt;をオーバーライドして、以下のように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;: &lt;code&gt;Object.class&lt;/code&gt;のデフォルト

&lt;ul&gt;
&lt;li&gt;常に&lt;code&gt;setOpaque(false);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;: &lt;code&gt;Boolean.class&lt;/code&gt;のデフォルト

&lt;ul&gt;
&lt;li&gt;常に&lt;code&gt;setBackground(JTable#getSelectionBackground());&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の背景色にアルファ値を設定して透過性を持たせた場合、デフォルトの&lt;code&gt;BooleanRenderer&lt;/code&gt;では色が濃くなる(二重に描画される？)ので、&lt;code&gt;paintComponent&lt;/code&gt;メソッドを以下のようにオーバーライドしています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TranslucentBooleanRenderer extends JCheckBox implements TableCellRenderer {
  private final Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);
  public TranslucentBooleanRenderer() {
    super();
    setHorizontalAlignment(JLabel.CENTER);
    setBorderPainted(true);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    if(isSelected) {
      setOpaque(true);
      setForeground(table.getSelectionForeground());
      super.setBackground(table.getSelectionBackground());
    }else{
      setOpaque(false);
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setSelected((value != null &amp;amp;&amp;amp; ((Boolean)value).booleanValue()));
    if(hasFocus) {
      setBorder(UIManager.getBorder(&quot;Table.focusCellHighlightBorder&quot;));
    }else{
      setBorder(noFocusBorder);
    }
    return this;
  }
  @Override protected void paintComponent(Graphics g) {
    if(!isOpaque()) {
      g.setColor(getBackground());
      g.fillRect(0,0,getWidth(),getHeight());
    }
    super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viva-edo.com/komon/edokomon.html&quot;&gt;江戸の文様（和風素材・デスクトップ壁紙）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentTextField.html&quot;&gt;JTextFieldの背景色を半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20091205092230/http://java.sun.com/products/jfc/tsc/articles/swing2d/index.html&quot;&gt;Unleash Your Creativity with Swing and the Java 2D API!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentTableHeader.html&quot;&gt;JTableのヘッダを透明化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/transparenttable</link>
                <guid>http://terai.xrea.jp/swing/transparenttable</guid>
                <pubDate>2010-08-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneの収納状態を維持する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;のサイズが変更されても、ディバイダの収納状態を維持するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/KeepHiddenDivider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTOy71x7HI/AAAAAAAAAc8/gLDHiIJS_Yw/s800/KeepHiddenDivider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final Container divider = ((BasicSplitPaneUI)splitPane.getUI()).getDivider();
ButtonModel selectMinModel = null;
ButtonModel selectMaxModel = null;
for(Component c: divider.getComponents()) {
  if(c instanceof JButton) {
    ButtonModel m = ((JButton)c).getModel();
    if(selectMinModel==null &amp;amp;&amp;amp; selectMaxModel==null) {
      selectMinModel = m;
    }else if(selectMaxModel==null) {
      selectMaxModel = m;
    }
  }
}
JButton smin = new JButton(&quot;Min:keepHidden&quot;);
smin.setModel(selectMinModel);
JButton smax = new JButton(&quot;Max:keepHidden&quot;);
smax.setModel(selectMaxModel);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Min:DividerLocation, Max:DividerLocation&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane#setDividerLocation&lt;/code&gt;メソッドで&lt;code&gt;Divider&lt;/code&gt;の位置を設定&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;のリサイズで収納状態が解除される&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;panel.add(new JButton(new AbstractAction(&quot;Min:DividerLocation&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    splitPane.setDividerLocation(0);
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Min:Action, Max:Action&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane&lt;/code&gt;の&lt;code&gt;ActionMap&lt;/code&gt;から&lt;code&gt;selectMax&lt;/code&gt;アクションなどを取得し実行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;のリサイズで収納状態が解除される&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;panel.add(new JButton(new AbstractAction(&quot;Max:Action&quot;) {
  @Override public void actionPerformed(final ActionEvent e) {
    splitPane.requestFocusInWindow();
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        Action selectMaxAction = splitPane.getActionMap().get(&quot;selectMax&quot;);
        e.setSource(splitPane);
        selectMaxAction.actionPerformed(e);
      }
    });
  }
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Min:keepHidden, Max:keepHidden&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Divider&lt;/code&gt;に表示されている&lt;code&gt;JButton&lt;/code&gt;を取得し実行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSplitPane&lt;/code&gt;がリサイズされても収納状態は維持される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5006095&quot;&gt;Bug ID: 5006095 Need a way to programmatically stick JSplitPane divider under j2sdk 1.5&lt;/a&gt;のようにリフレクションを使って、&lt;code&gt;BasicSplitPaneUI#setKeepHidden(true)&lt;/code&gt;メソッドを実行して、収納状態を維持する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try {
  splitPane.setDividerLocation(0);
  Method setKeepHidden = BasicSplitPaneUI.class.getDeclaredMethod(
      &quot;setKeepHidden&quot;, new Class[] { Boolean.class });
  setKeepHidden.setAccessible(true);
  setKeepHidden.invoke(splitPane.getUI(), new Object[] { Boolean.TRUE });
}catch(Exception e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5006095&quot;&gt;Bug ID: 5006095 Need a way to programmatically stick JSplitPane divider under j2sdk 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OneTouchExpandable.html&quot;&gt;JSplitPaneのディバイダを展開、収納する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane.setOneTouchExpandable(true);&lt;/code&gt;を使用せず、&lt;code&gt;JSplitPane&lt;/code&gt;からコンポーネントを削除(&lt;code&gt;null&lt;/code&gt;に置き換える)追加することで、収納展開する方法(&lt;code&gt;setVisible(...)&lt;/code&gt;だと収納はうまくいくけど、正常に展開ができない):  &lt;a href=&quot;http://stackoverflow.com/questions/14644362/hide-left-right-component-of-a-jsplitpane-or-different-layout&quot;&gt;java - Hide left/right component of a JSplitPane (or different layout) - Stack Overflow&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-02-01 (金) 20:14:58&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/keephiddendivider</link>
                <guid>http://terai.xrea.jp/swing/keephiddendivider</guid>
                <pubDate>2010-07-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelをフォーカストラバーサルサイクルのルートにする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;がフォーカストラバーサルサイクルのルートになるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FocusCycleRoot&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNCX36INI/AAAAAAAAAaI/xunzBpsDJLk/s800/FocusCycleRoot.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPanel p1 = new JPanel();
p1.setFocusCycleRoot(true);
p1.add(new JTextField(16));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、各&lt;code&gt;JPanel&lt;/code&gt;がそれぞれフォーカストラバーサルサイクルのルートになるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左の&lt;code&gt;JPanel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setFocusCycleRoot(true);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;右のJPanel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setFocusCycleRoot(true);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setFocusTraversalPolicyProvider(true);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;順方向キーボードトラバーサルとリバースキーボードトラバーサルを入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversal.html&quot;&gt;Focusの移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/focuscycleroot</link>
                <guid>http://terai.xrea.jp/swing/focuscycleroot</guid>
                <pubDate>2010-07-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneでディバイダの移動を連続的に再描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;二つの&lt;code&gt;JSplitPane&lt;/code&gt;のディバイダで、移動の同期と連続的な再描画を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ContinuousLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKL-SYs6I/AAAAAAAAAVk/pXv9HlMSLf0/s800/ContinuousLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JSplitPane leftPane   = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
final JSplitPane rightPane  = new JSplitPane(JSplitPane.VERTICAL_SPLIT);
final JSplitPane centerPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);

leftPane.setTopComponent(new JScrollPane(new JTextArea(&quot;aaaaaaa&quot;)));
leftPane.setBottomComponent(new JScrollPane(new JTextArea(&quot;bbbb&quot;)));
rightPane.setTopComponent(new JScrollPane(new JTree()));
rightPane.setBottomComponent(new JScrollPane(new JTree()));
centerPane.setLeftComponent(leftPane);
centerPane.setRightComponent(rightPane);

leftPane.setResizeWeight(.5);
rightPane.setResizeWeight(.5);
centerPane.setResizeWeight(.5);

PropertyChangeListener pcl = new PropertyChangeListener() {
  @Override public void propertyChange(PropertyChangeEvent e) {
    if(JSplitPane.DIVIDER_LOCATION_PROPERTY.equals(e.getPropertyName())) {
      JSplitPane source = (JSplitPane)e.getSource();
      int location = ((Integer)e.getNewValue()).intValue();
      JSplitPane target = (source==leftPane)?rightPane:leftPane;
      if(location != target.getDividerLocation())
          target.setDividerLocation(location);
    }
  }
};
leftPane.addPropertyChangeListener(pcl);
rightPane.addPropertyChangeListener(pcl);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSplitPane&lt;/code&gt;を&lt;code&gt;3&lt;/code&gt;つ使用して、&lt;code&gt;4&lt;/code&gt;つのコンポーネントを分割表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;左右に配置されたディバイダが、同期して移動するように以下のように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;片方のディバイダが上下移動したら、残りも移動するように&lt;code&gt;PropertyChangeListener&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSplitPane#setContinuousLayout(true)&lt;/code&gt;として、移動を連続的に再描画&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1376808&quot;&gt;Swing - Regading SplitPanes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/continuouslayout</link>
                <guid>http://terai.xrea.jp/swing/continuouslayout</guid>
                <pubDate>2010-07-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneのディバイダを展開、収納する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;のディバイダをマウスのクリックなどで一気に展開、収納できるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OneTouchExpandable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQl4nQ4PI/AAAAAAAAAf0/y7DMbOexVWs/s800/OneTouchExpandable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, s1, s2);
splitPane.setOneTouchExpandable(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSplitPane#setOneTouchExpandable(true)&lt;/code&gt;と設定することで、ディバイダに&lt;code&gt;JButton&lt;/code&gt;が表示され、これらをクリックすることでディバイダを展開、収納することができるようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Java 1.5&lt;/code&gt;以降で&lt;code&gt;JSplitPane#setDividerLocation(0);&lt;/code&gt;などとしてディバイダを収納状態にした場合、&lt;code&gt;JSplitPane&lt;/code&gt;自体をリサイズすると収納されているコンポーネントの最小サイズ(&lt;code&gt;setMinimumSize&lt;/code&gt;)まで展開されてしまいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;収納状態を維持したい場合、リフレクションを使って、&lt;code&gt;BasicSplitPaneUI#setKeepHidden(true)&lt;/code&gt;メソッドを実行したり、&lt;code&gt;Divider&lt;/code&gt;に表示されている&lt;code&gt;JButton&lt;/code&gt;を取得実行する方法があります。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5006095&quot;&gt;Bug ID: 5006095 Need a way to programmatically stick JSplitPane divider under j2sdk 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KeepHiddenDivider.html&quot;&gt;JSplitPaneの収納状態を維持する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;kbd&gt;HOME&lt;/kbd&gt;キーや&lt;kbd&gt;END&lt;/kbd&gt;キー(&lt;kbd&gt;F8&lt;/kbd&gt;キーなどで&lt;code&gt;Divider&lt;/code&gt;にフォーカスを移動した状態で)を押して展開、収納する方法では、&lt;code&gt;Divider&lt;/code&gt;中の&lt;code&gt;JButton&lt;/code&gt;を押して展開、収納した場合と動作が異なります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;HOME&lt;/kbd&gt;キー、&lt;kbd&gt;END&lt;/kbd&gt;キーで展開、収納

&lt;ul&gt;
&lt;li&gt;前回の状態に一旦戻らずに展開、収納される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSplitPane&lt;/code&gt;自体をリサイズすると、収納されているコンポーネントの最小サイズ(&lt;code&gt;setMinimumSize&lt;/code&gt;)まで勝手に展開される

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane#getActionMap()#get(&amp;quot;selectMin&amp;quot;)&lt;/code&gt;などで取得できる&lt;code&gt;Action&lt;/code&gt;では、&lt;code&gt;setKeepHidden(boolean)&lt;/code&gt;が使われていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5006095&quot;&gt;Bug ID: 5006095 Need a way to programmatically stick JSplitPane divider under j2sdk 1.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KeepHiddenDivider.html&quot;&gt;JSplitPaneの収納状態を維持する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースファイルをダウンロードして&lt;code&gt;eclipse&lt;/code&gt;でプロジェクト作成しそこにコピーしたのですが、「インポートされた &lt;code&gt;javax.jnlp&lt;/code&gt; は見つかりません」と出てきて実行出来ないのですが、 &lt;code&gt;javax.jnlp&lt;/code&gt;はどこに置けば良いのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%8B%E3%83%BC%E3%83%88%E3%83%B3.html&quot;&gt;ニートン&lt;/a&gt; 2012-02-21 (火) 08:06:33

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eclipse&lt;/code&gt;はほとんど使ったことがないのでインポートの詳細(もしかして&lt;code&gt;Ant&lt;/code&gt;の&lt;code&gt;build.xml&lt;/code&gt;を取り込む機能がある？)が分からないのですが、&lt;code&gt;javax.jnlp&lt;/code&gt;パッケージは、&lt;code&gt;${java.home}/lib/javaws.jar&lt;/code&gt;にあるので、ここにクラスパスが通っていないのかもしれません。このサンプルでは、&lt;code&gt;javax.jnlp.*&lt;/code&gt;は使用しないので、&lt;code&gt;build.xml&lt;/code&gt;から&lt;code&gt;&amp;lt;pathelement location=&amp;quot;${java.home}/lib/javaws.jar&amp;quot; /&amp;gt;&lt;/code&gt;を削除するか、または、&lt;code&gt;eclipse&lt;/code&gt;で新規プロジェクトを作成し、ソースコードだけ貼り付けるのが簡単だと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-21 (火) 17:15:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;＞&lt;code&gt;eclipse&lt;/code&gt;で新規プロジェクトを作成し、ソースコードだけ貼り付けるのが簡単だと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;その通りしていたのですが。。。結果的には&lt;code&gt;jnlp.jar&lt;/code&gt;ファイルを&lt;code&gt;jdk1.6&lt;/code&gt;の中から探して&lt;code&gt;eclipse&lt;/code&gt;の「外部&lt;code&gt;jar&lt;/code&gt;を追加」で動作いたしました。お騒がせしました。それと、この&lt;code&gt;javax.jnlpはBasicService&lt;/code&gt;関連のクラスファイルが入ってるようなので削除できないみたいです。-- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%8B%E3%83%BC%E3%83%88%E3%83%B3.html&quot;&gt;ニートン&lt;/a&gt; 2012-02-22 (水) 18:41:04
    - すいません。「このサンプルでは、&lt;code&gt;javax.jnlp.*&lt;/code&gt;は使用しないので...」はデタラメで、&lt;code&gt;BasicService&lt;/code&gt;が取得できるかどうかで、&lt;code&gt;Web Start&lt;/code&gt;で起動したのかどうかを判断する部分を見落としていました。&lt;code&gt;Web Start&lt;/code&gt;で起動した場合は、&lt;code&gt;getComponents()&lt;/code&gt;でボタンを検索する方法で、ローカルから起動した場合は、リフレクションで&lt;code&gt;private&lt;/code&gt;な&lt;code&gt;setKeepHidden&lt;/code&gt;メソッドを取得して実行する方法を使っています。大変失礼しましたm(__)m。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-22 (水) 18:59:52&lt;/p&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/onetouchexpandable</link>
                <guid>http://terai.xrea.jp/swing/onetouchexpandable</guid>
                <pubDate>2010-07-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSplitPaneを等分割する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSplitPane&lt;/code&gt;のディバイダが中央にくるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DividerLocation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLR0Z5M_I/AAAAAAAAAXU/R6r6dvVJa9M/s800/DividerLocation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;EventQueue.invokeLater(new Runnable() {
  @Override public void run() {
    sp.setDividerLocation(0.5);
    //sp.setResizeWeight(0.5);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSplitPane&lt;/code&gt;のサイズが決まった後(例えば&lt;code&gt;JFrame#pack()&lt;/code&gt;や、&lt;code&gt;JFrame#setSize(int,int)&lt;/code&gt;などした後)で、&lt;code&gt;JSplitPane#setDividerLocation(0.5);&lt;/code&gt;を使用し、ディバイダを中央に配置しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSplitPane#setDividerLocation(double)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ディバイダ自身の幅(&lt;code&gt;JSplitPane#getDividerSize()&lt;/code&gt;)は含まれない&lt;/li&gt;
&lt;li&gt;内部では、切り捨てで&lt;code&gt;JSplitPane#setDividerLocation(int)&lt;/code&gt;を使用: &lt;a href=&quot;http://terai.xrea.jp/Swing/DividerSplitRatio.html&quot;&gt;JSplitPaneのDividerの位置を最大化後に変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JSplitPane#setResizeWeight(double)&lt;/code&gt;を使用し、&lt;code&gt;JSplitPane&lt;/code&gt;内に配置したコンポーネント(&lt;code&gt;JScrollPane&lt;/code&gt;)の余ったスペースの配分が同じになるようにして、ディバイダを中央に配置する方法もあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DividerSplitRatio.html&quot;&gt;JSplitPaneのDividerの位置を最大化後に変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dividerlocation</link>
                <guid>http://terai.xrea.jp/swing/dividerlocation</guid>
                <pubDate>2010-06-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxのセルをロールオーバーする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに&lt;code&gt;JCheckBox&lt;/code&gt;を使用したときでも、マウスカーソルでロールオーバーするように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RolloverBooleanRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSCUU481I/AAAAAAAAAiI/LzyeHFbwP40/s800/RolloverBooleanRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RolloverBooleanRenderer extends JCheckBox implements TableCellRenderer, UIResource {
  private static final Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);
  private final HighlightListener highlighter;
  public RolloverBooleanRenderer(HighlightListener highlighter) {
    super();
    this.highlighter = highlighter;
    setHorizontalAlignment(JLabel.CENTER);
    setBorderPainted(true);
    setRolloverEnabled(true);
    setOpaque(true);
  }
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
                               boolean isSelected, boolean hasFocus, int row, int column) {
    if(highlighter.isHighlightableCell(row, column)) {
      getModel().setRollover(true);
    }else{
      getModel().setRollover(false);
    }
    if(isSelected) {
      setForeground(table.getSelectionForeground());
      super.setBackground(table.getSelectionBackground());
    }else{
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setSelected((value != null &amp;amp;&amp;amp; ((Boolean)value).booleanValue()));
    if(hasFocus) {
      setBorder(UIManager.getBorder(&quot;Table.focusCellHighlightBorder&quot;));
    }else{
      setBorder(noFocusBorder);
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: デフォルト&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;JTable#setDefaultRenderer&lt;/code&gt;メソッドで、&lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;クラスそれぞれに、マウスカーソルに反応するレンダラーを設定

&lt;ul&gt;
&lt;li&gt;これらは、&lt;code&gt;JTable$BooleanRenderer&lt;/code&gt;クラスなどを参考に作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;のロールオーバーは、&lt;code&gt;JCheckBox#getModel()#setRollover(boolean)&lt;/code&gt;メソッドを使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rolloverbooleanrenderer</link>
                <guid>http://terai.xrea.jp/swing/rolloverbooleanrenderer</guid>
                <pubDate>2010-06-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameを半透明化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowOpacity&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTWw2d9LNI/AAAAAAAAApw/NXG2EcaSv_s/s800/WindowOpacity.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame.setDefaultLookAndFeelDecorated(true);
JFrame frame = new JFrame();
//com.sun.awt.AWTUtilities.setWindowOpacity(frame, .5f);
com.sun.awt.AWTUtilities.setWindowOpaque(frame, false);
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
JPanel p = new JPanel();
p.add(new JButton(&quot;JButton&quot;));
p.setBackground(new Color(.5f,.8f,.5f,.5f));
frame.getContentPane().add(p);
frame.setSize(320, 240);
frame.setLocationRelativeTo(null);
frame.setVisible(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;com.sun.awt.AWTUtilities.setWindowOpacity(frame, .5f);&lt;/code&gt;を使って半透明化すると、フレームのタイトルバーや、子コンポーネントまで半透明化されるので、代わりに上記のサンプルでは以下のようにして半透明化を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame.setDefaultLookAndFeelDecorated(true);&lt;/code&gt;で、タイトルバーなどを&lt;code&gt;JRootPane&lt;/code&gt;に描画&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.awt.AWTUtilities.setWindowOpaque(frame, false);&lt;/code&gt;で&lt;code&gt;JFrame&lt;/code&gt;を完全に透明化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;の場合は、代わりに、&lt;code&gt;frame.setBackground(new Color(0,0,0,0));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ContentPane&lt;/code&gt;に&lt;code&gt;setBackground(new Color(.5f,.8f,.5f,.5f));&lt;/code&gt;で半透明の背景色を設定したパネルを追加&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viva-edo.com/komon/edokomon.html&quot;&gt;江戸の文様（和風素材・デスクトップ壁紙）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/trans_shaped_windows.html&quot;&gt;How to Create Translucent and Shaped Windows (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Other Swing Features)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;そんな簡単にできるんですね！昔画面キャプチャーしたり色々苦労した結果断念しました； -- &lt;a href=&quot;http://terai.xrea.jp/riki.html&quot;&gt;riki&lt;/a&gt; 2010-06-14 (月) 22:57:11

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWTUtilities.setWindowOpaque&lt;/code&gt;などが使えるようになったのは、&lt;code&gt;6u10&lt;/code&gt;からですが、上記のサンプルみたいなことができるようになったのは、&lt;code&gt;6u14&lt;/code&gt;から(多分&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6683775&quot;&gt;Bug ID: 6683775 Painting artifacts is seen when panel is made setOpaque(false) for a translucent window&lt;/a&gt;)みたいですから、最近(ちょうど一年ぐらい)のようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-15 (火) 13:26:11&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;Windows 7&lt;/code&gt; + &lt;code&gt;JDK 1.7.0&lt;/code&gt;」で、このサンプルにある&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストが正常に描画されない？ 「&lt;code&gt;Windows XP&lt;/code&gt; + &lt;code&gt;JDK 1.7.0&lt;/code&gt;」や、「&lt;code&gt;Windows 7&lt;/code&gt; + &lt;code&gt;JDK 1.6.0_27&lt;/code&gt;」は問題なし。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-18 (火) 19:01:43&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;では、背景を切り替えたときに前の背景の残像が残る場合がある？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-18 (火) 19:06:07

&lt;ul&gt;
&lt;li&gt;こちらは&lt;code&gt;((JFrame)w).getContentPane().repaint();&lt;/code&gt;でうまく&lt;del&gt;いくが理由が不明…&lt;/del&gt; ようなので修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-18 (火) 19:19:00&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JDK 1.7.0_04&lt;/code&gt;で？、透明にした&lt;code&gt;JFrame&lt;/code&gt;に&lt;code&gt;JComboBox&lt;/code&gt;を追加すると、ドロップダウンリストがおかしい？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-15 (火) 12:49:23&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以下のような&lt;code&gt;PopupMenuListener&lt;/code&gt;を追加すれば回避できるが…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-15 (火) 14:16:17&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo.addPopupMenuListener(new PopupMenuListener() {
  @Override public void popupMenuWillBecomeVisible(final PopupMenuEvent e) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        JComboBox c = (JComboBox)e.getSource();
        Object o = c.getAccessibleContext().getAccessibleChild(0);
        if(o instanceof JComponent) { //BasicComboPopup
          ((JComponent)o).repaint();
        }
      }
    });
  }
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}
  @Override public void popupMenuCanceled(PopupMenuEvent e) {}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;7u6&lt;/code&gt;では修正されている。&lt;code&gt;JDK 1.7.0_06&lt;/code&gt;の&lt;code&gt;Bug Fixes&lt;/code&gt;に載っている &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7156657&quot;&gt;Bug ID: 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt; が関係している気がするけど、&lt;code&gt;Release Fixed&lt;/code&gt;に、&lt;code&gt;7u6&lt;/code&gt;が無い？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-09-19 (水) 18:18:48&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;バックポートされた&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=2224554&quot;&gt;Bug ID: JDK-2224554 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt;に、&lt;code&gt;7u6&lt;/code&gt;があった。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-10-29 (火) 19:26:30&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowopacity</link>
                <guid>http://terai.xrea.jp/swing/windowopacity</guid>
                <pubDate>2010-06-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MemoryImageSourceで配列から画像を生成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;マウスのドラッグに応じて線を描画、消しゴムで消去する機能を実装します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MemoryImageSource&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPu_OEqoI/AAAAAAAAAec/z6MobKhblfI/s800/MemoryImageSource.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int[] pixels = new int[320 * 240];
MemoryImageSource source = new MemoryImageSource(320, 240, pixels, 0, 320);
int penc = 0x0;
@Override public void paintComponent(Graphics g) {
  super.paintComponent(g);
  if(backImage!=null) {
    ((Graphics2D)g).drawImage(backImage, 0, 0, this);
  }
  if(source!=null) {
    g.drawImage(createImage(source), 0, 0, null);
  }
}
@Override public void mouseDragged(MouseEvent e) {
  Point pt = e.getPoint();
  double xDelta = e.getX() - startPoint.getX();
  double yDelta = e.getY() - startPoint.getY();
  double delta = Math.max(Math.abs(xDelta), Math.abs(yDelta));

  double xIncrement = xDelta / delta;
  double yIncrement = yDelta / delta;
  double xStart = startPoint.x;
  double yStart = startPoint.y;
  for(int i=0; i&amp;lt;delta; i++) {
    Point p = new Point((int)xStart, (int)yStart);
    if(p.x&amp;lt;0 || p.y&amp;lt;0 || p.x&amp;gt;=320 || p.y&amp;gt;=240) break;
    pixels[p.x + p.y * 320] = penc;
    for(int n=-1;n&amp;lt;=1;n++) {
      for(int m=-1;m&amp;lt;=1;m++) {
        int t = (p.x+n) + (p.y+m) * 320;
        if(t&amp;gt;=0 &amp;amp;&amp;amp; t&amp;lt;320*240) {
          pixels[t] = penc;
        }
      }
    }
    repaint(p.x-2, p.y-2, 4, 4);
    xStart += xIncrement;
    yStart += yIncrement;
  }
  startPoint = pt;
}
@Override public void mousePressed(MouseEvent e) {
  startPoint = e.getPoint();
  penc = (e.getButton()==MouseEvent.BUTTON1)?0xff000000:0x0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、左クリックでドラッグすると黒で、右クリックでドラッグすると透過色(&lt;code&gt;0xff000000&lt;/code&gt;、消しゴム)で、自由曲線を描画することができます。
&lt;code&gt;MemoryImageSource&lt;/code&gt;に設定した画像の各ピクセルを表す&lt;code&gt;int&lt;/code&gt;配列を、マウスのドラッグに応じて操作して&lt;code&gt;Image&lt;/code&gt;を作成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static final Color ERASER = new Color(0,0,0,0);
private boolean isPen = true;
private Point startPoint = new Point(-10,-10);
private BufferedImage currentImage = null;
private BufferedImage backImage = null;
@Override public void paintComponent(Graphics g) {
  super.paintComponent(g);
  if(backImage!=null) {
    g.drawImage(backImage, 0, 0, this);
  }
  if(currentImage!=null) {
    g.drawImage(currentImage, 0, 0, this);
  }
}
@Override public void mouseDragged(MouseEvent e) {
  Point pt = e.getPoint();
  Graphics2D g2d = currentImage.createGraphics();
  g2d.setStroke(new BasicStroke(3.0F));
  if(isPen) {
    g2d.setPaint(Color.BLACK);
  }else{
    g2d.setComposite(AlphaComposite.Clear);
    g2d.setPaint(ERASER);
  }
  g2d.drawLine(startPoint.x, startPoint.y, pt.x, pt.y);
  g2d.dispose();
  startPoint = pt;
  repaint();
}
@Override public void mousePressed(MouseEvent e) {
  startPoint = e.getPoint();
  isPen = e.getButton()==MouseEvent.BUTTON1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PaintPanel.html&quot;&gt;JPanelにマウスで自由曲線を描画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PixelGrabber.html&quot;&gt;PixelGrabberで画像を配列として取得し編集、書出し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/memoryimagesource</link>
                <guid>http://terai.xrea.jp/swing/memoryimagesource</guid>
                <pubDate>2010-06-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの展開、折畳みアイコンを非表示にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の展開、折畳みアイコンを変更して非表示にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeExpandedIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWHHSFZMI/AAAAAAAAAos/aymKObZa7WQ/s800/TreeExpandedIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Icon emptyIcon = new EmptyIcon();
UIManager.put(&quot;Tree.expandedIcon&quot;,  new IconUIResource(emptyIcon));
UIManager.put(&quot;Tree.collapsedIcon&quot;, new IconUIResource(emptyIcon));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、サイズ&lt;code&gt;0&lt;/code&gt;の&lt;code&gt;Icon&lt;/code&gt;を&lt;code&gt;Tree.expandedIcon&lt;/code&gt;, &lt;code&gt;Tree.collapsedIcon&lt;/code&gt;として使用することで、それぞれ非表示になるように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableSortIcon.html&quot;&gt;JTableのソートアイコンを変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeLeafIcon.html&quot;&gt;JTreeのOpenIcon、ClosedIcon、LeafIconを変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treeexpandedicon</link>
                <guid>http://terai.xrea.jp/swing/treeexpandedicon</guid>
                <pubDate>2010-05-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderの目盛りをアイコンに変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;の目盛りをアイコンで描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TriangleTickSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWS_t-t1I/AAAAAAAAApA/78UrJyqx8og/s800/TriangleTickSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSlider slider = new JSlider(0,100);
slider.setMajorTickSpacing(10);
slider.setMinorTickSpacing(5);
slider.setPaintLabels(true);
slider.setSnapToTicks(true);
Dictionary dictionary = slider.getLabelTable();
if(dictionary != null) {
    Enumeration elements = dictionary.elements();
    Icon tick = new TickIcon();
    while(elements.hasMoreElements()) {
        JLabel label = (JLabel) elements.nextElement();
        label.setBorder(BorderFactory.createEmptyBorder(1,0,0,0));
        label.setIcon(tick);
        label.setIconTextGap(0);
        label.setVerticalAlignment(SwingConstants.TOP);
        label.setVerticalTextPosition(SwingConstants.BOTTOM);
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setHorizontalTextPosition(SwingConstants.CENTER);
        label.setForeground(Color.RED);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSlider&lt;/code&gt;のラベル(&lt;code&gt;JLabel&lt;/code&gt;)を&lt;code&gt;JSlider#getLabelTable()&lt;/code&gt;メソッドで取得し、このラベルに三角形のアイコンを追加して、目盛り(&lt;code&gt;MajorTick&lt;/code&gt;)の代わりとして表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: &lt;code&gt;JSlider#setOrientation(SwingConstants.VERTICAL)&lt;/code&gt;には未対応&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/VolumeSlider.html&quot;&gt;JSliderのUIや色を変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SliderLabelTable.html&quot;&gt;JSliderの目盛にアイコンや文字列を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/triangletickslider</link>
                <guid>http://terai.xrea.jp/swing/triangletickslider</guid>
                <pubDate>2010-05-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードの文字列に余白を追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードにある文字列の左右に余白を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeCellMargin&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWBZNFbLI/AAAAAAAAAok/8_0YqLhhqTk/s800/TreeCellMargin.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyTreeCellRenderer2 extends DefaultTreeCellRenderer {
  private final JPanel p = new JPanel(new BorderLayout());
  private final JLabel icon = new JLabel();
  private final JLabel text = new JLabel();
  private final Border innerBorder = BorderFactory.createEmptyBorder(1,2,1,2);
  private final Border emptyBorder = BorderFactory.createCompoundBorder(
                      BorderFactory.createEmptyBorder(1,1,1,1), innerBorder);
  private final Border hasFocusBorder;
  private final TreeCellRenderer renderer;

  public MyTreeCellRenderer2(TreeCellRenderer renderer) {
    super();
    this.renderer = renderer;
    Color bsColor = getBorderSelectionColor();
    Color focusBGColor = new Color(~getBackgroundSelectionColor().getRGB());
    hasFocusBorder = BorderFactory.createCompoundBorder(
                         new DotBorder(focusBGColor, bsColor), innerBorder);
    icon.setBorder(BorderFactory.createEmptyBorder(0,0,0,2));
    text.setBorder(emptyBorder);
    text.setOpaque(true);
    p.setOpaque(false);
    p.add(icon, BorderLayout.WEST);
    p.add(text);
  }
  @Override public Component getTreeCellRendererComponent(JTree tree, Object value,
          boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
    JLabel l = (JLabel)renderer.getTreeCellRendererComponent(
          tree, value, selected, expanded, leaf, row, hasFocus);
    Color bColor, fColor;
    if(selected) {
      bColor = getBackgroundSelectionColor();
      fColor = getTextSelectionColor();
    } else {
      bColor = getBackgroundNonSelectionColor();
      fColor = getTextNonSelectionColor();
      if (bColor == null) bColor = getBackground();
      if (fColor == null) fColor = getForeground();
    }
    text.setForeground(fColor);
    text.setBackground(bColor);
    text.setBorder(hasFocus?hasFocusBorder:emptyBorder);
    text.setText(l.getText());
    icon.setIcon(l.getIcon());
    return p;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#paint&lt;/code&gt;メソッドをオーバーライドして、余白を追加&lt;/li&gt;
&lt;li&gt;注: &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;(フォーカスのボーダーがアイコンの周りには描画れさない)で、&lt;code&gt;getComponentOrientation().isLeftToRight()==true&lt;/code&gt;の場合のみ対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTreeCellRenderer#getTreeCellRendererComponent&lt;/code&gt;メソッドをオーバーライドして、アイコンと文字列を別の&lt;code&gt;JLabel&lt;/code&gt;に分解し、文字列にのみ&lt;code&gt;BorderFactory.createEmptyBorder(0,0,0,2)&lt;/code&gt;の余白を追加&lt;/li&gt;
&lt;li&gt;注: &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;(フォーカスのボーダーがアイコンの周りには描画れさない)で、&lt;code&gt;getComponentOrientation().isLeftToRight()==true&lt;/code&gt;の場合のみ対応&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treecellmargin</link>
                <guid>http://terai.xrea.jp/swing/treecellmargin</guid>
                <pubDate>2010-05-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneにリンクを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;にリンクを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HyperlinkListener&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTOK8UtUUI/AAAAAAAAAb8/yiME-hTTlWA/s800/HyperlinkListener.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JEditorPane editorPane = new JEditorPane();
editorPane.setEditable(false);
editorPane.setContentType(&quot;text/html&quot;); //javax.swing.text.html.HTMLEditorKit
editorPane.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
editorPane.setText(htmlText);
editorPane.addHyperlinkListener(new HyperlinkListener() {
  private String tooltip;
  @Override public void hyperlinkUpdate(HyperlinkEvent e) {
    if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
      JOptionPane.showMessageDialog(editorPane, &quot;You click the link with the URL &quot; + e.getURL());
    }else if(e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
      tooltip = editorPane.getToolTipText();
      URL url = e.getURL();
      editorPane.setToolTipText((url!=null)?url.toExternalForm():null);
    }else if(e.getEventType() == HyperlinkEvent.EventType.EXITED) {
      editorPane.setToolTipText(tooltip);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JEditorPane&lt;/code&gt;(&lt;code&gt;HTMLEditorKit&lt;/code&gt;,編集不可)に挿入したタグ&lt;code&gt;&amp;lt;a href=&amp;#39;...&amp;#39;&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt;のクリックなどを受信する&lt;code&gt;HyperlinkListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;JButton&lt;/code&gt;などのコンポーネントを使用する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;編集可&lt;/li&gt;
&lt;li&gt;部分選択できない&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ベースラインがうまく揃わない？&lt;/del&gt; &lt;a href=&quot;http://terai.xrea.jp/Swing/InsertComponentBaseline.html&quot;&gt;JTextPaneに追加するコンポーネントのベースラインを揃える&lt;/a&gt; のように、&lt;code&gt;JComponent#setAlignmentY(...)&lt;/code&gt;でテキストベースラインに揃えることが可能&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;HTMLDocument doc = (HTMLDocument)editorPane.getDocument();
Style s = doc.addStyle(&quot;button&quot;, null);
StyleConstants.setAlignment(s, StyleConstants.ALIGN_CENTER);
HyperlinkButton button = new HyperlinkButton(new AbstractAction(LINK) {
  @Override public void actionPerformed(ActionEvent e) {
    AbstractButton b = (AbstractButton)e.getSource();
    editorPane.setBackground(b.isSelected()?Color.RED:Color.WHITE);
    JOptionPane.showMessageDialog(editorPane, &quot;You click the link with the URL &quot; + LINK);
  }
});
button.setToolTipText(&quot;button: &quot;+LINK);
button.setOpaque(false);
StyleConstants.setComponent(s, button);
try {
  doc.insertString(doc.getLength(), &quot;\n----\nJButton:\n&quot;, null);
  doc.insertString(doc.getLength(), LINK +&quot;\n&quot;, doc.getStyle(&quot;button&quot;));
  //doc.insertString(doc.getLength(), &quot;\n&quot;, null);
} catch (BadLocationException ble) {
  ble.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkLabel.html&quot;&gt;Hyperlinkを、JLabel、JButton、JEditorPaneで表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いつもお世話になっております。&lt;code&gt;JEditorPane&lt;/code&gt;に画像ファイルを表示したいですが、画像サイズが揃えていないため、一部表示したり、全部表示したりなどの現状です。そこで、サイズに関係なく、各画像ファイルを全体表示したいです。可能でしょうか？もしかしたら、&lt;code&gt;JEditorPane&lt;/code&gt;ではなく、別の&lt;code&gt;Swing&lt;/code&gt;コンポを使う必要があるかなと思います。画像全体表示の方法を教えてください。よろしくお願いいたします。 -- &lt;a href=&quot;http://terai.xrea.jp/panda.html&quot;&gt;panda&lt;/a&gt; 2011-07-27 (水) 08:57:42

&lt;ul&gt;
&lt;li&gt;こんばんは。「サイズに関係なく、各画像ファイルを全体表示したい」とは、画像を縮小してすべて同じサイズのサムネイルを表示したいということでしょうか？ 画質にこだわらないなら、以下のように&lt;code&gt;img&lt;/code&gt;タグの属性で幅と高さを指定する方法があります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-07-27 (水) 18:21:59&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class ThumbnailTest {
  public JComponent makeUI() {
    StringBuilder sb = new StringBuilder();
    sb.append(&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;aaaaaaaaaaaaaaaaaaaaaa&amp;lt;br /&amp;gt;&quot;);
    sb.append(&quot;&amp;lt;img width=&#39;144&#39; height=&#39;120&#39; src=&#39;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTOK8UtUUI/AAAAAAAAAb8/yiME-hTTlWA/s800/HyperlinkListener.png&#39; /&amp;gt;&quot;);
    sb.append(&quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
    JEditorPane editorPane = new JEditorPane();
    editorPane.setEditable(false);
    editorPane.setContentType(&quot;text/html&quot;);
    editorPane.setText(sb.toString());
    JPanel p = new JPanel(new BorderLayout());
    p.add(new JScrollPane(editorPane));
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new ThumbnailTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://terai.xrea.jp/swing/hyperlinklistener</link>
                <guid>http://terai.xrea.jp/swing/hyperlinklistener</guid>
                <pubDate>2010-05-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipの表示位置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolTip&lt;/code&gt;の表示位置がドラッグでマウスカーソルに追従するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolTipLocation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTVoUwnbfI/AAAAAAAAAn8/lAHqv08RJKA/s800/ToolTipLocation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void mouseDragged(MouseEvent me) {
  JComponent c = (JComponent)me.getSource();
  Point p = me.getPoint();
  if(SwingUtilities.isLeftMouseButton(me)) {
    tip.setTipText(String.format(&quot;Window(x,y)=(%4d,%4d)&quot;, p.x, p.y));
    //tip.revalidate();
    tip.repaint();
    //window.pack();
    window.setLocation(getToolTipLocation(me));
  }else{
    if(popup!=null) popup.hide();
    tip.setTipText(String.format(&quot;Popup(x,y)=(%d,%d)&quot;, p.x, p.y));
    p = getToolTipLocation(me);
    popup = factory.getPopup(c, tip, p.x, p.y);
    popup.show();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左クリックしてドラッグ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JWindow&lt;/code&gt;に、&lt;code&gt;JToolTip&lt;/code&gt;を追加して、&lt;code&gt;Window#setLocation()&lt;/code&gt;で移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;左クリック以外でドラッグ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PopupFactory#getPopup()&lt;/code&gt;で座標を指定した、&lt;code&gt;Popup&lt;/code&gt;を取得し表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SliderToolTips.html&quot;&gt;JSliderのノブをドラッグ中にToolTipで値を表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltiplocation</link>
                <guid>http://terai.xrea.jp/swing/tooltiplocation</guid>
                <pubDate>2010-05-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルエディタにJPopupMenuを設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルエディタに、&lt;code&gt;Copy&lt;/code&gt;、&lt;code&gt;Paste&lt;/code&gt;、&lt;code&gt;Undo&lt;/code&gt;、&lt;code&gt;Redo&lt;/code&gt;などを行う&lt;code&gt;JPopupMenu&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellEditorPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTIn7Rc6TI/AAAAAAAAATE/drRaDYiUB1w/s800/CellEditorPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static JPopupMenu installTextComponentPopupMenu(final JTextComponent tc) {
  final UndoManager manager = new UndoManager();
  final Action undoAction   = new UndoAction(manager);
  final Action redoAction   = new RedoAction(manager);
  final Action cutAction    = new DefaultEditorKit.CutAction();
  final Action copyAction   = new DefaultEditorKit.CopyAction();
  final Action pasteAction  = new DefaultEditorKit.PasteAction();
  final Action deleteAction = new AbstractAction(&quot;delete&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      JPopupMenu pop = (JPopupMenu)e.getSource();
      ((JTextComponent)pop.getInvoker()).replaceSelection(null);
    }
  };
  tc.addAncestorListener(new AncestorListener() {
    @Override public void ancestorAdded(AncestorEvent e) {
      manager.discardAllEdits();
      tc.requestFocusInWindow();
    }
    @Override public void ancestorMoved(AncestorEvent e) {}
    @Override public void ancestorRemoved(AncestorEvent e) {}
  });
  tc.getDocument().addUndoableEditListener(manager);
  tc.getActionMap().put(&quot;undo&quot;, undoAction);
  tc.getActionMap().put(&quot;redo&quot;, redoAction);
  InputMap imap = tc.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Event.CTRL_MASK), &quot;undo&quot;);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Event.CTRL_MASK), &quot;redo&quot;);

  JPopupMenu popup = new JPopupMenu();
  popup.add(cutAction);
  popup.add(copyAction);
  popup.add(pasteAction);
  popup.add(deleteAction);
  popup.addSeparator();
  popup.add(undoAction);
  popup.add(redoAction);

  popup.addPopupMenuListener(new PopupMenuListener() {
    @Override public void popupMenuCanceled(PopupMenuEvent e) {}
    @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
      undoAction.setEnabled(true);
      redoAction.setEnabled(true);
    }
    @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
      JPopupMenu pop = (JPopupMenu)e.getSource();
      JTextField field = (JTextField)pop.getInvoker();
      boolean flg = field.getSelectedText()!=null;
      cutAction.setEnabled(flg);
      copyAction.setEnabled(flg);
      deleteAction.setEnabled(flg);
      undoAction.setEnabled(manager.canUndo());
      redoAction.setEnabled(manager.canRedo());
    }
  });
  tc.setComponentPopupMenu(popup);
  return popup;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;のセルエディタに、&lt;code&gt;Cut&lt;/code&gt;、&lt;code&gt;Copy&lt;/code&gt;、&lt;code&gt;Paste&lt;/code&gt;、&lt;code&gt;Delete&lt;/code&gt;、&lt;code&gt;Undo&lt;/code&gt;、&lt;code&gt;Redo&lt;/code&gt;を行う&lt;code&gt;JPopupMenu&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;セルエディタとして使用している&lt;code&gt;JTextField&lt;/code&gt;は、おなじものを使い回しているので、別のセルでの編集が持ち越されないよう、&lt;code&gt;AncestorListener&lt;/code&gt;を使って表示されるたびに、&lt;code&gt;UndoManager&lt;/code&gt;を空(&lt;code&gt;UndoManager#discardAllEdits()&lt;/code&gt;を呼び出す)にしています。&lt;/p&gt;

&lt;p&gt;もしくは、&lt;code&gt;DefaultCellEditor#isCellEditable(...)&lt;/code&gt;などをオーバーライドしてリセットする方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultCellEditor ce = new DefaultCellEditor(new JTextField()) {
  @Override public boolean isCellEditable(EventObject e) {
    boolean b = super.isCellEditable(e);
    if(b) {
      manager.discardAllEdits();
    }
    return b;
  }
};
table.setDefaultEditor(Object.class, ce);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/swing/JTable.html&quot;&gt;Java Swing「JTable」メモ(Hishidama&amp;#39;s Swing-JTable Memo)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;セルエディタだけではなく、行の追加、削除などを&lt;code&gt;Undo&lt;/code&gt;、&lt;code&gt;Redo&lt;/code&gt;するサンプルが参考になります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/celleditorpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/celleditorpopupmenu</guid>
                <pubDate>2010-04-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノード編集をPopupからのみに制限する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード編集を、マウスクリックではなく、&lt;code&gt;Popup&lt;/code&gt;からのみに制限します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StartEditingPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTTy9Cda5I/AAAAAAAAAlA/6uCGiCD2iGY/s800/StartEditingPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.setCellEditor(new DefaultTreeCellEditor(
    tree, (DefaultTreeCellRenderer)tree.getCellRenderer()) {
  @Override public boolean isCellEditable(java.util.EventObject e) {
    return (e instanceof MouseEvent)?false:super.isCellEditable(e);
  }
//@Override protected boolean canEditImmediately(EventObject e) {
////((MouseEvent)e).getClickCount()&amp;gt;2
//  return (e instanceof MouseEvent)?false:super.canEditImmediately(e);
//}
});
tree.setEditable(true);
tree.setComponentPopupMenu(new TreePopupMenu());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DefaultTreeCellEditor#isCellEditable&lt;/code&gt;メソッドをオーバーライドした&lt;code&gt;CellEditor&lt;/code&gt;を設定して、ノードをマウスでクリックしても編集開始できないように制限しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;編集開始のためのポップアップメニューは、以下のような二種類を用意しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#startEditingAtPath&lt;/code&gt;メソッドを使用する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOptionPane&lt;/code&gt;を表示して編集する

&lt;ul&gt;
&lt;li&gt;入力された文字列を&lt;code&gt;DefaultTreeModel#valueForPathChanged&lt;/code&gt;メソッドで&lt;code&gt;JTree&lt;/code&gt;に反映&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public TreePopupMenu() {
  super();
  add(new JMenuItem(new AbstractAction(&quot;Edit&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      JTree tree = (JTree)getInvoker();
      if(path!=null) tree.startEditingAtPath(path);
    }
  }));
  add(new JMenuItem(new AbstractAction(&quot;Edit Dialog&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      JTree tree = (JTree)getInvoker();
      if(path==null) return;
      Object node = path.getLastPathComponent();
      if(node instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode leaf = (DefaultMutableTreeNode) node;
        textField.setText(leaf.getUserObject().toString());
        int result = JOptionPane.showConfirmDialog(
          tree, textField, &quot;Rename&quot;,
          JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(result==JOptionPane.OK_OPTION) {
          String str = textField.getText();
          if(!str.trim().isEmpty())
            ((DefaultTreeModel)tree.getModel()).valueForPathChanged(path, str);
        }
      }
    }
  }));
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeNodePopupMenu.html&quot;&gt;JTreeのノード上でJPopupMenuを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/starteditingpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/starteditingpopupmenu</guid>
                <pubDate>2010-04-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの葉ノードだけ編集可能にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;の葉ノードだけ編集可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LeafTreeCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTPB-TVk9I/AAAAAAAAAdU/Aq5YDSMvqaY/s800/LeafTreeCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LeafTreeCellEditor extends DefaultTreeCellEditor {
  public LeafTreeCellEditor(JTree tree, DefaultTreeCellRenderer renderer) {
    super(tree, renderer);
  }
  @Override public boolean isCellEditable(java.util.EventObject e) {
    boolean b = super.isCellEditable(e);
    Object o = tree.getLastSelectedPathComponent();
    if(b &amp;amp;&amp;amp; o instanceof TreeNode) {
      return ((TreeNode)o).isLeaf();
    }else{
      return b;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;CellEditor#isCellEditable&lt;/code&gt;メソッドを葉ノードの場合だけ、編集を開始できるようにオーバーライドしたセルエディタを作成、設定しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tree.setCellEditor(new LeafTreeCellEditor(tree, (DefaultTreeCellRenderer)tree.getCellRenderer()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ルートノードなどの枝ノードは、トリプルクリックしても編集不可になっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1371600&quot;&gt;Swing - How can I persist all changes I made to these edited leaves and nodes??&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/leaftreecelleditor</link>
                <guid>http://terai.xrea.jp/swing/leaftreecelleditor</guid>
                <pubDate>2010-04-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneで選択したタブの高さを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;で選択したタブの高さを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectedTabHeight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTS0RHzbTI/AAAAAAAAAjY/__rqkPO3bsk/s800/SelectedTabHeight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tabbedPane.setUI(new com.sun.java.swing.plaf.windows.WindowsTabbedPaneUI() {
  private static final int tabAreaHeight = 32;
  @Override protected int calculateTabHeight(
      int tabPlacement, int tabIndex, int fontHeight) {
    return tabAreaHeight;
  }
  @Override protected void paintTab(
      Graphics g, int tabPlacement, Rectangle[] rects,
      int tabIndex, Rectangle iconRect, Rectangle textRect) {
    if(tabPane.getSelectedIndex()!=tabIndex &amp;amp;&amp;amp;
       tabPlacement!=JTabbedPane.LEFT &amp;amp;&amp;amp;
       tabPlacement!=JTabbedPane.RIGHT) {
      int tabHeight = tabAreaHeight/2 + 3;
      rects[tabIndex].height = tabHeight;
      if(tabPlacement==JTabbedPane.TOP) {
        rects[tabIndex].y = tabAreaHeight - tabHeight + 3;
      }
    }
    super.paintTab(g, tabPlacement, rects, tabIndex, iconRect, textRect);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、選択されていないタブの高さを低くすることで、選択されたタブの高さが目立つように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicTabbedPaneUI#calculateTabHeight(...)&lt;/code&gt;などをオーバーライドして、タブ(領域)の高さを変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicTabbedPaneUI#paintTab(...)&lt;/code&gt;などをオーバーライドして、描画されるタブの高さを&lt;code&gt;BasicTabbedPaneUI#calculateTabHeight(...)&lt;/code&gt;で設定した高さの半分程度に変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane.TOP&lt;/code&gt;の場合、選択されていないタブの&lt;code&gt;y&lt;/code&gt;座標を下に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対応しているのは、&lt;code&gt;JTabbedPane.SCROLL_TAB_LAYOUT&lt;/code&gt;の場合のみ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane.TOP&lt;/code&gt;と&lt;code&gt;JTabbedPane.BOTTOM&lt;/code&gt;の場合、選択したタブの高さが変化する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane.LEFT&lt;/code&gt;と&lt;code&gt;JTabbedPane.RIGHT&lt;/code&gt;の場合、すべてのタブが&lt;code&gt;BasicTabbedPaneUI#calculateTabHeight(...)&lt;/code&gt;で設定した高さになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;注: 以下のようにタブの位置を変更する&lt;code&gt;JComboBox&lt;/code&gt;を追加したので、&lt;code&gt;JDK 1.7.0&lt;/code&gt;以上が必要&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static enum TabPlacements {
  TOP(JTabbedPane.TOP), BOTTOM(JTabbedPane.BOTTOM),
  LEFT(JTabbedPane.LEFT), RIGHT(JTabbedPane.RIGHT);
  public final int tabPlacement;
  private TabPlacements(int tabPlacement) {
    this.tabPlacement = tabPlacement;
  }
}
private final JComboBox&amp;lt;TabPlacements&amp;gt; comboBox =
    new JComboBox&amp;lt;&amp;gt;(TabPlacements.values());
private final JTabbedPane tabbedPane = new JTabbedPane(
    JTabbedPane.TOP, JTabbedPane.SCROLL_TAB_LAYOUT);
//...
comboBox.addItemListener(new ItemListener() {
  @Override public void itemStateChanged(ItemEvent e) {
    if(e.getStateChange()==ItemEvent.SELECTED) {
      tabbedPane.setTabPlacement(((TabPlacements)e.getItem()).tabPlacement);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectedtabheight</link>
                <guid>http://terai.xrea.jp/swing/selectedtabheight</guid>
                <pubDate>2010-04-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DesktopPropertyの変更を監視する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Toolkit&lt;/code&gt;に&lt;code&gt;PropertyChangeListener&lt;/code&gt;を追加して、ダブルクリックの速度などの変更を監視します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DesktopProperty&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTKxXuJ4EI/AAAAAAAAAWg/utfOkK69KBk/s800/DesktopProperty.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Toolkit.getDefaultToolkit().addPropertyChangeListener(
    &quot;awt.multiClickInterval&quot;, new PropertyChangeListener() {
  @Override public void propertyChange(PropertyChangeEvent e) {
    System.out.println(&quot;----\n&quot;+e.getPropertyName());
    System.out.println(Toolkit.getDefaultToolkit().getDesktopProperty(e.getPropertyName()));
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Toolkit&lt;/code&gt;に&lt;code&gt;PropertyChangeListener&lt;/code&gt;を追加して、ダブルクリックの速度と、&lt;code&gt;Windows&lt;/code&gt;環境での画面の配色(画面のプロパティ、デザイン、配色の規定(青)、オーブ グリーン、シルバー)の変更を監視しています。&lt;/p&gt;

&lt;p&gt;その他、サポートされている&lt;code&gt;Windows&lt;/code&gt;デスクトップ関連のプロパティー一覧は、以下のようにして取得することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/swing/1.4/w2k_props.html&quot;&gt;Windows デスクトップ関連のプロパティーのサポート&lt;/a&gt;のサンプルより&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
public class DesktopPropertyList {
  public static void main(String[] args) {
    for(String s:(String[])Toolkit.getDefaultToolkit().getDesktopProperty(&quot;win.propNames&quot;))
      System.out.println(s);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/swing/1.4/w2k_props.html&quot;&gt;Windows デスクトップ関連のプロパティーのサポート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1352133&quot;&gt;Swing - Should UIManager fire propertyChangeEvents here?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/swing/1.4/w2k_props.html&quot;&gt;Windows デスクトップ関連のプロパティーのサポート&lt;/a&gt;の、(&lt;code&gt;TBI&lt;/code&gt;)の意味を調べる。「メッセージボックスのフォントカラー」のプロパティー名は文字化け？、重複？。同じく、アイコンのサイズとアイコンの横の間隔など。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-03-29 (月) 15:07:50&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/desktopproperty</link>
                <guid>http://terai.xrea.jp/swing/desktopproperty</guid>
                <pubDate>2010-03-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのPopupMenuを右側に表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の右側に&lt;code&gt;PopupMenu&lt;/code&gt;が表示されるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RightPopupMenuComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTR6-BHykI/AAAAAAAAAh8/0mx4AWajd58/s800/RightPopupMenuComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RightPopupMenuListener implements PopupMenuListener {
  @Override public void popupMenuWillBecomeVisible(final PopupMenuEvent e) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        JComboBox combo = (JComboBox)e.getSource();
        Accessible a = combo.getUI().getAccessibleChild(combo, 0);
        if(a instanceof BasicComboPopup) {
          BasicComboPopup pop = (BasicComboPopup)a;
          Point p = new Point(combo.getSize().width, 0);
          SwingUtilities.convertPointToScreen(p, combo);
          pop.setLocation(p);
        }
      }
    });
  }
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}
  @Override public void popupMenuCanceled(PopupMenuEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;PopupMenu&lt;/code&gt;が開くときに、その位置を変更するような&lt;code&gt;PopupMenuListener&lt;/code&gt;を作成し、&lt;code&gt;addPopupMenuListener&lt;/code&gt;メソッドで追加しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の矢印アイコンも、以下のようにして変更しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo2.setUI(new com.sun.java.swing.plaf.windows.WindowsComboBoxUI() {
  @Override protected JButton createArrowButton() {
    JButton button = new JButton(icon) {
      @Override public Dimension getPreferredSize() {
        return new Dimension(14, 14);
      }
    };
    button.setRolloverIcon(makeRolloverIcon(icon));
    button.setFocusPainted(false);
    button.setContentAreaFilled(false);
    return button;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4743225&quot;&gt;Bug ID: 4743225 Size of JComboBox list is wrong when list is populated via PopupMenuListener&lt;/a&gt;のせいで？、正常に動作しなくなっていたので修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-24 (火) 16:54:17&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rightpopupmenucombobox</link>
                <guid>http://terai.xrea.jp/swing/rightpopupmenucombobox</guid>
                <pubDate>2010-03-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontの一覧を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Font&lt;/code&gt;一覧を取得して、&lt;code&gt;Font&lt;/code&gt;のファミリ名、論理名などを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AllFonts&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTHfZb6u3I/AAAAAAAAARQ/8XzwOvBod-Q/s800/AllFonts.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Font[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GraphicsEnvironment#getAllFonts()&lt;/code&gt;メソッドを使って、この環境で利用可能なフォントの一覧を取得しています。
このメソッドは、ユーザーに特定のフォントを選択させる場合に、よく使用されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;family&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFamily()&lt;/code&gt;で、&lt;code&gt;Font&lt;/code&gt;のファミリ名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Font#getFontName()&lt;/code&gt;で取得できるのはフォントフェース名(&lt;code&gt;family+style?&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getName()&lt;/code&gt;で、&lt;code&gt;Font&lt;/code&gt;の論理名&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postscript name&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Font&lt;/code&gt;のポストスクリプト名&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;GraphicsEnvironment#getAvailableFontFamilyNames()&lt;/code&gt;メソッドでは、フォントファミリ名の配列を取得することができます。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/allfonts</link>
                <guid>http://terai.xrea.jp/swing/allfonts</guid>
                <pubDate>2010-03-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerで無効な値の入力を許可しない</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;から&lt;code&gt;JFormattedTextField&lt;/code&gt;を取得し、これに無効な値の入力を許可しないように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NumberFormatter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQg6Td8tI/AAAAAAAAAfs/u5mXLfk3k64/s800/NumberFormatter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner.NumberEditor editor = (JSpinner.NumberEditor)spinner.getEditor();
DefaultFormatter formatter = (DefaultFormatter) editor.getTextField().getFormatter();
formatter.setAllowsInvalid(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DefaultFormatter#setAllowsInvalid(false)&lt;/code&gt;などを設定した&lt;code&gt;DefaultFormatterFactory&lt;/code&gt;を作成して、&lt;code&gt;JSpinner&lt;/code&gt;から取得した&lt;code&gt;JFormattedTextField&lt;/code&gt;に&lt;code&gt;setFormatterFactory&lt;/code&gt;で追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpinnerNumberModel&lt;/code&gt;を設定した通常の&lt;code&gt;JSpinner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;別コンポーネントにフォーカスが移動するときに、値が有効か無効かを判断&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpinnerNumberModel&lt;/code&gt;を設定し、数値以外の無効な文字入力ができないようにした&lt;code&gt;JSpinner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpinnerNumberModel&lt;/code&gt;を設定した通常の&lt;code&gt;JSpinner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;別コンポーネントにフォーカスが移動するときに、値が有効か無効かを判断&lt;/li&gt;
&lt;li&gt;無効な値の場合は、背景色を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JSpinner makeSpinner2(SpinnerNumberModel m) {
  JSpinner s = new JSpinner(m);
  JSpinner.NumberEditor editor = (JSpinner.NumberEditor)s.getEditor();
  final JFormattedTextField ftf = (JFormattedTextField)editor.getTextField();
  ftf.setFormatterFactory(makeFFactory(m));
  ftf.getDocument().addDocumentListener(new DocumentListener() {
    private final Color color = new Color(255,200,200);
    @Override public void changedUpdate(DocumentEvent e) {
      updateEditValid();
    }
    @Override public void insertUpdate(DocumentEvent e) {
      updateEditValid();
    }
    @Override public void removeUpdate(DocumentEvent e) {
      updateEditValid();
    }
    private void updateEditValid() {
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          ftf.setBackground(ftf.isEditValid()?Color.WHITE:color);
        }
      });
    }
  });
  return s;
}
private static DefaultFormatterFactory makeFFactory(final SpinnerNumberModel m) {
  final NumberFormat format = new DecimalFormat(&quot;####0&quot;);
  NumberFormatter displayFormatter = new NumberFormatter(format);
  NumberFormatter editFormatter = new NumberFormatter(format) {
    @Override public Object stringToValue(String text) throws ParseException {
      try{
        Long.parseLong(text);
      }catch(NumberFormatException e) {
        throw new ParseException(&quot;xxx&quot;, 0);
      }
      Object o = format.parse(text);
      if(o instanceof Long) {
        Long val = (Long)format.parse(text);
        Long max = (Long)m.getMaximum();
        Long min = (Long)m.getMinimum();
        if(max.compareTo(val)&amp;lt;0 || min.compareTo(val)&amp;gt;0) {
          throw new ParseException(&quot;xxx&quot;, 0);
        }
        return val;
      }
      throw new ParseException(&quot;xxx&quot;, 0);
    }
  };
  //editFormatter.setAllowsInvalid(false);
  //editFormatter.setCommitsOnValidEdit(true);
  editFormatter.setValueClass(Long.class);
  return new DefaultFormatterFactory(displayFormatter, displayFormatter, editFormatter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NumericTextField.html&quot;&gt;JTextFieldの入力を数値に制限する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;無効な値が入力されたときの背景色の変更を&lt;code&gt;DocumentListener&lt;/code&gt;で行うように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-27 (火) 21:52:05&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6423494&quot;&gt;Bug ID: 6423494 SpinnerNumberModel should use getMinimum and getMaximum instead of fields&lt;/a&gt;、&lt;a href=&quot;http://terai.xrea.jp/Swing/SpinnerNumberModel.html&quot;&gt;SpinnerNumberModelに上限値を超える値を入力&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-27 (火) 22:12:46&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/numberformatter</link>
                <guid>http://terai.xrea.jp/swing/numberformatter</guid>
                <pubDate>2010-03-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DocumentFilterで先頭文字を大文字に変換する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DocumentFilter&lt;/code&gt;を使って、文字列の先頭が常に大文字になるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FirstCharToUpperCase&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTMuU7OQ-I/AAAAAAAAAZo/jnaPTnPJY4w/s800/FirstCharToUpperCase.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class FirstCharToUpperCaseDocumentFilter extends DocumentFilter {
  private final JTextComponent textArea;
  public FirstCharToUpperCaseDocumentFilter(JTextComponent textArea) {
    super();
    this.textArea = textArea;
  }
  @Override public void insertString(
      FilterBypass fb, int offset, String text, AttributeSet attrs)
      throws BadLocationException {
    if(text==null) return;
    replace(fb, offset, 0, text, attrs);
  }
  @Override public void remove(
      FilterBypass fb, int offset, int length) throws BadLocationException {
    Document doc = fb.getDocument();
    if(offset==0 &amp;amp;&amp;amp; doc.getLength()-length&amp;gt;0) {
      fb.replace(0, length+1, doc.getText(length, 1).toUpperCase(), null);
      textArea.setCaretPosition(0);
    }else{
      fb.remove(offset, length);
    }
  }
  @Override public void replace(
      FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
      throws BadLocationException {
    if(offset==0 &amp;amp;&amp;amp; text!=null &amp;amp;&amp;amp; text.length()&amp;gt;0) {
      text = text.substring(0,1).toUpperCase()+text.substring(1);
    }
    fb.replace(offset, length, text, attrs);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField&lt;/code&gt;に入力された文字列の先頭一文字が、常に大文字になるように変換する&lt;code&gt;DocumentFilter&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;JFormattedTextField&lt;/code&gt; + &lt;code&gt;MaskFormatter&lt;/code&gt;を使うと、先頭文字を削除した場合などで空白文字が挿入される(長さが決まっているから？)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFormattedTextField field1 = new JFormattedTextField(new MaskFormatter(&quot;ULLLLLLLLLL&quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/firstchartouppercase</link>
                <guid>http://terai.xrea.jp/swing/firstchartouppercase</guid>
                <pubDate>2010-03-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaの一部を編集不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;の一部の行を編集不可になるよう設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NonEditableLine&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQW4ZQhAI/AAAAAAAAAfc/JkImmzMvG6I/s800/NonEditableLine.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class NonEditableLineDocumentFilter extends DocumentFilter {
  @Override public void insertString(
      DocumentFilter.FilterBypass fb, int offset,
      String string, AttributeSet attr) throws BadLocationException {
    if(string == null) {
      return;
    }else{
      replace(fb, offset, 0, string, attr);
    }
  }
  @Override public void remove(
      DocumentFilter.FilterBypass fb, int offset,
      int length) throws BadLocationException {
    replace(fb, offset, length, &quot;&quot;, null);
  }
  @Override public void replace(
      DocumentFilter.FilterBypass fb, int offset, int length,
      String text, AttributeSet attrs) throws BadLocationException {
    Document doc = fb.getDocument();
    if(doc.getDefaultRootElement().getElementIndex(offset)&amp;lt;2) return;
    fb.replace(offset, length, text, attrs);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DocumentFilter&lt;/code&gt;を使って、&lt;code&gt;JTextArea&lt;/code&gt;の一行目と二行目で追加、削除などの編集ができないように設定しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;((AbstractDocument)textArea.getDocument()).setDocumentFilter(new NonEditableLineDocumentFilter());
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;一行目と二行目の背景色は、編集不可のための&lt;code&gt;DocumentFilter&lt;/code&gt;とは関係なく、&lt;code&gt;Highlighter&lt;/code&gt;を使って別途設定しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  Highlighter hilite = textArea.getHighlighter();
  Document doc = textArea.getDocument();
  Element root = doc.getDefaultRootElement();
  for(int i=0;i&amp;lt;2;i++) {
    Element elem = root.getElement(i);
    hilite.addHighlight(elem.getStartOffset(),
                        elem.getEndOffset()-1,
                        highlightPainter);
  }
}catch(BadLocationException ble) {
  ble.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/date/20050622&quot;&gt;Document Guard - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LastLineEditableTextArea.html&quot;&gt;JTextAreaの最終行だけ編集可能になるよう設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/noneditableline</link>
                <guid>http://terai.xrea.jp/swing/noneditableline</guid>
                <pubDate>2010-02-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ProgressMonitorで処理の進捗を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ProgressMonitor&lt;/code&gt;で処理の進捗を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressMonitor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRQXIAu4I/AAAAAAAAAg4/bh8niw_k5AE/s800/ProgressMonitor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final ProgressMonitor monitor = new ProgressMonitor(this, &quot;message&quot;, &quot;note&quot;, 0, 100);
monitor.setProgress(0);
worker = new SwingWorker&amp;lt;String, String&amp;gt;() {
  @Override public String doInBackground() {
    int current = 0;
    int lengthOfTask = 120; //list.size();
    while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
    //while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !monitor.isCanceled()) {
      try {
        Thread.sleep(50);
      }catch(InterruptedException ie) {
        return &quot;Interrupted&quot;;
      }
      setProgress(100 * current / lengthOfTask);
      publish(current + &quot;/&quot; + lengthOfTask);
      current++;
    }
    return &quot;Done&quot;;
  }
  @Override protected void process(java.util.List&amp;lt;String&amp;gt; chunks) {
    for(String message : chunks) {
      monitor.setNote(message);
    }
  }
  @Override public void done() {
    runButton.setEnabled(true);
    monitor.close();
    String text = null;
    if(isCancelled()) {
      text = &quot;Cancelled&quot;;
    }else{
      try {
        text = get();
      }catch(Exception ex) {
        ex.printStackTrace();
        text = &quot;Exception&quot;;
      }
    }
    //System.out.println(text);
    area.append(text+&quot;\n&quot;);
    area.setCaretPosition(area.getDocument().getLength());
    //appendLine(text);
  }
};
worker.addPropertyChangeListener(new ProgressListener(monitor));
worker.execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;SwingWorker&lt;/code&gt;を使ったタスクの進捗状態を&lt;code&gt;ProgressMonitor&lt;/code&gt;で表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;ProgressListener&lt;/code&gt;は、&lt;code&gt;Tutorial&lt;/code&gt;の&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/ProgressMonitorDemoProject/src/components/ProgressMonitorDemo.java&quot;&gt;ProgressMonitorDemo.java&lt;/a&gt;を変更して使用しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ProgressListener implements PropertyChangeListener {
  private final ProgressMonitor monitor;
  public ProgressListener(ProgressMonitor monitor) {
    this.monitor = monitor;
    this.monitor.setProgress(0);
  }
  @Override public void propertyChange(PropertyChangeEvent e) {
    String strPropertyName = e.getPropertyName();
    if(&quot;progress&quot;.equals(strPropertyName)) {
      monitor.setProgress((Integer)e.getNewValue());
      if(monitor.isCanceled()) {
        ((SwingWorker)e.getSource()).cancel(true);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/progress.html&quot;&gt;How to Use Progress Bars (The Java™ Tutorials)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MillisToDecideToPopup.html&quot;&gt;ProgressMonitorがダイアログを表示するまでの待ち時間&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;処理時間が短くて&lt;code&gt;ProgressMonitor&lt;/code&gt;が表示されない場合などについて&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progressmonitor</link>
                <guid>http://terai.xrea.jp/swing/progressmonitor</guid>
                <pubDate>2010-02-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのCellEditorとCellRendererにJSliderを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellEditor&lt;/code&gt;と&lt;code&gt;CellRenderer&lt;/code&gt;に&lt;code&gt;JSlider&lt;/code&gt;を使用するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SliderInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTTK5HPd3I/AAAAAAAAAj8/qhIGBo92NNE/s800/SliderInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SliderRednerer extends JSlider implements TableCellRenderer {
  public SliderRednerer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
    setOpaque(true);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    Integer i = (Integer)value;
    setBackground(isSelected?table.getSelectionBackground():table.getBackground());
    setValue(i.intValue());
    return this;
  }
  //Overridden for performance reasons. ----&amp;gt;
  @Override public void firePropertyChange(String p, boolean ov, boolean nv) {}
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SliderEditor extends JSlider implements TableCellEditor {
  public SliderEditor(final JTable table) {
    super();
    setOpaque(true);
    addChangeListener(new ChangeListener() {
      @Override public void stateChanged(ChangeEvent e) {
        EventQueue.invokeLater(new Runnable() {
          @Override public void run() {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            table.getModel().setValueAt(getValue(), row, 0);
            table.getModel().setValueAt(getValue(), row, 1);
          }
        });
      }
    });
  }
  @Override public Component getTableCellEditorComponent(JTable table,
      Object value, boolean isSelected, int row, int column) {
    Integer i = (Integer)value;
    this.setBackground(table.getSelectionBackground());
    this.setValue(i.intValue());
    return this;
  }
  @Override public Object getCellEditorValue() {
    return Integer.valueOf(getValue());
  }
    //Copied from AbstractCellEditor
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;1&lt;/code&gt;列目のセルエディタ、レンダラーに&lt;code&gt;JSlider&lt;/code&gt;を使用するように設定しています。このスライダーの値を変更すると、同じ行の&lt;code&gt;0&lt;/code&gt;列目の値も変更されるように、セルエディタに&lt;code&gt;ChangeListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6348946&quot;&gt;Bug ID: 6348946 JSlider&amp;#39;s thumb moves in the wrong direction when used as a JTable cell editor.&lt;/a&gt; via. &lt;a href=&quot;https://forums.oracle.com/thread/2153323&quot;&gt;Swing - How to insert a JComponent into a cell of JTable&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-01-16 (日) 02:25:31&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/sliderintablecell</link>
                <guid>http://terai.xrea.jp/swing/sliderintablecell</guid>
                <pubDate>2010-02-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerのモデルの値をループさせる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;のモデルで値が最大、最小を超えるとループするように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CyclingSpinnerModel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKYcCKxAI/AAAAAAAAAV4/T8OdovAF6EY/s800/CyclingSpinnerModel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;spinner.setModel(new SpinnerNumberModel(20, 0, 59, 1) {
  @Override public Object getNextValue() {
    Object n = super.getNextValue();
    if(n==null) n = getMinimum();
    return n;
  }
  @Override public Object getPreviousValue() {
    Object n = super.getPreviousValue();
    if(n==null) n = getMaximum();
    return n;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、各モデルの&lt;code&gt;getNextValue&lt;/code&gt;、&lt;code&gt;getPreviousValue&lt;/code&gt;メソッドをオーバーライドすることでループするように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/spinner.html#model&quot;&gt;Creating Custom Spinner Models and Editors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/cyclingspinnermodel</link>
                <guid>http://terai.xrea.jp/swing/cyclingspinnermodel</guid>
                <pubDate>2010-02-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GlobalFocusをクリアする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GlobalFocus&lt;/code&gt;をクリアして、フォーカスをもつコンポーネントがない状態に戻します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearGlobalFocusOwner&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJA-Nc1vI/AAAAAAAAATs/mH0hhS2R1n8/s800/ClearGlobalFocusOwner.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;KeyboardFocusManager.getCurrentKeyboardFocusManager().clearGlobalFocusOwner();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFrame&lt;/code&gt;をクリックしたときに、&lt;code&gt;KeyboardFocusManager#clearGlobalFocusOwner()&lt;/code&gt;メソッドを使用して、&lt;code&gt;GlobalFocus&lt;/code&gt;をクリアしています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clearglobalfocusowner</link>
                <guid>http://terai.xrea.jp/swing/clearglobalfocusowner</guid>
                <pubDate>2010-01-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameのタイトルバーなどの装飾を独自のものにカスタマイズする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;のタイトルバーなどを非表示にして独自に描画し、これに移動リサイズなどの機能も追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CustomDecoratedFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTKV1P7mYI/AAAAAAAAAV0/u4qjd-ItBYU/s800/CustomDecoratedFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ResizeWindowListener extends MouseAdapter {
  private Rectangle startSide = null;
  private final JFrame frame;
  public ResizeWindowListener(JFrame frame) {
    this.frame = frame;
  }
  @Override public void mousePressed(MouseEvent e) {
    startSide = frame.getBounds();
  }
  @Override public void mouseDragged(MouseEvent e) {
    if(startSide==null) return;
    Component c = e.getComponent();
    if(c==topleft) {
      startSide.y += e.getY();
      startSide.height -= e.getY();
      startSide.x += e.getX();
      startSide.width -= e.getX();
    }else if(c==top) {
      startSide.y += e.getY();
      startSide.height -= e.getY();
    }else if(c==topright) {
      startSide.y += e.getY();
      startSide.height -= e.getY();
      startSide.width += e.getX();
    }else if(c==left) {
      startSide.x += e.getX();
      startSide.width -= e.getX();
    }else if(c==right) {
      startSide.width += e.getX();
    }else if(c==bottomleft) {
      startSide.height += e.getY();
      startSide.x += e.getX();
      startSide.width -= e.getX();
    }else if(c==bottom) {
      startSide.height += e.getY();
    }else if(c==bottomright) {
      startSide.height += e.getY();
      startSide.width += e.getX();
    }
    frame.setBounds(startSide);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルではタイトルバーを、&lt;code&gt;setUndecorated(true)&lt;/code&gt;で非表示にし、移動可能にした&lt;code&gt;JPanel&lt;/code&gt;を追加してタイトルバーにしています。
リサイズは、&lt;a href=&quot;https://forums.oracle.com/thread/1365156&quot;&gt;Swing - Undecorated and resizable dialog&lt;/a&gt;や&lt;code&gt;BasicInternalFrameUI.java&lt;/code&gt;、&lt;code&gt;MetalRootPaneUI#MouseInputHandler&lt;/code&gt;などを参考にして、周辺にそれぞれ対応するリサイズカーソルを設定した&lt;code&gt;JLabel&lt;/code&gt;を配置しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;の場合、&lt;code&gt;JFrame&lt;/code&gt;の背景色を透明(&lt;code&gt;frame.setBackground(new Color(0,0,0,0));&lt;/code&gt;)にし、&lt;code&gt;ContentPane&lt;/code&gt;の左右上の角をクリアして透明にしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowDecorationStyle.html&quot;&gt;JRootPaneにリサイズのための装飾を設定する&lt;/a&gt;のように、&lt;code&gt;JRootPane#setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);&lt;/code&gt;を使用してリサイズする方法もあります。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class WindowDecorationStyleTest {
  public JComponent makeTitleBar() {
    JLabel label = new JLabel(&quot;Title&quot;);
    label.setOpaque(true);
    label.setForeground(Color.WHITE);
    label.setBackground(Color.BLACK);
    DragWindowListener dwl = new DragWindowListener();
    label.addMouseListener(dwl);
    label.addMouseMotionListener(dwl);

    JPanel title = new JPanel(new BorderLayout());
    title.setBorder(BorderFactory.createMatteBorder(0, 4, 4, 4, Color.BLACK));
    title.add(label);
    title.add(new JButton(new AbstractAction(&quot;x&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        Window w = SwingUtilities.windowForComponent((Component) e.getSource());
        w.dispatchEvent(new WindowEvent(w, WindowEvent.WINDOW_CLOSING));
      }
    }), BorderLayout.EAST);
    return title;
  }
  public JComponent makeUI() {
    return new JScrollPane(new JTree());
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame frame = new JFrame();
    frame.setUndecorated(true);

    WindowDecorationStyleTest demo = new WindowDecorationStyleTest();
    JRootPane root = frame.getRootPane();
    root.setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
    root.setBorder(BorderFactory.createMatteBorder(4, 8, 8, 8, Color.BLACK));
    JLayeredPane layeredPane = root.getLayeredPane();
    Component c = layeredPane.getComponent(1);
    if (c instanceof JComponent) {
      JComponent orgTitlePane = (JComponent) c;
      orgTitlePane.removeAll();
      orgTitlePane.setLayout(new BorderLayout());
      orgTitlePane.add(demo.makeTitleBar());
    }
    frame.setMinimumSize(new Dimension(300, 120));
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(demo.makeUI());
    frame.setSize(320, 240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}

class DragWindowListener extends MouseAdapter {
  private final transient Point startPt = new Point();
  private Window window;
  @Override public void mousePressed(MouseEvent me) {
    if (window == null) {
      Object o = me.getSource();
      if (o instanceof Window) {
        window = (Window) o;
      } else if (o instanceof JComponent) {
        window = SwingUtilities.windowForComponent(me.getComponent());
      }
    }
    startPt.setLocation(me.getPoint());
  }
  @Override public void mouseDragged(MouseEvent me) {
    if (window != null) {
      Point pt = new Point();
      pt = window.getLocation(pt);
      int x = pt.x - startPt.x + me.getX();
      int y = pt.y - startPt.y + me.getY();
      window.setLocation(x, y);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1365156&quot;&gt;Swing - Undecorated and resizable dialog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragWindow.html&quot;&gt;JWindowをマウスで移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InternalFrameTitleBar.html&quot;&gt;JInternalFrameをJFrameとして表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowDecorationStyle.html&quot;&gt;JRootPaneにリサイズのための装飾を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blogger&lt;/code&gt;の方にコメントをもらって、調査、修正中だけど、&lt;code&gt;dual-monitor&lt;/code&gt;環境が無いのでテストしづらい…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-10-06 (水) 13:01:36&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-swing-tips.blogspot.com/2010/05/custom-decorated-titlebar-jframe.html&quot;&gt;blogspot&lt;/a&gt;で指摘されていた件について: このサンプルを&lt;code&gt;1.6.0_xx&lt;/code&gt;+&lt;code&gt;WebStart&lt;/code&gt;で実行すると、画面の外にフレームをドラッグすることが出来なかったのですが、&lt;code&gt;JRE&lt;/code&gt;のバージョンを&lt;code&gt;1.7.0&lt;/code&gt;にすると、&lt;code&gt;WebStart&lt;/code&gt;で起動しても画面外に移動可能になっているみたいです。もしかしてデュアルディスプレイでも移動できるようになっているのかも？(確認してないですが...) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-06 (火) 21:27:18&lt;/li&gt;
&lt;li&gt;マルチモニター関係のメモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7123767&quot;&gt;Bug ID: 7123767 Wrong tooltip location in Multi-Monitor configurations&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-14 (火) 13:55:29&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/customdecoratedframe</link>
                <guid>http://terai.xrea.jp/swing/customdecoratedframe</guid>
                <pubDate>2010-01-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AffineTransformOpで画像を反転する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AffineTransformOp&lt;/code&gt;などを使って、画像の上下反転、左右反転を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AffineTransformOp&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTHczsN2NI/AAAAAAAAARM/D8gpa0-KfEI/s800/AffineTransformOp.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int w = bi.getWidth(this);
int h = bi.getHeight(this);
AffineTransform at = AffineTransform.getScaleInstance(-1.0, 1.0);
at.translate(-w, 0);
AffineTransformOp atOp = new AffineTransformOp(at, null);
g.drawImage(atOp.filter(bi, null), 0, 0, w, h, this);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;AffineTransformOp#filter(...)&lt;/code&gt;メソッドで左右反転した&lt;code&gt;BufferedImage&lt;/code&gt;を生成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような方法で上下反転することもできます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;AffineTransform at = AffineTransform.getScaleInstance(1.0, -1.0);
at.translate(0, -h);
g2.drawImage(bi, at, this);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HorizontalFlip.html&quot;&gt;Shapeの反転&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/affinetransformop</link>
                <guid>http://terai.xrea.jp/swing/affinetransformop</guid>
                <pubDate>2010-01-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerのテキストフィールド内に選択不可の文字を追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;のテキストフィールド内に選択や編集ができない文字列を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ParticularyNonEditableSpinner&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQ5w9QfII/AAAAAAAAAgU/iBrVcxeaFS4/s800/ParticularyNonEditableSpinner.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class StringBorder implements Border {
  private final JComponent parent;
  private final Insets insets;
  private final Rectangle rect;
  private final String str;
  public StringBorder(JComponent parent, String str) {
    this.parent = parent;
    this.str = str;
    FontRenderContext frc = new FontRenderContext(null, true, true);
    rect = parent.getFont().getStringBounds(str, frc).getBounds();
    insets = new Insets(0,0,0,rect.width);
  }
  @Override public Insets getBorderInsets(Component c) {
    return insets;
  }
  @Override public boolean isBorderOpaque() {
    return false;
  }
  @Override public void paintBorder(
      Component c, Graphics g, int x, int y, int width, int height) {
    Graphics2D g2 = (Graphics2D)g;
    float tx = x + width - rect.width;
    float ty = y - rect.y + (height - rect.height)/2;
    //g2.setPaint(Color.RED);
    g2.drawString(str, tx, ty);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;JSpinner.NumberEditor&lt;/code&gt; + &lt;code&gt;DecimalFormat&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NumberEditor.html&quot;&gt;JSpinnerの値をパーセントで指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner1 = new JSpinner(new SpinnerNumberModel(0, 0, 1, 0.01));
JSpinner.NumberEditor editor1 = new JSpinner.NumberEditor(spinner1, &quot;0%&quot;);
spinner1.setEditor(editor1);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下: &lt;code&gt;JSpinner&lt;/code&gt; + &lt;code&gt;StringBorder&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;のエディタに余白を設定し、そこに文字列を描画しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner2 = new JSpinner(new SpinnerNumberModel(0, 0, 100, 1));
JSpinner.NumberEditor editor2 = new JSpinner.NumberEditor(spinner2);
spinner2.setEditor(editor2);
editor2.setOpaque(true);
editor2.setBackground(Color.WHITE);
//Border b = new StringBorder(editor2, &quot;percent&quot;);
Border b = new StringBorder(editor2, &quot;%&quot;);
Border c = editor2.getBorder();
editor2.setBorder((c==null)?b:BorderFactory.createCompoundBorder(c,b));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;a href=&quot;http://tips4java.wordpress.com/2009/09/27/component-border/&quot;&gt;Component Border ≪ Java Tips Weblog&lt;/a&gt;を利用して、&lt;code&gt;JLabel&lt;/code&gt;を余白に描画する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(&quot;%&quot;);
label.setBorder(BorderFactory.createEmptyBorder());
label.setOpaque(true);
label.setBackground(Color.WHITE);
ComponentBorder cb = new ComponentBorder(label);
cb.setGap(0);
cb.install(editor2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NumberEditor.html&quot;&gt;JSpinnerの値をパーセントで指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/09/27/component-border/&quot;&gt;Component Border ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.7.0&lt;/code&gt;以上でないとコンパイルできなかったのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-10-15 (月) 18:30:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/particularynoneditablespinner</link>
                <guid>http://terai.xrea.jp/swing/particularynoneditablespinner</guid>
                <pubDate>2010-01-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>PixelGrabberで画像を配列として取得し編集、書出し</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;画像の配列を取り出す&lt;code&gt;PixelGrabber&lt;/code&gt;を生成して、角を透過色で塗りつぶします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PixelGrabber&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRBSkghZI/AAAAAAAAAgg/Ce52fcu-nQI/s800/PixelGrabber.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BufferedImage image;
try {
  image = javax.imageio.ImageIO.read(getClass().getResource(&quot;screenshot.png&quot;));
}catch(java.io.IOException ioe) {
  ioe.printStackTrace();
  return;
}

int width  = image.getWidth(p);
int height = image.getHeight(p);
int[] pix  = new int[height * width];
PixelGrabber pg = new PixelGrabber(image, 0, 0, width, height, pix, 0, width);
try {
  pg.grabPixels();
} catch (Exception e) {
  e.printStackTrace();
}

//NW
for(int y=0;y&amp;lt;5;y++) {
  for(int x=0;x&amp;lt;5;x++) {
    if((y==0 &amp;amp;&amp;amp; x&amp;lt;5) || (y==1 &amp;amp;&amp;amp; x&amp;lt;3) ||
       (y==2 &amp;amp;&amp;amp; x&amp;lt;2) || (y==3 &amp;amp;&amp;amp; x&amp;lt;1) ||
       (y==4 &amp;amp;&amp;amp; x&amp;lt;1) ) pix[y*width+x] = 0x0;
  }
}
//NE
for(int y=0;y&amp;lt;5;y++) {
  for(int x=width-5;x&amp;lt;width;x++) {
    if((y==0 &amp;amp;&amp;amp; x&amp;gt;=width-5) || (y==1 &amp;amp;&amp;amp; x&amp;gt;=width-3) ||
       (y==2 &amp;amp;&amp;amp; x&amp;gt;=width-2) || (y==3 &amp;amp;&amp;amp; x&amp;gt;=width-1) ||
       (y==4 &amp;amp;&amp;amp; x&amp;gt;=width-1) ) pix[y*width+x] = 0x0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ウィンドウのスクリーンショット画像から、&lt;code&gt;PixelGrabber&lt;/code&gt;で配列を生成し、左上、右上の角を&lt;code&gt;Windows XP&lt;/code&gt;風に透過色で上書きしています。&lt;/p&gt;

&lt;p&gt;角を置き換えた配列は、以下のように&lt;code&gt;MemoryImageSource&lt;/code&gt;などを使用して画像に変換しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;MemoryImageSource producer = new MemoryImageSource(width, height, pix, 0, width);
Image img = p.createImage(producer);
BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
Graphics g = bi.createGraphics();
g.drawImage(img, 0, 0, null);
g.dispose();

//PNG画像ファイルとして保存
//try {
//  javax.imageio.ImageIO.write(
//    bi, &quot;png&quot;, java.io.File.createTempFile(&quot;screenshot&quot;, &quot;.png&quot;));
//}catch(java.io.IOException ioe) {
//  ioe.printStackTrace();
//}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;Graphics2D#setComposite(AlphaComposite.Clear)&lt;/code&gt;として、透過色で塗りつぶす方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//BufferedImage image = ...;
int w = image.getWidth(null);
int h = image.getHeight(null);

BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d = bi.createGraphics();
g2d.drawImage(image, 0, 0, null);
g2d.setComposite(AlphaComposite.Clear);
g2d.setPaint(new Color(0,0,0,0));
//NW
g2d.drawLine(0,0,4,0);
g2d.drawLine(0,1,2,1);
g2d.drawLine(0,2,1,2);
g2d.drawLine(0,3,0,4);
//NE
g2d.drawLine(w-5,0,w-1,0);
g2d.drawLine(w-3,1,w-1,1);
g2d.drawLine(w-2,2,w-1,2);
g2d.drawLine(w-1,3,w-1,4);
g2d.dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/pixelgrabber</link>
                <guid>http://terai.xrea.jp/swing/pixelgrabber</guid>
                <pubDate>2009-12-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル中にJRadioButtonを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中に複数の&lt;code&gt;JRadioButton&lt;/code&gt;を配置します。&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTableExamples2.html&quot;&gt;JTableExamples2&lt;/a&gt;を元に修正を行っています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RadioButtonsInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRX5e43uI/AAAAAAAAAhE/QX6qn9jFOB8/s800/RadioButtonsInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RadioButtonsPanel extends JPanel {
  private static final String OSNAME = System.getProperty(&quot;os.name&quot;);
  private final String[] answer = { &quot;A&quot;, &quot;B&quot;, &quot;C&quot; };
  public JRadioButton[] buttons;
  public ButtonGroup bg = new ButtonGroup();
  public RadioButtonsPanel() {
    super();
    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
    initButtons();
  }
  protected void initButtons() {
    bg = new ButtonGroup();
    buttons = new JRadioButton[answer.length];
    for(int i=0;i&amp;lt;buttons.length;i++) {
      buttons[i] = new JRadioButton(answer[i]);
      buttons[i].setActionCommand(answer[i]);
      buttons[i].setFocusable(false);
      buttons[i].setRolloverEnabled(false);
      add(buttons[i]);
      bg.add(buttons[i]);
    }
  }
  protected void updateSelectedButton(Object v) {
    if(&quot;Windows 7&quot;.equals(OSNAME)) { //Windows aero?
      removeAll();
      initButtons();
    }
    if(&quot;A&quot;.equals(v)) {
      buttons[0].setSelected(true);
    }else if(&quot;B&quot;.equals(v)) {
      buttons[1].setSelected(true);
    }else{
      buttons[2].setSelected(true);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RadioButtonsRenderer extends RadioButtonsPanel implements TableCellRenderer {
  public RadioButtonsRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
        Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    updateSelectedButton(value);
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RadioButtonsEditor extends RadioButtonsPanel implements TableCellEditor {
  public RadioButtonsEditor() {
    super();
    ActionListener al = new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        fireEditingStopped();
      }
    };
    for(AbstractButton b: buttons) b.addActionListener(al);
  }
  @Override public Component getTableCellEditorComponent(JTable table,
        Object value, boolean isSelected, int row, int column) {
    updateSelectedButton(value);
    return this;
  }
  @Override public Object getCellEditorValue() {
    return bg.getSelection().getActionCommand();
  }

  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JRadioButton&lt;/code&gt;を&lt;code&gt;3&lt;/code&gt;つ配置した&lt;code&gt;JPanel&lt;/code&gt;を、&lt;code&gt;CellRenderer&lt;/code&gt;、&lt;code&gt;CellEditor&lt;/code&gt;用に&lt;code&gt;2&lt;/code&gt;つ用意しています。&lt;code&gt;CellEditor&lt;/code&gt;内の各&lt;code&gt;JRadioButton&lt;/code&gt;には、クリックされたら編集を終了して更新をコミットするための&lt;code&gt;ActionListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTableExamples2.html&quot;&gt;JTableExamples2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/07/12/table-button-column/&quot;&gt;Table Button Column ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxesInTableCell.html&quot;&gt;JTableのCellにJCheckBoxを複数配置する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonCellEditor.html&quot;&gt;JTableのセルにJRadioButton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/radiobuttonsintablecell</link>
                <guid>http://terai.xrea.jp/swing/radiobuttonsintablecell</guid>
                <pubDate>2009-12-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderのSnapToTicksをマウスのドラッグでも適用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;の&lt;code&gt;SnapToTicks&lt;/code&gt;をマウスでのドラッグ中にも適用されるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SnapToTicksDrag&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTU-ruijI/AAAAAAAAAkM/p3Mze4pjyEk/s800/SnapToTicksDrag.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;slider.setUI(new MetalSliderUI() {
  @Override protected TrackListener createTrackListener(final JSlider slider) {
    return new TrackListener() {
      @Override public void mouseDragged(MouseEvent e) {
        if(!slider.getSnapToTicks() || slider.getMajorTickSpacing()==0) {
          super.mouseDragged(e);
          return;
        }
        //case JSlider.HORIZONTAL:
        int halfThumbWidth = thumbRect.width / 2;
        final int trackLength = trackRect.width;
        final int trackLeft   = trackRect.x - halfThumbWidth;
        final int trackRight  = trackRect.x + trackRect.width - 1 + halfThumbWidth;
        int xPos = e.getX();
        int snappedPos = xPos;
        if(xPos &amp;lt;= trackLeft) {
          snappedPos = trackLeft;
        }else if(xPos &amp;gt;= trackRight) {
          snappedPos = trackRight;
        }else{
          //int tickSpacing = slider.getMajorTickSpacing();
          //float actualPixelsForOneTick = trackLength * tickSpacing / (float)slider.getMaximum();

          // a problem if you choose to set a negative MINIMUM for the JSlider;
          // the calculated drag-positions are wrong.
          // Fixed by bobndrew:
          int possibleTickPositions = slider.getMaximum() - slider.getMinimum();
          int tickSpacing = (slider.getMinorTickSpacing()==0)
                      ? slider.getMajorTickSpacing()
                      : slider.getMinorTickSpacing();
          float actualPixelsForOneTick = trackLength * tickSpacing / (float) possibleTickPositions;
          xPos -= trackLeft;
          snappedPos = (int) (Math.round(xPos/actualPixelsForOneTick) * actualPixelsForOneTick + 0.5) + trackLeft;
          offset = 0;
          //System.out.println(snappedPos);
        }
        MouseEvent me = new MouseEvent(
          e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(),
          snappedPos, e.getY(),
          e.getXOnScreen(), e.getYOnScreen(),
          e.getClickCount(), e.isPopupTrigger(), e.getButton());
        e.consume();
        super.mouseDragged(me);
      }
    };
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上:デフォルト

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slider.setSnapToTicks(true);&lt;/code&gt;としているので、マウスをリリースした時点で、ノブを置いた位置にもっとも近い目盛にスナップされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TrackListener#mouseDragged&lt;/code&gt;をオーバーライドして、マウスでドラッグ中でもカーソルからもっとも近い目盛にスナップされる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider.HORIZONTAL&lt;/code&gt;にしか対応していません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-21 (月) 11:01:51&lt;/li&gt;
&lt;li&gt;bobndrewさんからの指摘で、ミニマムにマイナスの値を入れるとおかしくなるバグ修正と、&lt;code&gt;MinorTickSpacing&lt;/code&gt;に対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-10-26 (火) 15:32:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/snaptoticksdrag</link>
                <guid>http://terai.xrea.jp/swing/snaptoticksdrag</guid>
                <pubDate>2009-12-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderにJPopupMenuを追加してソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;に&lt;code&gt;JPopupMenu&lt;/code&gt;を追加してソートします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RowSorterPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSY9WWpNI/AAAAAAAAAis/Z0YqvftAIh8/s800/RowSorterPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private class TablePopupMenu extends JPopupMenu {
  private final List&amp;lt;SortAction&amp;gt; actions = Arrays.asList(
    new SortAction(SortOrder.ASCENDING),
    new SortAction(SortOrder.DESCENDING));
    //new SortAction(SortOrder.UNSORTED));
  public TablePopupMenu() {
    super();
    for(Action a:actions) add(a);
  }
  @Override public void show(Component c, int x, int y) {
    JTableHeader h = (JTableHeader)c;
    int i = h.columnAtPoint(new Point(x, y));
    i = h.getTable().convertColumnIndexToModel(i);
    for(SortAction a:actions) a.setIndex(i);
    super.show(c, x, y);
  }
}
private class SortAction extends AbstractAction{
  private final SortOrder dir;
  public SortAction(SortOrder dir) {
    super(dir.toString());
    this.dir = dir;
  }
  private int index = -1;
  public void setIndex(int index) {
    this.index = index;
  }
  @Override public void actionPerformed(ActionEvent e) {
    table.getRowSorter().setSortKeys(Arrays.asList(
      new RowSorter.SortKey(index, dir)));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、マウスカーソルの下にある&lt;code&gt;JTableHeader&lt;/code&gt;カラムをクリック(&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;:右クリック)することで、&lt;code&gt;JPopupMenu&lt;/code&gt;を表示してソートすることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左クリックではソートしない&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;ソートしたあとで、&lt;code&gt;JTableHeader&lt;/code&gt;のフォーカスペイントをクリアするために以下のような&lt;code&gt;PopupMenuListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPopupMenu pop = new TablePopupMenu();
final JTableHeader header = table.getTableHeader();
header.setComponentPopupMenu(pop);
pop.addPopupMenuListener(new PopupMenuListener() {
  @Override public void popupMenuCanceled(PopupMenuEvent e) {}
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
    //System.out.println(&quot;popupMenuWillBecomeInvisible&quot;);
    header.setDraggedColumn(null);
    //header.setResizingColumn(null);
    header.repaint();
  }
  @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rowsorterpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/rowsorterpopupmenu</guid>
                <pubDate>2009-12-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブアイコンとタイトルの位置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ中に配置するタイトルとアイコンの位置を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabTitleTextPosition&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTU96IMXGI/AAAAAAAAAm4/LydkDv26XY8/s800/TabTitleTextPosition.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tabbedPane.addTab(title, c);
JLabel label = new JLabel(title, icon, SwingConstants.CENTER);
//label.setVerticalAlignment(SwingConstants.CENTER);
label.setVerticalTextPosition(SwingConstants.BOTTOM);
//label.setHorizontalAlignment(SwingConstants.CENTER);
label.setHorizontalTextPosition(SwingConstants.CENTER);
//Dimension dim = label.getPreferredSize();
//label.setPreferredSize(new Dimension(60, dim.height));
tabbedPane.setTabComponentAt(tabbedPane.getTabCount()-1, label);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、タブにアイコンとラベルの位置を変更した&lt;code&gt;JLabel&lt;/code&gt;を配置しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt;以前の場合は、以下のように、&lt;code&gt;html&lt;/code&gt;タグを使用しても良いかもしれません。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTabbedPane tabs = new JTabbedPane();
tabs.addTab(makeTitle(&quot;Title&quot;,&quot;a32x32.png&quot;), new JLabel(&quot;a&quot;));
tabs.addTab(makeTitle(&quot;Help&quot;, &quot;b32x32.png&quot;), new JLabel(&quot;b&quot;));
//...
private String makeTitle(String t, String p) {
  return &quot;&amp;lt;html&amp;gt;&amp;lt;center&amp;gt;&amp;lt;img src=&#39;&quot;+getClass().getResource(p)+&quot;&#39;/&amp;gt;&amp;lt;br/&amp;gt;&quot;+t;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TextPositionAndAlignment.html&quot;&gt;JLabelのアイコンと文字列の位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTabLabel.html&quot;&gt;JTabbedPaneのタイトルをクリップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabtitletextposition</link>
                <guid>http://terai.xrea.jp/swing/tabtitletextposition</guid>
                <pubDate>2009-11-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JOptionPaneのデフォルトフォーカス</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JOptionPane&lt;/code&gt;にデフォルトでフォーカスをもつコンポーネントを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OptionPaneDefaultFocus&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQoUaDrDI/AAAAAAAAAf4/nUnrCrmb5io/s800/OptionPaneDefaultFocus.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;textField4.addAncestorListener(new AncestorListener() {
  @Override public void ancestorAdded(AncestorEvent e) {
    e.getComponent().requestFocusInWindow();
  }
  @Override public void ancestorMoved(AncestorEvent e) {}
  @Override public void ancestorRemoved(AncestorEvent e) {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JOptionPane.showConfirmDialog&lt;/code&gt;で表示する&lt;code&gt;JTextField&lt;/code&gt;にデフォルトのフォーカスがあたるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左上

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int result = JOptionPane.showConfirmDialog(frame, textField, &quot;Input Text&quot;,
                 JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
if(result==JOptionPane.OK_OPTION) textArea.setText(textField.getText());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;右上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JOptionPane#createDialog(...)&lt;/code&gt;で&lt;code&gt;JDialog&lt;/code&gt;を取得し、&lt;code&gt;WindowListener#windowOpened&lt;/code&gt;で、&lt;code&gt;textField.requestFocusInWindow();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultFocus.html&quot;&gt;Windowを開いたときのフォーカスを指定&lt;/a&gt;など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JOptionPane pane = new JOptionPane(textField, JOptionPane.PLAIN_MESSAGE,
                                   JOptionPane.OK_CANCEL_OPTION, null, null, null);
JDialog dialog = pane.createDialog(frame, &quot;Input Text&quot;);
dialog.addWindowListener(new WindowAdapter() {
  @Override public void windowOpened(WindowEvent e) {
    textField.requestFocusInWindow();
  }
});
dialog.setVisible(true);
Object selectedValue = pane.getValue();
int result = JOptionPane.CLOSED_OPTION;
if(selectedValue != null &amp;amp;&amp;amp; selectedValue instanceof Integer) {
  result = ((Integer)selectedValue).intValue();
}
result==JOptionPane.OK_OPTION) textArea.setText(textField.getText());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;左下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textField&lt;/code&gt;に&lt;code&gt;HierarchyListener&lt;/code&gt;を追加し、&lt;code&gt;hierarchyChanged&lt;/code&gt;が呼ばれたときに、&lt;code&gt;textField.requestFocusInWindow();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;textField3.addHierarchyListener(new HierarchyListener() {
  @Override public void hierarchyChanged(HierarchyEvent e) {
    if((e.getChangeFlags() &amp;amp; HierarchyEvent.SHOWING_CHANGED)!=0
       &amp;amp;&amp;amp; textField3.isShowing()) {
      EventQueue.invokeLater(new Runnable(){
        @Override public void run() {
          textField3.requestFocusInWindow();
        }
      });
    }
  }
});
int result = JOptionPane.showConfirmDialog(frame, textField3, &quot;Input Text&quot;,
                 JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
if(result==JOptionPane.OK_OPTION) textArea.setText(textField3.getText());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;右下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textField&lt;/code&gt;に&lt;code&gt;addAncestorListener&lt;/code&gt;を追加し、&lt;code&gt;ancestorAdded&lt;/code&gt;が呼ばれたときに、&lt;code&gt;textField.requestFocusInWindow();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1354218&quot;&gt;Swing - Input focus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultFocus.html&quot;&gt;Windowを開いたときのフォーカスを指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1354218&quot;&gt;Swing - Input focus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/optionpanedefaultfocus</link>
                <guid>http://terai.xrea.jp/swing/optionpanedefaultfocus</guid>
                <pubDate>2009-11-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserのPlacesBarを非表示にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;(&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;)の&lt;code&gt;PlacesBar&lt;/code&gt;を非表示にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NoPlacesBarFileChooser&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQZdQnWAI/AAAAAAAAAfg/Cne_bKrk8BU/s800/NoPlacesBarFileChooser.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;FileChooser.noPlacesBar&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で、&lt;code&gt;JFileChooser&lt;/code&gt;の左に表示される&lt;code&gt;PlacesBar&lt;/code&gt;を非表示にしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1354867&quot;&gt;Swing - Disable something -- JFileChooser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/noplacesbarfilechooser</link>
                <guid>http://terai.xrea.jp/swing/noplacesbarfilechooser</guid>
                <pubDate>2009-11-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JDialogでモーダルなJProgressBar付きSplash Screenを表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDialog&lt;/code&gt;でモーダルな&lt;code&gt;JProgressBar&lt;/code&gt;付き&lt;code&gt;Splash Screen&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ProgressSplashScreen&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTRSxG9iaI/AAAAAAAAAg8/Wpd3hycacS4/s800/ProgressSplashScreen.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JFrame frame = new JFrame();
final JDialog splashScreen  = new JDialog(frame, Dialog.ModalityType.DOCUMENT_MODAL);
final JProgressBar progress = new JProgressBar();
EventQueue.invokeLater(new Runnable() {
  @Override public void run() {
    splashScreen.setUndecorated(true);
    splashScreen.getContentPane().add(
      new JLabel(new ImageIcon(getClass().getResource(&quot;splash.png&quot;))));
    splashScreen.getContentPane().add(progress, BorderLayout.SOUTH);
    splashScreen.pack();
    splashScreen.setLocationRelativeTo(null);
    splashScreen.setVisible(true);
  }
});
SwingWorker&amp;lt;Void,Void&amp;gt; worker = new SwingWorker&amp;lt;Void,Void&amp;gt;() {
  @Override public Void doInBackground() {
    try{
      int current = 0;
      int lengthOfTask = 120;
      while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
        try {
          Thread.sleep(50);
        }catch(InterruptedException ie) {
          ie.printStackTrace();
          return null;
        }
        setProgress(100 * current++ / lengthOfTask);
      }
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    return null;
  }
  @Override public void done() {
    splashScreen.dispose();
  }
};
worker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
  @Override public void propertyChange(java.beans.PropertyChangeEvent e) {
    if(&quot;progress&quot;.equals(e.getPropertyName())) {
      progress.setValue((Integer)e.getNewValue());
    }
  }
});
worker.execute();

frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
frame.getContentPane().add(new MainPanel());
frame.pack();
frame.setLocationRelativeTo(null);
EventQueue.invokeLater(new Runnable() {
  @Override public void run() {
    frame.setVisible(true);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のようなスプラッシュスクリーンを表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モーダルな&lt;code&gt;JDialog&lt;/code&gt;に、画像と&lt;code&gt;JProgressBar&lt;/code&gt;を追加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dialog#setUndecorated(true)&lt;/code&gt;として、タイトルバーを非表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingWorker&lt;/code&gt;を使って、進捗状態を表示&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;に順次タブを追加していくテスト&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//package example;
//-*- mode:java; encoding:utf8n; coding:utf-8 -*-
// vim:set fileencoding=utf-8:
//@homepage@
import java.awt.*;
import java.beans.*;
import java.util.List;
import javax.swing.*;

public class ProgressSplashScreenTest {
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    final JFrame frame = new JFrame();
    final JDialog splashScreen  = new JDialog(
      frame, Dialog.ModalityType.DOCUMENT_MODAL);
    final JProgressBar progress = new JProgressBar();
    final JTabbedPane tabbedPane = new JTabbedPane();
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(tabbedPane);
    progress.setStringPainted(true);

    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        splashScreen.setUndecorated(true);
        splashScreen.getContentPane().add(
            new JLabel(new SplashScreenIcon()));
        splashScreen.getContentPane().add(progress, BorderLayout.SOUTH);
        splashScreen.pack();
        splashScreen.setLocationRelativeTo(null);
        splashScreen.setVisible(true);
      }
    });

    SwingWorker&amp;lt;Void,String&amp;gt; worker = new SwingWorker&amp;lt;Void,String&amp;gt;() {
      @Override public Void doInBackground() {
        try {
          int current = 0;
          int lengthOfTask = 120;
          while(current&amp;lt;=lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
            try {
              Thread.sleep(50); //dummy
            } catch(InterruptedException ie) {
              ie.printStackTrace();
              return null;
            }
            if(current == 20) {
              publish(&quot;showFrame&quot;);
            } else if(current%24==0) {
              publish(&quot;title: &quot;+current);
            }
            setProgress(100 * current++ / lengthOfTask);
          }
        } catch(Exception ex) {
          ex.printStackTrace();
        }
        return null;
      }
      @Override protected void process(List&amp;lt;String&amp;gt; chunks) {
        for(String cmd : chunks) {
          if(cmd.equals(&quot;showFrame&quot;)) {
            frame.setSize(512, 320);
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
          } else {
            tabbedPane.addTab(cmd, new JLabel(cmd));
            tabbedPane.setSelectedIndex(tabbedPane.getTabCount()-1);
            progress.setString(&quot;Loading: &quot;+cmd);
          }
        }
      }
      @Override public void done() {
        splashScreen.dispose();
      }
    };
    worker.addPropertyChangeListener(new PropertyChangeListener() {
      @Override public void propertyChange(PropertyChangeEvent e) {
        if(&quot;progress&quot;.equals(e.getPropertyName())) {
          progress.setValue((Integer)e.getNewValue());
        }
      }
    });
    worker.execute();
  }
}
class SplashScreenIcon implements Icon {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.translate(x, y);
    g2.setPaint(Color.GREEN);
    g2.fillRect(10,10,180,80);
    g2.translate(-x,-y);
    g2.dispose();
  }
  @Override public int getIconWidth()  {
    return 200;
  }
  @Override public int getIconHeight() {
    return 100;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SplashScreen.html&quot;&gt;JWindowを使ったSplash Screenの表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/progresssplashscreen</link>
                <guid>http://terai.xrea.jp/swing/progresssplashscreen</guid>
                <pubDate>2009-11-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneやJTextPaneに行間を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;や&lt;code&gt;JTextPane&lt;/code&gt;に行間を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineSpacing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTPYZn_u9I/AAAAAAAAAd4/5-1ThpWwM5U/s800/LineSpacing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BottomInsetEditorKit extends StyledEditorKit {
  @Override public ViewFactory getViewFactory() {
    return new ViewFactory() {
      @Override public View create(Element elem) {
        String kind = elem.getName();
        if (kind!=null) {
          if (kind.equals(AbstractDocument.ContentElementName)) {
            return new LabelView(elem);
          } else if (kind.equals(AbstractDocument.ParagraphElementName)) {
            return new javax.swing.text.ParagraphView(elem) {
              @Override protected short getBottomInset() { return 5; }
            };
          } else if (kind.equals(AbstractDocument.SectionElementName)) {
            return new BoxView(elem, View.Y_AXIS);
          } else if (kind.equals(StyleConstants.ComponentElementName)) {
            return new ComponentView(elem);
          } else if (kind.equals(StyleConstants.IconElementName)) {
            return new IconView(elem);
          }
        }
        return new LabelView(elem);
      }
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;StyleConstants.setLineSpacing&lt;/code&gt;で、行間を指定した&lt;code&gt;AttributeSet&lt;/code&gt;を作成し、&lt;code&gt;JTextPane#setParagraphAttributes&lt;/code&gt;で設定しています。

&lt;ul&gt;
&lt;li&gt;フォントサイズ相対の行間になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SimpleAttributeSet a = new SimpleAttributeSet();
StyleConstants.setLineSpacing(a, .5f);
//StyleConstants.setSpaceAbove(a, 5.0f);
//StyleConstants.setSpaceBelow(a, 5.0f);
//StyleConstants.setLeftIndent(a, 5.0f);
//StyleConstants.setRightIndent(a, 5.0f);
editor1.setParagraphAttributes(a, true);
setDummyText(editor1);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;下: &lt;code&gt;ParagraphView#getBottomInset&lt;/code&gt;をオーバーライドして、固定の行間をピクセルで指定しています。

&lt;ul&gt;
&lt;li&gt;フォントサイズに関係なく、アキ&lt;code&gt;5px&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;スタイルシートで&lt;code&gt;line-height&lt;/code&gt;を指定しても反映されない(&lt;code&gt;line-height&lt;/code&gt;は、モデル化されているが、現在は描画されない)

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/text/html/CSS.html&quot;&gt;対応しているCSSプロパティ一覧 - CSS (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ブロックレベルで一行だけ固定の行間が指定したい場合は、&lt;code&gt;margin-bottom&lt;/code&gt;が使用可能&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;StyleSheet styleSheet = new StyleSheet();
styleSheet.addRule(&quot;body {font-size: 24pt; line-height: 2.0}&quot;);
styleSheet.addRule(&quot;.test {margin-bottom: 2pt; padding-bottom: 1px; }&quot;);
//XXX: styleSheet.addRule(&quot;span {color: white; display:inline-block; margin-bottom: 10pt;}&quot;);
HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
htmlEditorKit.setStyleSheet(styleSheet);
editor1.setEditorKit(htmlEditorKit);
editor1.setText(&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=&#39;test&#39;&amp;gt;12&amp;lt;br /&amp;gt;a&amp;lt;br /&amp;gt;n&amp;lt;font size=&#39;32&#39;&amp;gt;123&amp;lt;br /&amp;gt;sd&amp;lt;/font&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/linespacing</link>
                <guid>http://terai.xrea.jp/swing/linespacing</guid>
                <pubDate>2009-11-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldに透かし画像を表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;の文字列が空でフォーカスがない場合、透かし画像を表示するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WatermarkInTextField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWh1Qjh4I/AAAAAAAAApY/bLarzjLy7-8/s800/WatermarkInTextField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WatermarkTextField extends JTextField implements FocusListener {
  private final ImageIcon image;
  private boolean showWatermark = true;
  public WatermarkTextField() {
    super();
    image = new ImageIcon(getClass().getResource(&quot;watermark.png&quot;));
    addFocusListener(this);
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    if(showWatermark) {
      Graphics2D g2d = (Graphics2D)g;
      //Insets i = getMargin();
      Insets i = getInsets();
      int yy = (getHeight()-image.getIconHeight())/2;
      g2d.drawImage(image.getImage(), i.left, yy, this);
    }
  }
  @Override public void focusGained(FocusEvent e) {
    showWatermark = false;
    repaint();
  }
  @Override public void focusLost(FocusEvent e) {
    showWatermark = &quot;&quot;.equals(getText().trim());
    repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GhostText.html&quot;&gt;JTextFieldにフォーカスと文字列が無い場合の表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;の文字列が空で、フォーカスも無い場合、上記のように文字列ではなく、画像を表示します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GhostText.html&quot;&gt;JTextFieldにフォーカスと文字列が無い場合の表示&lt;/a&gt;では、&lt;code&gt;JPasswordField&lt;/code&gt;に応用できないので、以下のように透かし画像の表示と同じような方法で文字列を表示します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InputHintPasswordField.html&quot;&gt;JPasswordFieldにヒント文字列を描画する&lt;/a&gt; に移動&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GhostText.html&quot;&gt;JTextFieldにフォーカスと文字列が無い場合の表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InputHintPasswordField.html&quot;&gt;JPasswordFieldにヒント文字列を描画する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/watermarkintextfield</link>
                <guid>http://terai.xrea.jp/swing/watermarkintextfield</guid>
                <pubDate>2009-10-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GraphicsEnvironmentにFontを登録して使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GraphicsEnvironment&lt;/code&gt;に&lt;code&gt;Font&lt;/code&gt;を登録して、&lt;code&gt;Html&lt;/code&gt;タグなどで使用できるようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RegisterFont&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRkZgST0I/AAAAAAAAAhY/czEyIQL0NfY/s800/RegisterFont.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Font font = makeFont(getClass().getResource(&quot;Burnstown Dam.ttf&quot;));
GraphicsEnvironment.getLocalGraphicsEnvironment().registerFont(font);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1. &lt;code&gt;JLabel#setFont&lt;/code&gt;メソッドでフォントを設定しています。&lt;/li&gt;
&lt;li&gt;2. 登録したフォントを&lt;code&gt;Html&lt;/code&gt;タグで指定して使用しています。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;label.setText(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;font size=&amp;#39;+3&amp;#39; face=&amp;#39;Burnstown Dam&amp;#39;&amp;gt;2: html,font,size,+3&amp;lt;/font&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3. &lt;code&gt;StyleSheet&lt;/code&gt;で&lt;code&gt;body&lt;/code&gt;タグのフォントを設定しています。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;styleSheet.addRule(&amp;quot;body {font-size: 24pt; font-family: Burnstown Dam;}&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4. &lt;code&gt;JTextPane#setFont&lt;/code&gt;メソッドでフォントを設定しています。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;body&lt;/code&gt;タグで指定されているフォントを無視して、&lt;code&gt;JTextPane&lt;/code&gt;のデフォルトのフォントを使用したい場合は、&lt;code&gt;editor.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);&lt;/code&gt;としておく必要があります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.creamundo.com/&quot;&gt;creamundo | Fuentes Gratis TrueType TTF&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらから&lt;code&gt;TrueType&lt;/code&gt;フォントを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CreateFont.html&quot;&gt;Fontをファイルから取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHtmlLabel.html&quot;&gt;Htmlを使ったJLabelとJEditorPaneの無効化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StyleSheet.html&quot;&gt;JEditorPaneのHTMLEditorKitにCSSを適用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/registerfont</link>
                <guid>http://terai.xrea.jp/swing/registerfont</guid>
                <pubDate>2009-10-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルがクリップされている場合のみJToolTipを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルがクリップされている場合のみ&lt;code&gt;JToolTip&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClippedCellTooltips&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJNQAyg-I/AAAAAAAAAUA/F6oQbiUShl4/s800/ClippedCellTooltips.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ToolTipHeaderRenderer implements TableCellRenderer {
  private final Icon icon = UIManager.getIcon(&quot;Table.ascendingSortIcon&quot;);
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value,boolean isSelected,boolean hasFocus,int row,int column) {
    TableCellRenderer renderer = table.getTableHeader().getDefaultRenderer();
    JLabel l = (JLabel)renderer.getTableCellRendererComponent(
      table, value, isSelected, hasFocus, row, column);
    Insets i = l.getInsets();
    Rectangle rect = table.getCellRect(row, column, false);
    rect.width -= i.left + i.right;
    RowSorter&amp;lt;? extends TableModel&amp;gt; sorter = table.getRowSorter();
    if(sorter!=null &amp;amp;&amp;amp; !sorter.getSortKeys().isEmpty()
                    &amp;amp;&amp;amp; sorter.getSortKeys().get(0).getColumn()==column) {
      rect.width -= icon.getIconWidth() + 2; //XXX
    }
    FontMetrics fm = l.getFontMetrics(l.getFont());
    String str = value.toString();
    int cellTextWidth = fm.stringWidth(str);
    l.setToolTipText(cellTextWidth&amp;gt;rect.width?str:null);
    return l;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ヘッダセル

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableCellRenderer&lt;/code&gt;で、セルの幅と文字列の長さを比較して、&lt;code&gt;ToolTip&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;ソートアイコンと文字列の間の&lt;code&gt;gap&lt;/code&gt;が不明?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;セル

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;メソッドをオーバーライドし、セルの幅と文字列の長さを比較して、&lt;code&gt;ToolTip&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public Component prepareRenderer(TableCellRenderer tcr, int row, int column) {
    Component c = super.prepareRenderer(tcr, row, column);
    if(c instanceof JComponent) {
       JComponent l = (JComponent)c;
       Object o = getValueAt(row, column);
       Insets i = l.getInsets();
       Rectangle rect = getCellRect(row, column, false);
       rect.width -= i.left + i.right;
       FontMetrics fm = l.getFontMetrics(l.getFont());
       String str = o.toString();
       int cellTextWidth = fm.stringWidth(str);
       l.setToolTipText(cellTextWidth&amp;gt;rect.width?str:null);
    }
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HeaderTooltips.html&quot;&gt;JTableHeaderのTooltipsを列ごとに変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowTooltips.html&quot;&gt;JTableのTooltipsを行ごとに変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clippedcelltooltips</link>
                <guid>http://terai.xrea.jp/swing/clippedcelltooltips</guid>
                <pubDate>2009-10-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルに複数のJButtonを配置する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル内にクリック可能な複数の&lt;code&gt;JButton&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MultipleButtonsInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQRygoYeI/AAAAAAAAAfU/-Sr9o7PsQkM/s800/MultipleButtonsInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ButtonsPanel extends JPanel {
  public final List&amp;lt;JButton&amp;gt; buttons =
    Arrays.asList(new JButton(&quot;view&quot;), new JButton(&quot;edit&quot;));
  public ButtonsPanel() {
    super();
    setOpaque(true);
    for(JButton b: buttons) {
      b.setFocusable(false);
      b.setRolloverEnabled(false);
      add(b);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ButtonsRenderer extends ButtonsPanel
                      implements TableCellRenderer {
  public ButtonsRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
        Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    setBackground(isSelected?table.getSelectionBackground():table.getBackground());
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ButtonsEditor extends ButtonsPanel
                    implements TableCellEditor {
  public ButtonsEditor(final JTable table) {
    super();
    //----&amp;gt;
    //DEBUG: view button click -&amp;gt; control key down + edit button(same cell) press
    //       -&amp;gt; remain selection color
    MouseListener ml = new MouseAdapter() {
      @Override public void mousePressed(MouseEvent e) {
        ButtonModel m = ((JButton)e.getSource()).getModel();
        if(m.isPressed() &amp;amp;&amp;amp; table.isRowSelected(table.getEditingRow())
                         &amp;amp;&amp;amp; e.isControlDown()) {
          setBackground(table.getBackground());
        }
      }
    };
    buttons.get(0).addMouseListener(ml);
    buttons.get(1).addMouseListener(ml);
    //&amp;lt;----

    buttons.get(0).addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        fireEditingStopped();
        JOptionPane.showMessageDialog(table, &quot;Viewing&quot;);
      }
    });

    buttons.get(1).addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        int row = table.convertRowIndexToModel(table.getEditingRow());
        Object o = table.getModel().getValueAt(row, 0);
        fireEditingStopped();
        JOptionPane.showMessageDialog(table, &quot;Editing: &quot;+o);
      }
    });

    addMouseListener(new MouseAdapter() {
      @Override public void mousePressed(MouseEvent e) {
        fireEditingStopped();
      }
    });
  }
  @Override public Component getTableCellEditorComponent(JTable table,
        Object value, boolean isSelected, int row, int column) {
    this.setBackground(table.getSelectionBackground());
    return this;
  }
  @Override public Object getCellEditorValue() {
    return &quot;&quot;;
  }
  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;
  @Override public boolean isCellEditable(java.util.EventObject e) {
    return true;
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;CellRenderer&lt;/code&gt;用と&lt;code&gt;CellEditor&lt;/code&gt;用に、&lt;code&gt;JButton&lt;/code&gt;を&lt;code&gt;2&lt;/code&gt;つ配置した&lt;code&gt;JPanel&lt;/code&gt;をそれぞれ作成しています。アクションイベントを設定するのは、&lt;code&gt;CellEditor&lt;/code&gt;用の&lt;code&gt;JButton&lt;/code&gt;で、&lt;code&gt;CellRenderer&lt;/code&gt;用の&lt;code&gt;JButton&lt;/code&gt;は表示のためのダミーです。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;などが更新されたら、&lt;code&gt;JTable#updateUI()&lt;/code&gt;内で&lt;code&gt;SwingUtilities#updateRendererOrEditorUI()&lt;/code&gt;を呼び出すなどして、各セルレンダラーやセルエディタ(これらは&lt;code&gt;JTable&lt;/code&gt;の子コンポーネントではないので)を更新

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbstractCellEditor&lt;/code&gt;を継承するセルエディタは、&lt;code&gt;Component&lt;/code&gt;も&lt;code&gt;DefaultCellEditor&lt;/code&gt;も継承していないので、&lt;code&gt;LookAndFeel&lt;/code&gt;を変更しても追従しない&lt;/li&gt;
&lt;li&gt;そのため、&lt;code&gt;JTable#updateUI()&lt;/code&gt;をオーバーライドして、セルエディタ自体を作成し直すなどの対応が必要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;Component&lt;/code&gt;を継承(&lt;code&gt;TableCellEditor&lt;/code&gt;を実装)するセルエディタを作成し、&lt;code&gt;AbstractCellEditor&lt;/code&gt;から必要なメソッドをコピーして回避する方法を使用している&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//SwingUtilities#updateRendererOrEditorUI()
static void updateRendererOrEditorUI(Object rendererOrEditor) {
  if (rendererOrEditor == null) {
    return;
  }
  Component component = null;
  if (rendererOrEditor instanceof Component) {
    component = (Component)rendererOrEditor;
  }
  if (rendererOrEditor instanceof DefaultCellEditor) {
    component = ((DefaultCellEditor)rendererOrEditor).getComponent();
  }
  if (component != null) {
    SwingUtilities.updateComponentTreeUI(component);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;(&lt;code&gt;2&lt;/code&gt;つの&lt;code&gt;JButton&lt;/code&gt;と&lt;code&gt;JTextField&lt;/code&gt;の組み合わせ)を&lt;code&gt;CellEditor&lt;/code&gt;に使用する

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DateCellEditor.html&quot;&gt;CellEditorをJSpinnerにして日付を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import javax.swing.text.*;

public class ButtonsInsideCellTest {
  private JComponent makeUI() {
    String[] columnNames = {&quot;Buttons&quot;, &quot;Spinner&quot;};
    Object[][] data = {
      {50, 100}, {100, 50}, {30, 20}, {0, 100}
    };
    DefaultTableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
        return getValueAt(0, column).getClass();
      }
    };
    JTable table = new JTable(model);
    table.setRowHeight(36);
    table.setAutoCreateRowSorter(true);

    TableColumn column = table.getColumnModel().getColumn(0);
    column.setCellRenderer(new ButtonsRenderer());
    column.setCellEditor(new ButtonsEditor());

    column = table.getColumnModel().getColumn(1);
    column.setCellRenderer(new SpinnerRenderer());
    column.setCellEditor(new SpinnerEditor());

    return new JScrollPane(table);
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new ButtonsInsideCellTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}

class SpinnerPanel extends JPanel {
  public final JSpinner spinner = new JSpinner(new SpinnerNumberModel(100, 0, 200, 1));
  public SpinnerPanel() {
    super(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();

    c.weightx = 1.0;
    c.insets = new Insets(0, 10, 0, 10);
    c.fill = GridBagConstraints.HORIZONTAL;

    setOpaque(true);
    add(spinner, c);
  }
}
class SpinnerRenderer extends SpinnerPanel implements TableCellRenderer {
  public SpinnerRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    setBackground(isSelected?table.getSelectionBackground():table.getBackground());
    spinner.setValue((Integer)value);
    return this;
  }
}

class SpinnerEditor extends SpinnerPanel implements TableCellEditor {
//     public SpinnerEditor(final JTable table, final int column) {
//         super();
//     }
  @Override public Component getTableCellEditorComponent(
      JTable table, Object value, boolean isSelected, int row, int column) {
    this.setBackground(table.getSelectionBackground());
    spinner.setValue((Integer)value);
    return this;
  }
  @Override public Object getCellEditorValue() {
    //System.out.println(&quot;getCellEditorValue: &quot; + spinner.getValue());
    //try {
    //  spinner.commitEdit();
    //} catch(Exception pe) {
    //  // Edited value is invalid, spinner.getValue() will return
    //  // the last valid value, you could revert the spinner to show that:
    //  JComponent editor = spinner.getEditor();
    //  if (editor instanceof JSpinner.DefaultEditor) {
    //    ((JSpinner.DefaultEditor)editor).getTextField().setValue(spinner.getValue());
    //  }
    //}
    return spinner.getValue();
  }

  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;

  @Override public boolean isCellEditable(EventObject e) {
    return true;
  }
  @Override public boolean shouldSelectCell(EventObject anEvent) {
    return true;
  }
  @Override public boolean stopCellEditing() {
    try {
      spinner.commitEdit();
    } catch(Exception pe) {
      Toolkit.getDefaultToolkit().beep();
      return false;
      // 直前の値に戻して、編集を終了する場合
      // Edited value is invalid, spinner.getValue() will return
      // the last valid value, you could revert the spinner to show that:
      //JComponent editor = spinner.getEditor();
      //if (editor instanceof JSpinner.DefaultEditor) {
      //  ((JSpinner.DefaultEditor)editor).getTextField().setValue(spinner.getValue());
      //}
    }
    fireEditingStopped();
    return true;
  }
  @Override public void  cancelCellEditing() {
    fireEditingCanceled();
  }
  @Override public void addCellEditorListener(CellEditorListener l) {
    listenerList.add(CellEditorListener.class, l);
  }
  @Override public void removeCellEditorListener(CellEditorListener l) {
    listenerList.remove(CellEditorListener.class, l);
  }
  public CellEditorListener[] getCellEditorListeners() {
    return listenerList.getListeners(CellEditorListener.class);
  }
  protected void fireEditingStopped() {
    // Guaranteed to return a non-null array
    Object[] listeners = listenerList.getListenerList();
    // Process the listeners last to first, notifying
    // those that are interested in this event
    for(int i = listeners.length-2; i&amp;gt;=0; i-=2) {
      if(listeners[i]==CellEditorListener.class) {
        // Lazily create the event:
        if(changeEvent == null) changeEvent = new ChangeEvent(this);
        ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
      }
    }
  }
  protected void fireEditingCanceled() {
    // Guaranteed to return a non-null array
    Object[] listeners = listenerList.getListenerList();
    // Process the listeners last to first, notifying
    // those that are interested in this event
    for(int i = listeners.length-2; i&amp;gt;=0; i-=2) {
      if(listeners[i]==CellEditorListener.class) {
        // Lazily create the event:
        if(changeEvent == null) changeEvent = new ChangeEvent(this);
        ((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
      }
    }
  }
}

class ButtonsPanel extends JPanel {
  public final List&amp;lt;JButton&amp;gt; buttons = Arrays.asList(new JButton(&quot;+&quot;), new JButton(&quot;-&quot;));
  public final JLabel label = new JLabel() {
    @Override public Dimension getPreferredSize() {
      Dimension d = super.getPreferredSize();
      d.width = 50;
      return d;
    }
  };
  public int i = -1;
  public ButtonsPanel() {
    super();
    label.setHorizontalAlignment(SwingConstants.RIGHT);
    setOpaque(true);
    add(label);
    for(JButton b: buttons) {
      b.setFocusable(false);
      b.setRolloverEnabled(false);
      add(b);
    }
  }
}
class ButtonsRenderer extends ButtonsPanel implements TableCellRenderer {
  public ButtonsRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    this.setBackground(isSelected?table.getSelectionBackground():table.getBackground());
    label.setText(value!=null?value.toString():&quot;&quot;);
    return this;
  }
}
class ButtonsEditor extends ButtonsPanel implements TableCellEditor {
  public ButtonsEditor() {
    super();
    buttons.get(0).addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        i++;
        label.setText(&quot;&quot;+i);
        fireEditingStopped();
      }
    });

    buttons.get(1).addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        i--;
        label.setText(&quot;&quot;+i);
        fireEditingStopped();
      }
    });

    addMouseListener(new MouseAdapter() {
      @Override public void mousePressed(MouseEvent e) {
        fireEditingStopped();
      }
    });
  }
  @Override public Component getTableCellEditorComponent(
      JTable table, Object value, boolean isSelected, int row, int column) {
    this.setBackground(table.getSelectionBackground());
    i = (Integer)value;
    label.setText(&quot;&quot;+i);
    return this;
  }
  @Override public Object getCellEditorValue() {
    return i;
  }

  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;

  @Override public boolean isCellEditable(EventObject e) {
    return true;
  }
  @Override public boolean shouldSelectCell(EventObject anEvent) {
    return true;
  }
  @Override public boolean stopCellEditing() {
    fireEditingStopped();
    return true;
  }
  @Override public void  cancelCellEditing() {
    fireEditingCanceled();
  }
  @Override public void addCellEditorListener(CellEditorListener l) {
    listenerList.add(CellEditorListener.class, l);
  }
  @Override public void removeCellEditorListener(CellEditorListener l) {
    listenerList.remove(CellEditorListener.class, l);
  }
  public CellEditorListener[] getCellEditorListeners() {
    return listenerList.getListeners(CellEditorListener.class);
  }
  protected void fireEditingStopped() {
    // Guaranteed to return a non-null array
    Object[] listeners = listenerList.getListenerList();
    // Process the listeners last to first, notifying
    // those that are interested in this event
    for(int i = listeners.length-2; i&amp;gt;=0; i-=2) {
      if(listeners[i]==CellEditorListener.class) {
        // Lazily create the event:
        if(changeEvent == null) changeEvent = new ChangeEvent(this);
        ((CellEditorListener)listeners[i+1]).editingStopped(changeEvent);
      }
    }
  }
  protected void fireEditingCanceled() {
    // Guaranteed to return a non-null array
    Object[] listeners = listenerList.getListenerList();
    // Process the listeners last to first, notifying
    // those that are interested in this event
    for(int i = listeners.length-2; i&amp;gt;=0; i-=2) {
      if(listeners[i]==CellEditorListener.class) {
        // Lazily create the event:
        if(changeEvent == null) changeEvent = new ChangeEvent(this);
        ((CellEditorListener)listeners[i+1]).editingCanceled(changeEvent);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DeleteButtonInCell.html&quot;&gt;JTableのセルにJButtonを追加して行削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkInTableCell.html&quot;&gt;JTableのセルにHyperlinkを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/07/12/table-button-column/&quot;&gt;Table Button Column « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonsInTableCell.html&quot;&gt;JTableのセル中にJRadioButtonを配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CheckBoxesInTableCell.html&quot;&gt;JTableのCellにJCheckBoxを複数配置する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;第&lt;code&gt;0&lt;/code&gt;列目が編集状態でボタンをクリックした場合、パネルが二度表示されるバグを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-06 (火) 11:56:21&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/07/12/table-button-column/&quot;&gt;Table Button Column « Java Tips Weblog&lt;/a&gt;を参考にして、&lt;code&gt;JTable#editCellAt&lt;/code&gt;ではなく、逆に&lt;code&gt;TableCellEditor#stopCellEditing()&lt;/code&gt;を使用してクリック直後に編集終了するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-11-03 (火) 04:36:55&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;キーを押しながら、&lt;code&gt;edit&lt;/code&gt;ボタンをクリックすると異なる行(&lt;code&gt;table.getSelectedRow()&lt;/code&gt;)の内容が表示されるバグを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-10 (木) 02:35:35&lt;/li&gt;
&lt;li&gt;すごいと思いました！ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%84%E3%82%8F%E3%81%8F.html&quot;&gt;いわく&lt;/a&gt; 2013-05-24 (金) 11:57:26

&lt;ul&gt;
&lt;li&gt;こんばんは。たしかに&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;TableCellRenderer&lt;/code&gt;、&lt;code&gt;TableCellEditor&lt;/code&gt;の仕組みは、すごい良くできているといつも感心してしまいます :) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-24 (金) 23:59:16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/multiplebuttonsintablecell</link>
                <guid>http://terai.xrea.jp/swing/multiplebuttonsintablecell</guid>
                <pubDate>2009-10-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行を別のJTableにドラッグして移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行を別の&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;で移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragRowsAnotherTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTL05H70DI/AAAAAAAAAYM/YtTZHzrA2HU/s800/DragRowsAnotherTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TableRowTransferHandler extends TransferHandler {
  private int[] rows    = null;
  private int addIndex  = -1; //Location where items were added
  private int addCount  = 0;  //Number of items added.
  private final DataFlavor localObjectFlavor;
  private Object[] transferedObjects = null;
  private JComponent source = null;
  public TableRowTransferHandler() {
    localObjectFlavor = new ActivationDataFlavor(
      Object[].class, DataFlavor.javaJVMLocalObjectMimeType, &quot;Array of items&quot;);
  }
  @Override protected Transferable createTransferable(JComponent c) {
    source = c;
    JTable table = (JTable) c;
    DefaultTableModel model = (DefaultTableModel)table.getModel();
    List&amp;lt;Object&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
    for(int i: rows = table.getSelectedRows())
      list.add(model.getDataVector().elementAt(i));
    transferedObjects = list.toArray();
    return new DataHandler(transferedObjects,localObjectFlavor.getMimeType());
  }
  @Override public boolean canImport(TransferSupport info) {
    JTable t = (JTable)info.getComponent();
    boolean b = info.isDrop()&amp;amp;&amp;amp;info.isDataFlavorSupported(localObjectFlavor);
    //XXX bug?
    t.setCursor(b?DragSource.DefaultMoveDrop:DragSource.DefaultMoveNoDrop);
    return b;
  }
  @Override public int getSourceActions(JComponent c) {
    return COPY_OR_MOVE;
  }
  @Override public boolean importData(TransferSupport info) {
    JTable target = (JTable)info.getComponent();
    JTable.DropLocation dl = (JTable.DropLocation)info.getDropLocation();
    DefaultTableModel model = (DefaultTableModel)target.getModel();
    int index = dl.getRow();
    int max = model.getRowCount();
    if(index&amp;lt;0 || index&amp;gt;max) index = max;
    addIndex = index;
    target.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    try {
      Object[] values =
        (Object[])info.getTransferable().getTransferData(localObjectFlavor);
      if(source==target) addCount = values.length;
      for(int i=0;i&amp;lt;values.length;i++) {
        int idx = index++;
        model.insertRow(idx, (Vector)values[i]);
        target.getSelectionModel().addSelectionInterval(idx, idx);
      }
      return true;
    }catch(Exception ufe) { ufe.printStackTrace(); }
    return false;
  }
  @Override protected void exportDone(JComponent c, Transferable t, int act) {
    cleanup(c, act == MOVE);
  }
  private void cleanup(JComponent src, boolean remove) {
    if(remove &amp;amp;&amp;amp; rows != null) {
      JTable table = (JTable)src;
      src.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      DefaultTableModel model = (DefaultTableModel)table.getModel();
      if(addCount &amp;gt; 0) {
        for(int i=0;i&amp;lt;rows.length;i++) {
          if(rows[i]&amp;gt;=addIndex) { rows[i] += addCount; }
        }
      }
      for(int i=rows.length-1;i&amp;gt;=0;i--) model.removeRow(rows[i]);
    }
    rows     = null;
    addCount = 0;
    addIndex = -1;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一つの&lt;code&gt;JTable&lt;/code&gt;内での行の並べ替えを行う&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderTable.html&quot;&gt;TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え&lt;/a&gt;を元に&lt;code&gt;TableRowTransferHandler&lt;/code&gt;を作成し、&lt;code&gt;JTable&lt;/code&gt;間での行移動もできるようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;JTable#setFillsViewportHeight(true)&lt;/code&gt;で、&lt;a href=&quot;http://terai.xrea.jp/Swing/FillsViewportHeight.html&quot;&gt;JTable自体の高さを拡張&lt;/a&gt;しておかないと、行が一つもない状態でドロップができなくなります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TransferHandler handler = new TableRowTransferHandler();
table.getSelectionModel().setSelectionMode(
            ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
table.setTransferHandler(handler);
table.setDropMode(DropMode.INSERT_ROWS);
table.setDragEnabled(true);
table.setFillsViewportHeight(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;でカーソルのチラつき防止のために、&lt;code&gt;TransferHandler#canImport(...)&lt;/code&gt;内で&lt;code&gt;JTable#setCursor(...)&lt;/code&gt;をしているため、デスクトップなどからファイルをドラッグしてドロップ不可カーソルが表示されるとマウスをリリースしたあともそのカーソルが表示されたままになるバグがあります。&lt;/p&gt;

&lt;p&gt;また、このサンプルでは、各&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;TableRowSorter&lt;/code&gt;などが設定され、ソートされた状態での並べ替えは想定していません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTable.html&quot;&gt;JTableの行をドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderTable.html&quot;&gt;TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragrowsanothertable</link>
                <guid>http://terai.xrea.jp/swing/dragrowsanothertable</guid>
                <pubDate>2009-09-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneでキーワードのSyntaxHighlight</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;で&lt;code&gt;Syntax Highlight&lt;/code&gt;を行います。このサンプルは、&lt;a href=&quot;http://www.discoverteenergy.com/Files/SyntaxDocument.java&quot;&gt;SyntaxDocument.java&lt;/a&gt;からキーワードのハイライト部分を抜き出して作成しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SimpleSyntaxHighlight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTTAw3RBeI/AAAAAAAAAjs/LtUs6l9UpZo/s800/SimpleSyntaxHighlight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//This code is taken from:
//http://www.discoverteenergy.com/Files/SyntaxDocument.java SyntaxDocument.java
class SimpleSyntaxDocument extends DefaultStyledDocument {
  HashMap&amp;lt;String,AttributeSet&amp;gt; keywords = new HashMap&amp;lt;&amp;gt;();
  MutableAttributeSet normal = new SimpleAttributeSet();
  public SimpleSyntaxDocument() {
    super();
    StyleConstants.setForeground(normal, Color.BLACK);
    MutableAttributeSet color;
    StyleConstants.setForeground(color = new SimpleAttributeSet(), Color.RED);
    keywords.put(&quot;red&quot;, color);
    StyleConstants.setForeground(color = new SimpleAttributeSet(), Color.GREEN);
    keywords.put(&quot;green&quot;, color);
    StyleConstants.setForeground(color = new SimpleAttributeSet(), Color.BLUE);
    keywords.put(&quot;blue&quot;, color);
  }
  @Override public void insertString(int offset, String str, AttributeSet a)
                                               throws BadLocationException {
    super.insertString(offset, str, a);
    processChangedLines(offset, str.length());
  }
  @Override public void remove(int offset, int length)
                                               throws BadLocationException {
    super.remove(offset, length);
    processChangedLines(offset, 0);
  }
  private void processChangedLines(int offset, int length)
                                               throws BadLocationException {
    Element root   = getDefaultRootElement();
    String content = getText(0, getLength());
    int startLine  = root.getElementIndex( offset );
    int endLine    = root.getElementIndex( offset + length );
    for (int i = startLine; i &amp;lt;= endLine; i++) {
      applyHighlighting(content, i);
    }
  }
  private void applyHighlighting(String content, int line)
                                               throws BadLocationException {
    Element root = getDefaultRootElement();
    int startOffset   = root.getElement( line ).getStartOffset();
    int endOffset   = root.getElement( line ).getEndOffset() - 1;
    int lineLength  = endOffset - startOffset;
    int contentLength = content.length();
    if (endOffset &amp;gt;= contentLength) endOffset = contentLength - 1;
    setCharacterAttributes(startOffset, lineLength, normal, true);
    checkForTokens(content, startOffset, endOffset);
  }
  private void checkForTokens(String content, int startOffset, int endOffset) {
    while (startOffset &amp;lt;= endOffset) {
      while (isDelimiter(content.substring(startOffset, startOffset+1))) {
        if (startOffset &amp;lt; endOffset) {
          startOffset++;
        } else {
          return;
        }
      }
      startOffset = getOtherToken(content, startOffset, endOffset);
    }
  }
  private int getOtherToken(String content, int startOffset, int endOffset) {
    int endOfToken = startOffset + 1;
    while ( endOfToken &amp;lt;= endOffset ) {
      if ( isDelimiter( content.substring(endOfToken, endOfToken + 1) ) ) {
        break;
      }
      endOfToken++;
    }
    String token = content.substring(startOffset, endOfToken);
    if ( keywords.containsKey( token ) ) {
      setCharacterAttributes(
        startOffset, endOfToken - startOffset, keywords.get(token), false);
    }
    return endOfToken + 1;
  }
  String operands = &quot;.,&quot;;
  protected boolean isDelimiter(String character) {
    return Character.isWhitespace(character.charAt(0)) ||
           operands.indexOf(character)!=-1;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;といったキーワードを入力すると、その色で文字列をハイライトするようになっています。区切り文字は、空白、&lt;code&gt;.&lt;/code&gt;(ドット)、&lt;code&gt;,&lt;/code&gt;(カンマ)の&lt;code&gt;3&lt;/code&gt;つです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;のシンタックスハイライトを行うサンプルコード(&lt;a href=&quot;http://www.discoverteenergy.com/Files/SyntaxDocument.java&quot;&gt;SyntaxDocument.java&lt;/a&gt;)からキーワードのハイライト部分を抜き出して作成しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.discoverteenergy.com/Files/SyntaxDocument.java&quot;&gt;SyntaxDocument.java&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;作者、ライセンス、参照元のページが何処だったかなどが不明…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20120802021725/http://java.sun.com/products/jfc/tsc/articles/text/editor_kit/index.html&quot;&gt;Customizing a Text Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ostermiller.org/syntax/editor.html&quot;&gt;Text Editor Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/simplesyntaxhighlight</link>
                <guid>http://terai.xrea.jp/swing/simplesyntaxhighlight</guid>
                <pubDate>2009-09-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxMenuItemのチェックアイコンを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBoxMenuItem&lt;/code&gt;のチェックアイコンを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxMenuItemIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTI5TuivhI/AAAAAAAAATg/nfren8EjliA/s800/CheckBoxMenuItemIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;CheckBoxMenuItem.checkIcon&quot;, new Icon() {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g;
    g2.translate(x,y);
    ButtonModel m = ((AbstractButton)c).getModel();
    g2.setPaint(m.isSelected()?Color.ORANGE:Color.GRAY);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.fillOval( 0, 2, 10, 10 );
    g2.translate(-x,-y);
  }
  @Override public int getIconWidth()  { return 14; }
  @Override public int getIconHeight() { return 14; }
});
menu.add(new JCheckBoxMenuItem(&quot;checkIcon test&quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;のチェックアイコンは、&lt;code&gt;setIcon&lt;/code&gt;メソッドで変更できますが、&lt;code&gt;JCheckBoxMenuItem&lt;/code&gt;はチェックアイコンとは別のアイコンが設定されるので、&lt;code&gt;UIManager.put(&amp;quot;CheckBoxMenuItem.checkIcon&amp;quot;, icon);&lt;/code&gt;を使用しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonMenuItemIcon.html&quot;&gt;JRadioButtonMenuItemのチェックアイコンを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;などの場合 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-11-20 (金) 13:54:08&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;
// JDK 1.6
import com.sun.java.swing.*;
import com.sun.java.swing.plaf.nimbus.*;
// JDK 1.7
//import javax.swing.plaf.nimbus.*;

class NimbusCheckIconTest {
  public JMenuBar createMenuBar() {
    JCheckBoxMenuItem cbmi = new JCheckBoxMenuItem(&quot;checkIcon test&quot;);
    UIDefaults d = new UIDefaults();
    d.put(&quot;CheckBoxMenuItem[Enabled].checkIconPainter&quot;,
        new MyCheckBoxMenuItemPainter(
            MyCheckBoxMenuItemPainter.CHECKICON_ENABLED));
    d.put(&quot;CheckBoxMenuItem[MouseOver].checkIconPainter&quot;,
        new MyCheckBoxMenuItemPainter(
            MyCheckBoxMenuItemPainter.CHECKICON_MOUSEOVER));
    d.put(&quot;CheckBoxMenuItem[Enabled+Selected].checkIconPainter&quot;,
        new MyCheckBoxMenuItemPainter(
            MyCheckBoxMenuItemPainter.CHECKICON_ENABLED_SELECTED));
    d.put(&quot;CheckBoxMenuItem[MouseOver+Selected].checkIconPainter&quot;,
        new MyCheckBoxMenuItemPainter(
            MyCheckBoxMenuItemPainter.CHECKICON_SELECTED_MOUSEOVER));
    cbmi.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
    cbmi.putClientProperty(&quot;Nimbus.Overrides.InheritDefaults&quot;, false);
    JMenuBar menuBar = new JMenuBar();
    JMenu menu = new JMenu(&quot;A Menu&quot;);
    menuBar.add(menu);
    menu.add(new JCheckBoxMenuItem(&quot;default&quot;));
    menu.add(cbmi);
    menuBar.add(menu);
    return menuBar;
  }
  public Container createContentPane() {
    JPanel contentPane = new JPanel(new BorderLayout());
    contentPane.setOpaque(true);
    contentPane.add(new JScrollPane(new JTextArea()));
    return contentPane;
  }
  private static void createAndShowGUI() {
    try{
      for(UIManager.LookAndFeelInfo laf: UIManager.getInstalledLookAndFeels())
        if(&quot;Nimbus&quot;.equals(laf.getName()))
          UIManager.setLookAndFeel(laf.getClassName());
    }catch(Exception e) {
      e.printStackTrace();
    }
    NimbusCheckIconTest demo = new NimbusCheckIconTest();
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    f.setJMenuBar(demo.createMenuBar());
    f.setContentPane(demo.createContentPane());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
}
//copy: CheckBoxMenuItemPainter.java
class MyCheckBoxMenuItemPainter extends AbstractRegionPainter {
  static final int CHECKICON_ENABLED_SELECTED   = 6;
  static final int CHECKICON_SELECTED_MOUSEOVER = 7;
  static final int CHECKICON_ENABLED            = 8;
  static final int CHECKICON_MOUSEOVER          = 9;
  private int state;
  private PaintContext ctx;
  public MyCheckBoxMenuItemPainter(int state) {
    super();
    this.state = state;
    this.ctx = new AbstractRegionPainter.PaintContext(
      new Insets(5, 5, 5, 5), new Dimension(9, 10), false, null, 1.0, 1.0);
  }
  @Override protected void doPaint(Graphics2D g, JComponent c,
               int width, int height, Object[] eckey) {
    switch(state) {
      case CHECKICON_ENABLED:
        paintcheckIconEnabled(g);              break;
      case CHECKICON_MOUSEOVER:
        paintcheckIconMouseOver(g);            break;
      case CHECKICON_ENABLED_SELECTED:
        paintcheckIconEnabledAndSelected(g);   break;
      case CHECKICON_SELECTED_MOUSEOVER:
        paintcheckIconSelectedAndMouseOver(g); break;
    }
  }
  @Override protected final PaintContext getPaintContext() {
    return ctx;
  }
  private void paintcheckIconEnabled(Graphics2D g) {
      g.setPaint(Color.GREEN);
      g.drawOval( 0, 0, 10, 10 );
  }
  private void paintcheckIconMouseOver(Graphics2D g) {
      g.setPaint(Color.PINK);
      g.drawOval( 0, 0, 10, 10 );
  }
  private void paintcheckIconEnabledAndSelected(Graphics2D g) {
    g.setPaint(Color.ORANGE);
    g.fillOval( 0, 0, 10, 10 );
  }
  private void paintcheckIconSelectedAndMouseOver(Graphics2D g) {
    g.setPaint(Color.CYAN);
    g.fillOval( 0, 0, 10, 10 );
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxmenuitemicon</link>
                <guid>http://terai.xrea.jp/swing/checkboxmenuitemicon</guid>
                <pubDate>2009-09-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行を複数選択し、ドラッグ＆ドロップで並べ替えを可能にする&lt;code&gt;TransferHandler&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDReorderTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTLg-5HyXI/AAAAAAAAAXs/Wda5rMSf-1c/s800/DnDReorderTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model);
table.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
table.setTransferHandler(new TableRowTransferHandler());
table.setDropMode(DropMode.INSERT_ROWS);
table.setDragEnabled(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルの&lt;code&gt;TransferHandler&lt;/code&gt;(&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;TransferHandler#canImport&lt;/code&gt;メソッドなどを使用)は、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;のものとほぼ同じです。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTable.html&quot;&gt;JTableの行をドラッグ＆ドロップ&lt;/a&gt;とは異なり、複数行を選択して&lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;による移動が可能になっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/index.html#BasicDnD&quot;&gt;Drag and Drop and Data Transfer: Examples (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Drag and Drop and Data Transfer)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/DropDemoProject/src/dnd/ListTransferHandler.java&quot;&gt;ListTransferHandler.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTable.html&quot;&gt;JTableの行をドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;テスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-09-26 (土) 02:19:20

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;に移動。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;このサンプルでは、ソートされた状態での並べ替えは想定していない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-02-20 (木) 19:50:30&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndreordertable</link>
                <guid>http://terai.xrea.jp/swing/dndreordertable</guid>
                <pubDate>2009-09-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameをJFrameとして表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;のタイトルバーなどを非表示にし、&lt;code&gt;JInternalFrame&lt;/code&gt;のタイトルバーでこれらを代用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InternalFrameTitleBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTOo9LcVwI/AAAAAAAAAcs/fUEpKhXr_aI/s800/InternalFrameTitleBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JInternalFrame internal = new JInternalFrame(&quot;@title@&quot;);
BasicInternalFrameUI ui = (BasicInternalFrameUI)internal.getUI();
Component title = ui.getNorthPane();
for(MouseMotionListener l:title.getListeners(MouseMotionListener.class)) {
  title.removeMouseMotionListener(l);
}
DragWindowListener dwl = new DragWindowListener();
title.addMouseListener(dwl);
title.addMouseMotionListener(dwl);
JPanel p = new JPanel(new BorderLayout());
p.add(new JScrollPane(new JTree()));
p.add(new JButton(new AbstractAction(&quot;close&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    Window w = SwingUtilities.windowForComponent((Component)e.getSource());
    //w.dispose();
    w.getToolkit().getSystemEventQueue().postEvent(
      new WindowEvent(w, WindowEvent.WINDOW_CLOSING));
  }
}), BorderLayout.SOUTH);
internal.getContentPane().add(p);
internal.setVisible(true);

KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
focusManager.addPropertyChangeListener(new PropertyChangeListener() {
  @Override public void propertyChange(PropertyChangeEvent e) {
    String prop = e.getPropertyName();
    if(&quot;activeWindow&quot;.equals(prop)) {
      try{
        internal.setSelected(e.getNewValue()!=null);
      }catch(PropertyVetoException ex) {
        ex.printStackTrace();
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JInternalFrame&lt;/code&gt;のタイトルバーを使用することで、タイトルバーに閉じるボタンのないフレームを作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame#setUndecorated(true)&lt;/code&gt;で、&lt;code&gt;JFrame&lt;/code&gt;のタイトルバーなどを非表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicInternalFrameUI#getNorthPane()&lt;/code&gt;で&lt;code&gt;JInternalFrame&lt;/code&gt;のタイトルバーを取得

&lt;ul&gt;
&lt;li&gt;元の&lt;code&gt;MouseMotionListener&lt;/code&gt;を削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;をドラッグすると親の&lt;code&gt;JFrame&lt;/code&gt;が移動する&lt;code&gt;MouseMotionListener&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;制限

&lt;ul&gt;
&lt;li&gt;最大化、最小化、リサイズなどには未対応

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+Space&lt;/kbd&gt;で最大化、最小化できるが、元のサイズに戻せなくなる場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;角の透明化には未対応

&lt;ul&gt;
&lt;li&gt;目立たなくするために、&lt;code&gt;LookAndFeel&lt;/code&gt;は&lt;code&gt;Nimbus&lt;/code&gt;に変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;なら、&lt;code&gt;frame.setBackground(new Color(0,0,0,0)); frame.add(p=new MainPanel()); p.setOpaque(false);&lt;/code&gt;で角の透明化が可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragWindow.html&quot;&gt;JWindowをマウスで移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CustomDecoratedFrame.html&quot;&gt;JFrameのタイトルバーなどの装飾を独自のものにカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowDecorationStyle.html&quot;&gt;JRootPaneにリサイズのための装飾を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;のアクティブ状態が変わったら、&lt;code&gt;JInternalFrame&lt;/code&gt;の選択状態も変化するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-11-13 (金) 14:57:18&lt;/li&gt;
&lt;li&gt;リサイズ可能？にする場合のテスト。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-10 (木) 15:07:18

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowDecorationStyle.html&quot;&gt;JRootPaneにリサイズのための装飾を設定する&lt;/a&gt;に移動。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-17 (月) 02:29:47&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/internalframetitlebar</link>
                <guid>http://terai.xrea.jp/swing/internalframetitlebar</guid>
                <pubDate>2009-08-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonの描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;の状態描画をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonPainted&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTIWYXt9eI/AAAAAAAAASo/se2OKkQA83U/s800/ButtonPainted.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;java.util.List&amp;lt;JCheckBox&amp;gt; clist = Arrays.asList(
  new JCheckBox(new AbstractAction(&quot;setFocusPainted&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      boolean flg = ((JCheckBox)e.getSource()).isSelected();
      for(JButton b:list) b.setFocusPainted(flg);
      p.revalidate();
    }
  }),
  new JCheckBox(new AbstractAction(&quot;setBorderPainted&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      boolean flg = ((JCheckBox)e.getSource()).isSelected();
      for(JButton b:list) b.setBorderPainted(flg);
      p.revalidate();
    }
  }),
  new JCheckBox(new AbstractAction(&quot;setContentAreaFilled&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      boolean flg = ((JCheckBox)e.getSource()).isSelected();
      for(JButton b:list) b.setContentAreaFilled(flg);
      p.revalidate();
    }
  }),
  new JCheckBox(new AbstractAction(&quot;setRolloverEnabled&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      boolean flg = ((JCheckBox)e.getSource()).isSelected();
      for(JButton b:list) b.setRolloverEnabled(flg);
      p.revalidate();
    }
  })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;の状態(例えばフォーカスの有無を描画するか？など)をテストします。これらは&lt;code&gt;Look &amp;amp; Feel&lt;/code&gt;によって効果が異なる場合があるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/AbstractButton.html#setFocusPainted%28boolean%29&quot;&gt;setFocusPainted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/AbstractButton.html#setBorderPainted%28boolean%29&quot;&gt;setBorderPainted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/AbstractButton.html#setContentAreaFilled%28boolean%29&quot;&gt;setContentAreaFilled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/AbstractButton.html#setRolloverEnabled%28boolean%29&quot;&gt;setRolloverEnabled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonpainted</link>
                <guid>http://terai.xrea.jp/swing/buttonpainted</guid>
                <pubDate>2009-08-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのEditorComponentにJButtonを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;EditorComponent&lt;/code&gt;に&lt;code&gt;JButton&lt;/code&gt;や&lt;code&gt;JLabel&lt;/code&gt;などを配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonInComboEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTIT4iCWGI/AAAAAAAAASk/pFFcvRBoyIg/s800/ButtonInComboEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo02.setLayout(new LayoutManager() {
  @Override public void addLayoutComponent(String name, Component comp) {}
  @Override public void removeLayoutComponent(Component comp) {}
  @Override public Dimension preferredLayoutSize(Container parent) {
    return parent.getPreferredSize();
  }
  @Override public Dimension minimumLayoutSize(Container parent) {
    return parent.getMinimumSize();
  }
  @Override public void layoutContainer(Container parent) {
    if(!(parent instanceof JComboBox)) return;
    JComboBox cb   = (JComboBox)parent;
    int width    = cb.getWidth();
    int height     = cb.getHeight();
    Insets insets  = cb.getInsets();
    int buttonHeight = height - (insets.top + insets.bottom);
    int buttonWidth  = buttonHeight;
    int labelWidth   = buttonHeight;
    int loupeWidth   = buttonHeight;

    JButton arrowButton = (JButton)cb.getComponent(0);
    if(arrowButton != null) {
      Insets arrowInsets = arrowButton.getInsets();
      buttonWidth = arrowButton.getPreferredSize().width
        + arrowInsets.left + arrowInsets.right;
      arrowButton.setBounds(width - (insets.right + buttonWidth),
                            insets.top, buttonWidth, buttonHeight);
    }
    if(label != null) {
      Insets labelInsets = label.getInsets();
      labelWidth = label.getPreferredSize().width
        + labelInsets.left + labelInsets.right;
      label.setBounds(insets.left, insets.top, labelWidth, buttonHeight);
    }
    JButton rssButton = button;
    if(rssButton != null &amp;amp;&amp;amp; rssButton.isVisible()) {
      Insets loupeInsets = rssButton.getInsets();
      loupeWidth = rssButton.getPreferredSize().width
        + loupeInsets.left + loupeInsets.right;
      rssButton.setBounds(width - (insets.right + loupeWidth + buttonWidth),
                          insets.top, loupeWidth, buttonHeight);
    }else{
      loupeWidth = 0;
    }

    Component editor = cb.getEditor().getEditorComponent();
    if ( editor != null ) {
      editor.setBounds(insets.left + labelWidth, insets.top,
        width -(insets.left+insets.right+buttonWidth+labelWidth+loupeWidth),
        height-(insets.top +insets.bottom));
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;に独自のレイアウトマネージャーを設定して、&lt;code&gt;JButton&lt;/code&gt;や&lt;code&gt;JLabel&lt;/code&gt;を配置しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;RolloverIcon&lt;/code&gt;は、元のアイコンに以下のようなフィルタを掛けて作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RGBImageFilter&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static ImageIcon makeFilteredImage(ImageIcon srcIcon) {
  RGBImageFilter filter = new SelectedImageFilter();
  FilteredImageSource fis = new FilteredImageSource(srcIcon.getImage().getSource(), filter);
  return new ImageIcon(Toolkit.getDefaultToolkit().createImage(fis));
}
static class SelectedImageFilter extends RGBImageFilter {
  public SelectedImageFilter() {
    canFilterIndexColorModel = false;
  }
  private final float scale = 1.2f;
  public int filterRGB(int x, int y, int argb) {
    //int a = (argb &amp;gt;&amp;gt; 24) &amp;amp; 0xff;
    int r = (argb &amp;gt;&amp;gt; 16) &amp;amp; 0xff;
    int g = (argb &amp;gt;&amp;gt; 8)  &amp;amp; 0xff;
    int b = (argb)       &amp;amp; 0xff;
    r = (int)(r*scale);
    g = (int)(g*scale);
    b = (int)(b*scale);
    if(r &amp;gt; 255) r = 255;
    if(g &amp;gt; 255) g = 255;
    if(b &amp;gt; 255) b = 255;
    return (argb &amp;amp; 0xff000000) | (r&amp;lt;&amp;lt;16) | (g&amp;lt;&amp;lt;8) | (b);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RescaleOp&lt;/code&gt;を使用&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static ImageIcon makeFilteredImage2(ImageIcon srcIcon) {
  RescaleOp op = new RescaleOp(
      new float[] { 1.2f,1.2f,1.2f,1.0f },
      new float[] { 0f,0f,0f,0f }, null);
  BufferedImage img = new BufferedImage(
      srcIcon.getIconWidth(), srcIcon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
  Graphics g = img.getGraphics();
  //g.drawImage(srcIcon.getImage(), 0, 0, null);
  srcIcon.paintIcon(null, g, 0, 0);
  g.dispose();
  return new ImageIcon(op.filter(img, null));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://feedicons.com/&quot;&gt;Feed Icons - Home of the Standard Web Feed Icon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EditorComponent&lt;/code&gt;に追加した&lt;code&gt;JButton&lt;/code&gt;をクリックすると例外が発生する場合があるバグを修正 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-08-28 (金) 16:42:47&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonincomboeditor</link>
                <guid>http://terai.xrea.jp/swing/buttonincomboeditor</guid>
                <pubDate>2009-08-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuBarの背景に画像を表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenuBar&lt;/code&gt;の背景に画像を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MenuBarBackground&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTPxQA13fI/AAAAAAAAAeg/SAN79wHPkQc/s800/MenuBarBackground.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JMenuBar createMenubar() {
  final TexturePaint texture = makeTexturePaint();
  JMenuBar mb = new JMenuBar() {
    @Override protected void paintComponent(Graphics g) {
      super.paintComponent(g);
      Graphics2D g2 = (Graphics2D)g;
      g2.setPaint(texture);
      g2.fillRect(0, 0, getWidth(), getHeight());
    }
  };
  mb.setOpaque(false);
  String[] menuKeys = {&quot;File&quot;, &quot;Edit&quot;, &quot;Help&quot;};
  for(String key: menuKeys) {
    JMenu m = createMenu(key);
    if(m != null) mb.add(m);
  }
  return mb;
}
private JMenu createMenu(String key) {
  JMenu menu = new JMenu(key) {
    @Override protected void fireStateChanged() {
      ButtonModel m = getModel();
      if(m.isPressed() &amp;amp;&amp;amp; m.isArmed()) {
        setOpaque(true);
      }else if(m.isSelected()) {
        setOpaque(true);
      }else if(isRolloverEnabled() &amp;amp;&amp;amp; m.isRollover()) {
        setOpaque(true);
      }else{
        setOpaque(false);
      }
      super.fireStateChanged();
    };
  };
  if(&quot;Windows XP&quot;.equals(System.getProperty(&quot;os.name&quot;))) {
    menu.setBackground(new Color(0,0,0,0)); //XXX Windows XP lnf?
  }
  menu.add(&quot;dummy1&quot;); menu.add(&quot;dummy2&quot;); menu.add(&quot;dummy3&quot;);
  return menu;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JMenuBar&lt;/code&gt;に画像を描画し、これに追加する&lt;code&gt;JMenu&lt;/code&gt;を通常は透明、選択されたときなどは不透明となるように&lt;code&gt;setOpaque&lt;/code&gt;メソッドで切り替えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注意点

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、&lt;code&gt;JMenu#setBackground(new Color(0,0,0,0));&lt;/code&gt;とする必要がある？&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;には対応していない&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;に切り替えた直後、メニューの文字色などがおかしい？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFrame#setJMenuBar()&lt;/code&gt;で追加した&lt;code&gt;JMenuBar&lt;/code&gt;を透明にする場合のテスト&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.image.*;
import javax.swing.*;
public class MenuBarRootPaneTest {
  private static JMenuBar createMenubar() {
    JMenuBar mb = new JMenuBar();
    mb.setOpaque(false);
    mb.setBackground(new Color(0,0,0,0));
    String[] menuKeys = {&quot;File&quot;, &quot;Edit&quot;, &quot;Help&quot;};
    for(String key: menuKeys) {
      JMenu m = createMenu(key);
      if(m != null) mb.add(m);
    }
    return mb;
  }
  private static JMenu createMenu(String key) {
    JMenu menu = new JMenu(key);
    menu.setForeground(Color.WHITE);
    menu.add(&quot;dummy1&quot;);
    menu.add(&quot;dummy2&quot;);
    menu.add(&quot;dummy3&quot;);
    return menu;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  private static TexturePaint makeTexturePaint() {
    int cs = 6, sz = cs*cs;
    BufferedImage img = new BufferedImage(sz,sz,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2 = img.createGraphics();
    g2.setPaint(new Color(222,222,222,50));
    g2.fillRect(0,0,sz,sz);
    for(int i=0; i*cs&amp;lt;sz; i++) {
      for(int j=0; j*cs&amp;lt;sz; j++) {
        if((i+j)%2==0) g2.fillRect(i*cs, j*cs, cs, cs);
      }
    }
    g2.dispose();
    return new TexturePaint(img, new Rectangle(0,0,sz,sz));
  }
  public static void createAndShowGUI() {
    JFrame frame = new JFrame() {
      @Override protected JRootPane createRootPane() {
        JRootPane rp = new JRootPane() {
          private final TexturePaint texture = makeTexturePaint();
          @Override protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D)g.create();
            g2.setPaint(texture);
            g2.fillRect(0, 0, getWidth(), getHeight());
            g2.dispose();
          }
        };
        rp.setOpaque(true);
        return rp;
      }
    };
    frame.getRootPane().setBackground(Color.BLUE);
    frame.getLayeredPane().setBackground(Color.GREEN);
    frame.getContentPane().setBackground(Color.RED);
    ((JComponent)frame.getContentPane()).setOpaque(false);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.setJMenuBar(createMenubar());
    frame.setSize(320, 240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;選択状態を半透明にするテスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-09 (土) 23:08:42

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows7&lt;/code&gt;での&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;でうまくいかない場合があるようなので、すこし修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-26 (月) 21:13:47&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RootPaneBackground.html&quot;&gt;JRootPaneの背景として画像を表示&lt;/a&gt;に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/menubarbackground</link>
                <guid>http://terai.xrea.jp/swing/menubarbackground</guid>
                <pubDate>2009-08-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerの文字列を非表示にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SpinnerNumberModel&lt;/code&gt;を使用する&lt;code&gt;JSpinner&lt;/code&gt;を無効にしたとき、数値を非表示にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DecimalFormatSymbols&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKfhstbcI/AAAAAAAAAWE/MMaDVyQ9jNY/s800/DecimalFormatSymbols.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JSpinner makeSpinner1(SpinnerNumberModel m) {
  JSpinner s = new JSpinner(m);
  JFormattedTextField ftf = getJFormattedTextField(s);
  DecimalFormatSymbols dfs = new DecimalFormatSymbols();
  ftf.setFormatterFactory(makeFFactory(dfs));
  ftf.setDisabledTextColor(UIManager.getColor(&quot;TextField.disabledColor&quot;));
  return s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JSpinner makeSpinner2(SpinnerNumberModel m) {
  JSpinner s = new JSpinner(m);
  JFormattedTextField ftf = getJFormattedTextField(s);
  DecimalFormatSymbols dfs = new DecimalFormatSymbols();
  dfs.setNaN(&quot; &quot;);
  ftf.setFormatterFactory(makeFFactory(dfs));
  return s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;から&lt;code&gt;JFormattedTextField&lt;/code&gt;を取得し、この無効の場合の文字色を無効場合の背景色と同じにして、非表示になるようにしています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;から&lt;code&gt;JFormattedTextField&lt;/code&gt;を取得し、&lt;code&gt;DecimalFormatSymbols#setNaN&lt;/code&gt;メソッドを使用して、値が&lt;code&gt;NaN&lt;/code&gt;の場合、表示する文字列をスペースに変更しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt;から&lt;code&gt;JFormattedTextField&lt;/code&gt;を取得し、&lt;code&gt;DecimalFormatSymbols#setNaN&lt;/code&gt;メソッドを使用して、値が&lt;code&gt;NaN&lt;/code&gt;の場合、表示する文字列を&lt;code&gt;----&lt;/code&gt;に変更しています。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/decimalformatsymbols</link>
                <guid>http://terai.xrea.jp/swing/decimalformatsymbols</guid>
                <pubDate>2009-08-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderでクリックした位置にノブをスライド</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;をマウスでクリックした場合、その位置にノブをスライド、続けてドラッグ可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/JumpToClickedPositionSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTOt05WV7I/AAAAAAAAAc0/Eobj6KIAQzk/s800/JumpToClickedPositionSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;slider.setUI(new MetalSliderUI() {
  protected TrackListener createTrackListener(JSlider slider) {
    return new TrackListener() {
      @Override public void mousePressed(MouseEvent e) {
        JSlider slider = (JSlider)e.getSource();
        switch (slider.getOrientation()) {
          case JSlider.VERTICAL:
            slider.setValue(valueForYPosition(e.getY()));
            break;
          case JSlider.HORIZONTAL:
            slider.setValue(valueForXPosition(e.getX()));
            break;
        }
        super.mousePressed(e); //isDragging = true;
        super.mouseDragged(e);
      }
      @Override public boolean shouldScroll(int direction) {
        return false;
      }
    };
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;縦の左、横の上

&lt;ul&gt;
&lt;li&gt;デフォルトの動作&lt;/li&gt;
&lt;li&gt;ノブをクリックすると、ドラッグ可能&lt;/li&gt;
&lt;li&gt;ノブ以外の場所をクリックすると、タイマーでノブの幅ずつその方向に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;縦の右、横の下

&lt;ul&gt;
&lt;li&gt;クリックした位置までスライドし、続けてドラッグ可能

&lt;ul&gt;
&lt;li&gt;目盛の間隔が広い場合、ノブがスナップされてマウスカーソルからはずれてしまい、続けてドラッグできない場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メディアプレイヤー風？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/518471/jslider-question-position-after-leftclick&quot;&gt;JSlider question: Position after leftclick - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/jumptoclickedpositionslider</link>
                <guid>http://terai.xrea.jp/swing/jumptoclickedpositionslider</guid>
                <pubDate>2009-07-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneのHTMLEditorKitにCSSを適用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;に&lt;code&gt;StyleSheet&lt;/code&gt;を追加した&lt;code&gt;HTMLEditorKit&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StyleSheet&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTT6cwbhCI/AAAAAAAAAlM/PsSYnlumJJg/s800/StyleSheet.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;StyleSheet styleSheet = new StyleSheet();
styleSheet.addRule(&quot;body {font-size: 12pt;}&quot;);
styleSheet.addRule(&quot;.highlight {color: red; background: green}&quot;);
HTMLEditorKit htmlEditorKit = new HTMLEditorKit();
htmlEditorKit.setStyleSheet(styleSheet);
JEditorPane editor = new JEditorPane();
editor.setEditorKit(htmlEditorKit);
editor.setText(makeTestHtml());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、クラス名が&lt;code&gt;.highlight&lt;/code&gt;の要素の文字色と背景色を&lt;code&gt;CSS&lt;/code&gt;で変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/swing/JEditorPane.html&quot;&gt;Java Swing「JEditorPane」メモ(Hishidama&amp;#39;s Swing-JEditorPane Memo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1392908&quot;&gt;Swing - HTMLEditorKit and CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/text/html/StyleSheet.html&quot;&gt;StyleSheet (Java Platform SE 6)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/text/html/CSS.html&quot;&gt;対応しているCSSプロパティ一覧 - CSS (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.devdaily.com/blog/post/jfc-swing/how-add-style-stylesheet-jeditorpane-example-code/&quot;&gt;How to add stylesheet information to a JEditorPane (jfc/swing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RegisterFont.html&quot;&gt;GraphicsEnvironmentにFontを登録して使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Tips/GooglePrettifyRhino.html&quot;&gt;Rhinoでgoogle-prettify.jsを実行する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTMLEditorKit&lt;/code&gt;の&lt;code&gt;CSS&lt;/code&gt;で、色は&lt;code&gt;3&lt;/code&gt;桁表記(&lt;code&gt;color: #RGB&lt;/code&gt;) には対応していない？(&lt;code&gt;6&lt;/code&gt;桁表記 &lt;code&gt;color:#RRGGBB&lt;/code&gt;は問題なく使用可) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-05-28 (月) 17:52:03&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/stylesheet</link>
                <guid>http://terai.xrea.jp/swing/stylesheet</guid>
                <pubDate>2009-07-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SpinnerNumberModelに上限値を超える値を入力</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;のテキストフィールドに&lt;code&gt;SpinnerNumberModel&lt;/code&gt;が決めた上限値を超える数値を直接入力した後に表示される値をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerNumberModel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTTrfKZbaI/AAAAAAAAAk0/znT8goHx2Es/s800/SpinnerNumberModel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SpinnerNumberModel m1 = new SpinnerNumberModel(
    Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 1);
SpinnerNumberModel m2 = new SpinnerNumberModel(
    Long.valueOf(Integer.MAX_VALUE),
    Long.valueOf(0),
    Long.valueOf(Integer.MAX_VALUE),
    Long.valueOf(1)),
//SpinnerNumberModel m2 = new SpinnerNumberModel(
//    Integer.MAX_VALUE, 0L, Integer.MAX_VALUE, 1L),
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Byte, Short, Integer, Long&lt;/code&gt;(上)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上限値は上から順に&lt;code&gt;Byte.MAX_VALUE&lt;/code&gt;, &lt;code&gt;Short.MAX_VALUE&lt;/code&gt;, &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上限値の先頭に適当な数値を入力すると上限値以外の数値に変換される場合がある&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Integer&lt;/code&gt;での例:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  2 147 483 647 =       1111111111111111111111111111111 (Integer.MAX_VALUE)
112 147 483 647 = 1101000011100100000101100101111111111 (頭に11追加)
    478 333 951 =         11100100000101100101111111111 (Integer.MAX_VALUEには戻らない)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Long.valueOf&lt;/code&gt;(下)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上限値は上と同じ&lt;/li&gt;
&lt;li&gt;数値はすべて&lt;code&gt;Long&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上限値の先頭に適当な数値を入力しても上限値のまま&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnernumbermodel</link>
                <guid>http://terai.xrea.jp/swing/spinnernumbermodel</guid>
                <pubDate>2009-07-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Htmlで修飾した文字列のクリップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Html&lt;/code&gt;で文字列を修飾するとクリップされなくなるので、予めクリップした文字列を作成してから&lt;code&gt;Html&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClippedHtmlLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJP6CTKHI/AAAAAAAAAUE/aD5gF_0luwI/s800/ClippedHtmlLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class URLRenderer extends DefaultTableCellRenderer
                  implements MouseListener, MouseMotionListener {
  private static Rectangle lrect = new Rectangle();
  private static Rectangle irect = new Rectangle();
  private static Rectangle trect = new Rectangle();
  private int row = -1;
  private int col = -1;
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
                           boolean isSelected, boolean hasFocus,
                           int row, int column) {
    super.getTableCellRendererComponent(table, value, isSelected, false, row, column);

    int mw = table.getColumnModel().getColumnMargin();
    int rh = table.getRowMargin();
    int w  = table.getColumnModel().getColumn(column).getWidth();
    int h  = table.getRowHeight(row);

    Insets i = this.getInsets();
    lrect.x = i.left;
    lrect.y = i.top;
    lrect.width  = w - (mw + i.right  + lrect.x);
    lrect.height = h - (rh + i.bottom + lrect.y);
    irect.x = irect.y = irect.width = irect.height = 0;
    trect.x = trect.y = trect.width = trect.height = 0;

    String str = SwingUtilities.layoutCompoundLabel(
      this,
      this.getFontMetrics(this.getFont()),
      value.toString(), //this.getText(),
      this.getIcon(),
      this.getVerticalAlignment(),
      this.getHorizontalAlignment(),
      this.getVerticalTextPosition(),
      this.getHorizontalTextPosition(),
      lrect,
      irect, //icon
      trect, //text
      this.getIconTextGap());

    if(!table.isEditing() &amp;amp;&amp;amp; this.row==row &amp;amp;&amp;amp; this.col==column) {
      setText(&quot;&amp;lt;html&amp;gt;&amp;lt;u&amp;gt;&amp;lt;font color=&#39;blue&#39;&amp;gt;&quot;+str);
    }else if(hasFocus) {
      setText(&quot;&amp;lt;html&amp;gt;&amp;lt;font color=&#39;blue&#39;&amp;gt;&quot;+str);
    }else{
      setText(str);
      //setText(value.toString());
    }
    return this;
  }
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setText(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;font color=&amp;#39;blue&amp;#39;&amp;gt;&amp;quot;+str);&lt;/code&gt;で文字列に下線を引く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.layoutCompoundLabel&lt;/code&gt;メソッドを使用して文字列をセル幅でクリップ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setText(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;font color=&amp;#39;blue&amp;#39;&amp;gt;&amp;quot;+str);&lt;/code&gt;で文字列に下線を引く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkInTableCell.html&quot;&gt;JTableのセルにHyperlinkを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clippedhtmllabel</link>
                <guid>http://terai.xrea.jp/swing/clippedhtmllabel</guid>
                <pubDate>2009-07-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのドロップダウンリストで右クリックを無効化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリスト(ポップアップメニュー)で、マウスの右クリックを無効にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableRightClick&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLKTBLgQI/AAAAAAAAAXI/mV-Gw1hPSYU/s800/DisableRightClick.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BasicComboPopup2 extends BasicComboPopup {
  private Handler2 handler2;
  @Override public void uninstallingUI() {
    super.uninstallingUI();
    handler2 = null;
  }
  public BasicComboPopup2(JComboBox combo) {
    super(combo);
  }
  @Override protected MouseListener createListMouseListener() {
    if(handler2==null) handler2 = new Handler2();
    return handler2;
  }
  private class Handler2 implements MouseListener{
    @Override public void mouseEntered(MouseEvent e) {}
    @Override public void mouseExited(MouseEvent e)  {}
    @Override public void mouseClicked(MouseEvent e) {}
    @Override public void mousePressed(MouseEvent e) {}
    @Override public void mouseReleased(MouseEvent e) {
      if(e.getSource() == list) {
        if(list.getModel().getSize() &amp;gt; 0) {
          // &amp;lt;ins&amp;gt;
          if(!SwingUtilities.isLeftMouseButton(e) || !comboBox.isEnabled()) return;
          // &amp;lt;/ins&amp;gt;
          // JList mouse listener
          if(comboBox.getSelectedIndex() == list.getSelectedIndex()) {
            comboBox.getEditor().setItem(list.getSelectedValue());
          }
          comboBox.setSelectedIndex(list.getSelectedIndex());
        }
        comboBox.setPopupVisible(false);
        // workaround for cancelling an edited item (bug 4530953)
        if(comboBox.isEditable() &amp;amp;&amp;amp; comboBox.getEditor() != null) {
          comboBox.configureEditor(comboBox.getEditor(), comboBox.getSelectedItem());
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;ComboBoxUI#createPopup()&lt;/code&gt;をオーバーライドして、ドロップダウンリストに設定する&lt;code&gt;MouseListener&lt;/code&gt;を入れ替えた&lt;code&gt;BasicComboPopup&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo02.setUI(new BasicComboBoxUI() {
  @Override protected ComboPopup createPopup() {
    return new BasicComboPopup2( comboBox );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;元の&lt;code&gt;MouseListener&lt;/code&gt;は、&lt;code&gt;JComboBox&lt;/code&gt;全体の&lt;code&gt;Handler&lt;/code&gt;になっていますが、必要なのはドロップダウンリスト関係のみなので、&lt;code&gt;e.getSource() == list&lt;/code&gt;な部分だけ元の&lt;code&gt;Handler&lt;/code&gt;からコピーし、この中で&lt;code&gt;if(!SwingUtilities.isLeftMouseButton(e) || !comboBox.isEnabled()) return;&lt;/code&gt;と右クリックを無視しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class BasicComboPopup3 extends BasicComboPopup {
  public BasicComboPopup3(JComboBox combo) {
    super(combo);
  }
  @Override protected JList createList() {
    return new JList(comboBox.getModel()) {
      @Override public void processMouseEvent(MouseEvent e) {
        if(SwingUtilities.isRightMouseButton(e)) return;
        if(e.isControlDown()) {
          // Fix for 4234053. Filter out the Control Key from the list.
          // ie., don&#39;t allow CTRL key deselection.
          e = new MouseEvent((Component)e.getSource(), e.getID(), e.getWhen(),
                     e.getModifiers() ^ InputEvent.CTRL_MASK,
                     e.getX(), e.getY(),
                     e.getXOnScreen(), e.getYOnScreen(),
                     e.getClickCount(),
                     e.isPopupTrigger(),
                     MouseEvent.NOBUTTON);
        }
        super.processMouseEvent(e);
      }
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ドロップダウンリストにスクロールバーが表示されていない場合、ホイールを回すとポップアップが閉じてしまうのも地味に困る…。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6982607&quot;&gt;Bug ID: 6982607 JComboBox closes on MouseWheelEvent scrolling if no scroll bar is visible&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-24 (火) 18:28:39&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//Test
class BasicComboPopup3 extends BasicComboPopup {
  public BasicComboPopup3(JComboBox combo) {
    super(combo);
  }
  @Override protected JScrollPane createScroller() {
    JScrollPane sp = new JScrollPane(list,
                     ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,
                     ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER) {
      @Override protected void processEvent(AWTEvent e) {
        if(e instanceof MouseWheelEvent) {
          JScrollBar toScroll = getVerticalScrollBar();
          if(toScroll == null || !toScroll.isVisible()) {
            ((MouseWheelEvent)e).consume();
            return;
          }
        }
        super.processEvent(e);
      }
    };
    sp.setHorizontalScrollBar(null);
    return sp;
  }
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;上記の方法では、ドロップダウンリスト内では閉じなくなるが、ドロップダウンリスト外でホイールを回転するとポップアップが閉じてしまう。&lt;code&gt;Toolkit.getDefaultToolkit().addAWTEventListener(...)&lt;/code&gt;でもうまくいかない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-04-24 (火) 20:07:13&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/disablerightclick</link>
                <guid>http://terai.xrea.jp/swing/disablerightclick</guid>
                <pubDate>2009-06-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableを別コンポーネントから操作</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の全選択や選択された行のコピーを&lt;code&gt;JButton&lt;/code&gt;などの別コンポーネントから行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectAllButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTSx9pjE3I/AAAAAAAAAjU/kU0UU-PWKSI/s800/SelectAllButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JTable table = new JTable(model);
private final Action copyAction = new AbstractAction(&quot;copy&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    e.setSource(table);
    table.getActionMap().get(&quot;copy&quot;).actionPerformed(e);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;や&lt;code&gt;JMenuItem&lt;/code&gt;がクリックされたときに、以下のようにしてフォーカスのない&lt;code&gt;JTable&lt;/code&gt;の全選択とコピーを行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWTEvent#setSource(Object)&lt;/code&gt;メソッドでイベントを&lt;code&gt;JTable&lt;/code&gt;に再転送

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.lang.ClassCastException: javax.swing.JMenuItem cannot be cast to javax.swing.JTabl&lt;/code&gt;などの例外が発生しないように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;から&lt;code&gt;ActionMap&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActionMap&lt;/code&gt;から&lt;code&gt;Action&lt;/code&gt;を取得

&lt;ul&gt;
&lt;li&gt;これらの&lt;code&gt;Action&lt;/code&gt;は&lt;code&gt;JTable&lt;/code&gt;でコピー(&lt;kbd&gt;Ctrl+C&lt;/kbd&gt;)するのと同様&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActionListener#actionPerformed(ActionEvent)&lt;/code&gt;メソッドで&lt;code&gt;Action&lt;/code&gt;を実行&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タイトルの&lt;code&gt;typo&lt;/code&gt;を修正 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-06-23 (火) 18:34:44&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Java Web Start&lt;/code&gt;で起動した場合は、 &lt;del&gt;コピーできない？&lt;/del&gt; このサンプル内でコピーした文字列などを外部のアプリケーションにペーストすることはできない(逆も不可)？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-02 (金) 19:05:43&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectallbutton</link>
                <guid>http://terai.xrea.jp/swing/selectallbutton</guid>
                <pubDate>2009-06-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>UndoManagerでJTextFieldのUndo、Redoを行う</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;のドキュメントに&lt;code&gt;UndoManager&lt;/code&gt;を追加して、&lt;code&gt;Undo&lt;/code&gt;、&lt;code&gt;Redo&lt;/code&gt;を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/UndoManager&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWX1uwgqI/AAAAAAAAApI/zvwc9TUlj4E/s800/UndoManager.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void initUndoRedo(JTextComponent tc) {
  UndoManager manager = new UndoManager();
  tc.getDocument().addUndoableEditListener(manager);
  tc.getActionMap().put(&quot;undo&quot;, new UndoAction(manager));
  tc.getActionMap().put(&quot;redo&quot;, new RedoAction(manager));
  InputMap imap = tc.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Event.CTRL_MASK), &quot;undo&quot;);
  imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Event.CTRL_MASK), &quot;redo&quot;);
}
private static class UndoAction extends AbstractAction {
  private final UndoManager undoManager;
  public UndoAction(UndoManager manager) {
    super(&quot;undo&quot;);
    this.undoManager = manager;
  }
  @Override public void actionPerformed(ActionEvent e) {
    try{
      undoManager.undo();
    }catch(CannotUndoException cue) {
      //cue.printStackTrace();
      Toolkit.getDefaultToolkit().beep();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Document#addUndoableEditListener(UndoManager)&lt;/code&gt;メソッドを使って、&lt;code&gt;JTextField&lt;/code&gt;で&lt;code&gt;Undo&lt;/code&gt;、&lt;code&gt;Redo&lt;/code&gt;が以下のキー入力で実行できるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Undo&lt;/code&gt; : &lt;kbd&gt;Ctrl+Z&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redo&lt;/code&gt; : &lt;kbd&gt;Ctrl+Y&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/generaltext.html#undo&quot;&gt;Implementing Undo and Redo (Text Component Features The Java™ Tutorialsg)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ReplaceUndoableEdit.html&quot;&gt;UndoManagerを使用した文字列選択ペーストの動作を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/undomanager</link>
                <guid>http://terai.xrea.jp/swing/undomanager</guid>
                <pubDate>2009-06-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPane風のタブ配置をレイアウトマネージャーで変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CardLayout&lt;/code&gt;と&lt;code&gt;JRadioButton&lt;/code&gt;で作成した&lt;code&gt;JTabbedPane&lt;/code&gt;風コンポーネントのタブ配置を自作レイアウトマネージャーで変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NewTabButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQUU8wtpI/AAAAAAAAAfY/BJyG5weJ1VA/s800/NewTabButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TabLayout implements LayoutManager, java.io.Serializable {
  @Override public void addLayoutComponent(String name, Component comp) {}
  @Override public void removeLayoutComponent(Component comp) {}
  @Override public Dimension preferredLayoutSize(Container parent) {
    synchronized (parent.getTreeLock()) {
      Insets insets = parent.getInsets();
      int last = parent.getComponentCount()-1;
      int w = 0, h = 0;
      if(last&amp;gt;=0) {
        Component comp = parent.getComponent(last);
        Dimension d = comp.getPreferredSize();
        w = d.width;
        h = d.height;
      }
      return new Dimension(insets.left + insets.right + w,
                           insets.top + insets.bottom + h);
    }
  }

  @Override public Dimension minimumLayoutSize(Container parent) {
    synchronized (parent.getTreeLock()) {
      return new Dimension(100, 24);
    }
  }

  @Override public void layoutContainer(Container parent) {
    synchronized (parent.getTreeLock()) {
      Insets insets = parent.getInsets();
      int ncomponents = parent.getComponentCount();
      int nrows = 1;
      int ncols = ncomponents-1;
      //boolean ltr = parent.getComponentOrientation().isLeftToRight();

      if (ncomponents == 0) {
        return;
      }
      int lastw = parent.getComponent(ncomponents-1).getPreferredSize().width;
      int width = parent.getWidth() - (insets.left + insets.right) - lastw;
      int h = parent.getHeight() - (insets.top + insets.bottom);
      int w = (width&amp;gt;100*(ncomponents-1))?100:width/ncols;
      int gap = width - w*ncols;
      int x = insets.left;
      int y = insets.top;
      for (int i=0;i&amp;lt;ncomponents;i++) {
        int a = (gap&amp;gt;0)?1:0;
        gap--;
        int cw = (i==ncols)?lastw:w+a;
        parent.getComponent(i).setBounds(x, y, cw, h);
        x += w + a;
      }
    }
  }
  @Override public String toString() {
    return getClass().getName();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のような&lt;code&gt;LayoutManager&lt;/code&gt;を作成して&lt;code&gt;JRadioButton&lt;/code&gt;をタブ風に並べています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最後のタブ(タブ追加ボタン)は常に幅固定&lt;/li&gt;
&lt;li&gt;最後のタブの高さがタブエリアの高さ&lt;/li&gt;
&lt;li&gt;タブエリアの幅に余裕がある場合は、各タブ幅は&lt;code&gt;100px&lt;/code&gt;で一定&lt;/li&gt;
&lt;li&gt;タブエリアの幅に余裕がない場合は、各タブ幅は均等&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;その他

&lt;ul&gt;
&lt;li&gt;タブを削除した場合、先頭タブにフォーカスが移動する&lt;/li&gt;
&lt;li&gt;左の&lt;code&gt;JButton&lt;/code&gt;(ダミー)は、タブエリアをラップする&lt;code&gt;JPanel(BorderLayout)&lt;/code&gt;の&lt;code&gt;BorderLayout.WEST&lt;/code&gt;に配置&lt;/li&gt;
&lt;li&gt;アイコンはランダム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CardLayoutTabbedPane.html&quot;&gt;CardLayoutを使ってJTabbedPane風のコンポーネントを作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タブの切り替えは、&lt;code&gt;mouseClicked&lt;/code&gt;ではなく、&lt;code&gt;mousePressed&lt;/code&gt;した時に行うように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-21 (水) 18:46:30&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/newtabbutton</link>
                <guid>http://terai.xrea.jp/swing/newtabbutton</guid>
                <pubDate>2009-06-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノード上でJPopupMenuを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード上でクリックした場合のみ、&lt;code&gt;JPopupMenu&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeNodePopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWLWQUjBI/AAAAAAAAAo0/3F3RUbU5sx8/s800/TreeNodePopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;static class TreePopupMenu extends JPopupMenu {
  private TreePath[] tsp;
  public TreePopupMenu() {
    super();
    add(new AbstractAction(&quot;path&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        JOptionPane.showMessageDialog(null, tsp, &quot;path&quot;,
          JOptionPane.INFORMATION_MESSAGE);
      }
    });
    add(new JMenuItem(&quot;dummy&quot;));
  }
  @Override public void show(Component c, int x, int y) {
    JTree tree = (JTree)c;
    tsp = tree.getSelectionPaths();
    if(tsp!=null) {
      TreePath path = tree.getPathForLocation(x, y);
      if(path!=null &amp;amp;&amp;amp; Arrays.asList(tsp).contains(path)) {
        super.show(c, x, y);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは以下の場合、&lt;code&gt;JPopupMenu&lt;/code&gt;を表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;のノードが選択されている&lt;/li&gt;
&lt;li&gt;選択されたノード上にカーソルがある&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treenodepopupmenu</link>
                <guid>http://terai.xrea.jp/swing/treenodepopupmenu</guid>
                <pubDate>2009-06-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Mouseで画像を移動、回転</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;画像をマウスのドラッグで任意の位置に移動、回転します。&lt;a href=&quot;http://satoshi.blogs.com/life/2007/05/uiflash_1.html&quot;&gt;Life is beautiful: 習作UI：初めてのFlash その２&lt;/a&gt;、&lt;a href=&quot;http://satoshi.blogs.com/life/2007/05/uiflash_2.html&quot;&gt;その３&lt;/a&gt;からの移植になります。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MouseDrivenImageRotation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQAQVe8YI/AAAAAAAAAe4/y6GTZLKjqx0/s800/MouseDrivenImageRotation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DraggableImageMouseListener extends MouseAdapter{
  private static final Color color = new Color(100,255,200,100);
  private static final int ir = 40, or = ir*3;
  public final Ellipse2D.Double inner = new Ellipse2D.Double(0,0,ir,ir);
  public final Ellipse2D.Double outer = new Ellipse2D.Double(0,0,or,or);
  public final Image image;
  public final int width;
  public final int height;
  public final double centerX, centerY;
  public double x = 10.0, y = 50.0, rotate = 45.0 * (Math.PI / 180.0);
  public double startX, startY, startA;
  private boolean moverHover, rotatorHover;

  public DraggableImageMouseListener(ImageIcon ii) {
    image   = ii.getImage();
    width   = ii.getIconWidth();
    height  = ii.getIconHeight();
    centerX = width/2.0;
    centerY = height/2.0;
    inner.x = (x+centerX-ir/2);
    inner.y = (y+centerY-ir/2);
    outer.x = (x+centerX-or/2);
    outer.y = (y+centerY-or/2);
  }
  public void paint(Graphics g, ImageObserver ior) {
    Graphics2D g2d = (Graphics2D)g;
    AffineTransform at = AffineTransform.getTranslateInstance(x, y);
    at.rotate(rotate, centerX, centerY);
    g2d.drawImage(image, at, ior);
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    if(rotatorHover) {
      Area donut = new Area(outer);
      donut.subtract(new Area(inner));
      g2d.setPaint(color);
      g2d.fill(donut);
    }else if(moverHover) {
      g2d.setPaint(color);
      g2d.fill(inner);
    }
  }
  @Override public void mouseMoved(MouseEvent e) {
    if(outer.contains(e.getX(), e.getY()) &amp;amp;&amp;amp; !inner.contains(e.getX(), e.getY())) {
      moverHover = false; rotatorHover = true;
    }else if(inner.contains(e.getX(), e.getY())) {
      moverHover = true;  rotatorHover = false;
    }else{
      moverHover = rotatorHover =false;
    }
    ((JComponent)e.getSource()).repaint();
  }
  @Override public void mouseReleased(MouseEvent e) {
    rotatorHover = moverHover = false;
    ((JComponent)e.getSource()).repaint();
  }
  @Override public void mousePressed(MouseEvent e) {
    if(outer.contains(e.getX(), e.getY()) &amp;amp;&amp;amp; !inner.contains(e.getX(), e.getY())) {
      rotatorHover = true;
      startA = rotate - Math.atan2(e.getY()-y-centerY, e.getX()-x-centerX);
      ((JComponent)e.getSource()).repaint();
    }else if(inner.contains(e.getX(), e.getY())) {
      moverHover = true;
      startX = e.getX();
      startY = e.getY();
      ((JComponent)e.getSource()).repaint();
    }
  }
  @Override public void mouseDragged(MouseEvent e) {
    if(rotatorHover) {
      rotate = startA + Math.atan2(e.getY()-y-centerY, e.getX()-x-centerX);
      ((JComponent)e.getSource()).repaint();
    }else if(moverHover) {
      x += e.getX() - startX;
      y += e.getY() - startY;
      inner.x = (x+centerX-ir/2);
      inner.y = (y+centerY-ir/2);
      outer.x = (x+centerX-or/2);
      outer.y = (y+centerY-or/2);
      startX  = e.getX();
      startY  = e.getY();
      ((JComponent)e.getSource()).repaint();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;画像の中心をドラッグすると移動、すこし外側をドラッグすると画像を回転することができます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;回転のためのドーナツ状の図形は、&lt;code&gt;Area#subtract&lt;/code&gt;メソッドを使用して作成しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://satoshi.blogs.com/life/2007/05/uiflash_1.html&quot;&gt;Life is beautiful: 習作UI：初めてのFlash その２&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://satoshi.blogs.com/life/2007/05/uiflash_2.html&quot;&gt;Life is beautiful: 習作UI：初めてのFlash その３&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mousedrivenimagerotation</link>
                <guid>http://terai.xrea.jp/swing/mousedrivenimagerotation</guid>
                <pubDate>2009-05-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのTabAreaをスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の&lt;code&gt;TabArea&lt;/code&gt;を&lt;code&gt;JSlider&lt;/code&gt;を使ってスクロールします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollTabToVisible&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTSn6mtDdI/AAAAAAAAAjE/ja_v92IXLsU/s800/ScrollTabToVisible.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void scrollTabAt(JTabbedPane tp, int index) {
  JViewport vp = null;
  for(Component c:tp.getComponents()) {
    if(&quot;TabbedPane.scrollableViewport&quot;.equals(c.getName())) {
      vp = (JViewport)c;
      break;
    }
  }
  if(vp==null) return;
  final JViewport viewport = vp;
  for(int i=0;i&amp;lt;tp.getTabCount();i++)
    tp.setForegroundAt(i, i==index?Color.RED:Color.BLACK);
  Dimension d = tp.getSize();
  Rectangle r = tp.getBoundsAt(index);
  int gw = (d.width-r.width)/2;
  r.grow(gw, 0);
  viewport.scrollRectToVisible(r);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane#setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT)&lt;/code&gt;とした&lt;code&gt;JTabbedPane&lt;/code&gt;の&lt;code&gt;TabArea&lt;/code&gt;は、名前が&lt;code&gt;TabbedPane.scrollableViewport&lt;/code&gt;な&lt;code&gt;JViewport&lt;/code&gt;に配置されています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、この&lt;code&gt;JViewport&lt;/code&gt;を取得して、&lt;code&gt;JViewport#scrollRectToVisible(Rectangle)&lt;/code&gt;メソッドを使用し、矢印ボタンをクリックせずに&lt;code&gt;TabArea&lt;/code&gt;のスクロールを行っています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrolltabtovisible</link>
                <guid>http://terai.xrea.jp/swing/scrolltabtovisible</guid>
                <pubDate>2009-05-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipをGlassPane上のコンポーネントで表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolTip&lt;/code&gt;を&lt;code&gt;GlassPane&lt;/code&gt;上のコンポーネントに追加した場合でも、手前に表示されるように設定します。主に&lt;a href=&quot;https://forums.oracle.com/thread/1357949&quot;&gt;Swing - ComboBox scroll and selected/highlight on glasspane&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ForceHeavyWeightPopupKey&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNMeZI4ZI/AAAAAAAAAaY/8XHy9j6jQw0/s800/ForceHeavyWeightPopupKey.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//Swing - ComboBox scroll and selected/highlight on glasspane
//https://forums.oracle.com/thread/1357949
try {
  Class clazz = Class.forName(&quot;javax.swing.PopupFactory&quot;);
  Field field = clazz.getDeclaredField(&quot;forceHeavyWeightPopupKey&quot;);
  field.setAccessible(true);
  label2.putClientProperty(field.get(null), Boolean.TRUE);
} catch (Exception ex) {
  ex.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンをクリックすると、二つのラベルをもつ&lt;code&gt;GlassPane&lt;/code&gt;が表示されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;111...&lt;/code&gt;(左)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GlassPane&lt;/code&gt;の下に&lt;code&gt;JToolTip&lt;/code&gt;が表示される&lt;/li&gt;
&lt;li&gt;親フレームの外に&lt;code&gt;JToolTip&lt;/code&gt;がはみ出す場合は、正常に表示される&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);&lt;/code&gt;では効果なし？&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;222...&lt;/code&gt;(右)

&lt;ul&gt;
&lt;li&gt;正常に表示されるように、常に、&lt;code&gt;JToolTip&lt;/code&gt;を重量コンポーネントとして表示している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PopupFactory&lt;/code&gt;クラスの&lt;code&gt;forceHeavyWeightPopupKey&lt;/code&gt;をリフレクションで取得して、&lt;code&gt;JComponent#putClientProperty&lt;/code&gt;メソッドで設定&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357949&quot;&gt;Swing - ComboBox scroll and selected/highlight on glasspane&lt;/a&gt;の&lt;code&gt;GlassPane&lt;/code&gt;で&lt;code&gt;JComboBox&lt;/code&gt;のポップアップを正常に表示する方法を引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);&lt;/code&gt;としておかないと前面に表示されない環境がある？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;の場合は、&lt;code&gt;javax.swing.PopupFactory.forceHeavyWeightPopupKey&lt;/code&gt;が無くなってしまったので、以下のように
&lt;code&gt;javax.swing.ClientPropertyKey.PopupFactory_FORCE_HEAVYWEIGHT_POPUP&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Class clazz = Class.forName(&quot;javax.swing.ClientPropertyKey&quot;);
Field field = clazz.getDeclaredField(&quot;PopupFactory_FORCE_HEAVYWEIGHT_POPUP&quot;);
field.setAccessible(true);
combo.putClientProperty(field.get(null), Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357949&quot;&gt;Swing - ComboBox scroll and selected/highlight on glasspane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?mode=viewtopic&amp;amp;topic=42615&amp;amp;forum=12&quot;&gt;JComboBox の GlassPane 上でのレンダリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1366094&quot;&gt;Swing - Why glass pane requires setLightWeightPopupEnabled(false)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ModalInternalFrame.html&quot;&gt;JInternalFrameをModalにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);&lt;/code&gt;がバージョンによって効かない場合があるらしい。&lt;a href=&quot;http://stackoverflow.com/questions/17150483/force-heavyweight-tooltip-with-shaped-jpanel&quot;&gt;java - Force HeavyWeight Tooltip with shaped JPanel - Stack Overflow&lt;/a&gt;　 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-18 (火) 08:34:11

&lt;ul&gt;
&lt;li&gt;上記のリンクのサンプルコードだと、&lt;code&gt;Windows 7&lt;/code&gt; + &lt;code&gt;JDK 1.7.0_05&lt;/code&gt;: &lt;code&gt;OK&lt;/code&gt;, &lt;code&gt;JDK 1.7.0_06&lt;/code&gt;: &lt;code&gt;NG&lt;/code&gt;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-18 (火) 08:42:24&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk8/jdk8/jdk/rev/4acd0211f48b&quot;&gt;jdk8/jdk8/jdk: changeset 5453:4acd0211f48b&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;*** src7u5/javax/swing/PopupFactory.java Wed May 16 07:54:10 2012
--- src7u6/javax/swing/PopupFactory.java    Fri Aug 10 10:01:16 2012
************** *
*** 203,214 ****
                      popupType = HEAVY_WEIGHT_POPUP;
                      break;
                  }
- } else if (c instanceof Window) {
- Window w = (Window) c;
- if (!w.isOpaque() || w.getOpacity() &amp;lt; 1 || w.getShape() != null) {
- popupType = HEAVY_WEIGHT_POPUP;
- break;
- }
              }
              c = c.getParent();
          }
--- 203,208 ----
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=2224554&quot;&gt;Bug ID: 2224554 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt;の修正が関係しているようだ。半透明の&lt;code&gt;Window&lt;/code&gt;を使わないで、変わった形の&lt;code&gt;Window&lt;/code&gt;を使う場合は、丁度この記事などのようにリフレクションを使って常に&lt;code&gt;PopupFactory_FORCE_HEAVYWEIGHT_POPUP&lt;/code&gt;にした方が良さそう。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-18 (火) 14:11:40

&lt;ul&gt;
&lt;li&gt;去年&lt;code&gt;Swing Dev ML&lt;/code&gt;で議論されている。&lt;a href=&quot;http://mail.openjdk.java.net/pipermail/swing-dev/2012-June/002096.html&quot;&gt;&lt;Swing Dev&gt; (8) Review request for 7156657 Version 7 doesn&amp;#39;t support translucent popup menus against a translucent window&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-06-18 (火) 14:19:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/forceheavyweightpopupkey</link>
                <guid>http://terai.xrea.jp/swing/forceheavyweightpopupkey</guid>
                <pubDate>2009-05-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;をソートします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SortTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTThR240sI/AAAAAAAAAkg/h3mIbDu9xa4/s800/SortTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static void sortTree(DefaultMutableTreeNode root) {
  Enumeration e = root.depthFirstEnumeration();
  while(e.hasMoreElements()) {
    DefaultMutableTreeNode node = (DefaultMutableTreeNode)e.nextElement();
    if(!node.isLeaf()) {
      sort2(node);   //selection sort
      //sort3(node); //iterative merge sort
    }
  }
}
public static Comparator&amp;lt;DefaultMutableTreeNode&amp;gt; tnc = new Comparator&amp;lt;DefaultMutableTreeNode&amp;gt;() {
  @Override public int compare(DefaultMutableTreeNode a, DefaultMutableTreeNode b) {
    if(a.isLeaf() &amp;amp;&amp;amp; !b.isLeaf()) {
      return 1;
    }else if(!a.isLeaf() &amp;amp;&amp;amp; b.isLeaf()) {
      return -1;
    }else{
      String sa = a.getUserObject().toString();
      String sb = b.getUserObject().toString();
      return sa.compareToIgnoreCase(sb);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//selection sort
public static void sort2(DefaultMutableTreeNode parent) {
  int n = parent.getChildCount();
  for(int i=0; i&amp;lt;n-1; i++) {
    int min = i;
    for(int j=i+1; j&amp;lt;n; j++) {
      if(tnc.compare((DefaultMutableTreeNode)parent.getChildAt(min),
                     (DefaultMutableTreeNode)parent.getChildAt(j))&amp;gt;0) {
        min = j;
      }
    }
    if(i!=min) {
      MutableTreeNode a = (MutableTreeNode)parent.getChildAt(i);
      MutableTreeNode b = (MutableTreeNode)parent.getChildAt(min);
      parent.insert(b, i);
      parent.insert(a, min);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static void sort3(DefaultMutableTreeNode parent) {
  int n = parent.getChildCount();
  //@SuppressWarnings(&quot;unchecked&quot;)
  //Enumeration&amp;lt;DefaultMutableTreeNode&amp;gt; e = parent.children();
  //ArrayList&amp;lt;DefaultMutableTreeNode&amp;gt; children = Collections.list(e);
  List&amp;lt;DefaultMutableTreeNode&amp;gt; children = new ArrayList&amp;lt;&amp;gt;(n);
  for(int i=0; i&amp;lt;n; i++) {
    children.add((DefaultMutableTreeNode)parent.getChildAt(i));
  }
  Collections.sort(children, tnc); //iterative merge sort
  parent.removeAllChildren();
  for(MutableTreeNode node: children) {
    parent.add(node);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、チェックボックスをクリックするとルートの&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt;から&lt;code&gt;deep copy&lt;/code&gt;でクローンを作成し、各親ノードを深さ優先で探索して、昇順ソートしています。&lt;/p&gt;

&lt;p&gt;元のソート無しの状態に戻す場合は、&lt;code&gt;DefaultTreeModel&lt;/code&gt;を作成し直しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DefaultMutableTreeNode&lt;/code&gt;の比較は、&lt;code&gt;Comparator&amp;lt;DefaultMutableTreeNode&amp;gt;#compare&lt;/code&gt;をオーバーライドし、節ノードが葉ノードより上、かつ&lt;code&gt;getUserObject().toString()&lt;/code&gt;で生成した文字列の大文字小文字を無視して行なっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1355435&quot;&gt;Swing - How to sort jTree Nodes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;以下のコメントにバグの指摘あり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TraverseAllNodes.html&quot;&gt;JTreeのノードを走査する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;ノードの深さ優先探索などについて&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SortingAnimations.html&quot;&gt;JComboBoxのモデルとしてenumを使用する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;各種ソートアルゴリズムのサンプル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileDirectoryComparator.html&quot;&gt;JTableでファイルとディレクトリを別々にソート&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ディレクトリが先になる比較について&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースにバグあります。 &lt;code&gt;root.insert(prevNode, i);&lt;/code&gt;の後に&lt;code&gt;i--;&lt;/code&gt;を入れる必要あり -- &lt;a href=&quot;http://terai.xrea.jp/a.html&quot;&gt;a&lt;/a&gt; 2013-07-02 (火) 15:54:09

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。たしかに&lt;code&gt;i--;break&lt;/code&gt;などがないと、入れ替えられてソートされないノードが出来てしまいますね。効率も悪いので、深さ優先で探索した親ノードから別の方法でソートするように変更した方がいいかもしれません。 &lt;del&gt;しばらくテストしてこのサンプルは修正したいと思います。&lt;/del&gt; 修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-07-03 (水) 13:11:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/sorttree</link>
                <guid>http://terai.xrea.jp/swing/sorttree</guid>
                <pubDate>2009-05-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableにソートされないサマリー行を表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行をソートしても、常に最終行にサマリーを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FixedSummaryRow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTM63Y0s8I/AAAAAAAAAZ8/o3lbm9QBcIs/s800/FixedSummaryRow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JTable makeTable() {
  final JTable table = new JTable(model);
  final RowFilter&amp;lt;TableModel,Integer&amp;gt; filter = new RowFilter&amp;lt;TableModel,Integer&amp;gt;() {
    @Override public boolean include(
      Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
      int i0 = table.convertRowIndexToView(entry.getIdentifier());
      return i0 != 0;
    }
  };
  final TableRowSorter&amp;lt;TableModel&amp;gt; s = new TableRowSorter&amp;lt;TableModel&amp;gt;(model) {
    @Override public void toggleSortOrder(int column) {
      RowFilter&amp;lt;? super TableModel, ? super Integer&amp;gt; f = getRowFilter();
      setRowFilter(null);
      super.toggleSortOrder(column);
      setRowFilter(f);
    }
  };
  s.setRowFilter(filter);
  //s.setSortsOnUpdates(true);
  s.toggleSortOrder(1);
  table.setRowSorter(s);

  TableColumnModel col = table.getColumnModel();
  for(int i=0;i&amp;lt;col.getColumnCount();i++) {
    final TableCellRenderer r = table.getDefaultRenderer(model.getColumnClass(i));
    col.getColumn(i).setCellRenderer(new TableCellRenderer() {
      @Override public Component getTableCellRendererComponent(JTable table, Object value,
                       boolean isSelected, boolean hasFocus, int row, int column) {
        JLabel l;
        if(row==model.getRowCount()-2) {
          int i = getSum(table.convertColumnIndexToModel(column));
          l = (JLabel)r.getTableCellRendererComponent(
                table, i, isSelected, hasFocus, row, column);
          l.setBackground(Color.ORANGE);
        }else{
          l = (JLabel)r.getTableCellRendererComponent(
                table, value, isSelected, hasFocus, row, column);
          l.setBackground(Color.WHITE);
        }
        l.setForeground(Color.BLACK);
        return l;
      }
    });
  }
  return table;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のようにしてサマリー行を作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モデルの先頭と末尾にダミー行を追加

&lt;ul&gt;
&lt;li&gt;値は、&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;と、&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;でソートしても先頭か末尾にくるようにしておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ソートでどちらかが先頭行(表示上)になった場合、フィルタでこれを非表示にする&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/date/20070812&quot;&gt;Sorting Table with Summary Row - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1356123&quot;&gt;Swing - Sort rows in JTable except the last row&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fixedsummaryrow</link>
                <guid>http://terai.xrea.jp/swing/fixedsummaryrow</guid>
                <pubDate>2009-04-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComponentの表示状態</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComponent&lt;/code&gt;の表示状態をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ShowingDisplayableVisible&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTS-a1ZnQI/AAAAAAAAAjo/jB4n-1WmEIs/s800/ShowingDisplayableVisible.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;button.addHierarchyListener(new HierarchyListener() {
  @Override public void hierarchyChanged(HierarchyEvent e) {
    if((e.getChangeFlags() &amp;amp; HierarchyEvent.SHOWING_CHANGED)!=0) {
      printInfo(&quot;SHOWING_CHANGED&quot;);
    }else if((e.getChangeFlags() &amp;amp; HierarchyEvent.DISPLAYABILITY_CHANGED)!=0) {
      printInfo(&quot;DISPLAYABILITY_CHANGED&quot;);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、コンポーネント(&lt;code&gt;JButton&lt;/code&gt;)に&lt;code&gt;HierarchyListener&lt;/code&gt;を追加して、表示状態が切り替わった時の&lt;code&gt;isDisplayable&lt;/code&gt;、&lt;code&gt;isShowing&lt;/code&gt;、&lt;code&gt;isVisible&lt;/code&gt;を調べています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開始時: &lt;code&gt;HierarchyEvent.DISPLAYABILITY_CHANGED&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isDisplayable&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isShowing&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isVisible&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HierarchyEvent.SHOWING_CHANGED&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isDisplayable&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isShowing&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;⇔&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isVisible&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;コンポーネントが&lt;code&gt;JScrollPane&lt;/code&gt;の表示領域にない、フレームがアイコン化、別パネルの裏に隠れているといった場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isDisplayable&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isShowing&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isVisible&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;コンポーネントが&lt;code&gt;JTabbedPane&lt;/code&gt;や&lt;code&gt;CardLayout&lt;/code&gt;の表示領域にないなど(親コンポーネントが非表示)の場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isDisplayable&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isShowing&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isVisible&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;コンポーネントが&lt;code&gt;setVisible(false)&lt;/code&gt;と設定された場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isDisplayable&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isShowing&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isVisible&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/showingdisplayablevisible</link>
                <guid>http://terai.xrea.jp/swing/showingdisplayablevisible</guid>
                <pubDate>2009-04-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TrayIconのダブルクリック</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TrayIcon&lt;/code&gt;をダブルクリックした場合フレームを表示、シングルクリックした場合はフレームを前面に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClickTrayIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJK3dhHYI/AAAAAAAAAT8/1MUtk0Z-NQU/s800/ClickTrayIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Image image = new BufferedImage(16,16,BufferedImage.TYPE_INT_ARGB);
new StarIcon().paintIcon(null, image.getGraphics(), 0, 0);
final SystemTray tray = SystemTray.getSystemTray();
PopupMenu popup       = new PopupMenu();
MenuItem open         = new MenuItem(&quot;Option&quot;);
MenuItem exit         = new MenuItem(&quot;Exit&quot;);
final TrayIcon icon   = new TrayIcon(image, &quot;Click Test&quot;, popup);
popup.add(open);
popup.add(exit);
icon.addMouseListener(new MouseAdapter() {
  @Override public void mouseClicked(MouseEvent e) {
    if(e.getButton()==MouseEvent.BUTTON1 &amp;amp;&amp;amp; e.getClickCount()==2) {
      frame.setVisible(true);
    }else if(frame.isVisible()) {
      frame.setExtendedState(JFrame.NORMAL);
      frame.toFront();
    }
  }
});
open.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    frame.setVisible(true);
  }
});
exit.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    tray.remove(icon);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    //frame.dispose();
    frame.getToolkit().getSystemEventQueue().postEvent(
      new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
  }
});
try{
  tray.add(icon);
}catch(AWTException e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TrayIcon&lt;/code&gt;にマウスリスナーを追加してマウスでダブルクリックした場合の動作を変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左ボタンをダブルクリック

&lt;ul&gt;
&lt;li&gt;フレームが非表示の場合は、再表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;左ボタンをシングルクリック

&lt;ul&gt;
&lt;li&gt;フレームが表示、または最小化されている場合、元のサイズに戻して最前面に表示&lt;/li&gt;
&lt;li&gt;フレームが非表示の場合は、なにもしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中ボタンのクリック

&lt;ul&gt;
&lt;li&gt;なにもしない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;右ボタンのクリック

&lt;ul&gt;
&lt;li&gt;ポップアップメニューを表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SystemTray.html&quot;&gt;SystemTrayにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimatedTrayIcon.html&quot;&gt;TrayIconのアニメーション&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clicktrayicon</link>
                <guid>http://terai.xrea.jp/swing/clicktrayicon</guid>
                <pubDate>2009-04-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableで行の追加、削除アニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行追加や削除をスライドアニメーションで強調します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SlideTableRows&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTP0i2yxI/AAAAAAAAAkE/DQKpmn3BIQo/s800/SlideTableRows.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void testCreateActionPerformed(ActionEvent e) {
  model.addTest(new Test(&quot;New name&quot;, &quot;&quot;));
  (new javax.swing.Timer(DELAY, new ActionListener() {
    int i = table.convertRowIndexToView(model.getRowCount()-1);
    int h = START_HEIGHT;
    @Override public void actionPerformed(ActionEvent e) {
      if(h&amp;lt;END_HEIGHT) {
        table.setRowHeight(i, h++);
      }else{
        ((javax.swing.Timer)e.getSource()).stop();
      }
    }
  })).start();
}

private void deleteActionPerformed(ActionEvent evt) {
  final int[] selection = table.getSelectedRows();
  if(selection==null || selection.length&amp;lt;=0) return;
  (new javax.swing.Timer(DELAY, new ActionListener() {
    int h = END_HEIGHT;
    @Override public void actionPerformed(ActionEvent e) {
      h--;
      if(h&amp;gt;START_HEIGHT) {
        for(int i=selection.length-1;i&amp;gt;=0;i--)
          table.setRowHeight(selection[i], h);
      }else{
        ((javax.swing.Timer)e.getSource()).stop();
        for(int i=selection.length-1;i&amp;gt;=0;i--)
          model.removeRow(table.convertRowIndexToModel(selection[i]));
      }
    }
  })).start();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使用して、徐々に行の高さを変更することで、アニメーションを行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;追加

&lt;ul&gt;
&lt;li&gt;行を追加したあとで、&lt;code&gt;JTable#setRowHeight(int, int)&lt;/code&gt;メソッドを使用して追加された行の高さを変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;削除

&lt;ul&gt;
&lt;li&gt;選択された行の高さを、&lt;code&gt;JTable#setRowHeight(int, int)&lt;/code&gt;メソッドを使用して変更&lt;/li&gt;
&lt;li&gt;高さが一定以下になったら、選択されていた行を削除&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AddRow.html&quot;&gt;JTableの行を追加、削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FishEyeTable.html&quot;&gt;JTableの行の高さを変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/slidetablerows</link>
                <guid>http://terai.xrea.jp/swing/slidetablerows</guid>
                <pubDate>2009-04-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>PathIteratorからSVGを生成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Shape&lt;/code&gt;から&lt;code&gt;PathIterator&lt;/code&gt;を取得し、この&lt;code&gt;Path&lt;/code&gt;を&lt;code&gt;SVG&lt;/code&gt;に変換します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PathIterator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTQ-2m7pMI/AAAAAAAAAgc/B55RHlb8ajM/s800/PathIterator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private StringBuilder makeStarburstSvg(PathIterator pi, int sz, String style, String desc) {
  StringBuilder sb = new StringBuilder();
  sb.append(&quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;\n&quot;);
  //...
  sb.append(String.format(&quot;&amp;lt;svg width=\&quot;%d\&quot; height=\&quot;%d\&quot; xmlns=\&quot;%s\&quot;&amp;gt;%n&quot;, sz, sz, w3));
  sb.append(String.format(&quot;  &amp;lt;desc&amp;gt;%s&amp;lt;/desc&amp;gt;%n&quot;, desc));
  sb.append(&quot;  &amp;lt;path d=\&quot;&quot;);
  double[] c = new double[6];
  while(!pi.isDone()) {
    switch(pi.currentSegment(c)) {
      case PathIterator.SEG_MOVETO:
        sb.append(String.format(&quot;M%.2f,%.2f &quot;, c[0], c[1])); break;
      case PathIterator.SEG_LINETO:
        sb.append(String.format(&quot;L%.2f,%.2f &quot;, c[0], c[1])); break;
      case PathIterator.SEG_QUADTO:
        sb.append(String.format(&quot;Q%.2f,%.2f,%.2f,%.2f &quot;,c[0],c[1],c[2],c[3]));
        break;
      case PathIterator.SEG_CUBICTO:
        sb.append(String.format(&quot;C%.2f,%.2f,%.2f,%.2f,%.2f,%.2f &quot;,c[0],c[1],c[2],c[3],c[4],c[5]));
        break;
      case PathIterator.SEG_CLOSE:
        sb.append(&quot;Z&quot;); break;
    }
    pi.next();
  }
  sb.append(String.format(&quot;\&quot; style=\&quot;%s\&quot; /&amp;gt;%n&amp;lt;/svg&amp;gt;%n&quot;, style));
  return sb;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Shape&lt;/code&gt;から&lt;code&gt;PathIterator&lt;/code&gt;を取得し、そのパスを辿って&lt;code&gt;SVG&lt;/code&gt;ファイルを生成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;対応しているのは、&lt;code&gt;PathIterator.SEG_MOVETO&lt;/code&gt;、&lt;code&gt;PathIterator.SEG_LINETO&lt;/code&gt;のみ&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hcn.zaq.ne.jp/___/SVG11-2nd/index.html&quot;&gt;SVG 1.1 仕様 （第２版） 日本語訳&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hcn.zaq.ne.jp/___/SVG11-2nd/paths.html&quot;&gt;パス – SVG 1.1 （第２版）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/svg/svg_path.asp&quot;&gt;SVG Path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.inkscape.org/&quot;&gt;Inkscape 自由に描く。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;サンプルコードにはコードすべて表示（記入）した方がいいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%90%8D%E7%84%A1%E3%81%97.html&quot;&gt;名無し&lt;/a&gt; 2012-03-27 (火) 21:48:06&lt;/li&gt;
&lt;li&gt;追記：そうじゃなくてはわかりにくいので。例えばJavaDriveさんのように -- &lt;a href=&quot;http://terai.xrea.jp/%E5%90%8D%E7%84%A1%E3%81%97.html&quot;&gt;名無し&lt;/a&gt; 2012-03-27 (火) 21:48:48

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。現状、大きめのサンプルではコードを丸ごと貼り付けるとページが長くなる、小さいサンプルでもあまり意味のないコードが毎回でてくる…、などの理由でコードの一部(&lt;code&gt;Tips for the Code Snippets&lt;/code&gt;)だけ表示するようにしています。コード全部を見たい場合は、&lt;code&gt;src.zip&lt;/code&gt;を展開して好みのエディタで開くか、リポジトリ(&lt;code&gt;svn repository&lt;/code&gt;)をたどってくださいという姿勢なんですが、自分でもたまにリポジトリをクリックしていくのが面倒なことがあるので、一気に&lt;code&gt;*.java&lt;/code&gt;にジャンプできるようなリンクでも追加できないか検討してみます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-28 (水) 15:58:59&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;の右上の&lt;code&gt;view plain&lt;/code&gt;リンクをクリックすると&lt;code&gt;svn&lt;/code&gt;リポジトリのソースコードを表示するようにしてみました。&lt;code&gt;MainPanel.java&lt;/code&gt;固定で、&lt;code&gt;HogeHogeUI.java&lt;/code&gt;などにはリンクしていませんが、面倒なので多分このままです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-14 (木) 21:25:49&lt;/li&gt;
&lt;li&gt;現状のままで良いかと。主要な部分だけ見えれば参考になりますしおすし --  2013-02-08 (金) 09:55:45

&lt;ul&gt;
&lt;li&gt;おすし。もうすこし工夫すれば、多少見やすく(使いやすく)なりそうな気はするのですが、上にも書いたようにしばらくはこのままです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-02-09 (土) 00:00:18&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/pathiterator</link>
                <guid>http://terai.xrea.jp/swing/pathiterator</guid>
                <pubDate>2009-03-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPane間でタブのドラッグ＆ドロップ移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;間でタブの&lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;による移動を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDExportTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLW06ZMXI/AAAAAAAAAXc/vzeXm4pwhVY/s800/DnDExportTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TabTransferHandler extends TransferHandler {
  private final DataFlavor localObjectFlavor;
  public TabTransferHandler() {
    System.out.println(&quot;TabTransferHandler&quot;);
    localObjectFlavor = new ActivationDataFlavor(
      DnDTabbedPane.class, DataFlavor.javaJVMLocalObjectMimeType, &quot;DnDTabbedPane&quot;);
  }
  //private static DnDTabbedPane source;
  //private synchronized static void setComponent(JComponent comp) {
  //  if(comp instanceof DnDTabbedPane) {
  //    source = (DnDTabbedPane)comp;
  //  }
  //}
  //@Override public void exportAsDrag(JComponent comp, InputEvent e, int action) {
  //  super.exportAsDrag(comp, e, action);
  //  setComponent(comp);
  //}
  private DnDTabbedPane source = null;
  @Override protected Transferable createTransferable(JComponent c) {
    System.out.println(&quot;createTransferable&quot;);
    if(c instanceof DnDTabbedPane) source = (DnDTabbedPane)c;
    return new DataHandler(c, localObjectFlavor.getMimeType());
  }
  @Override public boolean canImport(TransferSupport support) {
    //System.out.println(&quot;canImport&quot;);
    if (!support.isDrop() || !support.isDataFlavorSupported(localObjectFlavor)) {
      return false;
    }
    support.setDropAction(MOVE);
    DropLocation tdl = support.getDropLocation();
    Point pt = tdl.getDropPoint();
    DnDTabbedPane target = (DnDTabbedPane)support.getComponent();
    target.autoScrollTest(pt);
    DnDTabbedPane.DropLocation dl =
      (DnDTabbedPane.DropLocation)target.dropLocationForPoint(pt);
    int idx = dl.getIndex();
    boolean isDropable = false;

    if (target==source) {
      isDropable = target.getTabAreaBounds().contains(pt) &amp;amp;&amp;amp; idx&amp;gt;=0 &amp;amp;&amp;amp;
                   idx!=target.dragTabIndex &amp;amp;&amp;amp; idx!=target.dragTabIndex+1;
    } else {
      if (source!=null &amp;amp;&amp;amp; target!=source.getComponentAt(source.dragTabIndex)) {
        isDropable = target.getTabAreaBounds().contains(pt) &amp;amp;&amp;amp; idx&amp;gt;=0;
      }
    }

    Component c = target.getRootPane().getGlassPane();
    c.setCursor(isDropable?DragSource.DefaultMoveDrop:DragSource.DefaultMoveNoDrop);
    if (isDropable) {
      support.setShowDropLocation(true);
      dl.setDropable(true);
      target.setDropLocation(dl, null, true);
      return true;
    } else {
      support.setShowDropLocation(false);
      dl.setDropable(false);
      target.setDropLocation(dl, null, false);
      return false;
    }
  }

  private BufferedImage makeDragTabImage(DnDTabbedPane tabbedPane) {
    Rectangle rect = tabbedPane.getBoundsAt(tabbedPane.dragTabIndex);
    BufferedImage image = new BufferedImage(
      tabbedPane.getWidth(), tabbedPane.getHeight(), BufferedImage.TYPE_INT_ARGB);
    Graphics g = image.getGraphics();
    tabbedPane.paint(g);
    g.dispose();
    if (rect.x&amp;lt;0) {
      rect.translate(-rect.x,0);
    }
    if (rect.y&amp;lt;0) {
      rect.translate(0,-rect.y);
    }
    if (rect.x+rect.width&amp;gt;image.getWidth()) {
      rect.width = image.getWidth() - rect.x;
    }
    if (rect.y+rect.height&amp;gt;image.getHeight()) {
      rect.height = image.getHeight() - rect.y;
    }
    return image.getSubimage(rect.x,rect.y,rect.width,rect.height);
  }

  private static GhostGlassPane glassPane;
  @Override public int getSourceActions(JComponent c) {
    System.out.println(&quot;getSourceActions&quot;);
    DnDTabbedPane src = (DnDTabbedPane)c;
    if (glassPane==null) {
      c.getRootPane().setGlassPane(glassPane = new GhostGlassPane(src));
    }
    if (src.dragTabIndex&amp;lt;0) return NONE;
    glassPane.setImage(makeDragTabImage(src));
    source = src;
    //setDragImage(img); //java 1.7.0-ea-b84
    glassPane.setVisible(true);
    return MOVE;
  }
  @Override public boolean importData(TransferSupport support) {
    System.out.println(&quot;importData&quot;);
    if (!canImport(support)) return false;

    DnDTabbedPane target = (DnDTabbedPane)support.getComponent();
    DnDTabbedPane.DropLocation dl = target.getDropLocation();
    try {
      DnDTabbedPane source = (DnDTabbedPane)support.getTransferable()
        .getTransferData(localObjectFlavor);
      int index = dl.getIndex(); //boolean insert = dl.isInsert();
      if (target==source) {
        source.convertTab(source.dragTabIndex, index);
      } else {
        source.exportTab(source.dragTabIndex, target, index);
      }
      return true;
    } catch (UnsupportedFlavorException ufe) {
      ufe.printStackTrace();
    } catch (java.io.IOException ioe) {
      ioe.printStackTrace();
    }
    return false;
  }
  @Override protected void exportDone(JComponent c, Transferable data, int action) {
    System.out.println(&quot;exportDone&quot;);
    DnDTabbedPane src = (DnDTabbedPane)c;
    c.getRootPane().getGlassPane().setVisible(false);
    src.setDropLocation(null, null, false);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JDK 6&lt;/code&gt;で導入された、&lt;code&gt;TransferHandler.DropLocation&lt;/code&gt;を継承する&lt;code&gt;DnDTabbedPane.DropLocation&lt;/code&gt;などを作成して、&lt;code&gt;JTabbedPane&lt;/code&gt;間でタブの移動ができるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注意点

&lt;ul&gt;
&lt;li&gt;自身の子である&lt;code&gt;JTabbedPane&lt;/code&gt;にタブを移動することはできない&lt;/li&gt;
&lt;li&gt;子コンポーネントが&lt;code&gt;null&lt;/code&gt;(例えば&lt;code&gt;addTab(&amp;quot;Tab&amp;quot;,null)&lt;/code&gt;)のタブは移動不可&lt;/li&gt;
&lt;li&gt;タブが選択不可(例えば&lt;code&gt;setEnabledAt(idx, false)&lt;/code&gt;)の場合は移動不可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バグ？

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;子コンポーネントが&lt;code&gt;JTable&lt;/code&gt;の場合、マウスカーソルが点滅する&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;Windows&lt;/code&gt;環境のみ？&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;子コンポーネントが&lt;code&gt;JTextArea&lt;/code&gt;などの場合、ドラッグ中のタブゴーストが表示できない

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JTable&lt;/code&gt;、&lt;code&gt;JTextArea&lt;/code&gt;どちらも、&lt;code&gt;JScrollPane&lt;/code&gt;が影響している？&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Java 1.7.0-ea-b84&lt;/code&gt;以上で、&lt;code&gt;TransferHandler#setDragImage(Image)&lt;/code&gt;を使用するとちゃんと表示される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textArea.setTransferHandler(null);&lt;/code&gt;とすれば、&lt;code&gt;1.6.0&lt;/code&gt;でも正常に表示される。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCROLL_TAB_LAYOUT&lt;/code&gt;の場合、タブゴーストにスクロールボタンが表示される場合がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTLZe_UIkI/AAAAAAAAAXg/bCzrlm037N8/s800/DnDExportTabbedPane1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTabbedPane.html&quot;&gt;JTabbedPaneのタブをドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDLayerTabbedPane.html&quot;&gt;JLayerを使ってJTabbedPaneのタブの挿入位置を描画する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タブのドラッグ中、&lt;code&gt;JTable&lt;/code&gt;上などで&lt;code&gt;Cursor&lt;/code&gt;が点滅するのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-05-19 (火) 17:32:38&lt;/li&gt;
&lt;li&gt;点滅の原因は？ -- &lt;a href=&quot;http://terai.xrea.jp/Dad.html&quot;&gt;Dad&lt;/a&gt; 2010-01-16 (土) 01:48:13

&lt;ul&gt;
&lt;li&gt;おそらく、&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6700748&quot;&gt;Cursor flickering during D&amp;amp;D when using CellRendererPane with validation&lt;/a&gt;が原因。現在は、&lt;code&gt;canImport&lt;/code&gt;メソッド内で、一々&lt;code&gt;GlassPane#setCursor(isDropable?DragSource.DefaultMoveDrop:DragSource.DefaultMoveNoDrop);&lt;/code&gt;として回避中。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-16 (土) 12:25:38&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6u20&lt;/code&gt;ぐらいから&lt;code&gt;Web Start&lt;/code&gt;で、&lt;code&gt;java.security.AccessControlException: access denied (java.awt.AWTPermission accessClipboard)&lt;/code&gt;? -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-17 (木) 01:57:34

&lt;ul&gt;
&lt;li&gt;チュートリアルのデモ&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/dnd/dropmodedemo.html&quot;&gt;Demo - DropDemo (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing Drag and Drop and Data Transfer)&lt;/a&gt;でも同様のエラーが発生するので多分&lt;code&gt;Java 1.6.0_??&lt;/code&gt;のバグ。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-17 (木) 14:31:14&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6u21&lt;/code&gt;では、修正されている？: &lt;a href=&quot;http://download.java.net/jdk6/6u21/promoted/b05/changes/JDK6u21.b05.list.html&quot;&gt;6945178 2-High Defect SecurityException upon drag-and-drop(Bug/RFE fixed in JDK 6u21 build)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-17 (木) 14:32:45&lt;/li&gt;
&lt;li&gt;修正されたようです。&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/bugfixes6u21-156339.html&quot;&gt;Java SE 6 Update 21 Bug Fixes&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-07-08 (木) 21:54:27&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTabPlacement()==RIGHT&lt;/code&gt;などの場合に、&lt;code&gt;DropTarget&lt;/code&gt;の描画がおかしくなるのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-05 (日) 11:13:40&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndexporttabbedpane</link>
                <guid>http://terai.xrea.jp/swing/dndexporttabbedpane</guid>
                <pubDate>2009-03-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelのアイコンと文字列の位置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;のアイコンと文字列の位置をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextPositionAndAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTVPS5wBUI/AAAAAAAAAnU/2hri1cAlfoM/s800/TextPositionAndAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;label.setVerticalAlignment(SwingConstants.CENTER);
label.setVerticalTextPosition(SwingConstants.TOP);
label.setHorizontalAlignment(SwingConstants.RIGHT);
label.setHorizontalTextPosition(SwingConstants.LEFT);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;setVerticalAlignment&lt;/code&gt;、&lt;code&gt;setVerticalTextPosition&lt;/code&gt;、&lt;code&gt;setHorizontalAlignment&lt;/code&gt;、&lt;code&gt;setHorizontalTextPosition&lt;/code&gt;といったメソッドを使用して、&lt;code&gt;JLabel&lt;/code&gt;のアイコンと文字列の位置関係を変更しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;などにも、アイコンと文字列の位置を設定する同名のメソッドが存在します(引数は&lt;code&gt;SwingConstants&lt;/code&gt;インタフェースで定義された共通の定数が使用可)。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textpositionandalignment</link>
                <guid>http://terai.xrea.jp/swing/textpositionandalignment</guid>
                <pubDate>2009-03-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GridBagLayoutを使ってレンガ状に配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GridBagLayout&lt;/code&gt;を使ってコンポーネントをレンガ状に配置します。&lt;a href=&quot;https://forums.oracle.com/thread/1357310&quot;&gt;Swing - GridBagLayout to create a board&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BrickLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTIOzg1doI/AAAAAAAAASc/V_SwABvAldE/s800/BrickLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPanel panel = new JPanel(new GridBagLayout());
panel.setBorder(BorderFactory.createTitledBorder(&quot;Brick Layout&quot;));
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
//c.weightx = 1.0; c.weighty = 0.0;
for(int i=0;i&amp;lt;SIZE;i++) {
  int x = i &amp;amp; 1; //= (i%2==0)?0:1;
  for(int j=0;j&amp;lt;SIZE;j++) {
    c.gridy = i;
    c.gridx = 2*j+x;
    c.gridwidth = 2;
    panel.add(new JButton(&quot; &quot;),c);
  }
}
//&amp;lt;blockquote cite=&quot;https://forums.oracle.com/thread/1357310&quot;&amp;gt;
//&amp;lt;dummy-row&amp;gt;
c.gridwidth = 1;
c.gridy = 10;
for(c.gridx=0; c.gridx&amp;lt;=2*SIZE; c.gridx++)
  panel.add(Box.createHorizontalStrut(24), c);
//&amp;lt;/dummy-row&amp;gt;
//&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GridBagLayout&lt;/code&gt;を使って、&lt;code&gt;JButton&lt;/code&gt;をレンガ状に配置します。互い違いに二列ずつ占めるようにボタンを配置していますが、&lt;code&gt;&amp;lt;dummy-row&amp;gt;&lt;/code&gt;が無い場合、うまくレンガ状にはなりません。&lt;/p&gt;

&lt;p&gt;以下、&lt;a href=&quot;https://forums.oracle.com/thread/1357310&quot;&gt;Swing - GridBagLayout to create a board&lt;/a&gt;のDarryl.Burkeさんの投稿を引用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A column (or row) in a GridBagLayout is not well defined unless there is at least one component which occupies only that column (or row). All your rows have components spanning 2 columns.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列の基準となる行は、どこでも(先頭でも最後でも)構わないようです。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;同様に、ダミーの幅を持つ行を作成して、キーボード風に配列

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24622279/laying-out-a-keyboard-in-swing&quot;&gt;java - Laying out a keyboard in Swing - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class KeyboardTest {
  private static final String[][] keys = {
    {&quot;`&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;, &quot;-&quot;, &quot;=&quot;, &quot;Backspace&quot;},
    {&quot;Tab&quot;, &quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;, &quot;\\&quot;, &quot;&quot;},
    {&quot;Caps&quot;, &quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;, &quot;Enter&quot;, &quot;&quot;},
    {&quot;Shift&quot;, &quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;, &quot;&quot;, &quot;\u2191&quot;},
    {&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;&quot;, &quot;                         &quot;, &quot; &quot;, &quot;\u2190&quot;, &quot;\u2193&quot;, &quot;\u2192&quot;}
  };
  public JComponent makeUI() {
    JPanel keyboard = new JPanel(new GridBagLayout());
    keyboard.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

    GridBagConstraints c = new GridBagConstraints();
    c.weightx = 1d;
    c.weighty = 1d;
    c.fill = GridBagConstraints.BOTH;
    c.gridheight = 1;
    c.gridx = 0;

    c.gridy = 50;
    for (int i = 0; i &amp;lt; keys[0].length * 2; i++) {
      c.gridx = i;
      keyboard.add(Box.createHorizontalStrut(24));
    }

    for (int row = 0; row &amp;lt; keys.length; row++) {
      c.gridx = 0;
      c.gridy = row;
      for (int col = 0; col &amp;lt; keys[row].length; col++) {
        String key = keys[row][col];
        int l = key.length();
        c.gridwidth = l &amp;gt; 10 ? 14 :
                      l &amp;gt; 4  ?  4 :
                      l &amp;gt; 1  ?  3 :
                      l == 1 ?  2 : 1;
        if (l &amp;gt; 2) {
          keyboard.add(new JButton(key), c);
        } else if (key.trim().length() == 0) {
          keyboard.add(Box.createHorizontalStrut(24), c);
        } else {
          keyboard.add(new KeyButton(key), c);
        }
        c.gridx += c.gridwidth;
      }
    }
    return keyboard;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame(&quot;Keyboard&quot;);
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new KeyboardTest().makeUI());
    f.setResizable(false);
    f.pack();
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}

class KeyButton extends JButton {
  public KeyButton(String str) {
    super(str);
  }
  @Override public Dimension getPreferredSize() {
    return new Dimension(48, 48);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357310&quot;&gt;Swing - GridBagLayout to create a board&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/bricklayout</link>
                <guid>http://terai.xrea.jp/swing/bricklayout</guid>
                <pubDate>2009-03-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの高さを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;自体の高さや、ドロップダウンリスト内にあるアイテムの高さを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboItemHeight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJ6VVptrI/AAAAAAAAAVI/x72zWGymqHk/s800/ComboItemHeight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JComboBox combo1 = new JComboBox(items);
JLabel renderer1 = (JLabel)combo1.getRenderer();
renderer1.setPreferredSize(new Dimension(0, 32));

JComboBox combo2 = new JComboBox(items);
final ListCellRenderer r = combo2.getRenderer();
final Dimension dim = ((JLabel)r).getPreferredSize();
combo2.setRenderer(new ListCellRenderer() {
  @Override public Component getListCellRendererComponent(
        JList list, Object value, int index,
        boolean isSelected, boolean cellHasFocus) {
    Component c = r.getListCellRendererComponent(
      list, value, index, isSelected, cellHasFocus);
    c.setPreferredSize(new Dimension(100, (index&amp;lt;0)?dim.height:32));
    return c;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;レンダラーに&lt;code&gt;setPreferredSize&lt;/code&gt;で高さを設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;レンダラーの&lt;code&gt;getListCellRendererComponent&lt;/code&gt;で、&lt;code&gt;index&lt;/code&gt;が&lt;code&gt;0&lt;/code&gt;以上の時だけ、高さを変更しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;タグを使用するサンプルなどを追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-12-20 (金) 20:06:03&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboitemheight</link>
                <guid>http://terai.xrea.jp/swing/comboitemheight</guid>
                <pubDate>2009-03-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderの目盛にアイコンや文字列を追加する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;の目盛に&lt;code&gt;JComponent&lt;/code&gt;を表示することで、アイコンを追加したり、文字列の色などを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SliderLabelTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTNRK4g8I/AAAAAAAAAkA/dn8dNaWNmxM/s800/SliderLabelTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Hashtable&amp;lt;Integer, Component&amp;gt; labelTable = new Hashtable&amp;lt;&amp;gt;();
int c = 0;
for(String s:Arrays.asList(
    &quot;wi0009-16.png&quot;, &quot;wi0054-16.png&quot;, &quot;wi0062-16.png&quot;,
    &quot;wi0063-16.png&quot;, &quot;wi0064-16.png&quot;, &quot;wi0096-16.png&quot;,
    &quot;wi0111-16.png&quot;, &quot;wi0122-16.png&quot;, &quot;wi0124-16.png&quot;,
    &quot;wi0126-16.png&quot;)) {
  labelTable.put(c++,
    new JLabel(s, new ImageIcon(getClass().getResource(s)),
               SwingConstants.RIGHT));
}
labelTable.put(c, new JButton(&quot;aaa&quot;));
JSlider slider1 = new JSlider(JSlider.VERTICAL,0,10,0);
slider1.setLabelTable(labelTable);
slider1.setSnapToTicks(true);
slider1.setPaintTicks(true);
slider1.setPaintLabels(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSlider#setLabelTable(Dictionary)&lt;/code&gt;メソッドを使用して、任意のキーと値のペアで作成したマップを追加し、スライダーのラベルを以下のように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;アイコンを設定した&lt;code&gt;JLabel&lt;/code&gt;と、&lt;code&gt;JButton&lt;/code&gt;を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;右、下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;を追加して、目盛の文字列と色を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/VolumeSlider.html&quot;&gt;JSliderのUIや色を変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/sliderlabeltable</link>
                <guid>http://terai.xrea.jp/swing/sliderlabeltable</guid>
                <pubDate>2009-02-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderにJCheckBoxを追加してセルの値を切り替える</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;に&lt;code&gt;JCheckBox&lt;/code&gt;を追加して、同じ列の&lt;code&gt;JCheckBox&lt;/code&gt;で表示している値をすべて切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableHeaderCheckBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUf8Li6CI/AAAAAAAAAmI/mj7-1IwK86o/s800/TableHeaderCheckBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;enum Status { SELECTED, DESELECTED, INDETERMINATE }
class HeaderRenderer extends JCheckBox implements TableCellRenderer {
  private final JLabel label = new JLabel(&quot;Check All&quot;);
  private int targetColumnIndex;
  public HeaderRenderer(JTableHeader header, int index) {
    super((String)null);
    this.targetColumnIndex = index;
    setOpaque(false);
    setFont(header.getFont());
    header.addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent e) {
        JTableHeader header = (JTableHeader)e.getSource();
        JTable table = header.getTable();
        TableColumnModel columnModel = table.getColumnModel();
        int vci = columnModel.getColumnIndexAtX(e.getX());
        int mci = table.convertColumnIndexToModel(vci);
        if(mci == targetColumnIndex) {
          TableColumn column = columnModel.getColumn(vci);
          Object v = column.getHeaderValue();
          boolean b = Status.DESELECTED.equals(v)?true:false;
          TableModel m = table.getModel();
          for(int i=0; i&amp;lt;m.getRowCount(); i++) m.setValueAt(b, i, mci);
          column.setHeaderValue(b?Status.SELECTED:Status.DESELECTED);
          //header.repaint();
        }
      }
    });
  }
  @Override public Component getTableCellRendererComponent(
      JTable tbl, Object val, boolean isS, boolean hasF, int row, int col) {
    TableCellRenderer r = tbl.getTableHeader().getDefaultRenderer();
    JLabel l = (JLabel)r.getTableCellRendererComponent(tbl,val,isS,hasF,row,col);
    if(targetColumnIndex==tbl.convertColumnIndexToModel(col)) {
      if(val instanceof Status) {
        switch((Status)val) {
          case SELECTED:    setSelected(true);  setEnabled(true);  break;
          case DESELECTED:  setSelected(false); setEnabled(true);  break;
          case INDETERMINATE: setSelected(true);  setEnabled(false); break;
        }
      }else{
        setSelected(true); setEnabled(false);
      }
      label.setIcon(new ComponentIcon(this));
      l.setIcon(new ComponentIcon(label));
      l.setText(null); //XXX: Nimbus???
    }
    return l;
  }
}
class ComponentIcon implements Icon{
  private final JComponent cmp;
  public ComponentIcon(JComponent cmp) {
    this.cmp = cmp;
  }
  @Override public int getIconWidth() {
    return cmp.getPreferredSize().width;
  }
  @Override public int getIconHeight() {
    return cmp.getPreferredSize().height;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    SwingUtilities.paintComponent(
        g, cmp, (Container)c, x, y, getIconWidth(), getIconHeight());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JCheckBox&lt;/code&gt;のアイコンを作成して、これを&lt;code&gt;TableCellRenderer&lt;/code&gt;(=&lt;code&gt;JLabel&lt;/code&gt;)に&lt;code&gt;setIcon&lt;/code&gt;することで描画しています。このため、ヘッダに追加した&lt;code&gt;MouseListener&lt;/code&gt;で切り替えを行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のモデルの更新

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中にある&lt;code&gt;JCheckBox&lt;/code&gt;が全てチェックされた場合、ヘッダの&lt;code&gt;JCheckBox&lt;/code&gt;もチェックされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中にある&lt;code&gt;JCheckBox&lt;/code&gt;のチェックが全てクリアされた場合、ヘッダの&lt;code&gt;JCheckBox&lt;/code&gt;のチェックもクリアされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;のセル中にある&lt;code&gt;JCheckBox&lt;/code&gt;でチェックの有無が混在している場合、ヘッダの&lt;code&gt;JCheckBox&lt;/code&gt;は薄くチェックされた状態(&lt;code&gt;setEnabled(false)&lt;/code&gt;で&lt;code&gt;setSelected(true)&lt;/code&gt;)になる&lt;/li&gt;
&lt;li&gt;注: ここでは、行の追加、削除は考慮していない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableModelEvent.html&quot;&gt;JTableのモデルが変更されたことをイベントで受け取る&lt;/a&gt;は、行の追加、削除を考慮したバージョン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;model.addTableModelListener(new TableModelListener() {
  @Override public void tableChanged(TableModelEvent e) {
    if(e.getType()==TableModelEvent.UPDATE &amp;amp;&amp;amp; e.getColumn()==targetColumnIndex) {
      int vci = table.convertColumnIndexToView(targetColumnIndex);
      TableColumn column = table.getColumnModel().getColumn(vci);
      if(!Status.INDETERMINATE.equals(column.getHeaderValue())) {
        column.setHeaderValue(Status.INDETERMINATE);
      }else{
        boolean selected = true, deselected = true;
        TableModel m = table.getModel();
        for(int i=0; i&amp;lt;m.getRowCount(); i++) {
          Boolean b = (Boolean)m.getValueAt(i, targetColumnIndex);
          selected &amp;amp;= b; deselected &amp;amp;= !b;
          if(selected==deselected) return;
        }
        if(selected) {
          column.setHeaderValue(Status.SELECTED);
        }else if(deselected) {
          column.setHeaderValue(Status.DESELECTED);
        }else{
          return;
        }
      }
      JTableHeader h = table.getTableHeader();
      h.repaint(h.getHeaderRect(vci));
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.coderanch.com/t/343795/Swing-AWT-SWT-JFace/java/Check-Box-JTable-header&quot;&gt;Check Box in JTable header (Swing / AWT / SWT / JFace forum at JavaRanch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TriStateCheckBox.html&quot;&gt;JCheckBoxに不定状態のアイコンを追加する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableModelEvent.html&quot;&gt;JTableのモデルが変更されたことをイベントで受け取る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を&lt;code&gt;Nimbus&lt;/code&gt;に変更したとき、&lt;code&gt;JTableHeader&lt;/code&gt;の高さがおかしい？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-05-30 (月) 22:13:05

&lt;ul&gt;
&lt;li&gt;レンダラー中で&lt;code&gt;label.setText(null);&lt;/code&gt;や、&lt;code&gt;JLabel&lt;/code&gt;を挟んで二重に&lt;code&gt;ImageIcon&lt;/code&gt;を作成するなどして回避中。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-02 (金) 16:01:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-swing-tips.blogspot.com/2009/02/jtableheader-checkbox.html&quot;&gt;Java Swing Tips: JTableHeader CheckBox&lt;/a&gt;で、ヘッダクリックで全選択した後、テーブル中のチェックを外すと、ヘッダのチェックボックスもチェック外した方がよくないか？との指摘を頂いたので、(&lt;code&gt;Gmail&lt;/code&gt;などのチェックボックス風の)不定状態？を導入しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-06-14 (火) 14:44:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tableheadercheckbox</link>
                <guid>http://terai.xrea.jp/swing/tableheadercheckbox</guid>
                <pubDate>2009-02-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GeneralPathなどで星型図形を作成する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GeneralPath&lt;/code&gt;などを使って星型の図形をパネルに描画したり、アイコンを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GeneralPath&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTNT-1toKI/AAAAAAAAAak/t96zX52eOVg/s800/GeneralPath.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class StarPanel1 extends JPanel{
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    int w = getWidth();
    int h = getHeight();
    //&amp;lt;blockquote cite=&quot;%JAVA_HOME%/demo/jfc/Java2D/src/java2d/demos/Lines/Joins.java&quot;&amp;gt;
    GeneralPath p = new GeneralPath();
    p.moveTo(- w / 4.0f, - h / 12.0f);
    p.lineTo(+ w / 4.0f, - h / 12.0f);
    p.lineTo(- w / 6.0f, + h / 4.0f);
    p.lineTo(+     0.0f, - h / 4.0f);
    p.lineTo(+ w / 6.0f, + h / 4.0f);
    p.closePath();
    //&amp;lt;/blockquote&amp;gt;
    g2.translate(w/2, h/2);
    g2.setColor(Color.YELLOW);
    g2.fill(p);
    g2.setColor(Color.BLACK);
    g2.draw(p);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class StarIcon2 implements Icon{
  private static final int R1 = 20;
  private static final int R2 = 40;
  //double R1 = R2*Math.sin(Math.PI/10.0)/Math.cos(Math.PI/5.0); //=15.0;
  private static final int VC = 5; //16;
  private final AffineTransform at;
  private final Shape star;
  public StarIcon2() {
    double agl = 0.0;
    double add = 2*Math.PI/(VC*2);
    Path2D.Double p = new Path2D.Double();
    p.moveTo(R2*1, R2*0);
    for(int i=0;i&amp;lt;VC*2-1;i++) {
      agl+=add;
      if(i%2==0) p.lineTo(R1*Math.cos(agl), R1*Math.sin(agl));
      else       p.lineTo(R2*Math.cos(agl), R2*Math.sin(agl));
    }
    p.closePath();
    at = AffineTransform.getRotateInstance(-Math.PI/2,R2,0);
    star = new Path2D.Double(p, at);
  }
  @Override public int getIconWidth() {
    return 2*R2;
  }
  @Override public int getIconHeight() {
    return 2*R2;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.translate(x, y);
    g2d.setPaint(Color.YELLOW);
    g2d.fill(star);
    g2d.setPaint(Color.BLACK);
    g2d.draw(star);
    g2d.translate(-x, -y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上段、左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GeneralPath&lt;/code&gt;(=&lt;code&gt;Path2D.Float&lt;/code&gt;)を使用して星型図形を作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%JAVA_HOME%/demo/jfc/Java2D/src/java2d/demos/Lines/Joins.java&lt;/code&gt;を参考&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;上段、中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Polygon&lt;/code&gt;を使用して星型図形を作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;上段、右

&lt;ul&gt;
&lt;li&gt;フォントから星型(&lt;code&gt;★=&amp;quot;\u2605&amp;quot;&lt;/code&gt;)のアウトラインを取得して描画&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段、左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt;個の頂点を予め計算して&lt;code&gt;GeneralPath&lt;/code&gt;で星型を作成&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/serial/01/javafx/0009?page=2&quot;&gt;ついにベールを脱いだJavaFX：第9回 アニメーションを用いてより魅力的に［応用編］｜gihyo.jp … 技術評論社&lt;/a&gt; を参考&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段、中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Path2D.Double&lt;/code&gt;で、星型図形を作成しアイコンを作成&lt;/li&gt;
&lt;li&gt;外側の円の半径は、&lt;code&gt;40px&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段、右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Path2D.Double&lt;/code&gt;で、星型図形を作成しアイコンを作成&lt;/li&gt;
&lt;li&gt;外側の円の半径は、&lt;code&gt;40px&lt;/code&gt;、内側の円の半径は、&lt;code&gt;20px&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%JAVA_HOME%/demo/jfc/Java2D/src/java2d/demos/Lines/Joins.java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/serial/01/javafx/0009?page=2&quot;&gt;ついにベールを脱いだJavaFX：第9回 アニメーションを用いてより魅力的に［応用編］｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-sl.com/shapes.html&quot;&gt;Java2D Shapes project.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://programamemo2.blogspot.com/2008/12/java.html&quot;&gt;プログラマメモ2: 扇形っぽいのを描く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PathIterator.html&quot;&gt;PathIteratorからSVGを生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/generalpath</link>
                <guid>http://terai.xrea.jp/swing/generalpath</guid>
                <pubDate>2009-02-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableCellEditorのレイアウトを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableCellEditor&lt;/code&gt;のレイアウトを変更して、&lt;code&gt;CellEditor&lt;/code&gt;の隣に&lt;code&gt;JButton&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellEditorLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTIlcF-6vI/AAAAAAAAATA/mS6Q_BfuY6c/s800/CellEditorLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CustomComponentCellEditor extends DefaultCellEditor {
  protected final JTextField field;
  protected JButton button;
  private final JPanel panel = new JPanel(new BorderLayout());
  public CustomComponentCellEditor(JTextField field) {
    super(field);
    this.field = field;
    button = new JButton();
    button.setPreferredSize(new Dimension(25, 0));
    field.setBorder(BorderFactory.createEmptyBorder(0,2,0,0));
    panel.add(field);
    panel.add(button, BorderLayout.EAST);
    panel.setFocusable(false);
  }
  @Override public Component getTableCellEditorComponent(JTable table, Object value,
                         boolean isSelected, int row, int column) {
    //System.out.println(&quot;getTableCellEditorComponent&quot;);
    field.setText(Objects.toString(value, &quot;&quot;));
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        field.requestFocusInWindow();
      }
    });
    return panel;
  }
  @Override public boolean isCellEditable(final java.util.EventObject e) {
    //System.out.println(&quot;isCellEditable&quot;);
    if(e instanceof KeyEvent) {
      //System.out.println(&quot;KeyEvent&quot;);
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          char kc = ((KeyEvent)e).getKeyChar();
          if(!Character.isIdentifierIgnorable(kc)) {
            field.setText(field.getText()+kc);
          }
          field.setCaretPosition(field.getText().length());
          //field.requestFocusInWindow();
        }
      });
    }
    return super.isCellEditable(e);
  }
  @Override public Component getComponent() {
    return panel;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultCellEditor&lt;/code&gt;を継承する&lt;code&gt;CustomComponentCellEditor&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;をコンストラクタの引数にしているが、ダミー&lt;/li&gt;
&lt;li&gt;実体は&lt;code&gt;JPanel&lt;/code&gt;で、これをセルエディタとして表示(&lt;code&gt;TableCellEditor#getTableCellEditorComponent&lt;/code&gt;が&lt;code&gt;JPanel&lt;/code&gt;を返す)&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;JPanel&lt;/code&gt;のレイアウトを&lt;code&gt;BorderLayout&lt;/code&gt;にして、&lt;code&gt;JTextField&lt;/code&gt;と&lt;code&gt;JButton&lt;/code&gt;を配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableCellEditor#getCellEditorValue&lt;/code&gt;は&lt;code&gt;JTextField&lt;/code&gt;の値を返し、フォーカス、キー入力時の編集開始なども&lt;code&gt;JTextField&lt;/code&gt;になるように変更&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;https://forums.oracle.com/thread/1354286&quot;&gt;Swing - JTable editor issue&lt;/a&gt;:Darryl.Burke さんの投稿(2009/01/27 20:12 (reply 6 of 8))&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultCellEditor&lt;/code&gt;を継承する&lt;code&gt;CustomCellEditor&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;をコンストラクタの引数(セルエディタの実体)として使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;に&lt;code&gt;JButton&lt;/code&gt;の幅の右余白を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;が表示されたときに、余白に&lt;code&gt;JButton&lt;/code&gt;を&lt;code&gt;setBounds&lt;/code&gt;で配置&lt;/li&gt;
&lt;li&gt;参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CustomCellEditor extends DefaultCellEditor {
  private static final int BUTTON_WIDTH = 20;
  protected final JButton button = new JButton();
  public CustomCellEditor(final JTextField field) {
    super(field);
    field.setBorder(BorderFactory.createEmptyBorder(0,2,0,BUTTON_WIDTH));
    field.addHierarchyListener(new HierarchyListener() {
      @Override public void hierarchyChanged(HierarchyEvent e) {
        if((e.getChangeFlags() &amp;amp; HierarchyEvent.SHOWING_CHANGED)!=0
            &amp;amp;&amp;amp; field.isShowing()) {
          field.removeAll();
          field.add(button);
          Rectangle r = field.getBounds();
          button.setBounds(r.width-BUTTON_WIDTH, 0, BUTTON_WIDTH, r.height);
        }
      }
    });
  }
  @Override public Component getComponent() {
    //@see JTable#updateUI()
    SwingUtilities.updateComponentTreeUI(button);
    return super.getComponent();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultCellEditor&lt;/code&gt;を継承する&lt;code&gt;CustomComponentCellEditor2&lt;/code&gt;を作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;をコンストラクタの引数にしているが、ダミー&lt;/li&gt;
&lt;li&gt;実体は&lt;code&gt;JPanel&lt;/code&gt;を継承する&lt;code&gt;CustomComponent&lt;/code&gt;で、これをセルエディタとして表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomComponent#processKeyBinding(...)&lt;/code&gt;をオーバーライドして、キー入力開始時に&lt;code&gt;KeyboardFocusManager.getCurrentKeyboardFocusManager().redispatchEvent(field, e);&lt;/code&gt;を呼び出している&lt;/li&gt;
&lt;li&gt;あとは、&lt;code&gt;0&lt;/code&gt;列目の&lt;code&gt;CustomComponentCellEditor&lt;/code&gt;と同様&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CustomComponent extends JPanel {
  public final JTextField field = new JTextField();
  protected JButton button;
  public CustomComponent() {
    super(new BorderLayout(0,0));
    button = new JButton();
    this.add(field);
    this.add(button, BorderLayout.EAST);
  }
  @Override protected boolean processKeyBinding(
      final KeyStroke ks, final KeyEvent e, int condition, boolean pressed) {
    if(!field.isFocusOwner() &amp;amp;&amp;amp; !pressed) {
      field.requestFocusInWindow();
      SwingUtilities.invokeLater(new Runnable() {
        @Override public void run() {
          KeyboardFocusManager.getCurrentKeyboardFocusManager()
            .redispatchEvent(field, e);
        }
      });
    }
    return super.processKeyBinding(ks, e, condition, pressed);
  }
}
class CustomComponentCellEditor2 extends DefaultCellEditor {
  private final CustomComponent component;
  public CustomComponentCellEditor2(CustomComponent component) {
    super(component.field);
    this.component = component;
  }
  @Override public Component getTableCellEditorComponent(JTable table,
        Object value, boolean isSelected, int row, int column) {
    component.field.setText(value!=null?value.toString():&quot;&quot;);
    return component;
  }
  @Override public Component getComponent() {
    return component;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1354286&quot;&gt;Swing - JTable editor issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;F2&lt;/kbd&gt;で編集開始した場合、フォーカスできない問題を修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-08-10 (月) 15:50:27&lt;/li&gt;
&lt;li&gt;ソースコードだけ変更して、こちらのページの修正を忘れていたorzので、新しく追加した&lt;code&gt;2&lt;/code&gt;列目の解説と、最終列はデフォルトであることを追記。スクリーンショットは面倒なので更新しない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-08-30 (火) 18:26:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/celleditorlayout</link>
                <guid>http://terai.xrea.jp/swing/celleditorlayout</guid>
                <pubDate>2009-02-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuをボタンの長押しで表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolBar&lt;/code&gt;に、長押しで&lt;code&gt;JPopupMenu&lt;/code&gt;、クリックで選択されたメニューを表示するボタンを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PressAndHoldButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRIzHMLNI/AAAAAAAAAgs/0_PwsyZOl-I/s800/PressAndHoldButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class PressAndHoldHandler extends AbstractAction implements MouseListener {
  public final JPopupMenu pop = new JPopupMenu();
  public final ButtonGroup bg = new ButtonGroup();
  private AbstractButton arrowButton;
  private final Timer holdTimer = new Timer(1000, new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      System.out.println(&quot;InitialDelay(1000)&quot;);
      if (arrowButton != null &amp;amp;&amp;amp; arrowButton.getModel().isPressed()
          &amp;amp;&amp;amp; holdTimer.isRunning()) {
        holdTimer.stop();
        pop.show(arrowButton, 0, arrowButton.getHeight());
        pop.requestFocusInWindow();
      }
    }
  });
  public PressAndHoldHandler() {
    super();
    holdTimer.setInitialDelay(1000);
    pop.setLayout(new GridLayout(0, 3, 5, 5));
    for (MenuContext m: makeMenuList()) {
      AbstractButton b = new JRadioButton(m.command);
      b.setActionCommand(m.command);
      b.setForeground(m.color);
      b.setBorder(BorderFactory.createEmptyBorder());
      b.addActionListener(new ActionListener() {
        @Override public void actionPerformed(ActionEvent e) {
          System.out.println(bg.getSelection().getActionCommand());
          pop.setVisible(false);
        }
      });
      pop.add(b);
      bg.add(b);
    }
  }
  private List&amp;lt;MenuContext&amp;gt; makeMenuList() {
    return Arrays.asList(
      new MenuContext(&quot;BLACK&quot;,   Color.BLACK),
      new MenuContext(&quot;BLUE&quot;,  Color.BLUE),
      new MenuContext(&quot;CYAN&quot;,  Color.CYAN),
      new MenuContext(&quot;GREEN&quot;,   Color.GREEN),
      new MenuContext(&quot;MAGENTA&quot;, Color.MAGENTA),
      new MenuContext(&quot;ORANGE&quot;,  Color.ORANGE),
      new MenuContext(&quot;PINK&quot;,  Color.PINK),
      new MenuContext(&quot;RED&quot;,   Color.RED),
      new MenuContext(&quot;YELLOW&quot;,  Color.YELLOW));
  }
  @Override public void actionPerformed(ActionEvent e) {
    System.out.println(&quot;actionPerformed&quot;);
    if (holdTimer.isRunning()) {
      ButtonModel model = bg.getSelection();
      if (model != null) {
        System.out.println(model.getActionCommand());
      }
      holdTimer.stop();
    }
  }
  @Override public void mousePressed(MouseEvent e) {
    System.out.println(&quot;mousePressed&quot;);
    Component c = e.getComponent();
    if (SwingUtilities.isLeftMouseButton(e) &amp;amp;&amp;amp; c.isEnabled()) {
      arrowButton = (AbstractButton) c;
      holdTimer.start();
    }
  }
  @Override public void mouseReleased(MouseEvent e) {
    holdTimer.stop();
  }
  @Override public void mouseExited(MouseEvent e) {
    if (holdTimer.isRunning()) {
      holdTimer.stop();
    }
  }
  @Override public void mouseEntered(MouseEvent e) { /* not needed */ }
  @Override public void mouseClicked(MouseEvent e) { /* not needed */ }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;1000&lt;/code&gt;ミリ秒ボタンを押したままにしておくと、&lt;code&gt;JRadioButton&lt;/code&gt;を配置した&lt;code&gt;JPopupMenu&lt;/code&gt;を表示します。普通にクリックした場合は、現在選択されている&lt;code&gt;JRadioButton&lt;/code&gt;の色をコンソールに出力するようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;のレイアウトを&lt;code&gt;pop.setLayout(new GridLayout(0,3));&lt;/code&gt;で変更し、三列に&lt;code&gt;JRadioButton&lt;/code&gt;を並べています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/pressandholdbutton</link>
                <guid>http://terai.xrea.jp/swing/pressandholdbutton</guid>
                <pubDate>2009-01-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>LookAndFeelの一覧を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;インストールされている&lt;code&gt;LookAndFeel&lt;/code&gt;の一覧を取得し、これらを切り替えるためのメニューバーを作成します。&lt;a href=&quot;https://swingset3.dev.java.net/&quot;&gt;SwingSet3&lt;/a&gt;からの引用です。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InstalledLookAndFeels&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOmfktdJI/AAAAAAAAAco/gBdSD5Qn9-Y/s800/InstalledLookAndFeels.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private ButtonGroup lookAndFeelRadioGroup;
private String lookAndFeel;
protected JMenu createLookAndFeelMenu() {
  JMenu menu = new JMenu(&quot;LookAndFeel&quot;);
  lookAndFeel = UIManager.getLookAndFeel().getClass().getName();
  lookAndFeelRadioGroup = new ButtonGroup();
  for(UIManager.LookAndFeelInfo lafInfo: UIManager.getInstalledLookAndFeels()) {
    menu.add(createLookAndFeelItem(lafInfo.getName(), lafInfo.getClassName()));
  }
  return menu;
}
protected JRadioButtonMenuItem createLookAndFeelItem(String lafName, String lafClassName) {
  JRadioButtonMenuItem lafItem = new JRadioButtonMenuItem();
  lafItem.setSelected(lafClassName.equals(lookAndFeel));
  lafItem.setHideActionText(true);
  lafItem.setAction(new AbstractAction() {
    @Override public void actionPerformed(ActionEvent e) {
      ButtonModel m = lookAndFeelRadioGroup.getSelection();
      try{
        setLookAndFeel(m.getActionCommand());
      }catch(Exception ex) {
        ex.printStackTrace();
      }
    }
  });
  lafItem.setText(lafName);
  lafItem.setActionCommand(lafClassName);
  lookAndFeelRadioGroup.add(lafItem);
  return lafItem;
}
public void setLookAndFeel(String lookAndFeel) throws ClassNotFoundException,
      InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
  String oldLookAndFeel = this.lookAndFeel;
  if(!oldLookAndFeel.equals(lookAndFeel)) {
    UIManager.setLookAndFeel(lookAndFeel);
    this.lookAndFeel = lookAndFeel;
    updateLookAndFeel();
    firePropertyChange(&quot;lookAndFeel&quot;, oldLookAndFeel, lookAndFeel);
  }
}
private void updateLookAndFeel() {
  for(Window window: Frame.getWindows()) {
    SwingUtilities.updateComponentTreeUI(window);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;UIManager.getInstalledLookAndFeels()&lt;/code&gt;メソッドを使用して&lt;code&gt;UIManager.LookAndFeelInfo&lt;/code&gt;のリストを取得しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://swingset3.dev.java.net/&quot;&gt;SwingSet3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LookAndFeel.html&quot;&gt;Look and Feelの変更&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、&lt;code&gt;SwingSet2&lt;/code&gt;からの引用です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/installedlookandfeels</link>
                <guid>http://terai.xrea.jp/swing/installedlookandfeels</guid>
                <pubDate>2009-01-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードを検索する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;を検索して、一致するアイテムを選択します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SearchBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTSs3gdysI/AAAAAAAAAjM/r_j-mrb83aU/s800/SearchBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void searchTree(JTree tree, TreePath path, String q) {
  TreeNode node = (TreeNode)path.getLastPathComponent();
  if(node==null) return;
  if(node.toString().equals(q))
    tree.addSelectionPath(path);
  if(!node.isLeaf() &amp;amp;&amp;amp; node.getChildCount()&amp;gt;=0) {
    Enumeration e = node.children();
    while(e.hasMoreElements())
      searchTree(tree, path.pathByAddingChild(e.nextElement()), q);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、選択された&lt;code&gt;JTree&lt;/code&gt;のノード以下に、検索文字列と一致するノードがあれば、&lt;code&gt;JTree#addSelectionPath(TreePath)&lt;/code&gt;メソッドで選択するようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357454&quot;&gt;Swing - how to get everything in DefaultTreeNode&lt;/a&gt;のAndre_Uhresさんの投稿のように、&lt;code&gt;TreeModel&lt;/code&gt;を使って検索する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//&amp;lt;blockquote cite=&quot;https://forums.oracle.com/thread/1357454&quot;&amp;gt;
public void traverse(JTree tree) {
  TreeModel model = tree.getModel();
  Object root;
  if(model != null) {
    root = model.getRoot();
    walk(model,root);
  }else{
    System.out.println(&quot;Tree is empty.&quot;);
  }
}
protected void walk(TreeModel model, Object o) {
  int cc = model.getChildCount(o);
  for(int i=0; i &amp;lt; cc; i++) {
    DefaultMutableTreeNode child = (DefaultMutableTreeNode) model.getChild(o, i);
    if(model.isLeaf(child)) {
      System.out.println(child);
    }else{
      System.out.println(child);
      walk(model, child);
    }
  }
}
//&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;以下は、&lt;code&gt;DefaultMutableTreeNode#depthFirstEnumeration()&lt;/code&gt;を使用して、&lt;code&gt;bananas&lt;/code&gt;を検索しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TraverseAllNodes.html&quot;&gt;JTreeのノードを走査する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TreeModel model = tree.getModel();
DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
Enumeration depth = root.depthFirstEnumeration();
while(depth.hasMoreElements()) {
  DefaultMutableTreeNode node = (DefaultMutableTreeNode)depth.nextElement();
  if(node!=null &amp;amp;&amp;amp; &quot;bananas&quot;.equals(node.toString())) {
    TreePath path = new TreePath(node.getPath());
    tree.setSelectionPath(path);
    tree.scrollPathToVisible(path);
    return;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExpandAllNodes.html&quot;&gt;JTreeのノードを展開・折り畳み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357454&quot;&gt;Swing - how to get everything in DefaultTreeNode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeNodeHighlightSearch.html&quot;&gt;JTreeで条件に一致するノードを検索しハイライト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TraverseAllNodes.html&quot;&gt;JTreeのノードを走査する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースを拝見させていただきましたが, 要素の挿入の箇所がさっぱりわかりません... -- &lt;a href=&quot;http://terai.xrea.jp/taji.html&quot;&gt;taji&lt;/a&gt; 2010-01-20 (水) 00:38:18&lt;/li&gt;
&lt;li&gt;途中で切れてしまい失礼しました. できればどこで挿入しているのか教えていただけませんか? -- &lt;a href=&quot;http://terai.xrea.jp/taji.html&quot;&gt;taji&lt;/a&gt; 2010-01-20 (水) 00:39:44

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;のデフォルトコンストラクタがサンプルモデルを持つ&lt;code&gt;JTree&lt;/code&gt;を返しているので、&lt;code&gt;%JAVA_HOME%\src.zip&lt;/code&gt;を展開して、&lt;code&gt;JTree()&lt;/code&gt;を見るのがよいと思います。そこからたどって行けば&lt;code&gt;protected static TreeModel getDefaultTreeModel()&lt;/code&gt;の中で、&lt;code&gt;TreeModel&lt;/code&gt;を作って要素(ノード)を挿入している様子が分かります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-20 (水) 11:15:33&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;/**
 * Creates and returns a sample &amp;lt;code&amp;gt;TreeModel&amp;lt;/code&amp;gt;.
 * Used primarily for beanbuilders to show something interesting.
 *
 * @return the default &amp;lt;code&amp;gt;TreeModel&amp;lt;/code&amp;gt;
 */
protected static TreeModel getDefaultTreeModel() {
    DefaultMutableTreeNode root = new DefaultMutableTreeNode(&quot;JTree&quot;);
    DefaultMutableTreeNode parent;

    parent = new DefaultMutableTreeNode(&quot;colors&quot;);
    root.add(parent);
    parent.add(new DefaultMutableTreeNode(&quot;blue&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;violet&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;red&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;yellow&quot;));

    parent = new DefaultMutableTreeNode(&quot;sports&quot;);
    root.add(parent);
    parent.add(new DefaultMutableTreeNode(&quot;basketball&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;soccer&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;football&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;hockey&quot;));

    parent = new DefaultMutableTreeNode(&quot;food&quot;);
    root.add(parent);
    parent.add(new DefaultMutableTreeNode(&quot;hot dogs&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;pizza&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;ravioli&quot;));
    parent.add(new DefaultMutableTreeNode(&quot;bananas&quot;));
    return new DefaultTreeModel(root);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree#getNextMatch(...)&lt;/code&gt;は、展開されているノードのみ検索する？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-11-18 (木) 01:40:07&lt;/li&gt;
&lt;li&gt;一致するノードが複数ある場合、ボタンクリックで選択状態がループするように変更しました(いつ修正したのかは不明...)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-09-15 (木) 21:32:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/searchbox</link>
                <guid>http://terai.xrea.jp/swing/searchbox</guid>
                <pubDate>2009-01-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JRadioButtonの文字色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JRadioButton&lt;/code&gt;の文字色やアイコンを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RadioButtonTextColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRa2rE0nI/AAAAAAAAAhI/A6NX-uUoYjM/s800/RadioButtonTextColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ColorRadioButton extends JRadioButton {
  private static final Color defaultColor  = Color.BLACK;
  private static final Color pressedColor  = Color.GREEN;
  private static final Color selectedColor = Color.RED;
  private static final Color rolloverColor = Color.BLUE;
  private static final int iconSize = 16;
  @Override protected void fireStateChanged() {
    ButtonModel model = getModel();
    if(!model.isEnabled()) {
      setForeground(Color.GRAY);
    }else if(model.isPressed() &amp;amp;&amp;amp; model.isArmed()) {
      setForeground(pressedColor);
    }else if(model.isSelected()) {
      setForeground(selectedColor);
    }else if(isRolloverEnabled() &amp;amp;&amp;amp; model.isRollover()) {
      setForeground(rolloverColor);
    }else{
      setForeground(defaultColor);
    }
    super.fireStateChanged();
  };
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JRadioButton&lt;/code&gt;が選択やロールオーバーした時の文字色を、マウスリスナーではなく、&lt;code&gt;fireStateChanged&lt;/code&gt;メソッドをオーバーライドして変更しています。&lt;/p&gt;

&lt;p&gt;アイコンは、&lt;code&gt;setPressedIcon&lt;/code&gt;、&lt;code&gt;setSelectedIcon&lt;/code&gt;、&lt;code&gt;setRolloverIcon&lt;/code&gt;メソッドなどが用意されているので、これを使用しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような、&lt;code&gt;ChangeListener&lt;/code&gt;を使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;radioButton.addChangeListener(new javax.swing.event.ChangeListener() {
  @Override public void stateChanged(javax.swing.event.ChangeEvent e) {
    ButtonModel model = radioButton.getModel();
    if(!model.isEnabled()) {
      radioButton.setForeground(Color.GRAY);
    }else if(model.isPressed() &amp;amp;&amp;amp; model.isArmed()) {
      radioButton.setForeground(pressedColor);
    }else if(model.isSelected()) {
      radioButton.setForeground(selectedColor);
    }else if(isRolloverEnabled() &amp;amp;&amp;amp; model.isRollover()) {
      radioButton.setForeground(rolloverColor);
    }else{
      radioButton.setForeground(defaultColor);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショットのタイトルボーダーが入れ替わっていたのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-06-03 (水) 21:27:13&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/radiobuttontextcolor</link>
                <guid>http://terai.xrea.jp/swing/radiobuttontextcolor</guid>
                <pubDate>2009-01-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにHyperlinkを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルの中に、&lt;code&gt;Hyperlink&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HyperlinkInTableCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOF06rk7I/AAAAAAAAAb0/31ZBya_beYk/s800/HyperlinkInTableCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class URLRenderer extends DefaultTableCellRenderer implements MouseListener, MouseMotionListener {
  private int row = -1;
  private int col = -1;
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
                         boolean isSelected, boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent(table, value, isSelected, false, row, column);
    if(!table.isEditing() &amp;amp;&amp;amp; this.row==row &amp;amp;&amp;amp; this.col==column) {
      setText(&quot;&amp;lt;html&amp;gt;&amp;lt;u&amp;gt;&amp;lt;font color=&#39;blue&#39;&amp;gt;&quot;+value.toString());
    }else if(hasFocus) {
      setText(&quot;&amp;lt;html&amp;gt;&amp;lt;font color=&#39;blue&#39;&amp;gt;&quot;+value.toString());
    }else{
      setText(value.toString());
    }
    return this;
  }
  @Override public void mouseMoved(MouseEvent e) {
    JTable table = (JTable)e.getSource();
    Point pt = e.getPoint();
    row = table.rowAtPoint(pt);
    col = table.columnAtPoint(pt);
    if(row&amp;lt;0 || col&amp;lt;0) {
      row = -1;
      col = -1;
    }
    table.repaint();
  }
  @Override public void mouseExited(MouseEvent e)  {
    JTable table = (JTable)e.getSource();
    row = -1;
    col = -1;
    table.repaint();
  }
  @Override public void mouseClicked(MouseEvent e) {
    JTable table = (JTable)e.getSource();
    Point pt = e.getPoint();
    int crow = table.rowAtPoint(pt);
    int ccol = table.columnAtPoint(pt);
    //if(table.convertColumnIndexToModel(ccol) == 2)
    if(table.getColumnClass(ccol).equals(URL.class)) {
      URL url = (URL)table.getValueAt(crow, ccol);
      System.out.println(url);
      try{
        Desktop.getDesktop().browse(url.toURI());
      }catch(Exception ex) {
        ex.printStackTrace();
      }
    }
  }
  @Override public void mouseDragged(MouseEvent e) {}
  @Override public void mouseEntered(MouseEvent e) {}
  @Override public void mousePressed(MouseEvent e) {}
  @Override public void mouseReleased(MouseEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;html&lt;/code&gt;タグを使って文字列を修飾するセルレンダラーを作成して使用しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;URLRenderer renderer = new URLRenderer();
table.setDefaultRenderer(URL.class, renderer);
table.addMouseListener(renderer);
table.addMouseMotionListener(renderer);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;del&gt;上記のサンプルでは、クリックしてもリンク先には接続せず、&lt;code&gt;System.out.println(table.getValueAt(crow, ccol));&lt;/code&gt;で文字列を表示しているだけです。&lt;/del&gt; &lt;code&gt;Java 6&lt;/code&gt;以上を対象にすることにしたので、&lt;code&gt;Desktop.getDesktop().browse()&lt;/code&gt;を使用するようにしました。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkLabel.html&quot;&gt;Hyperlinkを、JLabel、JButton、JEditorPaneで表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedHtmlLabel.html&quot;&gt;Htmlで修飾した文字列のクリップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URLRenderer&lt;/code&gt;のコンストラクタで&lt;code&gt;JTable&lt;/code&gt;にマウスリスナーを追加していたのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-06-25 (木) 12:05:13&lt;/li&gt;
&lt;li&gt;「解説」中のコードではコンストラクタに&lt;code&gt;table&lt;/code&gt;が渡されたままになっているようです。 -- &lt;a href=&quot;http://terai.xrea.jp/yosei.html&quot;&gt;yosei&lt;/a&gt; 2010-05-05 (Wed) 16:54:43

&lt;ul&gt;
&lt;li&gt;コメントありがとうございます。ご指摘のように修正し忘れていました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-05-06 (木) 17:04:59&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/hyperlinkintablecell</link>
                <guid>http://terai.xrea.jp/swing/hyperlinkintablecell</guid>
                <pubDate>2008-12-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのArrowButtonを隠す</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ArrowButton&lt;/code&gt;を隠して、&lt;code&gt;JComboBox&lt;/code&gt;の表示を&lt;code&gt;JLabel&lt;/code&gt;風にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HideComboArrowButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTN0Yp0GRI/AAAAAAAAAbY/WvXw5vm2_LI/s800/HideComboArrowButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPanel p = new JPanel(new BorderLayout(5, 5));
Object[] items = {&quot;JComboBox 11111:&quot;, &quot;JComboBox 222:&quot;, &quot;JComboBox 33:&quot;};

UIManager.put(&quot;ComboBox.squareButton&quot;, Boolean.FALSE);
JComboBox comboBox = new JComboBox(items);
comboBox.setUI(new BasicComboBoxUI() {
  @Override protected JButton createArrowButton() {
    JButton button = new JButton(); //super.createArrowButton();
    button.setBorder(BorderFactory.createEmptyBorder());
    button.setVisible(false);
    return button;
  }
});
comboBox.setOpaque(true);
comboBox.setBackground(p.getBackground());
comboBox.setBorder(BorderFactory.createEmptyBorder(0,2,0,2));
comboBox.setFocusable(false);

UIManager.put(&quot;ComboBox.squareButton&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のようにして、&lt;code&gt;JComboBox&lt;/code&gt;を&lt;code&gt;JLabel&lt;/code&gt;風に表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ComboBox.squareButton&amp;quot;, Boolean.FALSE);&lt;/code&gt;で、&lt;code&gt;ArrowButton&lt;/code&gt;の幅をそのまま使用するように変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#createArrowButton&lt;/code&gt;をオーバーライドして、&lt;code&gt;ArrowButton&lt;/code&gt;の代わりに幅高さ&lt;code&gt;0&lt;/code&gt;で&lt;code&gt;setVisible(false)&lt;/code&gt;なボタンを作成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;の背景色を親の&lt;code&gt;JPanel&lt;/code&gt;と同じにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;がフォーカスを取得しないようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1359216&quot;&gt;Swing - Hide JComboBox Arrow?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6337518&quot;&gt;Bug ID: 6337518 Null Arrow Button Throws Exception in BasicComboBoxUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/hidecomboarrowbutton</link>
                <guid>http://terai.xrea.jp/swing/hidecomboarrowbutton</guid>
                <pubDate>2008-12-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarをJSliderとして使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;を&lt;code&gt;JSlider&lt;/code&gt;の代わりとして使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollBarAsSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTSgYVysvI/AAAAAAAAAi4/5UjLktCUVb8/s800/ScrollBarAsSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int step   = 5;
int extent = 20;
int min    = 0;
int max    = extent*10; //200
int value  = 50;
final JScrollBar scrollbar = new JScrollBar(
            JScrollBar.HORIZONTAL, value, extent, min, max+extent);
scrollbar.setUnitIncrement(step);
scrollbar.getModel().addChangeListener(new ChangeListener(){
  @Override public void stateChanged(javax.swing.event.ChangeEvent e) {
    BoundedRangeModel m = (BoundedRangeModel)e.getSource();
    spinner.setValue(m.getValue());
  }
});
final JSpinner spinner = new JSpinner(
            new SpinnerNumberModel(value, min, max, step));
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JScrollBar&lt;/code&gt;を&lt;code&gt;JSlider&lt;/code&gt;として使用し、&lt;code&gt;JSpinner&lt;/code&gt;と連動させています。&lt;code&gt;JScrollBar&lt;/code&gt;に設定する最大値は、スクロールバーのノブ(&lt;code&gt;extent&lt;/code&gt;はノブの幅)の右ではなく左端になるように調整する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;このため、&lt;code&gt;JSpinner&lt;/code&gt;の最大値とは異なり、&lt;code&gt;max&lt;/code&gt;+&lt;code&gt;extent&lt;/code&gt;が&lt;code&gt;JScrollBar&lt;/code&gt;に設定する最大値となる&lt;/li&gt;
&lt;li&gt;垂直なら上端&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JScrollBar.html&quot;&gt;JScrollBar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollbarasslider</link>
                <guid>http://terai.xrea.jp/swing/scrollbarasslider</guid>
                <pubDate>2008-12-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GlassPaneで画像をLightbox風に表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GlassPane&lt;/code&gt;を使用して、&lt;code&gt;Lightbox&lt;/code&gt;風にアニメーションしながら画像を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LightboxLikeDisplay&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTPJaQROVI/AAAAAAAAAdg/MXDWfchqmso/s800/LightboxLikeDisplay.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LightboxGlassPane extends JComponent {
  private final ImageIcon image;
  private final AnimeIcon animatedIcon = new AnimeIcon();
  private float alpha = 0.0f;
  private int w = 0;
  private int h = 0;
  private Rectangle rect = new Rectangle();
  private javax.swing.Timer animator;
  public LightboxGlassPane() {
    setOpaque(false);
    super.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    image = new ImageIcon(getClass().getResource(&quot;test.png&quot;));
    addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent me) {
        setVisible(false);
      }
    });
  }
  @Override public void setVisible(boolean isVisible) {
    boolean oldVisible = isVisible();
    super.setVisible(isVisible);
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null &amp;amp;&amp;amp; isVisible()!=oldVisible) {
      rootPane.getLayeredPane().setVisible(!isVisible);
    }
    if(isVisible &amp;amp;&amp;amp; (animator==null || !animator.isRunning())) {
      w = 40;
      h = 40;
      alpha = 0.0f;
      animator = new javax.swing.Timer(10, new ActionListener() {
        @Override public void actionPerformed(ActionEvent e) {
          animatedIcon.next();
          repaint();
        }
      });
      animator.start();
    }else{
      if(animator!=null) animator.stop();
    }
    animatedIcon.setRunning(isVisible);
  }
  @Override public void paintComponent(Graphics g) {
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null) {
      rootPane.getLayeredPane().print(g);
    }
    super.paintComponent(g);
    Graphics2D g2d = (Graphics2D)g;

    if(h&amp;lt;image.getIconHeight()+5+5) {
      h += image.getIconHeight()/16;
    }else if(w&amp;lt;image.getIconWidth()+5+5) {
      h  = image.getIconHeight()+5+5;
      w += image.getIconWidth()/16;
    }else if(alpha&amp;lt;1.0) {
      w  = image.getIconWidth()+5+5;
      alpha = alpha + 0.1f;
    }else{
      animatedIcon.setRunning(false);
      animator.stop();
    }
    rect.setSize(w, h);
    Rectangle screen = getBounds();
    rect.setLocation(screen.x + screen.width/2  - rect.width/2,
             screen.y + screen.height/2 - rect.height/2);

    g2d.setColor(new Color(100,100,100,100));
    g2d.fill(screen);
    g2d.setColor(new Color(255,255,255,200));
    g2d.fill(rect);

    if(alpha&amp;gt;0) {
      if(alpha&amp;gt;1.0f) alpha = 1.0f;
      g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
      g2d.drawImage(image.getImage(), rect.x+5, rect.y+5,
              image.getIconWidth(),
              image.getIconHeight(), this);
    }else{
      animatedIcon.paintIcon(this, g2d,
                   screen.x + screen.width/2  - animatedIcon.getIconWidth()/2,
                   screen.y + screen.height/2 - animatedIcon.getIconHeight()/2);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFrame&lt;/code&gt;に&lt;code&gt;GlassPane&lt;/code&gt;を設定して、この&lt;code&gt;GlassPane&lt;/code&gt;の中央にインジケータ、高さ幅がアニメーションしながら拡大する矩形、画像を順番に表示しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GlassPane&lt;/code&gt;に自分を&lt;code&gt;setVisible(false)&lt;/code&gt;するマウスリスナーを追加しているので、任意の場所をクリックするとこの画像は非表示になります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.huddletogether.com/projects/lightbox2/&quot;&gt;Lightbox 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/lightboxlikedisplay</link>
                <guid>http://terai.xrea.jp/swing/lightboxlikedisplay</guid>
                <pubDate>2008-12-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SynthでJInternalFrameを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Synth&lt;/code&gt;を使った&lt;code&gt;LookAndFeel&lt;/code&gt;で、&lt;code&gt;JInternalFrame&lt;/code&gt;を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVvwg_IhI/AAAAAAAAAoI/wQpW8Msbo2Y/s800/TranslucentFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  for(UIManager.LookAndFeelInfo laf: UIManager.getInstalledLookAndFeels())
    if(&quot;Nimbus&quot;.equals(laf.getName())) {
      UIManager.setLookAndFeel(laf.getClassName());
      SynthLookAndFeel.setStyleFactory(
        new MySynthStyleFactory(SynthLookAndFeel.getStyleFactory()));
      break;
    }
  }
}catch(Exception e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MySynthStyleFactory extends SynthStyleFactory {
  private SynthStyleFactory wrappedFactory;
  public MySynthStyleFactory(SynthStyleFactory factory) {
    this.wrappedFactory = factory;
  }
  @Override public SynthStyle getStyle(JComponent c, Region id) {
    SynthStyle s = wrappedFactory.getStyle(c, id);
    //if(id==Region.INTERNAL_FRAME_TITLE_PANE||id==Region.INTERNAL_FRAME) {
    if(id==Region.INTERNAL_FRAME) {
      s = new TranslucentSynthSytle(s);
    }
    return s;
  }
}
class TranslucentSynthSytle extends SynthStyle {
  private final SynthStyle style;
  public TranslucentSynthSytle(SynthStyle s) {
    style = s;
  }
  @Override public SynthPainter getPainter(final SynthContext context) {
    return new SynthPainter() {
      @Override public void paintInternalFrameBackground(SynthContext context,
                           Graphics g, int x, int y, int w, int h) {
        g.setColor(new Color(100,200,100,100));
        g.fillRoundRect(x,y,w-1,h-1,15,15);
      }
    };
  }
  @Override public boolean isOpaque(SynthContext context) {
    if(context.getRegion()==Region.INTERNAL_FRAME) {
      return false;
    }else{
      return style.isOpaque(context);
    }
  }
  @Override public Color getColorForState(SynthContext context, ColorType type) {
    return null; //Color.RED;
  }
  @Override public Font getFontForState(SynthContext context) {
    return null; //new Font(Font.MONOSPACED, Font.ITALIC, 24);
  }
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;SynthStyle#paintInternalFrameBackground&lt;/code&gt;、&lt;code&gt;SynthStyle#isOpaque&lt;/code&gt;などのメソッドをオーバーライドして&lt;code&gt;JInternalFrame&lt;/code&gt;を半透明にします。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Synth&lt;/code&gt;を使った&lt;code&gt;LookAndFeel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;で追加された&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;や、&lt;code&gt;GTKLookAndFeel&lt;/code&gt;など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTVyfycduI/AAAAAAAAAoM/r6DySDZjSGA/s800/TranslucentFrame1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;警告:com.sun.java.swing.Painter は Sun が所有する API であり、今後のリリースで削除される可能性があります。&lt;/code&gt;といった警告が出ても良いなら、以下のように&lt;code&gt;UIDefaults#put&lt;/code&gt;で&lt;code&gt;Painter&lt;/code&gt;を設定する方法もあります(&lt;code&gt;JDK 1.7.0&lt;/code&gt;以上なら&lt;code&gt;javax.swing.Painter&lt;/code&gt;になるので、警告なしで使用可能)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jasperpotts.com/blog/2009/01/nimbus-the-new-face-of-swing-javaone-2008/&quot;&gt;Caffeine Induced Ramblings - Jasper Potts’s Blog  » Blog Archive   » Nimbus: The New Face of Swing - JavaOne 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.java.swing.plaf.nimbus.NimbusDefaults.java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import javax.swing.*;
import javax.swing.plaf.synth.*;
import com.sun.java.swing.Painter; // 1.6
//import javax.swing.Painter; // 1.7.0 b57
public class BackgroundPainterTest {
  private final JDesktopPane desktop = new JDesktopPane();
  public JComponent makeUI() {
    JPanel p1 = new JPanel();
    p1.setOpaque(false);
    JPanel p2 = new JPanel() {
      @Override public void paintComponent(Graphics g) {
        g.setColor(new Color(100,50,50,100));
        g.fillRect(0,0,getWidth(), getHeight());
      }
    };
    p2.setOpaque(false);
    UIDefaults d = new UIDefaults();
    d.put(&quot;InternalFrame[Enabled].backgroundPainter&quot;, new Painter() {
      @Override public void paint(Graphics2D g, Object o, int w, int h) {
        g.setColor(new Color(100,200,100,100));
        g.fillRoundRect(0,0,w-1,h-1,15,15);
      }
    });
    d.put(&quot;InternalFrame[Enabled+WindowFocused].backgroundPainter&quot;, new Painter() {
      @Override public void paint(Graphics2D g, Object o, int w, int h) {
        g.setColor(new Color(100,250,120,100));
        g.fillRoundRect(0,0,w-1,h-1,15,15);
      }
    });
    createFrame(p1, d, 0); createFrame(p2, d, 1);
    JPanel p = new JPanel(new BorderLayout());
    p.add(desktop);
    p.setPreferredSize(new Dimension(320, 240));
    return p;
  }
  protected JInternalFrame createFrame(JPanel panel, UIDefaults d, int idx) {
    MyInternalFrame frame = new MyInternalFrame();
    frame.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
    //frame.putClientProperty(&quot;Nimbus.Overrides.InheritDefaults&quot;, false);
    frame.setOpaque(false);
    if(panel!=null) {
      frame.setContentPane(panel);
      panel.add(new JLabel(&quot;label&quot;));
      panel.add(new JButton(&quot;button&quot;));
      frame.getRootPane().setOpaque(false);
    }
    desktop.add(frame);
    frame.setVisible(true);
    frame.setLocation(10+60*idx, 10+40*idx);
    desktop.getDesktopManager().activateFrame(frame);
    return frame;
  }
  static class MyInternalFrame extends JInternalFrame{
    public MyInternalFrame() {
      super(&quot;title&quot;, true, true, true, true);
      setSize(160, 100);
    }
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    try{
      for(UIManager.LookAndFeelInfo laf: UIManager.getInstalledLookAndFeels())
        if(&quot;Nimbus&quot;.equals(laf.getName())) UIManager.setLookAndFeel(laf.getClassName());
    }catch(Exception e) {
      e.printStackTrace();
    }
    JFrame frame = new JFrame();
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(new BackgroundPainterTest().makeUI());
    frame.pack();
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentFrame.html&quot;&gt;JInternalFrameを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6919629&quot;&gt;Bug ID: 6919629 Nimbus L&amp;amp;F Nimus.Overrides option leaks significant amounts of memory&lt;/a&gt;, &lt;a href=&quot;http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/042eb92f89ad&quot;&gt;jdk7/jdk7/jdk: changeset 2337:042eb92f89ad&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-05-24 (月) 15:27:28&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-swing-tips.blogspot.com&quot;&gt;blogger&lt;/a&gt;で、&lt;code&gt;JButton&lt;/code&gt;の周りに変な矩形が描画される場合があるとの指摘を頂いたので、&lt;code&gt;p2.setOpaque(false);&lt;/code&gt;を追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-08 (火) 04:05:50&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucentframe</link>
                <guid>http://terai.xrea.jp/swing/translucentframe</guid>
                <pubDate>2008-12-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行の高さを変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行の高さを変更して、マウスカーソルの下を魚眼レンズのように拡大します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FishEyeTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMw3Q5yMI/AAAAAAAAAZs/0O7lUunN9Rw/s800/FishEyeTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void mouseMoved(MouseEvent e) {
  int row = rowAtPoint(e.getPoint());
  if(prev_row==row) return;
  initRowHeigth(prev_height, row);
  prev_row = row;
}
public void initRowHeigth(int height, int ccRow) {
  int rd2      = (fishEyeRowList.size()-1)/2;
  int rowCount = getModel().getRowCount();
  int view_rc  = getViewableColoredRowCount(ccRow);
  int view_h   = 0; for(int i=0;i&amp;lt;view_rc;i++) view_h += fishEyeRowHeightList.get(i);
  int rest_rc  = rowCount - view_rc;
  int rest_h   = height - view_h;
  int rest_rh  = rest_h/rest_rc; rest_rh = rest_rh&amp;gt;0?rest_rh:1;
  int a        = rest_h - rest_rh*rest_rc;
  int index    = -1;
  for(int i=-rd2;i&amp;lt;rowCount;i++) {
    int crh;
    if(ccRow-rd2&amp;lt;=i &amp;amp;&amp;amp; i&amp;lt;=ccRow+rd2) {
      index++;
      if(i&amp;lt;0) continue;
      crh = fishEyeRowHeightList.get(index);
    }else{
      if(i&amp;lt;0) continue;
      crh = rest_rh+(a&amp;gt;0?1:0);
      a = a-1;
    }
    setRowHeight(i, crh);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、マウスカーソルの下の行の高さを、&lt;code&gt;JTable#setRowHeight()&lt;/code&gt;メソッドを使って変更することで、魚眼レンズのように拡大するようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注意

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setFillsViewportHeight(true);&lt;/code&gt;を使用しているので、&lt;code&gt;JDK 1.6.0&lt;/code&gt;以上が必要です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;自体の高さが変化することは想定していません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.umd.edu/hcil/fisheyemenu/&quot;&gt;Fisheye Menus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショット更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-25 (木) 16:12:54&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fisheyetable</link>
                <guid>http://terai.xrea.jp/swing/fisheyetable</guid>
                <pubDate>2008-11-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComponentの形状を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;コンポーネントの形状を画像の不透明領域に合わせて変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MoveNonRectangularImage&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQKdiDk4I/AAAAAAAAAfI/tb322r8ngL0/s800/MoveNonRectangularImage.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(dukeIcon) {
  @Override public boolean contains(int x, int y) {
    return super.contains(x, y) &amp;amp;&amp;amp; ((image.getRGB(x, y) &amp;gt;&amp;gt; 24) &amp;amp; 0xff) &amp;gt; 0;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel#contains(int, int)&lt;/code&gt;メソッドをオーバーライドし、与えられた座標が画像の透明部分に当たる場合は、&lt;code&gt;false&lt;/code&gt;を返すように設定&lt;/li&gt;
&lt;li&gt;画像の透明部分は&lt;code&gt;JLabel&lt;/code&gt;に含まれないことになり、&lt;code&gt;JLabel&lt;/code&gt;に設定した&lt;code&gt;MouseListener&lt;/code&gt;などに反応しない&lt;/li&gt;
&lt;li&gt;非矩形画像の不透明部分だけマウスでドラッグ可能になる&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://duke.kenai.com/iconSized/index.html&quot;&gt;Duke Images: iconSized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundButton.html&quot;&gt;JButtonの形を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundImageButton.html&quot;&gt;ImageIconの形でJButtonを作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/movenonrectangularimage</link>
                <guid>http://terai.xrea.jp/swing/movenonrectangularimage</guid>
                <pubDate>2008-11-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの列固定とソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;列固定した&lt;code&gt;JTable&lt;/code&gt;で、&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;TableRowSorter&lt;/code&gt;を使った行ソートを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FixedColumnTableSorting&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMzes1hqI/AAAAAAAAAZw/-m-PZSFzYAk/s800/FixedColumnTableSorting.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;fixedTable = new JTable(model);
table      = new JTable(model);
fixedTable.setSelectionModel(table.getSelectionModel());
fixedTable.setUpdateSelectionOnSort(false);
//table.setUpdateSelectionOnSort(true);

for(int i=model.getColumnCount()-1;i&amp;gt;=0;i--) {
  if(i&amp;lt;2) {
    table.removeColumn(table.getColumnModel().getColumn(i));
    fixedTable.getColumnModel().getColumn(i).setResizable(false);
  }else{
    fixedTable.removeColumn(fixedTable.getColumnModel().getColumn(i));
  }
}

fixedTable.setRowSorter(sorter);
fixedTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
fixedTable.putClientProperty(&quot;terminateEditOnFocusLost&quot;, Boolean.TRUE);

table.setRowSorter(sorter);
table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
table.putClientProperty(&quot;terminateEditOnFocusLost&quot;, Boolean.TRUE);

final JScrollPane scroll = new JScrollPane(table);
JViewport viewport = new JViewport();
viewport.setView(fixedTable);
viewport.setPreferredSize(fixedTable.getPreferredSize());
scroll.setRowHeader(viewport);
//scroll.setRowHeaderView(fixedTable);
//fixedTable.setPreferredScrollableViewportSize(fixedTable.getPreferredSize());
scroll.setCorner(JScrollPane.UPPER_LEFT_CORNER, fixedTable.getTableHeader());
scroll.getViewport().setBackground(Color.WHITE);
viewport.setBackground(Color.WHITE);
//&amp;lt;blockquote cite=&quot;http://tips4java.wordpress.com/2008/11/05/fixed-column-table/&quot;&amp;gt;
//@auther Rob Camick
//@title Fixed Column Table ≪ Java Tips Weblog
scroll.getRowHeader().addChangeListener(new ChangeListener() {
  @Override public void stateChanged(ChangeEvent e) {
    JViewport viewport = (JViewport) e.getSource();
    scroll.getVerticalScrollBar().setValue(viewport.getViewPosition().y);
  }
});
//&amp;lt;/blockquote&amp;gt;
add(scroll);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;左の固定テーブル(&lt;code&gt;fixedTable&lt;/code&gt;)と、右のテーブル(&lt;code&gt;table&lt;/code&gt;)に同じ&lt;code&gt;RowSorter&lt;/code&gt;を設定することで、列固定表でもソートできるようにしています。
ただし、上記のサンプルでは、ソート中に行の追加を行うと例外が発生するので、追加の前に&lt;code&gt;sorter.setSortKeys(null);&lt;/code&gt;で&lt;code&gt;SortKeys&lt;/code&gt;をクリアしています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;add(new JButton(new AbstractAction(&quot;add&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    //List&amp;lt;? extends RowSorter.SortKey&amp;gt; keys = sorter.getSortKeys();
    sorter.setSortKeys(null);
    for(int i=0;i&amp;lt;100;i++) {
      model.addRow(new Object[] {i, i+1, &quot;A&quot;+i, &quot;B&quot;+i});
    }
    //sorter.setSortKeys(keys);
  }
}), BorderLayout.SOUTH);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;del&gt;行を追加したとき、うまく描画されない場合があるので、以下のような&lt;code&gt;JPanel&lt;/code&gt;をラッパーとして使用しています。&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;以下を間違えてしていたため、描画がおかしくなっていた。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#setRowHeaderView(Component)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#setRowHeader(JViewport)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;固定列でキーボードなどによるスクロールに対応するために以下のような&lt;code&gt;ChangeListener&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考:&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/05/fixed-column-table/&quot;&gt;Fixed Column Table ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scroll.getRowHeader().addChangeListener(new ChangeListener() {
  @Override public void stateChanged(ChangeEvent e) {
    JViewport viewport = (JViewport) e.getSource();
    scroll.getVerticalScrollBar().setValue(viewport.getViewPosition().y);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/search?q=FixedColumnExample.java&quot;&gt;FixedColumnExample.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/05/fixed-column-table/&quot;&gt;Fixed Column Table ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーによるフォーカスの移動は…、まぁいいかな。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-10 (月) 14:26:25&lt;/li&gt;
&lt;li&gt;固定列は、数字でソートするように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-10 (月) 15:27:19&lt;/li&gt;
&lt;li&gt;どちらか片方の&lt;code&gt;JTable&lt;/code&gt;を &lt;code&gt;setUpdateSelectionOnSort(false);&lt;/code&gt;としてソート後、選択状態がおかしくならないように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-10-23 (土) 03:13:02&lt;/li&gt;
&lt;li&gt;下記サイトは別の手法で列を固定しています。ご参考まで。&lt;a href=&quot;http://weblogs.java.net/blog/elevy/archive/2009/01/freezable_jtabl.html&quot;&gt;Freezable JTables (are they extreme?) | Java.net&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/panda.html&quot;&gt;panda&lt;/a&gt; 2010-12-22 (水) 15:30:06

&lt;ul&gt;
&lt;li&gt;情報どうもです。ポップアップで固定する列を決めると、固定列の右が水平スクロールで移動できるのですね。最初、固定の確認でヘッダ列をリサイズしてたので迷いました(^^;。固定中は、&lt;code&gt;table.getTableHeader().setResizingAllowed(false); table.getTableHeader().setReorderingAllowed(false);&lt;/code&gt;とかで、列のリサイズ、移動を禁止したほうがいいかも。でも、ソートや行選択などが簡単にできるのは便利ですね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-12-22 (水) 17:32:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fixedcolumntablesorting</link>
                <guid>http://terai.xrea.jp/swing/fixedcolumntablesorting</guid>
                <pubDate>2008-11-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのRowFilterを一旦解除してソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;RowFilter&lt;/code&gt;を一旦解除してソートし、再びフィルタを設定することで表示される行を更新します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ResetRowFilter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTRuQZLwOI/AAAAAAAAAho/ovjovr-5nuI/s800/ResetRowFilter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final RowFilter&amp;lt;TableModel, Integer&amp;gt; filter = new RowFilter&amp;lt;TableModel, Integer&amp;gt;() {
  @Override public boolean include(Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
    int vidx = table.convertRowIndexToView(entry.getIdentifier());
    return vidx&amp;lt;USER_SPECIFIED_NUMBER_OF_ROWS;
  }
};
final TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model) {
  @Override public void toggleSortOrder(int column) {
    if(check.isSelected()) {
      RowFilter&amp;lt;? super TableModel, ? super Integer&amp;gt; f = getRowFilter();
      setRowFilter(null);
      super.toggleSortOrder(column);
      setRowFilter(f);
    }else{
      super.toggleSortOrder(column);
    }
  }
};
table.setRowSorter(sorter);
sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(1, SortOrder.DESCENDING)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、☑ &lt;code&gt;viewRowIndex&amp;lt;5&lt;/code&gt;をチェックすると、ソートされていても表示上の&lt;code&gt;0&lt;/code&gt;から&lt;code&gt;4&lt;/code&gt;行目までの&lt;code&gt;5&lt;/code&gt;行のみ表示されるフィルタがかかります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Costom Sorting&lt;/code&gt;チェック無し

&lt;ul&gt;
&lt;li&gt;☑ &lt;code&gt;viewRowIndex&amp;lt;5&lt;/code&gt;のフィルタで&lt;code&gt;AA-ee&lt;/code&gt;が表示されている場合、&lt;code&gt;String&lt;/code&gt;列で昇順から降順にソートすると&lt;code&gt;ee-AA&lt;/code&gt;となる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Costom Sorting&lt;/code&gt; チェック有り

&lt;ul&gt;
&lt;li&gt;☑ &lt;code&gt;viewRowIndex&amp;lt;5&lt;/code&gt;のフィルタで&lt;code&gt;AA-ee&lt;/code&gt;が表示されている場合、&lt;code&gt;String&lt;/code&gt;列で昇順から降順にソートすると&lt;code&gt;OO-KK&lt;/code&gt;となる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toggleSortOrder&lt;/code&gt;メソッドをオーバーライドして、一旦&lt;code&gt;RowFilter&lt;/code&gt;を解除(&lt;code&gt;setRowFilter(null)&lt;/code&gt;)してから昇順から降順にソート&lt;code&gt;OO-KK-AA&lt;/code&gt;、その後再び&lt;code&gt;RowFilter&lt;/code&gt;を設定するので&lt;code&gt;OO-KK&lt;/code&gt;が表示される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下は、&lt;code&gt;toggleSortOrder&lt;/code&gt;メソッドをオーバーライドし、すべての行が変更されている可能性があることをリスナーに通知してから、もう一度ソートのやり直しを行う方法です。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model) {
  @Override public void toggleSortOrder(int column) {
    super.toggleSortOrder(column);
    if(check.isSelected()) {
      model.fireTableDataChanged();
      //??? allRowsChanged();
      //modelRowCount = getModelWrapper().getRowCount();
      sort();
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6301297&quot;&gt;Specification for the javax.swing.DefaultRowSorter.setSortsOnUpdates/rowsUpdated method is not clear&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;もっと簡単な方法がありそう・・・。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-03 (月) 16:35:24&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/resetrowfilter</link>
                <guid>http://terai.xrea.jp/swing/resetrowfilter</guid>
                <pubDate>2008-11-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>CardLayoutを使ってJTabbedPane風のコンポーネントを作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CardLayout&lt;/code&gt;と&lt;code&gt;JRadioButton&lt;/code&gt;や&lt;code&gt;JTableHeader&lt;/code&gt;を組み合わせて&lt;code&gt;JTabbedPane&lt;/code&gt;風のコンポーネントを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CardLayoutTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTIbe7vt7I/AAAAAAAAASw/SGFMcgCN_r4/s800/CardLayoutTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CardLayoutTabbedPane extends JPanel {
  protected final CardLayout cardLayout = new CardLayout();
  protected final JPanel tabPanel = new JPanel(new GridLayout(1, 0, 0, 0));
  protected final JPanel wrapPanel = new JPanel(new BorderLayout(0, 0));
  protected final JPanel contentsPanel = new JPanel(cardLayout);
  protected final ButtonGroup bg = new ButtonGroup();
  public CardLayoutTabbedPane() {
    super(new BorderLayout());
    int left  = 1;
    int right = 3;
    tabPanel.setBorder(BorderFactory.createEmptyBorder(1,left,0,right));
    contentsPanel.setBorder(BorderFactory.createEmptyBorder(4,left,2,right));
    wrapPanel.add(tabPanel);
    wrapPanel.add(new JLabel(&quot;test:&quot;), BorderLayout.WEST);
    add(wrapPanel, BorderLayout.NORTH);
    add(contentsPanel);
  }
  public void addTab(final String title, final Component comp) {
    JRadioButton b = new TabButton(new AbstractAction(title) {
      @Override public void actionPerformed(ActionEvent e) {
        cardLayout.show(contentsPanel, title);
      }
    });
    tabPanel.add(b);
    bg.add(b);
    b.setSelected(true);
    contentsPanel.add(comp, title);
    cardLayout.show(contentsPanel, title);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CardLayout&lt;/code&gt;で&lt;code&gt;JTabbedPane&lt;/code&gt;風のコンポーネントを作成すると、タブエリアのレイアウトをネストしてコンポーネントの追加したり、レイアウトマネージャーを変更することで、タブの配置を変更することが簡単になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CardLayout&lt;/code&gt;+&lt;code&gt;JRadioButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;上記のサンプルでは、&lt;code&gt;JRadioButton&lt;/code&gt;を&lt;code&gt;GridLayout&lt;/code&gt;で、均等なサイズになるように並べています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UI&lt;/code&gt;を変更して、チェックは非表示にしています。&lt;/li&gt;
&lt;li&gt;マウスでタブを押した時ではなく、 &lt;del&gt;(&lt;code&gt;Opera&lt;/code&gt;風に)&lt;/del&gt; 放した時に切り替わります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CardLayout&lt;/code&gt;+&lt;code&gt;JTableHeader&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;空の&lt;code&gt;JTable&lt;/code&gt;を作成して&lt;code&gt;JTableHeader&lt;/code&gt;を取り出して利用しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;のドラッグ＆ドロップによる入れ替えや、ヘッダ(タブ)幅のリサイズが利用できます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTabbedPane.html&quot;&gt;JTabbedPaneのタブをドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NewTabButton.html&quot;&gt;TabbedPane風のタブ配置をレイアウトマネージャーで変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CloseButton&lt;/code&gt;(ダミー)を追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-29 (水) 18:14:02&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/cardlayouttabbedpane</link>
                <guid>http://terai.xrea.jp/swing/cardlayouttabbedpane</guid>
                <pubDate>2008-10-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserのボタンテキストを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;のボタンテキストを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ApproveButtonText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTHw6_sLrI/AAAAAAAAARs/5fsN5G2p15U/s800/ApproveButtonText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//UIManager.put(&quot;FileChooser.saveButtonText&quot;,   &quot;保存(S)&quot;);
//UIManager.put(&quot;FileChooser.openButtonText&quot;,   &quot;開く(O)&quot;);
UIManager.put(&quot;FileChooser.cancelButtonText&quot;, &quot;キャンセル&quot;);

JFileChooser fileChooser = new JFileChooser();
//fileChooser.setApproveButtonText(&quot;開く(O)&quot;);
//fileChooser.setApproveButtonMnemonic(&#39;O&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、日本語の&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;に合わせて&lt;code&gt;JFileChooser&lt;/code&gt;の&lt;code&gt;ApproveButton&lt;/code&gt;やキャンセルボタンのテキストを以下のように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;OpenDialog&lt;/code&gt;のデフォルトでは、ファイルリストでフォルダが選択されていると「開く(O)」、ファイルが選択されていると「開く」で切り替わるとボタンサイズが変化してしまうため、「開く(O)」に揃える&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;SaveDialog&lt;/code&gt;のデフォルトでは、ファイルリストでフォルダが選択されていると「開く(O)」、ファイルが選択されていると「保存」なので、「保存(S)」に揃える&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CancelButton&lt;/code&gt;のデフォルトは、「取消し」で&lt;code&gt;SaveDialog&lt;/code&gt;のフォルダ・ファイルの選択が切り替わるとボタンサイズが変化するので、二文字分長い「キャンセル」に変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java 1.6.0_12&lt;/code&gt;以降、デフォルトでは&lt;code&gt;Mnemonic&lt;/code&gt;の表示がなくなっているようです(もしかしてバグだった？)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-09 (金) 20:01:14

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5045878&quot;&gt;Bug ID: 5045878 &amp;#91;ja&amp;#93; extra mnemonic characters on control buttons in JFileChooser&lt;/a&gt; でも、&lt;code&gt;1.6.0&lt;/code&gt;は関係なさそう…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-09 (金) 20:16:41&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6u18&lt;/code&gt;で復活:&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6785462&quot;&gt;Bug ID: 6785462 Missing &amp;quot;(O)&amp;quot; in JFileChooser Open button in Windows LAF&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-14 (月) 02:28:39&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6u27&lt;/code&gt;で、日本語表示の場合などで&lt;code&gt;Mnemonic&lt;/code&gt;の表示(「開く(O)」の(O)など)が無くなったみたいです: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7021445&quot;&gt;Bug ID: 7021445 Localization needed on resource string for FileChooser Look and Feel code&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-08-22 (月) 20:23:48

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.7.0&lt;/code&gt;は、「開く(O)」のまま。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-08-22 (月) 20:48:03&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/approvebuttontext</link>
                <guid>http://terai.xrea.jp/swing/approvebuttontext</guid>
                <pubDate>2008-10-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのアイテムをラバーバンドで複数選択、ドラッグ＆ドロップで並べ替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のアイテムを、ラバーバンドで複数選択、ドラッグ＆ドロップで並べ替え可能にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragSelectDropReordering&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTL3XY_VqI/AAAAAAAAAYQ/RFVaD4w5C9w/s800/DragSelectDropReordering.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list = new JList(model);
list.setLayoutOrientation(JList.HORIZONTAL_WRAP);
list.setVisibleRowCount(0);
list.setFixedCellWidth(62);
list.setFixedCellHeight(62);
list.setCellRenderer(new IconListCellRenderer());
RubberBandingListener rbl = new RubberBandingListener();
list.addMouseMotionListener(rbl);
list.addMouseListener(rbl);
list.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
list.setTransferHandler(new ListItemTransferHandler());
list.setDropMode(DropMode.INSERT);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、&lt;a href=&quot;http://terai.xrea.jp/Swing/RubberBanding.html&quot;&gt;JListのアイテムを範囲指定で選択&lt;/a&gt;と&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;を使って、ラバーバンドによるアイテムの選択、ドラッグ＆ドロップでの並べ替えができるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: &lt;code&gt;javax.swing.TransferHandler.TransferSupport&lt;/code&gt;などを使用しているので、&lt;code&gt;JDK 1.6.0&lt;/code&gt;以上が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RubberBanding.html&quot;&gt;JListのアイテムを範囲指定で選択&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Java勉強中の初心者です。コードの質問したいのですが、文字数がオーバします・・・・・ -- &lt;a href=&quot;http://terai.xrea.jp/java%E5%8B%89%E5%BC%B7%E4%B8%AD%E3%81%AE%E5%88%9D%E5%BF%83%E8%80%85.html&quot;&gt;java勉強中の初心者&lt;/a&gt; 2013-04-23 (火) 11:08:46

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;一番上にある「このページを編集する」から、制限無しで編集可能です。&lt;/del&gt; スパムが鬱陶しいので編集禁止にしました(2014-05-16)。コードだけどこか別の場所(gist.github.comなど)に張り込んでリンクするのもいいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-04-23 (火) 12:15:08&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragselectdropreordering</link>
                <guid>http://terai.xrea.jp/swing/dragselectdropreordering</guid>
                <pubDate>2008-10-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxなどが無効な状態での文字色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;や&lt;code&gt;JComboBox&lt;/code&gt;などのコンポーネントが無効な状態になった場合の文字色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisabledTextColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLDPDIq4I/AAAAAAAAAW8/jt2A5D74G04/s800/DisabledTextColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;CheckBox.disabledText&quot;, Color.RED);
JCheckBox cbx1 = new JCheckBox(&quot;default&quot;, true);
JCheckBox cbx2 = new JCheckBox(&quot;&amp;lt;html&amp;gt;html tag&amp;lt;/html&amp;gt;&quot;, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;CheckBox.disabledText&amp;quot;, Color.RED)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;でのみ？、反映される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JCheckBox&lt;/code&gt; + &lt;code&gt;html&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;タグを使った場合、&lt;code&gt;setEnable&lt;/code&gt;にかかわらず、文字色は変更不可(&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4740519&quot;&gt;Bug ID: 4740519 HTML JLabel not greyed out on setEnabled(false)&lt;/a&gt;)を利用

&lt;ul&gt;
&lt;li&gt;参考:&lt;a href=&quot;https://forums.oracle.com/thread/1359798&quot;&gt;Swing - How to disable a JCheckBox and leave the text the original color?&lt;/a&gt;のMichael_Dunn さんの投稿&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHtmlLabel.html&quot;&gt;Htmlを使ったJLabelとJEditorPaneの無効化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;ComboBox.disabledForeground&amp;quot;, Color.GREEN);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt; + &lt;code&gt;html&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;レンダラーで文字色を変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;(&lt;code&gt;Editable&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EditorComponent&lt;/code&gt;を取得して、&lt;code&gt;editor.setDisabledTextColor(Color.PINK);&lt;/code&gt;を設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;Label.disabledForeground&amp;quot;, Color.ORANGE);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;Button.disabledText&amp;quot;, Color.YELLOW)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;でのみ？、反映される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLFT1HGFI/AAAAAAAAAXA/W5L-yIFc61E/s800/DisabledTextColor1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disabledtextcolor</link>
                <guid>http://terai.xrea.jp/swing/disabledtextcolor</guid>
                <pubDate>2008-10-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のアイテムを複数選択し、ドラッグ＆ドロップで並べ替えを可能にする&lt;code&gt;TransferHandler&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDReorderList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTLeSCyHuI/AAAAAAAAAXo/v2OLiSPdgEY/s800/DnDReorderList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ListItemTransferHandler extends TransferHandler {
  private final DataFlavor localObjectFlavor;
  private Object[] transferedObjects = null;
  public ListItemTransferHandler() {
    localObjectFlavor = new ActivationDataFlavor(
      Object[].class, DataFlavor.javaJVMLocalObjectMimeType, &quot;Array of items&quot;);
  }
  @Override protected Transferable createTransferable(JComponent c) {
    JList list = (JList) c;
    indices = list.getSelectedIndices();
    transferedObjects = list.getSelectedValues();
    return new DataHandler(transferedObjects, localObjectFlavor.getMimeType());
  }
  @Override public boolean canImport(TransferSupport info) {
    if (!info.isDrop() || !info.isDataFlavorSupported(localObjectFlavor)) {
      return false;
    }
    return true;
  }
  @Override public int getSourceActions(JComponent c) {
    return TransferHandler.MOVE; //TransferHandler.COPY_OR_MOVE;
  }
  @Override public boolean importData(TransferSupport info) {
    if (!canImport(info)) {
      return false;
    }
    JList target = (JList)info.getComponent();
    JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
    DefaultListModel listModel = (DefaultListModel)target.getModel();
    int index = dl.getIndex();
    //boolean insert = dl.isInsert();
    int max = listModel.getSize();
    if(index&amp;lt;0 || index&amp;gt;max) {
      index = max;
    }
    addIndex = index;

    try {
      Object[] values = (Object[])info.getTransferable().getTransferData(localObjectFlavor);
      addCount = values.length;
      for(int i=0;i&amp;lt;values.length;i++) {
        int idx = index++;
        listModel.add(idx, values[i]);
        target.addSelectionInterval(idx, idx);
      }
      return true;
    }catch(UnsupportedFlavorException ufe) {
      ufe.printStackTrace();
    }catch(java.io.IOException ioe) {
      ioe.printStackTrace();
    }
    return false;
  }
  @Override protected void exportDone(JComponent c, Transferable data, int action) {
    cleanup(c, action == TransferHandler.MOVE);
  }
  private void cleanup(JComponent c, boolean remove) {
    if(remove &amp;amp;&amp;amp; indices != null) {
      JList source = (JList)c;
      DefaultListModel model  = (DefaultListModel)source.getModel();
      if(addCount &amp;gt; 0) {
        for(int i=0;i&amp;lt;indices.length;i++) {
          if(indices[i]&amp;gt;=addIndex) {
            indices[i] += addCount;
          }
        }
      }
      for(int i=indices.length-1;i&amp;gt;=0;i--) {
        model.remove(indices[i]);
      }
    }
    indices  = null;
    addCount = 0;
    addIndex = -1;
  }
  private int[] indices = null;
  private int addIndex  = -1; //Location where items were added
  private int addCount  = 0;  //Number of items added.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルの&lt;code&gt;TransferHandler&lt;/code&gt;は、主に&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/index.html#BasicDnD&quot;&gt;Drag and Drop and Data Transfer: Examples (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Drag and Drop and Data Transfer)&lt;/a&gt;の&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/DropDemoProject/src/dnd/ListTransferHandler.java&quot;&gt;ListTransferHandler.java&lt;/a&gt;を参考にして作成しています。ただし、この&lt;code&gt;ListTransferHandler.java&lt;/code&gt;は項目を複数選択して、&lt;code&gt;JList&lt;/code&gt;内での並べ替えは想定していない？(もしくはバグ)ようなので、&lt;code&gt;importData(...)&lt;/code&gt;メソッドや、&lt;code&gt;cleanup()&lt;/code&gt;メソッドをすこし変更しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JList list = new JList(listModel);
list.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
list.setTransferHandler(new ListItemTransferHandler());
list.setDropMode(DropMode.INSERT);
list.setDragEnabled(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;importData&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;使用されていない？&lt;code&gt;importString(...)&lt;/code&gt;の内容をこちらに移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cleanup&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;例えば、項目&lt;code&gt;0&lt;/code&gt;,&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;2&lt;/code&gt;を複数選択して、&lt;code&gt;1&lt;/code&gt;と&lt;code&gt;2&lt;/code&gt;の間にドロップすると、&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;2&lt;/code&gt;,&lt;code&gt;2&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;for(int i=0;i&amp;lt;indices.length;i++) {
  //if(indices[i]&amp;gt;addIndex) {
  if(indices[i]&amp;gt;=addIndex) {
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDList.html&quot;&gt;JListの項目をドラッグ＆ドロップ&lt;/a&gt;とは異なり、複数アイテムを選択して&lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;による移動が可能になっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/index.html#BasicDnD&quot;&gt;Drag and Drop and Data Transfer: Examples (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Drag and Drop and Data Transfer)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/DropDemoProject/src/dnd/ListTransferHandler.java&quot;&gt;ListTransferHandler.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDList.html&quot;&gt;JListの項目をドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragSelectDropReordering.html&quot;&gt;JListのアイテムをラバーバンドで複数選択、ドラッグ＆ドロップで並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;複数選択して選択されたアイテムのインデックスに移動した場合、複写されるバグ？を修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-10 (金) 21:44:34&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndreorderlist</link>
                <guid>http://terai.xrea.jp/swing/dndreorderlist</guid>
                <pubDate>2008-09-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>CellEditorをJSpinnerにして日付を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;で、日付を表示する列のセルエディタを&lt;code&gt;JSpinner&lt;/code&gt;にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DateCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTKdTsjXPI/AAAAAAAAAWA/vtjdEFUkZA4/s800/DateCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SpinnerCellEditor extends JSpinner implements TableCellEditor {
  private final JSpinner.DateEditor editor;
  public SpinnerCellEditor() {
    super(new SpinnerDateModel());
    setEditor(editor = new JSpinner.DateEditor(this, &quot;yyyy/MM/dd&quot;));
    setArrowButtonEnabled(false);
    editor.getTextField().setHorizontalAlignment(JFormattedTextField.LEFT);

    addFocusListener(new FocusAdapter() {
      @Override public void focusGained(FocusEvent e) {
        //System.out.println(&quot;spinner&quot;);
        editor.getTextField().requestFocusInWindow();
      }
    });
    editor.getTextField().addFocusListener(new FocusAdapter() {
      @Override public void focusLost(FocusEvent e) {
        setArrowButtonEnabled(false);
      }
      @Override public void focusGained(FocusEvent e) {
        //System.out.println(&quot;getTextField&quot;);
        setArrowButtonEnabled(true);
        EventQueue.invokeLater(new Runnable() {
          @Override public void run() {
            editor.getTextField().setCaretPosition(8);
            editor.getTextField().setSelectionStart(8);
            editor.getTextField().setSelectionEnd(10);
          }
        });
      }
    });
    setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
  }
  private void setArrowButtonEnabled(boolean flag) {
    for(Component c: getComponents()) {
      if(c instanceof JButton) {
        ((JButton)c).setEnabled(flag);
      }
    }
  }
  @Override public Component getTableCellEditorComponent(JTable table,
        Object value, boolean isSelected, int row, int column) {
    setValue(value);
    return this;
  }
  @Override public Object getCellEditorValue() {
    return getValue();
  }

  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  transient protected ChangeEvent changeEvent = null;

  @Override public boolean stopCellEditing() {
    try{
      commitEdit();
    }catch(Exception pe) {
      Toolkit.getDefaultToolkit().beep();
      return false;
    }
    fireEditingStopped();
    return true;
  }

//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableModel#getColumnClass(int)&lt;/code&gt;で、第&lt;code&gt;2&lt;/code&gt;列目が日付(&lt;code&gt;Date.class&lt;/code&gt;)を返すように設定し、&lt;code&gt;JTable#setDefaultEditor(Class,CellEditor)&lt;/code&gt;メソッドで上記のセルエディタを関連付けています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setDefaultEditor(Date.class, new SpinnerCellEditor());
table.setSurrendersFocusOnKeystroke(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この日付用のセルエディタ(&lt;code&gt;SpinnerCellEditor&lt;/code&gt;)は、以下のような動作になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;スピナエディタで左寄せ

&lt;ul&gt;
&lt;li&gt;デフォルトのセルレンダラーと合わせるため&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.6.0_07&lt;/code&gt;, &lt;code&gt;1.6.0_06&lt;/code&gt;, &lt;code&gt;1.5.0_16&lt;/code&gt;などで、&lt;code&gt;JSpinner&lt;/code&gt;(&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;)の文字サイズ、余白が微妙に異なる？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ダブルクリックで編集開始&lt;/li&gt;
&lt;li&gt;編集開始時のキャレットは先頭の年(&lt;code&gt;yyyy&lt;/code&gt;)ではなく日(&lt;code&gt;dd&lt;/code&gt;)で、日(&lt;code&gt;dd&lt;/code&gt;)が選択状態になる

&lt;ul&gt;
&lt;li&gt;スピナボタン、&lt;kbd&gt;Up&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;キーなどで、日(&lt;code&gt;dd&lt;/code&gt;)から値が変更されるようにするため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;編集開始時、スピナエディタにフォーカスが無い場合は、スピナボタンはクリック不可

&lt;ul&gt;
&lt;li&gt;編集開始と同時に、スピナボタンが押されて日付が変更されるのを防止するため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;を直接編集して、&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどで編集終了すると&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;が発生するバグを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-30 (木) 19:56:25&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/datecelleditor</link>
                <guid>http://terai.xrea.jp/swing/datecelleditor</guid>
                <pubDate>2008-09-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableRowSorterのソートをヘッダクリックで昇順、降順、初期状態に変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;TableRowSorter&lt;/code&gt;のソートを、&lt;code&gt;TableSorter.java&lt;/code&gt;のようにヘッダクリックで昇順、降順、初期状態に切り替わるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TriStateSorting&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWVWrGvdI/AAAAAAAAApE/-DL1kAZzGsM/s800/TriStateSorting.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableModel model = makeTestTableModel();
JTable table = new JTable(model);
TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model) {
  @Override public void toggleSortOrder(int column) {
    if(column&amp;gt;=0 &amp;amp;&amp;amp; column&amp;lt;getModelWrapper().getColumnCount() &amp;amp;&amp;amp; isSortable(column)) {
      List&amp;lt;SortKey&amp;gt; keys = new ArrayList&amp;lt;&amp;gt;(getSortKeys());
      if(!keys.isEmpty()) {
        SortKey sortKey = keys.get(0);
        if(sortKey.getColumn()==column &amp;amp;&amp;amp; sortKey.getSortOrder()==SortOrder.DESCENDING) {
          setSortKeys(null);
          return;
        }
      }
    }
    super.toggleSortOrder(column);
  }
};
table.setRowSorter(sorter);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;TableRowSorter#toggleSortOrder(int)&lt;/code&gt;をオーバーライドして、クリックした列がソートの第一キーで、ソート順序が&lt;code&gt;DESCENDING&lt;/code&gt;の場合、ソートキーをクリアしています。このため、同じヘッダを三回クリックすると、昇順(&lt;code&gt;ASCENDING&lt;/code&gt;)、降順(&lt;code&gt;DESCENDING&lt;/code&gt;)、初期状態(&lt;code&gt;UNSORTED&lt;/code&gt;)と遷移して元に戻るようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSortingState.html&quot;&gt;TableRowSorterのSortKeysをクリアする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショットを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-09-25 (木) 14:23:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tristatesorting</link>
                <guid>http://terai.xrea.jp/swing/tristatesorting</guid>
                <pubDate>2008-09-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブにJTextFieldを配置してタイトルを編集</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;で選択されたタブに&lt;code&gt;JTextField&lt;/code&gt;を配置し、そのタイトルを編集します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabTitleEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTU43AZWdI/AAAAAAAAAmw/6klnGPa4D9o/s800/TabTitleEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private Component tabComponent = null;
private int editing_idx = -1;
private int len = -1;
private Dimension dim;
private void startEditing() {
  //System.out.println(&quot;start&quot;);
  editing_idx  = tabbedPane.getSelectedIndex();
  tabComponent = tabbedPane.getTabComponentAt(editing_idx);
  tabbedPane.setTabComponentAt(editing_idx, editor);
  editor.setVisible(true);
  editor.setText(tabbedPane.getTitleAt(editing_idx));
  editor.selectAll();
  editor.requestFocusInWindow();
  len = editor.getText().length();
  dim = editor.getPreferredSize();
  editor.setMinimumSize(dim);
}
private void cancelEditing() {
  //System.out.println(&quot;cancel&quot;);
  if(editing_idx&amp;gt;=0) {
    tabbedPane.setTabComponentAt(editing_idx, tabComponent);
    editor.setVisible(false);
    editing_idx = -1;
    len = -1;
    tabComponent = null;
    editor.setPreferredSize(null);
  }
}
private void renameTabTitle() {
  //System.out.println(&quot;rename&quot;);
  String title = editor.getText().trim();
  if(editing_idx&amp;gt;=0 &amp;amp;&amp;amp; !title.isEmpty()) {
    tabbedPane.setTitleAt(editing_idx, title);
  }
  cancelEditing();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブタイトルを直接編集します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された、&lt;code&gt;JTabbedPane#setTabComponentAt&lt;/code&gt;メソッドを使用してタブに&lt;code&gt;JTextField&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;p&gt;操作方法などは、以下のように、&lt;code&gt;GlassPane&lt;/code&gt;を使用している&lt;a href=&quot;http://terai.xrea.jp/Swing/EditTabTitle.html&quot;&gt;JTabbedPaneのタブタイトルを変更&lt;/a&gt;と同じですが、こちらは文字が入力されるたびに(&lt;code&gt;JTabbedPane#revalidate&lt;/code&gt;しているので)タブの幅が広がります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作方法

&lt;ul&gt;
&lt;li&gt;マウスでタブをダブルクリック、またはタブを選択して&lt;kbd&gt;Enter&lt;/kbd&gt;キーで編集開始&lt;/li&gt;
&lt;li&gt;編集中に入力欄以外をクリック、または&lt;kbd&gt;Enter&lt;/kbd&gt;キーでタイトル文字列が確定&lt;/li&gt;
&lt;li&gt;編集中&lt;kbd&gt;Tab&lt;/kbd&gt;キーを押しても無視&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;で編集をキャンセル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;文字で確定した場合も、キャンセル扱い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EditTabTitle.html&quot;&gt;JTabbedPaneのタブタイトルを変更&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、&lt;code&gt;JDK 6&lt;/code&gt;以前でも動作するように、&lt;code&gt;GlassPane&lt;/code&gt;に&lt;code&gt;JTextField&lt;/code&gt;を配置してタブタイトルの編集を行っています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTabComponentAt(...)&lt;/code&gt;メソッドで閉じるボタンなどと併用していた場合、編集後にそのボタンなどが消える不具合をメールで指摘してもらったので、修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-10 (火) 16:47:33&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabtitleeditor</link>
                <guid>http://terai.xrea.jp/swing/tabtitleeditor</guid>
                <pubDate>2008-09-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブにMnemonicを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブに&lt;code&gt;Mnemonic&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabMnemonic&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUu2fjTpI/AAAAAAAAAmg/EST6gnFRH84/s800/TabMnemonic.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tab.addTab(&quot;Button&quot;, new JButton(&quot;button&quot;));
tab.setMnemonicAt(3, KeyEvent.VK_B);
tab.setDisplayedMnemonicIndexAt(3, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルコードは、&lt;code&gt;3&lt;/code&gt;番目のタブに&lt;kbd&gt;Alt+B&lt;/kbd&gt;でフォーカスが移動するように、&lt;code&gt;JTabbedPane#setMnemonicAt&lt;/code&gt;メソッドを使用しています。
また、タブタイトルの先頭文字(&lt;code&gt;B&lt;/code&gt;)にアンダーラインが入るように&lt;code&gt;JTabbedPane#setDisplayedMnemonicIndexAt&lt;/code&gt;メソッドで設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;以降でタブに&lt;code&gt;JComponent&lt;/code&gt;を追加する場合、&lt;code&gt;JTabbedPane#setDisplayedMnemonicIndexAt&lt;/code&gt;メソッドでは&lt;code&gt;Mnemonic&lt;/code&gt;にアンダーラインは引かれないので、追加したコンポーネント自体にアンダーラインを引くよう設定します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int index = tab.getTabCount();
String tabTitle = &quot;label(0)&quot;;
JPanel p = new JPanel(new BorderLayout());
JLabel label = new JLabel(tabTitle);
JButton button = new JButton(&quot;x&quot;);
p.add(label,  BorderLayout.WEST);
p.add(button, BorderLayout.EAST);
tab.addTab(tabTitle, new JTree());
tab.setTabComponentAt(index, p);
tab.setMnemonicAt(index, KeyEvent.VK_0);
label.setDisplayedMnemonic(KeyEvent.VK_0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabmnemonic</link>
                <guid>http://terai.xrea.jp/swing/tabmnemonic</guid>
                <pubDate>2008-09-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル文字揃え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに表示されている文字列の揃えを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellTextAlignment&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTIs6qWcBI/AAAAAAAAATM/AnH_ZWdWA5o/s800/CellTextAlignment.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableColumn col = table.getColumnModel().getColumn(1);
col.setCellRenderer(new HorizontalAlignmentTableRenderer());
//...
class HorizontalAlignmentTableRenderer extends DefaultTableCellRenderer {
  @Override public Component getTableCellRendererComponent(JTable table,
        Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    Component c = super.getTableCellRendererComponent(
        table, value, isSelected, hasFocus, row, column);
    if(c instanceof JLabel) initLabel((JLabel)c, row);
    return c;
  }
  private void initLabel(JLabel l, int row) {
    if(leftRadio.isSelected()) {
      l.setHorizontalAlignment(JLabel.LEFT);
    }else if(centerRadio.isSelected()) {
      l.setHorizontalAlignment(JLabel.CENTER);
    }else if(rightRadio.isSelected()) {
      l.setHorizontalAlignment(JLabel.RIGHT);
    }else if(customRadio.isSelected()) {
      l.setHorizontalAlignment(row%3==0?JLabel.LEFT:
                               row%3==1?JLabel.CENTER:
                                        JLabel.RIGHT);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ラジオボタンで、&lt;code&gt;JTable&lt;/code&gt;の第一列のセル文字列の揃えを変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt;: 左揃え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;: 中央揃え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt;: 右揃え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;custom&lt;/code&gt;: 行ごとに左、中央、右揃えを変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;セルエディタなどにラジオボタンを配置する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/RadioButtonsInTableCell.html&quot;&gt;JTableのセル中にJRadioButtonを配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;は、&lt;code&gt;Object&lt;/code&gt;、&lt;code&gt;Number&lt;/code&gt;、&lt;code&gt;Boolean&lt;/code&gt;クラスのデフォルトセルレンダラーを持っているため、モデルが各列のクラスを正しく返すように、&lt;code&gt;TableModel#getColumnClass(int)&lt;/code&gt;をオーバーライドすることで、そのクラスのデフォルトセルレンダラーが使用される

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;: &lt;code&gt;JLabel.LEFT&lt;/code&gt;(文字列などは左揃え)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Number&lt;/code&gt;: &lt;code&gt;JLabel.RIGHT&lt;/code&gt;(数字は右揃え)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt;: &lt;code&gt;JCheckBox&lt;/code&gt;, &lt;code&gt;CENTER&lt;/code&gt;(チェックボックスは中央揃え)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultTableModel#TableModel#getColumnClass(int)&lt;/code&gt;のデフォルトは、すべての列のクラスとして、&lt;code&gt;Object.class&lt;/code&gt;を返す&lt;/li&gt;
&lt;li&gt;各クラスのデフォルトセルレンダラーが使用されるのは、列にセルレンダラーが割り当てられていない場合に限られる&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//JTableの手抜きサンプルなら、以下のようにオーバーライドするのが簡単？(モデルが空になる場合、例外が発生する可能性がある)
String[] columnNames = {&quot;String&quot;, &quot;Integer&quot;, &quot;Boolean&quot;};
Object[][] data = {
  {&quot;AAA&quot;, 1, true},
  {&quot;BBB&quot;, 2, false},
};
DefaultTableModel model = new DefaultTableModel(data, columnNames) {
  @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
    return getValueAt(0, column).getClass();
  }
};
JTable table = new JTable(model);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クラスのデフォルトセルレンダラーではなく、任意の列にセルレンダラーを割り当てて、例えば中央揃えにしたい場合は、以下のように設定します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultTableCellRenderer r = new DefaultTableCellRenderer();
r.setHorizontalAlignment(JLabel.CENTER);
table.getColumnModel().getColumn(2).setCellRenderer(r);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HorizontalAlignmentHeaderRenderer.html&quot;&gt;JTableHeaderの字揃え&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ヘッダの文字揃えに関するテストは、上記の場所に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/celltextalignment</link>
                <guid>http://terai.xrea.jp/swing/celltextalignment</guid>
                <pubDate>2008-08-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComponentのKeyBinding一覧を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComponent&lt;/code&gt;から、&lt;code&gt;ActionMap&lt;/code&gt;、&lt;code&gt;InputMap&lt;/code&gt;を取得し、&lt;code&gt;KeyBinding&lt;/code&gt;の一覧表を作成します。[ftp://ftp.oreilly.de/pub/examples/english_examples/jswing2/code/goodies/misc.html Miscellaneous Tools - Java Swing Utilities]の[ftp://ftp.oreilly.de/pub/examples/english_examples/jswing2/code/goodies/Mapper.java Mapper.java]を元に&lt;code&gt;UI&lt;/code&gt;を変更しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/KeyBinding&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTO1Qi0Y2I/AAAAAAAAAdA/yMsuc2sjSKg/s800/KeyBinding.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final List&amp;lt;Integer&amp;gt; focusType = Arrays.asList(
        JComponent.WHEN_FOCUSED, JComponent.WHEN_IN_FOCUSED_WINDOW,
        JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
table.setAutoCreateRowSorter(true);
JPanel p = new JPanel(new GridLayout(2,1,5,5));
p.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
p.add(componentChoices);
p.add(new JButton(new AbstractAction(&quot;show&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    model.setRowCount(0);
    JComponent c = ((JComponentType)componentChoices.getSelectedItem()).component;
    for(Integer f:focusType) {
      loadBindingMap(f, c.getInputMap(f), c.getActionMap());
    }
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;で選択されたコンポーネントに割り当てられているデフォルトの&lt;code&gt;KeyBinding&lt;/code&gt;を、&lt;code&gt;JTable&lt;/code&gt;に表示することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[ftp://ftp.oreilly.de/pub/examples/english_examples/jswing2/code/goodies/misc.html Miscellaneous Tools - Java Swing Utilities]

&lt;ul&gt;
&lt;li&gt;[ftp://ftp.oreilly.de/pub/examples/english_examples/jswing2/code/goodies/Mapper.java Mapper.java]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/keybinding.html&quot;&gt;How to Use Key Bindings (The Java™ Tutorials)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メールで質問があったので: このサンプルは、&lt;code&gt;properties.xml&lt;/code&gt;の、&lt;code&gt;compile.source&lt;/code&gt;を&lt;code&gt;1.5&lt;/code&gt;にして、&lt;code&gt;MainPanel.java&lt;/code&gt;の&lt;code&gt;table.setAutoCreateRowSorter(true);&lt;/code&gt;をコメントアウトすれば、&lt;code&gt;JDK 1.5&lt;/code&gt;でも動作するはずです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-08-18 (月) 11:17:11&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JFileChooser&lt;/code&gt;をコメントアウトして、&lt;code&gt;Web Start&lt;/code&gt;でも実行できるように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-02 (土) 01:11:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/keybinding</link>
                <guid>http://terai.xrea.jp/swing/keybinding</guid>
                <pubDate>2008-08-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldの背景色を半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;の背景色を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TranslucentTextField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTV03Q10yI/AAAAAAAAAoQ/xH8xmeARg4k/s800/TranslucentTextField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Color BG_COLOR = new Color(1f,.8f,.8f,.2f);

field0 = new JTextField(&quot;aaaaaaaaa&quot;);
field0.setBackground(BG_COLOR);

field1 = new JTextField(&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;);
field1.setOpaque(false);
field1.setBackground(BG_COLOR);

field2 = new JTextField(&quot;cccccccccccccccccccccc&quot;) {
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setPaint(getBackground());
    g2.fillRect(0, 0, getWidth(), getHeight());
    super.paintComponent(g);
  }
};
field2.setOpaque(false);
field2.setBackground(BG_COLOR);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、それぞれアルファ値を使った背景色を&lt;code&gt;JTextField&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;field0&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文字列を選択すると、再描画がおかしくなる(残像が表示される)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、再現しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;field1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false)&lt;/code&gt;とすると、背景色は描画されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、背景色が描画される

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://weblogs.java.net/blog/ljnelson/archive/2008/07/nimbus_and_opac.html&quot;&gt;Laird Nelson&amp;#39;s Blog: Nimbus and Opacity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;field2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setOpaque(false)&lt;/code&gt;とし、&lt;code&gt;paintComponent&lt;/code&gt;をオーバーライドして、背景色を描画している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;でのスクリーンショット&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQcFKxPuBpI/AAAAAAAAAqw/1P6cGhtr7FA/s800/TranslucentTextField1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;でのスクリーンショット

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6531760&quot;&gt;Bug ID: 6531760 JTextField not honoring the background color&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTV55zD1gI/AAAAAAAAAoY/0PCTmGDb2AA/s800/TranslucentTextField2.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.viva-edo.com/komon/edokomon.html&quot;&gt;江戸の文様（和風素材・デスクトップ壁紙）&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;名物裂から雲鶴をサンプルの壁紙として拝借しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/translucenttextfield</link>
                <guid>http://terai.xrea.jp/swing/translucenttextfield</guid>
                <pubDate>2008-08-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのRowSorterをフィルタありソート不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;フィルタありでソート不可の&lt;code&gt;TableRowSorter&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FilterWithoutSorting&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMr425A3I/AAAAAAAAAZk/ZFpsuUZWGcQ/s800/FilterWithoutSorting.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model) {
  @Override public boolean isSortable(int column) {
    return false;
  }
};
sorter.setRowFilter(new RowFilter&amp;lt;TableModel,Integer&amp;gt;() {
  @Override public boolean include(
      Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
    return entry.getIdentifier() % 2 == 0;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、行フィルタだけ利用して、行のソートは出来なくしておきたいので、&lt;code&gt;sorter&lt;/code&gt;に以下のような設定をしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultRowSorter#setRowFilter(RowFilter)&lt;/code&gt;で偶数行だけ表示するフィルタを設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultRowSorter#isSortable(int)&lt;/code&gt;をオーバーライドして常に&lt;code&gt;false&lt;/code&gt;を返す&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;DefaultRowSorter#setSortable(int, boolean)&lt;/code&gt;を使用して、一部の列だけソート不可にすることもできます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/DefaultRowSorter.html&quot;&gt;DefaultRowSorter (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHeader.html&quot;&gt;JTableHeaderのカラムを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filterwithoutsorting</link>
                <guid>http://terai.xrea.jp/swing/filterwithoutsorting</guid>
                <pubDate>2008-08-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Shapeの反転</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AffineTransform&lt;/code&gt;で図形や画像を反転します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HorizontalFlip&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTN731lMzI/AAAAAAAAAbk/Wc0qp3ocR88/s800/HorizontalFlip.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Font font = new Font(Font.MONOSPACED, Font.PLAIN, 200);
FontRenderContext frc = new FontRenderContext(null, true, true);
Shape copyright = new TextLayout(&quot;\u00a9&quot;, font, frc).getOutline(null);
AffineTransform at = AffineTransform.getScaleInstance(-1.0, 1.0);
//Rectangle r = copyright.getBounds();
//at.translate(r.getWidth(), r.getHeight());
//AffineTransform at = new AffineTransform(-1d,0,0,1d,r.getWidth(), r.getHeight());
Shape copyleft = at.createTransformedShape(copyright);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、コピーライトの文字を鏡像(左右)反転して、コピーレフトのアイコンを作成しています。&lt;/p&gt;

&lt;p&gt;上下反転の場合は、&lt;code&gt;AffineTransform.getScaleInstance(1.0, -1.0)&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Copyleft&quot;&gt;コピーレフト - Wikipedia&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコン&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AffineTransformOp.html&quot;&gt;AffineTransformOpで画像を反転する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/horizontalflip</link>
                <guid>http://terai.xrea.jp/swing/horizontalflip</guid>
                <pubDate>2008-07-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ImageIconの形でJButtonを作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;任意の&lt;code&gt;Shape&lt;/code&gt;とその形に透過色を設定した画像を使って&lt;code&gt;JButton&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RoundImageButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSO4fquKI/AAAAAAAAAic/UdMAZSREN1U/s800/RoundImageButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RoundButton extends JButton {
  public RoundButton() {
    this(null, null);
  }
  public RoundButton(Icon icon) {
    this(null, icon);
  }
  public RoundButton(String text) {
    this(text, null);
  }
  public RoundButton(Action a) {
    this();
    setAction(a);
  }
  public RoundButton(String text, Icon icon) {
    setModel(new DefaultButtonModel());
    init(text, icon);
    if(icon==null) {
      return;
    }
    setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
    setBackground(Color.BLACK);
    setContentAreaFilled(false);
    setFocusPainted(false);
    //setVerticalAlignment(SwingConstants.TOP);
    setAlignmentY(Component.TOP_ALIGNMENT);
    initShape();
  }
  protected Shape shape, base;
  protected void initShape() {
    if(!getBounds().equals(base)) {
      Dimension s = getPreferredSize();
      base = getBounds();
      shape = new Ellipse2D.Float(0, 0, s.width-1, s.height-1);
    }
  }
  @Override public Dimension getPreferredSize() {
    Icon icon = getIcon();
    Insets i = getInsets();
    int iw = Math.max(icon.getIconWidth(), icon.getIconHeight());
    return new Dimension(iw+i.right+i.left, iw+i.top+i.bottom);
  }
  @Override protected void paintBorder(Graphics g) {
    initShape();
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getBackground());
    //g2.setStroke(new BasicStroke(1.0f));
    g2.draw(shape);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_OFF);
  }
  @Override public boolean contains(int x, int y) {
    initShape();
    return shape.contains(x, y);
    //以下、透過色が0でクリック不可にする場合の例
    //or return super.contains(x, y) &amp;amp;&amp;amp; ((image.getRGB(x, y) &amp;gt;&amp;gt; 24) &amp;amp; 0xff) &amp;gt; 0;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;に円形の画像を貼り付けてボタンを作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;円形、同サイズの&lt;code&gt;PNG&lt;/code&gt;画像(円の外側が透過色)を三種類用意して&lt;code&gt;JButton&lt;/code&gt;に設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setIcon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setPressedIcon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setRolloverIcon&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setContentAreaFilled(false)&lt;/code&gt;などを設定して、ボタン自体の描画はしない&lt;/li&gt;
&lt;li&gt;推奨、最小、最大サイズを画像のサイズに合わせる

&lt;ul&gt;
&lt;li&gt;ただし、縁の線を描画するため、画像サイズより上下左右&lt;code&gt;1px&lt;/code&gt;大きくなるよう&lt;code&gt;EmptyBorder&lt;/code&gt;を設定している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt;をオーバーライドして、円の外側をクリックしてもボタンが反応しないようにする

&lt;ul&gt;
&lt;li&gt;このサンプルでは、画像の透過色から円を生成している訳ではなく、画像のサイズから円図形を別途作成している&lt;/li&gt;
&lt;li&gt;画像の透過色から、クリック可能な領域を設定する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/MoveNonRectangularImage.html&quot;&gt;JComponentの形状定義を変更する&lt;/a&gt;を参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paintBorder&lt;/code&gt;をオーバーライドして、元の縁は描画せずにその幅の線で独自に円を描画する

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt;で使用した図形を利用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;ボタンの揃えを変更するために、&lt;code&gt;JPanel&lt;/code&gt;ではなく、&lt;code&gt;Box&lt;/code&gt;を利用しているので、&lt;code&gt;JDK 5&lt;/code&gt;でも&lt;code&gt;JDK 6&lt;/code&gt;と同じように描画するために、&lt;code&gt;Box#paintComponent&lt;/code&gt;を以下のようにオーバーライドしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4907674&quot;&gt;Bug ID: 4907674 Box disregards setBackground() even when set Opaque(true)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTSRb592NI/AAAAAAAAAig/4HrfRUSkPxc/s800/RoundImageButton1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Box box = // JDK 6 Box.createHorizontalBox();
  // JDK 5
  new Box(BoxLayout.X_AXIS) {
    @Override protected void paintComponent(Graphics g) {
      if(ui != null) {
        super.paintComponent(g);
      }else if(isOpaque()) {
        g.setColor(getBackground());
        g.fillRect(0, 0, getWidth(), getHeight());
      }
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gimp.blog.shinobi.jp/Entry/18/&quot;&gt;アクア風の球体の描き方（GIMPチュートリアル) &amp;gt; ロゴ・ボタン | GIMP思い込みチュートリアル（GIMPの使い方）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundButton.html&quot;&gt;JButtonの形を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MoveNonRectangularImage.html&quot;&gt;JComponentの形状定義を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/roundimagebutton</link>
                <guid>http://terai.xrea.jp/swing/roundimagebutton</guid>
                <pubDate>2008-07-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにJCheckBoxを表示して行背景色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに表示されている&lt;code&gt;JCheckBox&lt;/code&gt;がチェックされていれば、その行の背景色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckedRowColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTI7wkSMbI/AAAAAAAAATk/uGVLWCqLJUI/s800/CheckedRowColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public Component prepareEditor(
        TableCellEditor editor, int row, int column) {
    Component cmp = super.prepareEditor(editor, row, column);
    if(convertColumnIndexToModel(column) == BOOLEAN_COLUMN) {
      JCheckBox c = (JCheckBox)cmp;
      c.setBackground(c.isSelected()? Color.ORANGE:getBackground());
    }
    return cmp;
  }
  @Override public Component prepareRenderer(
        TableCellRenderer renderer, int row, int column) {
    Component c = super.prepareRenderer(renderer, row, column);
    Boolean isChecked = (Boolean) model.getValueAt(
      convertRowIndexToModel(row), BOOLEAN_COLUMN);
    c.setForeground(getForeground());
    c.setBackground(isChecked? Color.ORANGE:getBackground());
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;prepareEditor&lt;/code&gt;、&lt;code&gt;prepareRenderer&lt;/code&gt;をオーバーライドしてセルエディタや行の背景色を変更しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;チェックボックスがクリックされてモデルが更新されると、デフォルトでは対応するセルのみ再描画されます。このサンプルでは対象セルだけではなく、そのセルが存在する行全体の背景色を変更しているので、&lt;code&gt;TableModelListener&lt;/code&gt;でモデルの更新を検出し、以下のように&lt;code&gt;JTable#repaint(...)&lt;/code&gt;を使って行を再描画しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;model.addTableModelListener(new TableModelListener() {
  @Override public void tableChanged(TableModelEvent e) {
    if(e.getType()==TableModelEvent.UPDATE) {
      //rowRepaint(table, table.convertRowIndexToView(e.getFirstRow()));
      Rectangle r = table.getCellRect(table.convertRowIndexToView(e.getFirstRow()), 0, true);
      r.width  = table.getWidth();
      //table.repaint(); //table全体をリペイントするのは、すこし無駄なので 
      table.repaint(r);  //一行だけリペイント
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1361072&quot;&gt;Swing - JTable-Row color issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ごちそうさまでした。 -- &lt;a href=&quot;http://terai.xrea.jp/tanuchan.html&quot;&gt;tanuchan&lt;/a&gt; 2009-12-14 (Mon) 04:22:08

&lt;ul&gt;
&lt;li&gt;まいどありです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-16 (水) 21:25:57&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6711682&quot;&gt;Bug ID: 6711682 JCheckBox in JTable: checkbox doesn&amp;#39;t alaways respond to the first mouse click&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-07-26 (月) 14:18:03&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkedrowcolor</link>
                <guid>http://terai.xrea.jp/swing/checkedrowcolor</guid>
                <pubDate>2008-07-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのソートアイコンを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のソートアイコンを非表示にしたり、別の画像に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableSortIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUsaUYVkI/AAAAAAAAAmc/34Qz14LqOGc/s800/TableSortIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;Table.ascendingSortIcon&quot;,  new IconUIResource(emptyIcon));
UIManager.put(&quot;Table.descendingSortIcon&quot;, new IconUIResource(emptyIcon));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;UIManager&lt;/code&gt;を使用して、以下のようなサイズ&lt;code&gt;0&lt;/code&gt;の&lt;code&gt;Icon&lt;/code&gt;や、透過&lt;code&gt;png&lt;/code&gt;画像などを&lt;code&gt;JTable&lt;/code&gt;のヘッダに表示されるソートアイコンを変更しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static final Icon emptyIcon = new Icon() {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {}
  @Override public int getIconWidth()  { return 0; }
  @Override public int getIconHeight() { return 0; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablesorticon</link>
                <guid>http://terai.xrea.jp/swing/tablesorticon</guid>
                <pubDate>2008-07-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FileのSystemIconを取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ファイル、ディレクトリなどの&lt;code&gt;SystemIcon&lt;/code&gt;を取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SystemIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUG6tI4SI/AAAAAAAAAlg/bci1geT80EM/s800/SystemIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;smallLabel.setIcon(FileSystemView.getFileSystemView().getSystemIcon(file));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;largeLabel.setIcon(new ImageIcon(ShellFolder.getShellFolder(file).getIcon(true)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Windows&lt;/code&gt;環境でファイルをドロップするとそのファイルの&lt;code&gt;SystemIcon&lt;/code&gt;を表示することが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;16x16&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FileSystemView#getSystemIcon(File f)&lt;/code&gt;で小さいアイコンを取得&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;32x32&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ShellFolder.getShellFolder(file).getIcon(true)&lt;/code&gt;で大きいアイコンを取得&lt;/li&gt;
&lt;li&gt;&lt;del&gt;「&lt;code&gt;sun.awt.shell.ShellFolder&lt;/code&gt; は Sun が所有する &lt;code&gt;API&lt;/code&gt; であり、今後のリリースで削除される可能性があります。」と警告される&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;ShellFolder&lt;/code&gt;は内部所有の&lt;code&gt;API&lt;/code&gt;であり、今後のリリースで削除される可能性があります」と警告される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codebeach.com/2008/02/get-file-type-icon-with-java.html&quot;&gt;Code Beach: Get the File Type Icon with Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/systemicon</link>
                <guid>http://terai.xrea.jp/swing/systemicon</guid>
                <pubDate>2008-06-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル編集を文字入力変換中からでも可能にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;IME&lt;/code&gt;が直接入力以外で、一時ウィンドウが表示されていても、入力確定でセル編集を開始します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CompositionEnabled&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTKG6DmuHI/AAAAAAAAAVc/WfOft65kSaQ/s800/CompositionEnabled.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override protected boolean processKeyBinding(
      KeyStroke ks, KeyEvent e, int condition, boolean pressed) {
    boolean retValue = super.processKeyBinding(ks, e, condition, pressed);
    //if(!check.isSelected()) return retValue;
    if(KeyStroke.getKeyStroke(&#39;\t&#39;).equals(ks) || KeyStroke.getKeyStroke(&#39;\n&#39;).equals(ks)) {
      System.out.println(&quot;tab or enter typed&quot;);
      return retValue;
    }
    if(getInputContext().isCompositionEnabled() &amp;amp;&amp;amp; !isEditing() &amp;amp;&amp;amp;
       !pressed &amp;amp;&amp;amp; !ks.isOnKeyRelease()) {
      int selectedRow = getSelectedRow();
      int selectedColumn = getSelectedColumn();
      if(selectedRow!=-1 &amp;amp;&amp;amp; selectedColumn!=-1 &amp;amp;&amp;amp; !editCellAt(selectedRow, selectedColumn)) {
        return retValue;
      }
    }
    return retValue;
  }
};
//table.setSurrendersFocusOnKeystroke(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のような設定になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;や&lt;kbd&gt;Enter&lt;/kbd&gt;キーでのセルフォーカス移動では編集開始しない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#processKeyBinding&lt;/code&gt;をオーバーライドして、入力モードが確定したら選択セルの編集開始&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;インプットメソッドが起動中かどうかは、&lt;code&gt;Component#getInputContext#isCompositionEnabled&lt;/code&gt;メソッドで判断しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/imf/index.html&quot;&gt;Java Input Method Framework テクノロジ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/compositionenabled</link>
                <guid>http://terai.xrea.jp/swing/compositionenabled</guid>
                <pubDate>2008-06-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableでキー入力によるセル編集開始を禁止する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;キー入力やマウスクリックによる&lt;code&gt;JTable&lt;/code&gt;のセル編集開始を禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PreventStartCellEditing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRLZXQW1I/AAAAAAAAAgw/ufR0d0md6Bc/s800/PreventStartCellEditing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.putClientProperty(&quot;JTable.autoStartsEdit&quot;, Boolean.FALSE);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultCellEditor ce = (DefaultCellEditor)table.getDefaultEditor(Object.class);
ce.setClickCountToStart(Integer.MAX_VALUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;列目だけ、編集禁止です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prevent KeyStroke autoStartsEdit&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.putClientProperty(&amp;quot;JTable.autoStartsEdit&amp;quot;, Boolean.FALSE);&lt;/code&gt;で、キー入力(&lt;kbd&gt;F2&lt;/kbd&gt;は除く)によるセルの編集開始を禁止します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prevent mouse from starting edit&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultCellEditor#setClickCountToStart&lt;/code&gt;に大きな値を設定して、事実上マウスクリックによる編集開始が不可能になっています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start cell editing only F2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;上二つを設定して、セルの編集開始は、&lt;kbd&gt;F2&lt;/kbd&gt;キーのみ可能になっています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isCellEditable retrun false&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableModel#isCellEditable&lt;/code&gt;が常に&lt;code&gt;false&lt;/code&gt;を返し、セルエディタは起動されません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://0xc000013a.blog96.fc2.com/blog-entry-19.html&quot;&gt;片っ端から忘れていけばいいじゃない。  JTableで、セル上でキータイプされただけでは編集を開始しないようにする。JTable.autoStartsEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stateofmind.fr/confluence/display/java/TIPs+JTable&quot;&gt;TIPs JTable - Space Of Mind - Confluence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CellEditor.html&quot;&gt;JTableのセルを編集不可にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FunctionKeyStartEditing.html&quot;&gt;JTableでキー入力によるセル編集自動開始を一部禁止する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/preventstartcellediting</link>
                <guid>http://terai.xrea.jp/swing/preventstartcellediting</guid>
                <pubDate>2008-06-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldの入力を数値に制限する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;への入力を数値のみに制限します。ソースコードは、&lt;a href=&quot;http://web.archive.org/web/20090831154020/http://java.sun.com/developer/JDCTechTips/2005/tt0518.html&quot;&gt;Validating Text and Filtering Documents and Accessibility and the Java Access Bridge Tech Tips&lt;/a&gt;からの引用です。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NumericTextField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQjTks6aI/AAAAAAAAAfw/VCCb81SSh1s/s800/NumericTextField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextField textField1 = new JTextField(&quot;1000&quot;);
textField1.setHorizontalAlignment(JTextField.RIGHT);
textField1.setInputVerifier(new IntegerInputVerifier());

JTextField textField2 = new JTextField();
textField2.setDocument(new IntegerDocument());
textField2.setText(&quot;2000&quot;);

JTextField textField3 = new JTextField();
((AbstractDocument)textField3.getDocument()).setDocumentFilter(new IntegerDocumentFilter());
textField3.setText(&quot;3000&quot;);

JFormattedTextField textField4 = new JFormattedTextField();
textField4.setFormatterFactory(new NumberFormatterFactory());
textField4.setHorizontalAlignment(JTextField.RIGHT);
textField4.setValue(4000);

JSpinner spinner = new JSpinner(new SpinnerNumberModel(0, 0, Integer.MAX_VALUE, 1));
((JSpinner.NumberEditor)spinner.getEditor()).getFormat().setGroupingUsed(false);
spinner.setValue(5000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;:&lt;code&gt;JTextField&lt;/code&gt; + &lt;code&gt;InputVerifier&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090831154020/http://java.sun.com/developer/JDCTechTips/2005/tt0518.html&quot;&gt;Validating with Input Verifiers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputVerifier&lt;/code&gt;を継承する&lt;code&gt;IntegerInputVerifier&lt;/code&gt;を作成し、これを&lt;code&gt;JComponent#setInputVerifier&lt;/code&gt;メソッドで設定しています。&lt;/li&gt;
&lt;li&gt;別コンポーネントにフォーカスが移動するときに、数値かどうか評価します。&lt;/li&gt;
&lt;li&gt;数値以外、または結果が範囲外となる場合、テキストは変化せず&lt;code&gt;beep&lt;/code&gt;音が鳴り、フォーカス移動がキャンセルされます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class IntegerInputVerifier extends InputVerifier{
  @Override public boolean verify(JComponent c) {
    boolean verified = false;
    JTextField textField = (JTextField)c;
    try{
      Integer.parseInt(textField.getText());
      verified = true;
    }catch(NumberFormatException e) {
      UIManager.getLookAndFeel().provideErrorFeedback(c);
      //Toolkit.getDefaultToolkit().beep();
    }
    return verified;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;:&lt;code&gt;JTextField&lt;/code&gt; + &lt;code&gt;Custom Document&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090831154020/http://java.sun.com/developer/JDCTechTips/2005/tt0518.html&quot;&gt;Validating with a Custom Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PlainDocument&lt;/code&gt;を継承する&lt;code&gt;IntegerDocument&lt;/code&gt;を作成し、これを&lt;code&gt;JTextComponent#setDocument&lt;/code&gt;メソッドで設定しています。&lt;/li&gt;
&lt;li&gt;キー入力、文字列のペーストが行われたときに、数値かどうか評価します。&lt;/li&gt;
&lt;li&gt;入力が数値以外、または結果が範囲外となる場合、&lt;code&gt;beep&lt;/code&gt;音が鳴り、テキストは変化しません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class IntegerDocument extends PlainDocument {
  int currentValue = 0;
  public IntegerDocument() {
    super();
  }
  public int getValue() {
    return currentValue;
  }
  @Override public void insertString(int offset, String str, AttributeSet attributes)
        throws BadLocationException {
    if(str==null) {
      return;
    }else{
      String newValue;
      int length = getLength();
      if(length==0) {
        newValue = str;
      }else{
        String currentContent = getText(0, length);
        StringBuffer currentBuffer = new StringBuffer(currentContent);
        currentBuffer.insert(offset, str);
        newValue = currentBuffer.toString();
      }
      currentValue = checkInput(newValue, offset);
      super.insertString(offset, str, attributes);
    }
  }
  @Override public void remove(int offset, int length) throws BadLocationException {
    int currentLength = getLength();
    String currentContent = getText(0, currentLength);
    String before = currentContent.substring(0, offset);
    String after = currentContent.substring(length+offset, currentLength);
    String newValue = before + after;
    currentValue = checkInput(newValue, offset);
    super.remove(offset, length);
  }
  private int checkInput(String proposedValue, int offset) throws BadLocationException {
    if(proposedValue.length()&amp;gt;0) {
      try{
        int newValue = Integer.parseInt(proposedValue);
        return newValue;
      }catch(NumberFormatException e) {
        throw new BadLocationException(proposedValue, offset);
      }
    }else{
      return 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;:&lt;code&gt;JTextField&lt;/code&gt; + &lt;code&gt;DocumentFilter&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090831154020/http://java.sun.com/developer/JDCTechTips/2005/tt0518.html&quot;&gt;Validating with a Document Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DocumentFilter&lt;/code&gt;を継承する&lt;code&gt;IntegerDocumentFilter&lt;/code&gt;を作成し、これを&lt;code&gt;AbstractDocument#setDocumentFilter&lt;/code&gt;メソッドで設定しています。&lt;/li&gt;
&lt;li&gt;&lt;del&gt;別コンポーネントにフォーカスが移動するときに、数値かどうか評価します。&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;キー入力、文字列のペーストが行われたときに、数値かどうか評価します。&lt;/li&gt;
&lt;li&gt;入力が数値以外、または結果が範囲外となる場合、&lt;code&gt;beep&lt;/code&gt;音が鳴り、テキストは変化しません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class IntegerDocumentFilter extends DocumentFilter {
  //int currentValue = 0;
  @Override public void insertString(DocumentFilter.FilterBypass fb,
      int offset, String string, AttributeSet attr) throws BadLocationException {
    if(string == null) {
      return;
    }else{
      replace(fb, offset, 0, string, attr);
    }
  }
  @Override public void remove(DocumentFilter.FilterBypass fb, int offset, int length)
      throws BadLocationException {
    replace(fb, offset, length, &quot;&quot;, null);
  }
  @Override public void replace(DocumentFilter.FilterBypass fb, int offset, int length,
      String text, AttributeSet attrs) throws BadLocationException {
    Document doc = fb.getDocument();
    int currentLength = doc.getLength();
    String currentContent = doc.getText(0, currentLength);
    String before = currentContent.substring(0, offset);
    String after = currentContent.substring(length+offset, currentLength);
    String newValue = before + (text == null ? &quot;&quot; : text) + after;
    //currentValue =
    checkInput(newValue, offset);
    fb.replace(offset, length, text, attrs);
  }
  private static int checkInput(String proposedValue, int offset)
      throws BadLocationException {
    int newValue = 0;
    if(proposedValue.length() &amp;gt; 0) {
      try {
        newValue = Integer.parseInt(proposedValue);
      }catch(NumberFormatException e) {
        throw new BadLocationException(proposedValue, offset);
      }
    }
    return newValue;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt;:&lt;code&gt;JFormattedTextField&lt;/code&gt; + &lt;code&gt;DefaultFormatterFactory&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html&quot;&gt;How to Use Formatted Text Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultFormatterFactory&lt;/code&gt;を継承する&lt;code&gt;NumberFormatterFactory&lt;/code&gt;を作成し、これを&lt;code&gt;JFormattedTextField#setFormatterFactory&lt;/code&gt;メソッドで設定しています。&lt;/li&gt;
&lt;li&gt;別コンポーネントにフォーカスが移動するときに、数値かどうか評価します。&lt;/li&gt;
&lt;li&gt;数値以外の場合、テキストは以前の値に&lt;code&gt;Undo&lt;/code&gt;されます。&lt;/li&gt;
&lt;li&gt;数値が範囲外となる場合、最小値、または最大値に調整されます。

&lt;ul&gt;
&lt;li&gt;注:&lt;a href=&quot;http://terai.xrea.jp/Swing/SpinnerNumberModel.html&quot;&gt;SpinnerNumberModelに上限値を超える値を入力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class NumberFormatterFactory extends DefaultFormatterFactory{
    private static NumberFormatter numberFormatter = new NumberFormatter();
    static{
        numberFormatter.setValueClass(Integer.class);
        ((NumberFormat)numberFormatter.getFormat()).setGroupingUsed(false);
    }
    public NumberFormatterFactory() {
        super(numberFormatter, numberFormatter, numberFormatter);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;:&lt;code&gt;JSpinner&lt;/code&gt; + &lt;code&gt;SpinnerNumberModel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFormattedTextField&lt;/code&gt;の場合と同等の動作です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090831154020/http://java.sun.com/developer/JDCTechTips/2005/tt0518.html&quot;&gt;Validating Text and Filtering Documents and Accessibility and the Java Access Bridge Tech Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/formattedtextfield.html&quot;&gt;How to Use Formatted Text Fields&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NumberFormatter.html&quot;&gt;JSpinnerで無効な値の入力を許可しない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/numerictextfield</link>
                <guid>http://terai.xrea.jp/swing/numerictextfield</guid>
                <pubDate>2008-06-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FocusTraversalKeysに矢印キーを追加してフォーカス移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;デフォルトの&lt;kbd&gt;Tab&lt;/kbd&gt;キーに加えて、矢印キーでもフォーカス移動できるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FocusTraversalKeys&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNHR5gShI/AAAAAAAAAaQ/KUE3fbR0bXo/s800/FocusTraversalKeys.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();

Set&amp;lt;AWTKeyStroke&amp;gt; forwardKeys = new HashSet&amp;lt;&amp;gt;(
    focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,  0));
focusManager.setDefaultFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, forwardKeys);

Set&amp;lt;AWTKeyStroke&amp;gt; backwardKeys = new HashSet&amp;lt;&amp;gt;(
    focusManager.getDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));
backwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0));
backwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_UP,   0));
focusManager.setDefaultFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, backwardKeys);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、デフォルトのトラバーサルキー(&lt;kbd&gt;Tab&lt;/kbd&gt;, &lt;kbd&gt;Shift+Tab&lt;/kbd&gt;)に加えて、上下左右の矢印キーでもフォーカス移動できるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KeyEvent.VK_RIGHT&lt;/code&gt;, &lt;code&gt;KeyEvent.VK_DOWN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KeyEvent.VK_LEFT&lt;/code&gt;, &lt;code&gt;KeyEvent.VK_UP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;各&lt;code&gt;JFrame&lt;/code&gt;や&lt;code&gt;JDialog&lt;/code&gt;に別々の&lt;code&gt;FocusTraversalKeys&lt;/code&gt;を設定したい場合は、&lt;code&gt;Container#setFocusTraversalKeys&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Set&amp;lt;AWTKeyStroke&amp;gt; forwardKeys = new HashSet&amp;lt;&amp;gt;(
    frame.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0));
forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,  0));
frame.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, forwardKeys);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/KeyboardFocusManager.html&quot;&gt;KeyboardFocusManager#setDefaultFocusTraversalKeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Container.html&quot;&gt;Container#setFocusTraversalKeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html&quot;&gt;How to Use the Focus Subsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversal.html&quot;&gt;Focusの移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/focustraversalkeys</link>
                <guid>http://terai.xrea.jp/swing/focustraversalkeys</guid>
                <pubDate>2008-06-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AuditoryCuesでイベント音を設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;UIManager&lt;/code&gt;に&lt;code&gt;AuditoryCues.playList&lt;/code&gt;を設定して、ダイアログが開いた時の警告音などを鳴らします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AuditoryCues&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTHzQ8XbXI/AAAAAAAAARw/-TGnQ_tvnnM/s800/AuditoryCues.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Object[] optionPaneAuditoryCues = {
  &quot;OptionPane.errorSound&quot;, &quot;OptionPane.informationSound&quot;,
  &quot;OptionPane.questionSound&quot;, &quot;OptionPane.warningSound&quot;
};
//UIManager.put(&quot;AuditoryCues.playList&quot;, UIManager.get(&quot;AuditoryCues.allAuditoryCues&quot;));
//UIManager.put(&quot;AuditoryCues.playList&quot;, UIManager.get(&quot;AuditoryCues.defaultCueList&quot;));
//UIManager.put(&quot;AuditoryCues.playList&quot;, UIManager.get(&quot;AuditoryCues.noAuditoryCues&quot;));
UIManager.put(&quot;AuditoryCues.playList&quot;, optionPaneAuditoryCues);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、デフォルトではすべて再生しないように設定されている聴覚フィードバックを、&lt;code&gt;JOptionPane&lt;/code&gt;でダイアログを開いた時には有効になるように変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;showMessageDialog1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;デフォルトの音が鳴る(&lt;code&gt;LookAndFeel&lt;/code&gt;にデフォルトの音が無い場合は鳴らない)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;では、「コントロールパネル」「サウンドとオーディオデバイスのプロパティ」で、プログラムイベントが設定されている場合は鳴る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;showMessageDialog2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wav&lt;/code&gt;ファイルで音を鳴らす&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager.put(&amp;quot;AuditoryCues.playList&amp;quot;, UIManager.get(&amp;quot;AuditoryCues.noAuditoryCues&amp;quot;))&lt;/code&gt;として、二重に鳴らないようにしている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;や&lt;code&gt;MotifLookAndFeel&lt;/code&gt;では、以下のようにすることで、&lt;code&gt;MessageDialog&lt;/code&gt;のイベント音を変更することも出来ます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;OptionPane.informationSound&quot;, &quot;/example/notice2.wav&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/swing/SwingChanges.html#Miscellaneous&quot;&gt;Swing コンポーネントの音声フィードバック&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/java/library/j-mer0730/&quot;&gt;Merlinの魔術: Swingのオーディオ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.taitaistudio.com/wav/&quot;&gt;&amp;quot;taitai studio&amp;quot; フリーWav素材集&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;wavファイルを拝借しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Beep.html&quot;&gt;Beep音を鳴らす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MidiSystem.html&quot;&gt;MIDIファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Sound.html&quot;&gt;Wavファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/auditorycues</link>
                <guid>http://terai.xrea.jp/swing/auditorycues</guid>
                <pubDate>2008-05-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComponentをマウスで移動、リサイズ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;に、マウスで移動、リサイズ可能なコンポーネントを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ResizableComponents&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRw-M85QI/AAAAAAAAAhs/BFyVP2IYoak/s800/ResizableComponents.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void mouseDragged(MouseEvent e) {
  if(startPos==null || startingBounds==null) return;
  Point p = SwingUtilities.convertPoint((Component)e.getSource(), e.getX(), e.getY(), null);
  int deltaX = startPos.x - p.x;
  int deltaY = startPos.y - p.y;
  int newX = getX();
  int newY = getY();
  int newW = getWidth();
  int newH = getHeight();

  JComponent parent = (JComponent)getParent();
  Rectangle parentBounds = parent.getBounds();
  Dimension min = new Dimension(50,50);
  Dimension max = new Dimension(500,500);

  switch(cursor) {
    case Cursor.N_RESIZE_CURSOR: {
      if(startingBounds.height + deltaY &amp;lt; min.height) {
        deltaY = -(startingBounds.height - min.height);
      }else if(startingBounds.height + deltaY &amp;gt; max.height) {
        deltaY = max.height - startingBounds.height;
      }
      if(startingBounds.y - deltaY &amp;lt; 0) { deltaY = startingBounds.y; }
      newX = startingBounds.x;
      newY = startingBounds.y - deltaY;
      newW = startingBounds.width;
      newH = startingBounds.height + deltaY;
      break;
    }
    case Cursor.NE_RESIZE_CURSOR: {
      if(startingBounds.height + deltaY &amp;lt; min.height) {
        deltaY = -(startingBounds.height - min.height);
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ツールバーやポップアップメニューから、移動、リサイズ可能な&lt;code&gt;JTable&lt;/code&gt;や&lt;code&gt;JTree&lt;/code&gt;を&lt;code&gt;JLayeredPane&lt;/code&gt;(&lt;code&gt;JLayeredPane&lt;/code&gt;のデフォルトレイアウトは&lt;code&gt;null&lt;/code&gt;)に追加することができます。&lt;/p&gt;

&lt;p&gt;リサイズボーダーの描画などは、&lt;a href=&quot;http://www.jroller.com/santhosh/entry/resizable_components&quot;&gt;Resizable Components - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;から、マウスのドラッグによる移動、リサイズの最大値、最小値の制限などは、&lt;code&gt;%JAVA_HOME%/src/javax/swing/plaf/basic/BasicInternalFrameUI.java&lt;/code&gt;からの引用です。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK1.5&lt;/code&gt;では、&lt;code&gt;JLayeredPane#setComponentPopupMenu&lt;/code&gt;を使う場合、以下のようにダミーのマウスリスナーなどを追加しておく必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;layer.setComponentPopupMenu(new MyPopupMenu());
layer.addMouseListener(new MouseAdapter() {});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK1.6&lt;/code&gt;では、背面にある&lt;code&gt;JTable&lt;/code&gt;のヘッダが前面にロールオーバーしてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRzAZnaVI/AAAAAAAAAhw/t9TWz3YYv6U/s800/ResizableComponents1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/resizable_components&quot;&gt;Resizable Components - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/resizablecomponents</link>
                <guid>http://terai.xrea.jp/swing/resizablecomponents</guid>
                <pubDate>2008-05-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DefaultButtonの設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultButton&lt;/code&gt;を&lt;code&gt;JRootPane&lt;/code&gt;に設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DefaultButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTKiSOjSTI/AAAAAAAAAWI/e462LXNNrYU/s800/DefaultButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.getRootPane().setDefaultButton(button1);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JRootPane#setDefaultButton&lt;/code&gt;メソッドを使用して、デフォルトボタンを切り替えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フォーカスが設定したデフォルトボタンにない場合でも、&lt;kbd&gt;Enter&lt;/kbd&gt;キーを押したときに起動

&lt;ul&gt;
&lt;li&gt;ただし、ルート区画内に&lt;code&gt;JTextPane&lt;/code&gt;やフォーカスのある&lt;code&gt;JButton&lt;/code&gt;などの起動イベントを消費する別のコンポーネントがある場合は除く

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt;内にフォーカスがある場合は、&lt;kbd&gt;Enter&lt;/kbd&gt;キーを押したときに起動される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;内にフォーカスがある場合は、&lt;kbd&gt;Enter&lt;/kbd&gt;キーを押しても起動されない(改行が入力される)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;デフォルトボタンの設定を削除する場合は、&lt;code&gt;JRootPane#setDefaultButton&lt;/code&gt;に&lt;code&gt;null&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JRootPane.html#setDefaultButton%28javax.swing.JButton%29&quot;&gt;JRootPane#setDefaultButton(javax.swing.JButton)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultFocus.html&quot;&gt;Windowを開いたときのフォーカスを指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/defaultbutton</link>
                <guid>http://terai.xrea.jp/swing/defaultbutton</guid>
                <pubDate>2008-05-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameを閉じる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;を閉じます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CloseInternalFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJcTXtdNI/AAAAAAAAAUY/zL_wkJJa_Ks/s800/CloseInternalFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;closeSelectedFrameAction1 = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    JInternalFrame f = desktop.getSelectedFrame();
    if(f!=null) {
      desktop.getDesktopManager().closeFrame(f);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;closeSelectedFrameAction2 = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    JInternalFrame f = desktop.getSelectedFrame();
    if(f!=null) {
      f.doDefaultCloseAction();
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;closeSelectedFrameAction3 = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    try{
      JInternalFrame f = desktop.getSelectedFrame();
      if(f!=null) {
        f.setClosed(true);
      }
    }catch(java.beans.PropertyVetoException ex) {
      ex.printStackTrace();
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;disposeSelectedFrameAction = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    JInternalFrame f = desktop.getSelectedFrame();
    if(f!=null) {
      f.dispose();
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、選択されている&lt;code&gt;JInternalFrame&lt;/code&gt;をツールバーのボタンや&lt;kbd&gt;Esc&lt;/kbd&gt;キー(&lt;code&gt;OS&lt;/code&gt;が&lt;code&gt;Windows&lt;/code&gt;の場合のデフォルトは、&lt;kbd&gt;Ctrl+F4&lt;/kbd&gt;)で閉じることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RED&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame#dispose&lt;/code&gt;メソッドを使用&lt;/li&gt;
&lt;li&gt;閉じた後、他のフレームに選択状態が移動しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GREEN&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DesktopManager#closeFrame&lt;/code&gt;メソッドを使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BLUE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame#doDefaultCloseAction&lt;/code&gt;メソッドを使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YELLOW&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame#setClosed(true)&lt;/code&gt;メソッドを使用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5&lt;/code&gt; + &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;では、&lt;code&gt;JInternalFrame&lt;/code&gt;を閉じたとき、アイコン化されている&lt;code&gt;JInternalFrame&lt;/code&gt;には選択状態は移動しません。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mail.openjdk.java.net/pipermail/swing-dev/2013-April/002688.html&quot;&gt;&lt;Swing Dev&gt; 8 Review request for 8012004: JINTERNALFRAME NOT BEING FINALIZED AFTER CLOSING&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4759312&quot;&gt;Bug ID: 4759312 JInternalFrame Not Being Finalized After Closing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/closeinternalframe</link>
                <guid>http://terai.xrea.jp/swing/closeinternalframe</guid>
                <pubDate>2008-05-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Windowのフルスクリーン化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDialog&lt;/code&gt;や&lt;code&gt;JFrame&lt;/code&gt;などを、フルスクリーン表示に切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FullScreen&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTNRUUD2xI/AAAAAAAAAag/G7fNPgecnss/s800/FullScreen.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void toggleFullScreenWindow() {
  GraphicsEnvironment graphicsEnvironment
    = GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice graphicsDevice
    = graphicsEnvironment.getDefaultScreenDevice();
  if(graphicsDevice.getFullScreenWindow()==null) {
    dialog.dispose(); //destroy the native resources
    dialog.setUndecorated(true);
    dialog.setVisible(true); //rebuilding the native resources
    graphicsDevice.setFullScreenWindow(dialog);
  }else{
    graphicsDevice.setFullScreenWindow(null);
    dialog.dispose();
    dialog.setUndecorated(false);
    dialog.setVisible(true);
    dialog.repaint();
  }
  requestFocusInWindow();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、&lt;code&gt;JDialog&lt;/code&gt;をフルスクリーン表示とウィンドウ表示に切り替えることが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;F11&lt;/kbd&gt;キー、ダブルクリック

&lt;ul&gt;
&lt;li&gt;フルスクリーン表示、ウィンドウ表示の切り替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;キー

&lt;ul&gt;
&lt;li&gt;アプリケーション終了&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;フルスクリーン表示とウィンドウ表示を切り替える前に、タイトルバーの非表示、表示も&lt;code&gt;setUndecorated&lt;/code&gt;メソッドで切り替えていますが、このメソッドを使用する前に一旦&lt;code&gt;dispose&lt;/code&gt;してウィンドウのネイティブリソースを開放しておく必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setUndecorated(boolean undecorated)&lt;/code&gt;は、ダイアログが表示されていないときにだけ呼び出すことができますが、この「表示されていない」は &lt;code&gt;isVisible()&lt;/code&gt;ではなく、&lt;code&gt;isDisplayable()&lt;/code&gt;が&lt;code&gt;false&lt;/code&gt;の意味なので、&lt;code&gt;dialog.setVisible(false);&lt;/code&gt;としただけでは、 &lt;code&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.awt.IllegalComponentStateException: The dialog is **displayable**.&lt;/code&gt; が発生します。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Window.html#dispose%28%29&quot;&gt;Window#dispose()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Dialog.html#setUndecorated%28boolean%29&quot;&gt;Dialog#setUndecorated(boolean)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Component.html#isDisplayable%28%29&quot;&gt;Component#isDisplayable()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;del&gt;&lt;code&gt;WebStart&lt;/code&gt;(署名無し)から実行した場合、タスクバー(&lt;code&gt;Windows&lt;/code&gt;)などを消してフルスクリーン化は出来ないようです。&lt;/del&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/extra/fullscreen/exclusivemode.html&quot;&gt;Full-Screen Exclusive Mode (The Java™ Tutorials &amp;gt; Bonus &amp;gt; Full-Screen Exclusive Mode API)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fullscreen</link>
                <guid>http://terai.xrea.jp/swing/fullscreen</guid>
                <pubDate>2008-04-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelなどのHtmlレンダリングを無効化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;などの&lt;code&gt;Html&lt;/code&gt;レンダリングを無効化して、タグ文字列をそのまま表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HtmlDisable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTODbO-ktI/AAAAAAAAAbw/bTVYI0sgEY4/s800/HtmlDisable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;label1.putClientProperty(&quot;html.disable&quot;, Boolean.TRUE);
label1.setText(&quot;&amp;lt;html&amp;gt;&amp;lt;font color=red&amp;gt;Html Test&amp;lt;/font&amp;gt;&amp;lt;/html&amp;gt;&quot;);
label1.setToolTipText(&quot;&amp;lt;html&amp;gt;&amp;amp;lt;html&amp;amp;gt;&amp;amp;lt;font color=red&amp;amp;gt;Html Test&amp;amp;lt;/font&amp;amp;gt;&amp;amp;lt;/html&amp;amp;gt;&amp;lt;/html&amp;gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;などに&lt;code&gt;putClientProperty(&amp;quot;html.disable&amp;quot;, Boolean.TRUE)&lt;/code&gt;を設定することで、タグをレンダリングせずにそのまま文字列として表示しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;に、&lt;code&gt;putClientProperty(&amp;quot;html.disable&amp;quot;, Boolean.TRUE)&lt;/code&gt;としても、その &lt;code&gt;JLabel&lt;/code&gt;の&lt;code&gt;JToolTip&lt;/code&gt;には反映されないので、&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;タグの中で文字実体参照を使っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Html&lt;/code&gt;レンダリングされた文字列を、&lt;code&gt;setEnabled(false)&lt;/code&gt;で無効化(灰色にする)する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHtmlLabel.html&quot;&gt;Htmlを使ったJLabelとJEditorPaneの無効化&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/htmldisable</link>
                <guid>http://terai.xrea.jp/swing/htmldisable</guid>
                <pubDate>2008-04-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのアイテムを選択不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストで、指定したアイテムを選択不可にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableItemComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTLHzjDYpI/AAAAAAAAAXE/M4bkzWJetUI/s800/DisableItemComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DisableItemComboBox&amp;lt;E&amp;gt; extends JComboBox&amp;lt;E&amp;gt; {
  private final Set&amp;lt;Integer&amp;gt; disableIndexSet = new HashSet&amp;lt;&amp;gt;();
  private boolean isDisableIndex;
  private final Action up = new AbstractAction() {
    @Override public void actionPerformed(ActionEvent e) {
      int si = getSelectedIndex();
      for (int i = si - 1; i &amp;gt;= 0; i--) {
        if (!disableIndexSet.contains(i)) {
          setSelectedIndex(i);
          break;
        }
      }
    }
  };
  private final Action down = new AbstractAction() {
    @Override public void actionPerformed(ActionEvent e) {
      int si = getSelectedIndex();
      for (int i = si + 1; i &amp;lt; getModel().getSize(); i++) {
        if (!disableIndexSet.contains(i)) {
          setSelectedIndex(i);
          break;
        }
      }
    }
  };
  public DisableItemComboBox() {
    super();
  }
  public DisableItemComboBox(ComboBoxModel&amp;lt;E&amp;gt; aModel) {
    super(aModel);
  }
  public DisableItemComboBox(E[] items) {
    super(items);
  }
  @Override public void updateUI() {
    super.updateUI();
    setRenderer(new DefaultListCellRenderer() {
      @Override public Component getListCellRendererComponent(
          JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        Component c;
        if (disableIndexSet.contains(index)) {
          c = super.getListCellRendererComponent(list, value, index, false, false);
          c.setEnabled(false);
        } else {
          c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
          c.setEnabled(true);
        }
        return c;
      }
    });
    ActionMap am = getActionMap();
    am.put(&quot;selectPrevious3&quot;, up);
    am.put(&quot;selectNext3&quot;, down);
    InputMap im = getInputMap();
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),      &quot;selectPrevious3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),   &quot;selectPrevious3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),    &quot;selectNext3&quot;);
    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0), &quot;selectNext3&quot;);
  }
  public void setDisableIndex(Set&amp;lt;Integer&amp;gt; set) {
    disableIndexSet.clear();
    for (Integer i : set) {
      disableIndexSet.add(i);
    }
  }
  @Override public void setPopupVisible(boolean v) {
    if (!v &amp;amp;&amp;amp; isDisableIndex) {
      isDisableIndex = false;
    } else {
      super.setPopupVisible(v);
    }
  }
  @Override public void setSelectedIndex(int index) {
    if (disableIndexSet.contains(index)) {
      isDisableIndex = true;
    } else {
      //isDisableIndex = false;
      super.setSelectedIndex(index);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下の方法でドロップダウンリストの特定のアイテムを選択できないように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表示

&lt;ul&gt;
&lt;li&gt;セルレンダラーで&lt;code&gt;setEnabled&lt;/code&gt;などを設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;選択不可

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setSelectedIndex&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;選択不可アイテムをクリックしてもポップアップを閉じない

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setPopupVisible&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;キー操作で選択不可アイテムを無視

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ActionMap&lt;/code&gt;、&lt;code&gt;InputMap&lt;/code&gt;の設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledItem.html&quot;&gt;JListの任意のItemを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disableitemcombobox</link>
                <guid>http://terai.xrea.jp/swing/disableitemcombobox</guid>
                <pubDate>2008-04-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableでソート中のカラムセル色</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;どのカラムでソートされているかを表示するために、セルの背景色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SortColumnColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTZ75OnPI/AAAAAAAAAkU/k4lx4c2XKK8/s800/SortColumnColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  private final Color evenColor = new Color(255, 250, 250);
  @Override public Component prepareRenderer(
      TableCellRenderer tcr, int row, int column) {
    Component c = super.prepareRenderer(tcr, row, column);
    if(isRowSelected(row)) {
      c.setForeground(getSelectionForeground());
      c.setBackground(getSelectionBackground());
    }else{
      c.setForeground(getForeground());
      c.setBackground(isSortingColumn(column) ? evenColor
                                              : getBackground());
    }
    return c;
  }
  private boolean isSortingColumn(int column) {
    RowSorter sorter = getRowSorter();
    if(sorter!=null) {
      java.util.List list = sorter.getSortKeys();
      if(list.size()&amp;gt;0) {
        RowSorter.SortKey key0 = (RowSorter.SortKey)list.get(0);
        if(column==convertColumnIndexToView(key0.getColumn())) {
          return true;
        }
      }
    }
    return false;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable#getSortKeys()#getSortKeys()&lt;/code&gt;で、ソート中のカラムを取得し、第一キーのカラムセル色を変更しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;などの場合、&lt;code&gt;BooleanCellRenderer&lt;/code&gt;(&lt;code&gt;JCheckBox&lt;/code&gt;を使った&lt;code&gt;Boolean&lt;/code&gt;用のデフォルトセルレンダラー)を使った列の背景色を変更できない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-01-15 (火) 16:33:54&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/sortcolumncolor</link>
                <guid>http://terai.xrea.jp/swing/sortcolumncolor</guid>
                <pubDate>2008-04-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelの文字揃え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;で、左右中央両端などの文字揃えをテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/JustifiedLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTOwQzSk-I/AAAAAAAAAc4/bD-z_hTSHB8/s800/JustifiedLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l0 = new JLabel(&quot;打率&quot;);
JLabel l1 = new JLabel(&quot;打率&quot;, JLabel.RIGHT);
JLabel l2 = new JustifiedLabel(&quot;打率&quot;);
JLabel l3 = new JLabel(&quot;出塁率&quot;, JLabel.CENTER);
JLabel l4 = new JustifiedLabel(&quot;出塁率&quot;);
JLabel l5 = new JustifiedLabel(&quot;チーム出塁率&quot;);
//...
class JustifiedLabel extends JLabel {
  private GlyphVector gvtext;
  private int prevWidth = -1;
  public JustifiedLabel() {
    this(null);
  }
  public JustifiedLabel(String str) {
    super(str);
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D) g.create();
    Insets i = getInsets();
    int w = getWidth() - i.left - i.right;
    if (w != prevWidth) {
      gvtext = getJustifiedGlyphVector(getText(), getFont(), g2.getFontRenderContext());
      prevWidth = w;
    }
    if (gvtext == null) {
      super.paintComponent(g);
    } else {
      g2.drawGlyphVector(gvtext, i.left, i.top + getFont().getSize());
    }
    g2.dispose();
  }
  private GlyphVector getJustifiedGlyphVector(String str, Font font, FontRenderContext frc) {
    GlyphVector gv = font.createGlyphVector(frc, str);
    Rectangle2D r = gv.getVisualBounds();
    float jwidth = (float) getWidth();
    float vwidth = (float) r.getWidth();
    if (jwidth &amp;lt; vwidth) {
      return gv;
    }
    float xx = (jwidth - vwidth) / (float) (gv.getNumGlyphs() - 1);
    float xpos = 0f;
    Point2D gmPos = new Point2D.Double(0.0d, 0.0d);
    for (int i = 0; i &amp;lt; gv.getNumGlyphs(); i++) {
      GlyphMetrics gm = gv.getGlyphMetrics(i);
      gmPos.setLocation(xpos, 0);
      gv.setGlyphPosition(i, gmPos);
      xpos = xpos + gm.getAdvance() + xx;
    }
    return gv;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;の文字揃えは、デフォルトが左揃えで、その他に右揃え、中央揃えがあります。両端揃え(文字の均等割り付け)は存在しないようなので、上記のサンプルでは、&lt;code&gt;JustifiedLabel&lt;/code&gt;(幅が足りない場合などは、通常の&lt;code&gt;JLabel&lt;/code&gt;と同様にクリップ)を作成して使用しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane&lt;/code&gt;に挿入、一文字の場合などのテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//package example;
//-*- mode:java; encoding:utf-8 -*-
// vim:set fileencoding=utf-8:
//@homepage@
import java.awt.*;
import java.awt.event.*;
import java.awt.font.*;
import java.awt.geom.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.text.*;

public class JustifiedLabelDemo {
  public JComponent makeUI() {
    String s = &quot;\u2605&quot;;
    JTextPane textPane = new JTextPane();
    textPane.insertComponent(new JustifiedLabel(s));
    textPane.replaceSelection(&quot;: 111\n&quot;);
    textPane.insertComponent(new JustifiedLabel(s+s));
    textPane.replaceSelection(&quot;: 2222222\n&quot;);
    textPane.insertComponent(new JustifiedLabel(s+s+s));
    textPane.replaceSelection(&quot;: 3333\n&quot;);
    textPane.insertComponent(new JustifiedLabel(s+s+s+s));
    textPane.replaceSelection(&quot;: 4444444\n&quot;);
    textPane.insertComponent(new JustifiedLabel(s+s+s+s+s));
    textPane.replaceSelection(&quot;: 555\n&quot;);
    return new JScrollPane(textPane);
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    UIManager.put(&quot;swing.boldMetal&quot;, Boolean.FALSE);
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new JustifiedLabelDemo().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
class JustifiedLabel extends JLabel {
  private GlyphVector gvtext;
  private int prev_width = -1;
  public JustifiedLabel() {
    this(null);
  }
  public JustifiedLabel(String str) {
    super(str);
    Dimension d = getPreferredSize();
    int baseline = getBaseline(d.width, d.height);
    setAlignmentY(baseline/(float)d.height);
  }
  @Override public Dimension getMinimumSize() {
    return getPreferredSize();
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.width = getWidth();
    return d;
  }
  @Override public int getWidth() {
    return 120;
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    Insets i = getInsets();
    int w = getWidth() - i.left - i.right;
    if(w!=prev_width) {
      gvtext = getJustifiedGlyphVector(getText(), getFont(), g2.getFontRenderContext());
      prev_width = w;
    }
    if(gvtext!=null) {
      g2.drawGlyphVector(gvtext, i.left, i.top + getFont().getSize());
    } else {
      super.paintComponent(g);
    }
  }
  private GlyphVector getJustifiedGlyphVector(String str, Font font, FontRenderContext frc) {
    GlyphVector gv = font.createGlyphVector(frc, str);
    Rectangle2D r = gv.getVisualBounds();
    float jwidth = (float)getWidth();
    float vwidth = (float)r.getWidth();
    if(jwidth&amp;lt;vwidth) return null;
    int num = gv.getNumGlyphs();
    float xx = (jwidth-vwidth) / (float)(num-1);
    float xpos = num==1?(jwidth-vwidth)*.5f:0f;
    Point2D gmPos = new Point2D.Double(0.0d, 0.0d);
    if(num==1) System.out.println(gmPos);
    for(int i=0; i&amp;lt;num; i++) {
      GlyphMetrics gm = gv.getGlyphMetrics(i);
      gmPos.setLocation(xpos, 0);
      gv.setGlyphPosition(i, gmPos);
      xpos += gm.getAdvance() + xx;
    }
    return gv;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/font/TextLayout.html#getJustifiedLayout%28float%29&quot;&gt;TextLayout#getJustifiedLayout(float)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/justifiedlabel</link>
                <guid>http://terai.xrea.jp/swing/justifiedlabel</guid>
                <pubDate>2008-03-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableをソートした後の選択状態</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;で導入された&lt;code&gt;RowSorter&lt;/code&gt;を使って、&lt;code&gt;JTable&lt;/code&gt;をソートした場合、直前の選択状態がどう変化するかテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/UpdateSelectionOnSort&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTWaXC_E3I/AAAAAAAAApM/H9h2pJw-VSQ/s800/UpdateSelectionOnSort.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setUpdateSelectionOnSort(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UpdateSelectionOnSort&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ソート後の選択状態は、&lt;code&gt;JTable#setUpdateSelectionOnSort&lt;/code&gt;メソッドで切り替えることが出来ます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUpdateSelectionOnSort(true)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ソート前と、「同じ内容の行」が選択された状態になる(デフォルト)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setUpdateSelectionOnSort(false)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ソート前と、「表示上同じ行」が選択された状態になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClearSelectionOnSort&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;メソッドが用意されているわけではないので、選択状態をクリアする場合は、&lt;code&gt;TableRowSorter#toggleSortOrder(int)&lt;/code&gt;をオーバーライドしたり、以下のように&lt;code&gt;JTableHeader&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;を追加して、&lt;code&gt;table.clearSelection()&lt;/code&gt;する必要があります。&lt;/li&gt;
&lt;li&gt;チェックなし

&lt;ul&gt;
&lt;li&gt;選択状態を維持(デフォルト)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;チェックあり

&lt;ul&gt;
&lt;li&gt;ソート後は選択状態をクリア&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;などで&lt;code&gt;TableSorter.java&lt;/code&gt;を使用した場合の動作と同じになるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.getTableHeader().addMouseListener(new MouseAdapter() {
  @Override public void mouseClicked(MouseEvent e) { //mousePressed(MouseEvent e) {
    if(table.isEditing()) table.getCellEditor().stopCellEditing();
    table.clearSelection();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/updateselectiononsort</link>
                <guid>http://terai.xrea.jp/swing/updateselectiononsort</guid>
                <pubDate>2008-03-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuの取得を親に委譲</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;親コンポーネントに設定されている&lt;code&gt;JPopupMenu&lt;/code&gt;を取得して、これを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InheritsPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTOe9ph-LI/AAAAAAAAAcc/iwxbgnjvxg8/s800/InheritsPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane(table);
scroll.setComponentPopupMenu(new TablePopupMenu());
//scroll.getViewport().setInheritsPopupMenu(true); // JDK 1.5
table.setInheritsPopupMenu(true);
//table.getTableHeader().setInheritsPopupMenu(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private class TablePopupMenu extends JPopupMenu {
  private final Action deleteAction = new DeleteAction(&quot;delete&quot;, null);
  private final Action createAction = new CreateAction(&quot;add&quot;, null);
  public TablePopupMenu() {
    super();
    add(createAction);
    addSeparator();
    add(deleteAction);
  }
  @Override public void show(Component c, int x, int y) {
    int[] l = table.getSelectedRows();
    deleteAction.setEnabled(l!=null &amp;amp;&amp;amp; l.length&amp;gt;0);
    super.show(c, x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JScrollPane&lt;/code&gt;に&lt;code&gt;setComponentPopupMenu(JPopupMenu)&lt;/code&gt;メソッドで、ポップアップメニューを追加し、&lt;code&gt;JTable&lt;/code&gt;の方は、&lt;code&gt;setInheritsPopupMenu(true)&lt;/code&gt;とすることで、親の&lt;code&gt;JScrollPane&lt;/code&gt;に設定したポップアップメニューを使用するようになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;では、&lt;code&gt;JViewport&lt;/code&gt;も&lt;code&gt;setInheritsPopupMenu(true)&lt;/code&gt;とする必要がありましたが、&lt;code&gt;JDK 1.6&lt;/code&gt;ではデフォルトが変更されているようです。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;では、&lt;code&gt;JTable&lt;/code&gt;のヘッダも、&lt;code&gt;setInheritsPopupMenu(true)&lt;/code&gt;で、&lt;code&gt;JScrollPane&lt;/code&gt;からポップアップメニューを取得して表示することができます。ただし、&lt;code&gt;JDK 1.6&lt;/code&gt; + &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で、&lt;code&gt;JTableHeader&lt;/code&gt;上にポップアップメニューを表示すると、以下のようにうまく再描画できない場合があるようです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ヘッダを右クリックしながら、右端にドラッグ、ポップアップ表示&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;キーで、ポップアップ非表示&lt;/li&gt;
&lt;li&gt;ヘッダ上で右クリック、ポップアップ、&lt;kbd&gt;Esc&lt;/kbd&gt;キー&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOhYdteZI/AAAAAAAAAcg/CzWZOSF9pVw/s800/InheritsPopupMenu1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
public class HeaderPopupMenuTest {
  public JComponent makeUI() {
    JScrollPane scroll = new JScrollPane(makeTable());
    scroll.setComponentPopupMenu(new TablePopupMenu());
    JPanel p = new JPanel(new BorderLayout());
    p.add(scroll);
    return p;
  }
  private JTable makeTable() {
    String[] columnNames = {&quot;String&quot;, &quot;Integer&quot;, &quot;Boolean&quot;};
    Object[][] data = { {&quot;AAA&quot;, 1, true}, {&quot;BBB&quot;, 2, false} };
    DefaultTableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
        return getValueAt(0, column).getClass();
      }
    };
    JTable table = new JTable(model);
    table.setInheritsPopupMenu(true);
    table.getTableHeader().setInheritsPopupMenu(true);
    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    return table;
  }
  private class TablePopupMenu extends JPopupMenu {
    public TablePopupMenu() {
      super();
      add(new DummyAction(&quot;add&quot;));
      addSeparator();
      add(new DummyAction(&quot;delete&quot;));
    }
  }
  class DummyAction extends AbstractAction{
    public DummyAction(String label) {
      super(label);
    }
    @Override public void actionPerformed(ActionEvent e) {}
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    try{
      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
    }catch(Exception e) {
      e.printStackTrace();
    }
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new HeaderPopupMenuTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComponentPopupMenu.html&quot;&gt;JPopupMenuをコンポーネントに追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/inheritspopupmenu</link>
                <guid>http://terai.xrea.jp/swing/inheritspopupmenu</guid>
                <pubDate>2008-03-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuをコンポーネントに追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;をコンポーネントに追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComponentPopupMenu&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTKBw4_YtI/AAAAAAAAAVU/J_aFRLSj-VU/s800/ComponentPopupMenu.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextArea textArea = new JTextArea(&quot;ComponentPopupMenu Test&quot;);
textArea.setComponentPopupMenu(new TextComponentPopupMenu());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TextComponentPopupMenu extends JPopupMenu {
  private final Action cutAction = new DefaultEditorKit.CutAction();
  private final Action copyAction = new DefaultEditorKit.CopyAction();
  private final Action pasteAction = new DefaultEditorKit.PasteAction();
  private final Action deleteAction;
  private final Action selectAllAction;
  public TextComponentPopupMenu() {
    super();
    add(cutAction);
    add(copyAction);
    add(pasteAction);
    addSeparator();
    add(deleteAction = new AbstractAction(&quot;delete&quot;) {
      @Override public void actionPerformed(ActionEvent evt) {
        ((JTextComponent)getInvoker()).replaceSelection(null);
      }
    });
    addSeparator();
    add(selectAllAction = new AbstractAction(&quot;select all&quot;) {
      @Override public void actionPerformed(ActionEvent evt) {
        ((JTextComponent)getInvoker()).selectAll();
      }
    });
    //ActionMap am = textArea.getActionMap();
    //add(cutAction = am.get(&quot;cut-to-clipboard&quot;));
    //add(copyAction = am.get(&quot;copy-to-clipboard&quot;));
    //add(am.get(&quot;paste-from-clipboard&quot;));
    //addSeparator();
    //add(deleteAction = am.get(&quot;delete-next&quot;));
    //addSeparator();
    //add(am.get(&quot;select-all&quot;));
  }
  @Override public void show(Component c, int x, int y) {
    JTextComponent textArea = (JTextComponent)c;
    boolean flg = textArea.getSelectedText()!=null;
    cutAction.setEnabled(flg);
    copyAction.setEnabled(flg);
    deleteAction.setEnabled(flg);
    super.show(c, x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextArea&lt;/code&gt;に&lt;code&gt;setComponentPopupMenu(JPopupMenu)&lt;/code&gt;メソッドで、ポップアップメニューを追加しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;でこのメソッドが追加されたため、各コンポーネントにマウスリスナーを設定して、&lt;code&gt;e.isPopupTrigger()&lt;/code&gt;でポップアップを表示するクリックかを判断するといったコードを書く必要が無くなりました。&lt;/p&gt;

&lt;p&gt;ポップアップメニューを表示するときに、コンポーネントの状態(例えば&lt;code&gt;JTable&lt;/code&gt;や&lt;code&gt;JList&lt;/code&gt;などでの行選択の有無や、テキストが選択されてるかとどうかなどの条件)で、メニューが実行可か不可かを変更したい場合は、&lt;code&gt;JPopupMenu#show(Component, int, int)&lt;/code&gt;メソッドをオーバーライドして使用します。&lt;/p&gt;

&lt;p&gt;このサンプルでは、テキストが選択されている場合だけ、カット、コピー、削除メニューが有効になるよう設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;PopupMenuListener&lt;/code&gt;を追加しても、同様の処理を行うことが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: &lt;code&gt;JTabbedPane&lt;/code&gt;などで、どのタブの上でポップアップが表示されるかなどを取得したい場合&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPane.html&quot;&gt;JTabbedPaneでタブを追加削除&lt;/a&gt;は、この方法だと面倒かも…&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPopupMenu popup = new JPopupMenu();
final Action cutAction = new DefaultEditorKit.CutAction();
final Action copyAction = new DefaultEditorKit.CopyAction();
final Action pasteAction = new DefaultEditorKit.PasteAction();
final Action deleteAction = new AbstractAction(&quot;delete&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JPopupMenu p = (JPopupMenu)e.getSource();
    ((JTextComponent)p.getInvoker()).replaceSelection(null);
  }
};
final Action selectAllAction = new AbstractAction(&quot;select all&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JPopupMenu p = (JPopupMenu)e.getSource();
    ((JTextComponent)p.getInvoker()).selectAll();
  }
};
popup.add(cutAction);
popup.add(copyAction);
popup.add(pasteAction);
popup.addSeparator();
popup.add(deleteAction);
popup.addSeparator();
popup.add(selectAllAction);
popup.addPopupMenuListener(new PopupMenuListener() {
  @Override public void popupMenuCanceled(PopupMenuEvent e) {}
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}
  @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
    JPopupMenu p = (JPopupMenu)e.getSource();
    JTextComponent c = (JTextComponent)p.getInvoker();
    boolean flg = c.getSelectedText()!=null;
    cutAction.setEnabled(flg);
    copyAction.setEnabled(flg);
    deleteAction.setEnabled(flg);
  }
});
textArea.setComponentPopupMenu(popup);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InheritsPopupMenu.html&quot;&gt;JPopupMenuの取得を親に委譲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPane.html&quot;&gt;JTabbedPaneでタブを追加削除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6675802&quot;&gt;Bug ID: 6675802 Regression: heavyweight popups cause SecurityExceptions in applets&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-05 (土) 20:59:02&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6299213&quot;&gt;Bug ID: 6299213 The PopupMenu is not updated if the LAF is changed (incomplete fix of 4962731)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-10 (木) 18:58:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/componentpopupmenu</link>
                <guid>http://terai.xrea.jp/swing/componentpopupmenu</guid>
                <pubDate>2008-03-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneの余白にJButtonを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブエリアに余白を作成し、そこに&lt;code&gt;OverlayLayout&lt;/code&gt;を使って&lt;code&gt;JButton&lt;/code&gt;を配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabbedPaneWithButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTUOdUT3wI/AAAAAAAAAls/N2JYE_Dcr_Y/s800/TabbedPaneWithButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JButton b = new ToolBarButton(icon);
b.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    tabs.addTab(&quot;qwerqwer&quot;, new JLabel(&quot;yetyet&quot;));
  }
});
tabs = new ClippedTitleTabbedPane() {
  @Override public void updateUI() {
    UIManager.put(&quot;TabbedPane.tabAreaInsets&quot;, null); //uninstall
    super.updateUI();
    setAlignmentX(0.0f);
    setAlignmentY(0.0f);
    b.setBorder(BorderFactory.createEmptyBorder(3,3,3,3));
    b.setAlignmentX(0.0f);
    b.setAlignmentY(0.0f);
    tabAreaInsets = getTabAreaInsets();
    UIManager.put(&quot;TabbedPane.tabAreaInsets&quot;,
                  getButtonPaddingTabAreaInsets(b, getTabInsets(), tabAreaInsets));
    super.updateUI();
  }
  private Insets tabAreaInsets = null;
};
JPanel p = new JPanel();
p.setLayout(new OverlayLayout(p));
p.add(button);
p.add(tabs);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//Insets ti = UIManager.getInsets(&quot;TabbedPane.tabInsets&quot;);
//Insets ai = UIManager.getInsets(&quot;TabbedPane.tabAreaInsets&quot;);
public Insets getButtonPaddingTabAreaInsets(JButton b, Insets ti, Insets ai) {
  FontMetrics fm = b.getFontMetrics(b.getFont());
  int tih = b.getPreferredSize().height-fm.getHeight()-ti.top-ti.bottom-ai.bottom;
  return new Insets(Math.max(ai.top, tih), b.getPreferredSize().width+ai.left, ai.bottom, ai.right);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、タブブラウザ風の動作となるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タブエリアの左上にあるボタンをクリックするとタブが追加される&lt;/li&gt;
&lt;li&gt;メニューからすべてのタブを削除する&lt;/li&gt;
&lt;li&gt;タブエリアに余裕がある場合は&lt;code&gt;80px&lt;/code&gt;、無い場合は(タブエリアの幅/タブ数)と、常にタブ幅は一定

&lt;ul&gt;
&lt;li&gt;折り返しや、スクロールが発生するとレイアウトが崩れるため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;コンポーネントの追加には、以下の方法を使用しています(比較:&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPaneWithCheckBox.html&quot;&gt;JTabbedPaneの余白にJCheckBoxを配置&lt;/a&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ボタンの幅だけ、&lt;code&gt;tabAreaInsets&lt;/code&gt;の左余白を拡大する

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.getInsets(&amp;quot;TabbedPane.tabAreaInsets&amp;quot;)&lt;/code&gt;などを使用するため、&lt;code&gt;Synth&lt;/code&gt;など(&lt;code&gt;GTK&lt;/code&gt;, &lt;code&gt;Nimbus&lt;/code&gt;)の&lt;code&gt;LookAndFeel&lt;/code&gt;には対応していない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6634504&quot;&gt;Nimbus L&amp;amp;F: java.lang.NullPointer Exception throws when extended BaseUI Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverlayLayout&lt;/code&gt;で、&lt;code&gt;JButton&lt;/code&gt;と&lt;code&gt;JTabbedPane&lt;/code&gt;(上で作った余白に)を重ねて表示

&lt;ul&gt;
&lt;li&gt;このため、&lt;code&gt;JTabbedPane.TOP&lt;/code&gt;にしか対応していない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.famfamfam.com/lab/icons/mini/&quot;&gt;famfamfam.com: Mini Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;追加アイコンを拝借しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OverlayLayout.html&quot;&gt;OverlayLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPaneWithCheckBox.html&quot;&gt;JTabbedPaneの余白にJCheckBoxを配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTabLabel.html&quot;&gt;JTabbedPaneのタイトルをクリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1389350&quot;&gt;Swing - Any layout suggestions for this?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabbedpanewithbutton</link>
                <guid>http://terai.xrea.jp/swing/tabbedpanewithbutton</guid>
                <pubDate>2008-03-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SingleInstanceServiceを使って Web Start アプリケーションの重複起動を禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SingleInstanceService&lt;/code&gt;を使って、&lt;code&gt;Web Start&lt;/code&gt;アプリケーションの重複起動を禁止したり、引数の取得を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SingleInstanceService&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTTIU5TktI/AAAAAAAAAj4/muKNMFrhEcE/s800/SingleInstanceService.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JFrame frame = new JFrame(&quot;@title@&quot;);
try {
  SingleInstanceService sis =
      (SingleInstanceService)ServiceManager.lookup(&quot;javax.jnlp.SingleInstanceService&quot;);
  sis.addSingleInstanceListener(new SingleInstanceListener() {
    private int count = 0;
    @Override public void newActivation(String[] args) {
      //System.out.println(EventQueue.isDispatchThread());
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          JOptionPane.showMessageDialog(frame, &quot;&quot;);
          frame.setTitle(&quot;title:&quot;+count);
          count++;
        }
      });
    }
  });
} catch(UnavailableServiceException use) {
  use.printStackTrace();
  return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Web Start&lt;/code&gt;アプリケーションの場合、&lt;code&gt;javax.jnlp.SingleInstanceService&lt;/code&gt;に、&lt;code&gt;SingleInstanceListener&lt;/code&gt;を追加することで、新しい次のインスタンスの起動やその時の引数を取得することが簡単に出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;メモ: &lt;code&gt;JDK 1.6.0_03&lt;/code&gt;では、&lt;code&gt;SingleInstanceService&lt;/code&gt;は正常に動作しない&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;で修正済み&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;コンパイルに、&lt;code&gt;javaws.jar&lt;/code&gt;が必要なので、以下のようなクラスパスを設定します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set CLASSPATH=%JAVA_HOME%/jre/lib/javaws.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;または、&lt;code&gt;build.xml&lt;/code&gt;などに記入してください。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;path id=&quot;project.class.path&quot;&amp;gt;
  &amp;lt;pathelement location=&quot;${build.dest}&quot; /&amp;gt;
  &amp;lt;pathelement location=&quot;${java.home}/lib/javaws.jar&quot; /&amp;gt;
  &amp;lt;pathelement path=&quot;${java.class.path}&quot; /&amp;gt;
&amp;lt;/path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://javahowto.blogspot.com/2006/05/javahome-vs-javahome.html&quot;&gt;Java How To ...: JAVA_HOME vs java.home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/jre/api/javaws/jnlp/javax/jnlp/SingleInstanceService.html&quot;&gt;SingleInstanceService (JNLP API Reference 1.5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6631056&quot;&gt;Bug ID: 6631056 SingleInstanceService does not work on JRE 1.6.0_03&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via:&lt;a href=&quot;https://forums.oracle.com/thread/1307009&quot;&gt;Java Web Start &amp;amp; JNLP - How to use singleinstance service with a JWS application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://appframework.dev.java.net/servlets/ReadMsg?listName=users&amp;amp;msgNo=396&quot;&gt;Java Web Start SingleInstanceService - appframework(JSR-296)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SingleInstanceApplication.html&quot;&gt;ServerSocketを使ってアプリケーションの複数起動を禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/singleinstanceservice</link>
                <guid>http://terai.xrea.jp/swing/singleinstanceservice</guid>
                <pubDate>2008-02-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ServerSocketを使ってアプリケーションの複数起動を禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ServerSocket&lt;/code&gt;を使ってポートをロック代わりに使用し、アプリケーションの複数起動を禁止します。&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/toc.html&quot;&gt;Java Swing Hacks #68 単一インスタンスのアプリケーションを作る&lt;/a&gt; を参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SingleInstanceApplication&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTTF6N0NjI/AAAAAAAAAj0/Ld2Nyv4QXsI/s800/SingleInstanceApplication.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ServerSocket socket = null;
try {
  socket = new ServerSocket(38765);
}catch(IOException e) {
  socket = null;
}
if(socket==null) {
  JOptionPane.showMessageDialog(null, &quot;An instance of the application is already running...&quot;);
  return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Java Swing Hacks #68&lt;/code&gt;で紹介されている、ポートをロック代わりに使用する方法(任意のポートにバインドできるアプリケーションは一つだけ)で、起動できるアプリケーションを一つに制限しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、警告ダイアログを表示して二番目のアプリケーションは終了するだけですが、&lt;code&gt;#68&lt;/code&gt;のサンプルでは、ポートへの接続要求が来るまで待機し、要求が発生するとソケット入力ストリームを開いて、コマンドラインオプションを取得する例(タブブラウザなどのように既に起動しているアプリケーションで別のコンテンツを開く場合に使用する)も記述されています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、ポートを使用せずに&lt;code&gt;JDK 6&lt;/code&gt;にある&lt;code&gt;Attach API&lt;/code&gt;を使ったり、ロックファイルを使用して起動するアプリケーションの数を制御する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/Kazzz/20071218/p1&quot;&gt;PseudoFileSemaphore (アプリケーションのインスタンス数を制御するには-その3) - KazzzのJとNのはざまで&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/Kazzz/20071221/p1&quot;&gt;Attach API (アプリケーションのインスタンス数を制御するには-その4) - KazzzのJとNのはざまで&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/toc.html&quot;&gt;Java Swing Hacks #68 単一インスタンスのアプリケーションを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SingleInstanceService.html&quot;&gt;SingleInstanceServiceを使って Web Start アプリケーションの重複起動を禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/singleinstanceapplication</link>
                <guid>http://terai.xrea.jp/swing/singleinstanceapplication</guid>
                <pubDate>2008-02-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>AWTEventを取得して入力イベントを監視</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AWTEvent&lt;/code&gt;を取得して、マウスやキーボードの入力イベントを監視します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DispatchEvent&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTLPUOE2MI/AAAAAAAAAXQ/5qrFGk7E5GM/s800/DispatchEvent.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static int DELAY = 10*1000; //10s
private final javax.swing.Timer timer = new javax.swing.Timer(DELAY, new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    setTestConnected(false);
    Toolkit.getDefaultToolkit().removeAWTEventListener(awtEvent);
    timer.stop();
  }
});
private final AWTEventListener awtEvent = new AWTEventListener() {
  @Override public void eventDispatched(AWTEvent e) {
    if(timer!=null &amp;amp;&amp;amp; timer.isRunning()) {
      //System.out.println(&quot;timer.restart()&quot;);
      timer.restart();
    }
  }
};
JButton button = new JButton(new AbstractAction(&quot;Connect&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    setTestConnected(true);
    Toolkit.getDefaultToolkit().addAWTEventListener(awtEvent,
        AWTEvent.KEY_EVENT_MASK + AWTEvent.MOUSE_EVENT_MASK);
    timer.setRepeats(false);
    timer.start();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一定時間(&lt;code&gt;10&lt;/code&gt;秒)、マウスやキーボードからの入力が無い場合、接続(ダミー)を切るようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/10/24/application-inactivity/&quot;&gt;Application Inactivity « Java Tips Weblog&lt;/a&gt;を参考にして、&lt;code&gt;Toolkit.getDefaultToolkit().getSystemEventQueue().push(eventQueue)&lt;/code&gt;は使用せず、以下のように&lt;code&gt;Toolkit.getDefaultToolkit().addAWTEventListener(AWTEventListener)&lt;/code&gt;を使う方法に変更しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timer&lt;/code&gt;を&lt;code&gt;timer.setRepeats(false);&lt;/code&gt;でスタート(一回で終了する)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Toolkit.getDefaultToolkit().addAWTEventListener&lt;/code&gt;で、&lt;code&gt;AWTEventListener&lt;/code&gt;を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWTEvent&lt;/code&gt;が発生した時に&lt;code&gt;timer.restart();&lt;/code&gt;でタイマーをリセット&lt;/li&gt;
&lt;li&gt;時間がきたら&lt;code&gt;Toolkit.getDefaultToolkit().removeAWTEventListener&lt;/code&gt;で&lt;code&gt;AWTEvent&lt;/code&gt;を取り除く&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/10/24/application-inactivity/&quot;&gt;Application Inactivity « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;java.security.AccessControlException: access denied (&amp;quot;java.awt.AWTPermission&amp;quot; &amp;quot;listenToAllAWTEvents&amp;quot;)&lt;/code&gt;が発生するので、&lt;code&gt;Web Start&lt;/code&gt;起動のリンクを削除。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-01-14 (火) 13:57:01&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dispatchevent</link>
                <guid>http://terai.xrea.jp/swing/dispatchevent</guid>
                <pubDate>2008-02-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeの水平垂直線を表示しない</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のアイコンを繋ぐ水平垂直線の表示の有無を切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreePaintLines&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWNxTrfYI/AAAAAAAAAo4/xS9RjkcNYYM/s800/TreePaintLines.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JTree tree = new JTree();
add(new JCheckBox(new AbstractAction(&quot;Tree.paintLines&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    if(((JCheckBox)e.getSource()).isSelected()) {
      UIManager.put(&quot;Tree.paintLines&quot;, Boolean.TRUE);
    }else{
      UIManager.put(&quot;Tree.paintLines&quot;, Boolean.FALSE);
    }
    tree.updateUI(); // 左のJTreeだけ更新
    //SwingUtilities.updateComponentTreeUI(MainPanel.this);
  }
}), BorderLayout.NORTH);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、左の&lt;code&gt;JTree&lt;/code&gt;の水平線などの表示を、&lt;code&gt;UIManager.put(&amp;quot;Tree.paintLines&amp;quot;, Boolean.FALSE);&lt;/code&gt;で切り替えています(右は常に非表示)。&lt;/p&gt;

&lt;p&gt;元々、線を表示しない&lt;code&gt;GTKLookAndFeel&lt;/code&gt;などでは、&lt;code&gt;UIManager.put(&amp;quot;Tree.paintLines&amp;quot;, Boolean.TRUE);&lt;/code&gt;としても線は描画されないようです。&lt;/p&gt;

&lt;p&gt;複数の&lt;code&gt;JTree&lt;/code&gt;の表示を個別に切り替えたい場合は、&lt;a href=&quot;https://forums.oracle.com/thread/1367209&quot;&gt;Hide horizontal and vertical lines in a JTree | Oracle Forums&lt;/a&gt;で、Michael_Dunn さんが投稿(&lt;code&gt;2007/10/24 2:42&lt;/code&gt;)したコードのように、&lt;code&gt;BasicTreeUI#paintHorizontalLine&lt;/code&gt;メソッドなどをオーバーライドする方法もあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1367209&quot;&gt;Hide horizontal and vertical lines in a JTree | Oracle Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treepaintlines</link>
                <guid>http://terai.xrea.jp/swing/treepaintlines</guid>
                <pubDate>2008-02-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブにJProgressBarを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブに&lt;code&gt;JProgressBar&lt;/code&gt;を配置して、進捗を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabWithProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTVHzMYZuI/AAAAAAAAAnI/7G4e4YZbiAQ/s800/TabWithProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Executor executor = Executors.newCachedThreadPool();
public void addTab(String title, final Component content) {
  super.addTab(title, new JLabel(&quot;Loading...&quot;));
  final JProgressBar bar = new JProgressBar();
  final int currentIndex = getTabCount()-1;
  final JLabel label = new JLabel(title);
  Dimension dim = label.getPreferredSize();
  int w = Math.max(80, dim.width);
  label.setPreferredSize(new Dimension(w, dim.height));
  Insets tabInsets = UIManager.getInsets(&quot;TabbedPane.tabInsets&quot;);
  bar.setPreferredSize(new Dimension(w, dim.height-tabInsets.top-1));
  setTabComponentAt(currentIndex, bar);
  SwingWorker worker = new SwingWorker() {
    @Override public Object doInBackground() {
      int current = 0;
      int lengthOfTask = 180;
      while(current&amp;lt;lengthOfTask) {
        if(!bar.isDisplayable()) return &quot;NotDisplayable&quot;;
        try {
          Thread.sleep(25);
        }catch(InterruptedException ie) {
          return &quot;Interrupted&quot;;
        }
        current++;
        setProgress(100 * current / lengthOfTask);
      }
      return &quot;Done&quot;;
    }
    @Override public void done() {
      setTabComponentAt(currentIndex, label);
      setComponentAt(currentIndex, content);
    }
  };
  worker.addPropertyChangeListener(new ProgressListener(bar));
  executor.execute(worker); //JDK 1.6.0_18
  //worker.execute();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で追加された以下の機能を使用しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingWorker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブにコンポーネントを配置&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SwingWorker.html&quot;&gt;SwingWorkerを使った処理の中断と進捗状況表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabwithprogressbar</link>
                <guid>http://terai.xrea.jp/swing/tabwithprogressbar</guid>
                <pubDate>2008-01-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのCloseButtonをフォーカスがある場合だけ表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブを閉じるボタンを、タブにフォーカスがある場合だけ表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HoverCloseButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTN-acwv2I/AAAAAAAAAbo/gFaIpQr1XGc/s800/HoverCloseButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public MyJTabbedPane() {
  super();
  setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  addMouseMotionListener(new MouseMotionAdapter() {
    private int prev = -1;
    @Override public void mouseMoved(MouseEvent e) {
      JTabbedPane source = (JTabbedPane)e.getSource();
      int focussed = source.indexAtLocation(e.getX(), e.getY());
      if(focussed==prev) return;
      for(int i=0;i&amp;lt;source.getTabCount();i++) {
        TabPanel tab = (TabPanel)source.getTabComponentAt(i);
        tab.setButtonVisible(i==focussed);
      }
      prev = focussed;
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JDK 6&lt;/code&gt;で導入されたタブにコンポーネントを追加する機能を使って、タブ上にマウスカーソルがある場合だけ&lt;code&gt;JButton&lt;/code&gt;を表示しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;が表示されても、そのタブ幅は常に一定で、内部のタブタイトルがクリップされるようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleHighlight.html&quot;&gt;JTabbedPaneのタブ文字列をハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タブが選択されている場合にも&lt;code&gt;JButton&lt;/code&gt;を表示していましたが、これを変更してタブ上にマウスカーソルがある場合だけ&lt;code&gt;JButton&lt;/code&gt;を表示するようにしました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-19 (水) 21:09:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/hoverclosebutton</link>
                <guid>http://terai.xrea.jp/swing/hoverclosebutton</guid>
                <pubDate>2008-01-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>OverlayLayoutの使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;OverlayLayout&lt;/code&gt;を使用し、&lt;code&gt;JButton&lt;/code&gt;を重ねて配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OverlayLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQqzbG85I/AAAAAAAAAf8/GAYWzSVrHvg/s800/OverlayLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton b1 = new JButton();
JButton b2 = new JButton();
b1.setLayout(new OverlayLayout(b1));
Insets i = b1.getBorder().getBorderInsets(b1);
b1.setBorder(BorderFactory.createEmptyBorder(i.top,i.left,i.bottom,4));
b1.setAction(new AbstractAction(&quot;OverlayLayoutButton&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    Toolkit.getDefaultToolkit().beep();
  }
});
b2.setAction(new AbstractAction(&quot;▼&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    System.out.println(&quot;sub&quot;);
  }
});
Dimension dim = new Dimension(64, 24);
b2.setMaximumSize(dim);
b2.setPreferredSize(dim);
b2.setMinimumSize(dim);
b2.setAlignmentX(1.0f);
b2.setAlignmentY(1.0f);
b1.add(b2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;に&lt;code&gt;OverlayLayout&lt;/code&gt;を使って、別の&lt;code&gt;JButton&lt;/code&gt;を重ねて右下に配置しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/box.html#features&quot;&gt;Box Layout Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EaseInOut.html&quot;&gt;JTextAreaをキャプションとして画像上にスライドイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ボタンサイズの指定方法を変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-01-17 (木) 20:39:53&lt;/li&gt;
&lt;li&gt;スクリーンショットなどを更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-29 (水) 18:51:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/overlaylayout</link>
                <guid>http://terai.xrea.jp/swing/overlaylayout</guid>
                <pubDate>2008-01-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserにLocaleを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;に&lt;code&gt;Locale&lt;/code&gt;を設定して、タイトルやボタンの文字列を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Locale&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTPdRLH4_I/AAAAAAAAAeA/tZciS7a5CCc/s800/Locale.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//JFileChooser.setDefaultLocale(Locale.ENGLISH);
fileChooser.setLocale((Locale)combo.getSelectedItem());
fileChooser.updateUI();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、コンボボックスで指定したロケールを&lt;code&gt;JFileChooser&lt;/code&gt;に設定してから開くようになっています。
タイトル、ボタンのラベルなどが、指定したロケールに変更されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0_13&lt;/code&gt;では、&lt;code&gt;JVM&lt;/code&gt;のデフォルトが&lt;code&gt;English&lt;/code&gt;以外だった場合、&lt;code&gt;Component#setLocale(Locale.ENGLISH)&lt;/code&gt;や、&lt;code&gt;JComponent.setDefaultLocale(Locale.ENGLISH)&lt;/code&gt;としても反映されないようです。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6606475&quot;&gt;Bug ID: 6606475 JComponent.setDefaultLocale(Locale.ENGLISH) useless if def locale is non-english&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;では問題無し&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6606475&quot;&gt;Bug ID: 6606475 JComponent.setDefaultLocale(Locale.ENGLISH) useless if def locale is non-english&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6342301&quot;&gt;Bug ID: 6342301 Bad interaction between setting the ui and file filters in JFileChooser&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-01-18 (火) 02:29:14&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/locale</link>
                <guid>http://terai.xrea.jp/swing/locale</guid>
                <pubDate>2008-01-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonのテキストシフト量を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;をクリックしたときのテキストシフト量を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextShiftOffset&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTVR92SsdI/AAAAAAAAAnY/_wKFJTNu2oY/s800/TextShiftOffset.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;Button.textShiftOffset&quot;, 0);
SwingUtilities.updateComponentTreeUI(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、テキストシフト量を、&lt;code&gt;0&lt;/code&gt;、&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;-1&lt;/code&gt;と切り替えることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java 1.5.0&lt;/code&gt; + &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;のデフォルトは&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt; + &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;のデフォルトは&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textshiftoffset</link>
                <guid>http://terai.xrea.jp/swing/textshiftoffset</guid>
                <pubDate>2007-12-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Htmlを使ったJLabelとJEditorPaneの無効化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Html&lt;/code&gt;を使った&lt;code&gt;JLabel&lt;/code&gt;と、&lt;code&gt;JEditorPane&lt;/code&gt;を&lt;code&gt;setEnabled(false)&lt;/code&gt;で無効にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisabledHtmlLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTK9vV2SGI/AAAAAAAAAW0/PIlAG2B9yZA/s800/DisabledHtmlLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JLabel label2 = new JLabel(HTML_TEXT) {
  @Override public void setEnabled(boolean b) {
    super.setEnabled(b);
    setForeground(b ? UIManager.getColor(&quot;Label.foreground&quot;)
                    : UIManager.getColor(&quot;Label.disabledForeground&quot;));
  }
};
final JEditorPane editor1 = new JEditorPane(&quot;text/html&quot;, HTML_TEXT);
editor1.setOpaque(false);
editor1.setEditable(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上段左

&lt;ul&gt;
&lt;li&gt;通常の&lt;code&gt;JLabel&lt;/code&gt;です。無効化すると文字がへこみます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;上段中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使った&lt;code&gt;JLabel&lt;/code&gt;です。無効化しても文字色は変化しません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;上段右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使った&lt;code&gt;JLabel&lt;/code&gt;です。無効化するとき、&lt;code&gt;setForeground&lt;/code&gt;で文字色を変更していまが、&lt;code&gt;&amp;lt;font color=&amp;#39;red&amp;#39;&amp;gt;&lt;/code&gt;とした文字の色までは変化しません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使った&lt;code&gt;JLabel&lt;/code&gt;です。無効化するとき、&lt;code&gt;setForeground&lt;/code&gt;で文字色を変更し、さらに文字色をグレースケール化しています。このサンプルでは、無効化している時にラベルのテキストやサイズを変更しても、表示は更新されません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使った&lt;code&gt;JEditorPane&lt;/code&gt;です。無効化すると、すべての文字色が変化します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下段右

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html&lt;/code&gt;タグを使った&lt;code&gt;JEditorPane&lt;/code&gt;です。無効化すると、すべての文字色が変化します。以下のようにして、&lt;code&gt;JLabel&lt;/code&gt;と同じフォントを使用するように設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;editor2.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
editor2.setFont(UIManager.getFont(&quot;Label.font&quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Html&lt;/code&gt;レンダリングを無効化して、タグを文字列として表示する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/HtmlDisable.html&quot;&gt;JLabelなどのHtmlレンダリングを無効化&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4783068&quot;&gt;Bug ID: 4783068 Components with HTML text should gray out the text when disabled&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0-ea-b55&lt;/code&gt;以上で、修正されている(上記のサンプルでも、無効化ですべての文字列がグレーになる)ようです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4740519&quot;&gt;Bug ID: 4740519 HTML JLabel not greyed out on setEnabled(false)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1377943&quot;&gt;Swing - JLabel with html tag can not be disabled or setForegroud?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkLabel.html&quot;&gt;Hyperlinkを、JLabel、JButton、JEditorPaneで表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disabledhtmllabel</link>
                <guid>http://terai.xrea.jp/swing/disabledhtmllabel</guid>
                <pubDate>2007-12-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameを常に前面に表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;などを常に前面に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AlwaysOnTop&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTHh-ILwOI/AAAAAAAAARU/SYnOw7As81Y/s800/AlwaysOnTop.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setAlwaysOnTop(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;で導入された、&lt;code&gt;Window#setAlwaysOnTop(boolean)&lt;/code&gt;メソッドを使って、フレームを常に最前面に表示します。&lt;/p&gt;

&lt;p&gt;プラットフォームで、最前面がサポートされていない場合は、何も起こらないようです。サポートされているかどうかは、&lt;code&gt;JDK 1.6.0&lt;/code&gt;で導入された、&lt;code&gt;Window#isAlwaysOnTopSupported()&lt;/code&gt;か、&lt;code&gt;Toolkit.isAlwaysOnTopSupported()&lt;/code&gt;で調べることができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Window.html#setAlwaysOnTop%28boolean%29&quot;&gt;Window.html#setAlwaysOnTop(boolean)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/alwaysontop</link>
                <guid>http://terai.xrea.jp/swing/alwaysontop</guid>
                <pubDate>2007-12-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブ文字列をハイライト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ上に、マウスカーソルがある場合、その文字色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabTitleHighlight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTU7QqLieI/AAAAAAAAAm0/dgW3rio-pzA/s800/TabTitleHighlight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;jtp.addMouseMotionListener(new MouseMotionAdapter() {
  @Override public void mouseMoved(MouseEvent e) {
    JTabbedPane source = (JTabbedPane)e.getSource();
    int tgt = source.indexAtLocation(e.getX(), e.getY());
    for(int i=0;i&amp;lt;source.getTabCount();i++) {
      source.setForegroundAt(i, i==tgt ? Color.GREEN
                                       : Color.BLACK);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTabbedPane&lt;/code&gt;に&lt;code&gt;MouseMotionListener&lt;/code&gt;を追加し、&lt;code&gt;JTabbedPane#indexAtLocation&lt;/code&gt;メソッドで、マウスカーソルの下にあるタブを取得しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;(&lt;code&gt;Ubuntu&lt;/code&gt;+&lt;code&gt;GNOME&lt;/code&gt;+&lt;code&gt;jdk1.6.0_03&lt;/code&gt;)などでは、タブの文字色を変更出来ないようです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ColorTab.html&quot;&gt;JTabbedPaneの選択文字色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabtitlehighlight</link>
                <guid>http://terai.xrea.jp/swing/tabtitlehighlight</guid>
                <pubDate>2007-12-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TransferHandlerでHyperlinkをブラウザにドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;に&lt;code&gt;TransferHandler&lt;/code&gt;を設定して、ブラウザにリンクをドロップできるようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DraggableLinkButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTLyb41hvI/AAAAAAAAAYI/uoSzZ3thyWk/s800/DraggableLinkButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final String href = &quot;http://terai.xrea.jp/&quot;;
//final DataFlavor uriflavor = new DataFlavor(String.class, &quot;text/uri-list&quot;);
final DataFlavor uriflavor = DataFlavor.stringFlavor;
JButton b = new JButton(href);
b.setTransferHandler(new TransferHandler(&quot;text&quot;) {
  @Override public boolean canImport(JComponent c, DataFlavor[] flavors) {
    return (flavors.length&amp;gt;0 &amp;amp;&amp;amp; flavors[0].equals(uriflavor));
  }
  @Override public Transferable createTransferable(JComponent c) {
    return new Transferable() {
      @Override public Object getTransferData(DataFlavor flavor) {
        //System.out.println(flavor.getMimeType());
        return href;
      }
      @Override public DataFlavor[] getTransferDataFlavors() {
        return new DataFlavor[] { uriflavor };
      }
      @Override public boolean isDataFlavorSupported(DataFlavor flavor) {
        return flavor.equals(uriflavor);
      }
    };
  }
});
b.addMouseListener(new MouseAdapter() {
  @Override public void mousePressed(MouseEvent e) {
    JButton button = (JButton)e.getSource();
    TransferHandler handler = button.getTransferHandler();
    handler.exportAsDrag(button, e, TransferHandler.COPY);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;をマウスでブラウザにドラッグ＆ドロップすると、そのサイトに移動するようになっています。ここでは、&lt;code&gt;JButton&lt;/code&gt;を使用していますが、&lt;code&gt;JLabel&lt;/code&gt;などの他のコンポーネントでも同様の設定が可能です。&lt;/p&gt;

&lt;p&gt;以下のような&lt;code&gt;TransferHandler&lt;/code&gt;と&lt;code&gt;Transferable&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;転送するプロパティー

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DataFlavor&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFlavor.stringFlavor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;転送するデータ

&lt;ul&gt;
&lt;li&gt;文字列&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://terai.xrea.jp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkLabel.html&quot;&gt;Hyperlinkを、JLabel、JButton、JEditorPaneで表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/hishidama/home/tech/java/swing/TransferHandler.html&quot;&gt;Java Swing「ドラッグ&amp;amp;ドロップ」メモ(Hishidama&amp;#39;s Swing-TransferHandler Memo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Opera&lt;/code&gt;には、ドロップできないようです(&lt;code&gt;MIME&lt;/code&gt;タイプを設定しないとダメ？)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-03 (月) 14:41:28&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/draggablelinkbutton</link>
                <guid>http://terai.xrea.jp/swing/draggablelinkbutton</guid>
                <pubDate>2007-12-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Hyperlinkを、JLabel、JButton、JEditorPaneで表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Hyperlink&lt;/code&gt;を、&lt;code&gt;JLabel&lt;/code&gt;、&lt;code&gt;JButton&lt;/code&gt;、&lt;code&gt;JEditorPane&lt;/code&gt;で表示し、それぞれクリックした時のイベントを取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HyperlinkLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTOIQH0ABI/AAAAAAAAAb4/9QlzkW-7_Es/s800/HyperlinkLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class URILabel extends JLabel {
  private final String href;
  public URILabel(String href) {
    super(&quot;&amp;lt;html&amp;gt;&amp;lt;a href=&#39;&quot;+href+&quot;&#39;&amp;gt;&quot;+href+&quot;&amp;lt;/a&amp;gt;&quot;);
    this.href = href;
    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    addMouseListener(new MouseAdapter() {
      @Override public void mousePressed(MouseEvent e) {open(href);}
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton button = new JButton(a);
button.setUI(LinkViewButtonUI.createUI(button));

class LinkViewButtonUI extends BasicButtonUI {
  private final static LinkViewButtonUI linkViewButtonUI = new LinkViewButtonUI();
  public static ButtonUI createUI(JButton b) {
    b.setBorder(BorderFactory.createEmptyBorder(0,0,2,0));
    b.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    return linkViewButtonUI;
  }
  private LinkViewButtonUI() {
    super();
  }
  private static Dimension size = new Dimension();
  private static Rectangle viewRect = new Rectangle();
  private static Rectangle iconRect = new Rectangle();
  private static Rectangle textRect = new Rectangle();
  @Override public synchronized void paint(Graphics g, JComponent c) {
    AbstractButton b = (AbstractButton) c;
    ButtonModel model = b.getModel();
    Font f = c.getFont();
    g.setFont(f);
    FontMetrics fm = c.getFontMetrics(f);
    //...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JEditorPane editor = new JEditorPane(&quot;text/html&quot;, &quot;&amp;lt;html&amp;gt;&amp;lt;a href=&#39;&quot;+MYSITE+&quot;&#39;&amp;gt;&quot;+MYSITE+&quot;&amp;lt;/a&amp;gt;&quot;);
editor.setOpaque(false);
//editor.setBackground(getBackground());
//editor.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
editor.setEditable(false); //REQUIRED
editor.addHyperlinkListener(new HyperlinkListener() {
  @Override public void hyperlinkUpdate(HyperlinkEvent e) {
    if(e.getEventType()==HyperlinkEvent.EventType.ACTIVATED) {
      java.awt.Toolkit.getDefaultToolkit().beep();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、クリックされた時に、リンクをブラウザで開く(&lt;a href=&quot;http://terai.xrea.jp/Swing/Desktop.html&quot;&gt;Desktopでブラウザを起動&lt;/a&gt;)代わりに、&lt;code&gt;beep&lt;/code&gt;音を鳴らしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt; + &lt;code&gt;MouseListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;li&gt;リンクの表示には&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;タグを使っています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt; + &lt;code&gt;ButtonUI&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;に、文字の描画を変更する&lt;code&gt;ButtonUI&lt;/code&gt;を設定しています。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rollover&lt;/code&gt;: アンダーライン&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pressed&lt;/code&gt;: 黒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JEditorPane&lt;/code&gt; + &lt;code&gt;HyperlinkListener&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;編集不可にした&lt;code&gt;JEditorPane&lt;/code&gt;に&lt;code&gt;HyperlinkListener&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;li&gt;リンクの表示には&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;タグを使っています。&lt;/li&gt;
&lt;li&gt;選択してコピーできます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JEditorPane.html&quot;&gt;JEditorPane (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/link_buttons_in_swing&quot;&gt;Link Buttons in Swing - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、&lt;code&gt;JButton&lt;/code&gt;+&lt;code&gt;MatteBorder&lt;/code&gt;で表現しているようです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DraggableLinkButton.html&quot;&gt;TransferHandlerでHyperlinkをブラウザにドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHtmlLabel.html&quot;&gt;Htmlを使ったJLabelとJEditorPaneの無効化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/hyperlinklabel</link>
                <guid>http://terai.xrea.jp/swing/hyperlinklabel</guid>
                <pubDate>2007-11-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルをシングルクリックで編集する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルをマウスでシングルクリックすると編集状態になるように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SingleClickCellEdit&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTTDScXHaI/AAAAAAAAAjw/VQhi8npFmCM/s800/SingleClickCellEdit.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultCellEditor ce = (DefaultCellEditor)table.getDefaultEditor(Object.class);
ce.setClickCountToStart(1);
//ce.setClickCountToStart(2); //default
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultCellEditor#setClickCountToStart&lt;/code&gt;メソッドを使用すれば、編集開始に必要なマウスクリックの回数を設定することができます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;edit the cell on single click&lt;/code&gt;にチェックがある場合は、セルレンダラーも変更して、文字列の下に下線を引いていますが、環境やバージョンによって動作が異なる場合があるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;の場合、第&lt;code&gt;0&lt;/code&gt;列目のセルをクリック、選択された行直下の第&lt;code&gt;1&lt;/code&gt;列目セル上にカーソルを置くと、その文字色が&lt;code&gt;JDK 1.6.0&lt;/code&gt;と&lt;code&gt;JDK 1.5.0&lt;/code&gt;で異なる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;で、選択されたときの文字色になる？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ubuntu 7.10&lt;/code&gt;, &lt;code&gt;GNOME 2.20.1&lt;/code&gt;, &lt;code&gt;JDK 1.6.0_03&lt;/code&gt;の場合、&lt;code&gt;MetalLookAndFeel&lt;/code&gt;と&lt;code&gt;GTKLookAndFeel&lt;/code&gt;で、&lt;code&gt;0&lt;/code&gt;行目(&lt;code&gt;Number.class&lt;/code&gt;)に使われるセルレンダラーが異なる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;で、&lt;code&gt;Number.class&lt;/code&gt;なのに左寄せになってしまう？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1367289&quot;&gt;Swing - JTable - enable cursor blink at cell with single click&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/singleclickcelledit</link>
                <guid>http://terai.xrea.jp/swing/singleclickcelledit</guid>
                <pubDate>2007-11-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPEGファイルのコメントを取り出す</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPEG&lt;/code&gt;ファイルからコメントなどのメタデータ(&lt;code&gt;XML&lt;/code&gt;)を取り出して&lt;code&gt;JTree&lt;/code&gt;で表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IIOMetadata&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOUrdw9GI/AAAAAAAAAcM/4rakKDY0jI0/s800/IIOMetadata.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;InputStream source = getClass().getResourceAsStream(&quot;test.jpg&quot;);
Iterator readers = ImageIO.getImageReadersByFormatName(&quot;jpeg&quot;);
ImageReader reader = (ImageReader)readers.next();
//FileInputStream source = new FileInputStream(new File(&quot;c:/tmp/test.jpg&quot;));
ImageInputStream iis = ImageIO.createImageInputStream(source);
reader.setInput(iis, true);

//[[MediaTrackerで画像のサイズを取得&amp;gt;Swing/MediaTracker]]
//ImageReadParam param = reader.getDefaultReadParam();
//buf.append(String.format(&quot;Width: %d%n&quot;, reader.getWidth(0)));
//buf.append(String.format(&quot;Height: %d%n&quot;, reader.getHeight(0)));

IIOMetadata meta = reader.getImageMetadata(0);
//for(String s:meta.getMetadataFormatNames())
//  buf.append(String.format(&quot;MetadataFormatName: %s%n&quot;,s));

IIOMetadataNode root = (IIOMetadataNode)meta.getAsTree(&quot;javax_imageio_jpeg_image_1.0&quot;);
//root = (IIOMetadataNode) meta.getAsTree(&quot;javax_imageio_1.0&quot;);

NodeList com = root.getElementsByTagName(&quot;com&quot;);
if(com!=null &amp;amp;&amp;amp; com.getLength()&amp;gt;0) {
  String comment = ((IIOMetadataNode)com.item(0)).getAttribute(&quot;comment&quot;);
  buf.append(String.format(&quot;Comment: %s%n&quot;, comment));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、&lt;code&gt;GIMP&lt;/code&gt;を使って作成したコメント(このサンプルでは、文字コードが何かなどを考慮していないので日本語が化ける可能性がある)付きの&lt;code&gt;JPEG&lt;/code&gt;画像から以下の手順でコメントを抽出しています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ImageReader&lt;/code&gt;から、&lt;code&gt;IIOMetadata&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIOMetadata&lt;/code&gt;から&lt;code&gt;XML&lt;/code&gt;の&lt;code&gt;DOM&lt;/code&gt;(&lt;code&gt;org.w3c.dom.Node&lt;/code&gt;)形式でデータを取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com&lt;/code&gt;タグの&lt;code&gt;comment&lt;/code&gt;属性からコメントを取得&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;タグやマーカなどの形式は、&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/imageio/metadata/doc-files/jpeg_metadata.html&quot;&gt;JPEG メタデータ形式の仕様および使用上の注意&lt;/a&gt;や、以下の&lt;code&gt;XML&lt;/code&gt;一覧表示を参考にしてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;属性は頭に&lt;code&gt;#&lt;/code&gt;をつけて表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;参考:&lt;a href=&quot;https://forums.oracle.com/thread/1373824&quot;&gt;Swing - XMLViewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/imageio/metadata/doc-files/jpeg_metadata.html&quot;&gt;JPEG メタデータ形式の仕様および使用上の注意&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/imageio/metadata/package-summary.html&quot;&gt;javax.imageio.metadata (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;標準の (プラグインに依存しない) 形式やその他のメタデータ(&lt;code&gt;PNG&lt;/code&gt;、&lt;code&gt;GIF&lt;/code&gt;、&lt;code&gt;BMP&lt;/code&gt;)もこちらから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1373824&quot;&gt;Swing - XMLViewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MediaTracker.html&quot;&gt;MediaTrackerで画像のサイズを取得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.utilz.jp/wiki/ExifGps&quot;&gt;Utilz: 画像の位置情報&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?topic=42083&amp;amp;forum=12&amp;amp;4&quot;&gt;Jpegのexif形式ファイルからの画像解像度（幅高）取得について - Java Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/iiometadata</link>
                <guid>http://terai.xrea.jp/swing/iiometadata</guid>
                <pubDate>2007-11-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>RowFilterでJTableのページ分割</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;RowFilter&lt;/code&gt;を使って、&lt;code&gt;JTable&lt;/code&gt;の行を&lt;code&gt;Pagination&lt;/code&gt;風に分割して表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TablePagination&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUiUh8yiI/AAAAAAAAAmM/eY1zd24d0ac/s800/TablePagination.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static int LR_PAGE_SIZE = 5;

private final String[] columnNames = {&quot;Year&quot;, &quot;String&quot;, &quot;Comment&quot;};
private final DefaultTableModel model = new DefaultTableModel(null, columnNames) {
  @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
    return (column==0)?Integer.class:Object.class;
  }
};
private final TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model);
private final Box box = Box.createHorizontalBox();

private void initLinkBox(final int itemsPerPage, final int currentPageIndex) {
  //assert currentPageIndex &amp;gt; 0;
  sorter.setRowFilter(new RowFilter&amp;lt;TableModel, Integer&amp;gt;() {
    @Override public boolean include(Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
      int ti = currentPageIndex - 1;
      int ei = entry.getIdentifier();
      return ti * itemsPerPage &amp;lt;= ei &amp;amp;&amp;amp; ei &amp;lt; ti * itemsPerPage + itemsPerPage;
    }
  });

  int startPageIndex = currentPageIndex - LR_PAGE_SIZE;
  if (startPageIndex &amp;lt;= 0) {
    startPageIndex = 1;
  }

//#if 0 //BUG
  //int maxPageIndex = (model.getRowCount() / itemsPerPage) + 1;
//#else
  /* &quot;maxPageIndex&quot; gives one blank page if the module of the division is not zero.
   *   pointed out by erServi
   * e.g. rowCount=100, maxPageIndex=100
   */
  int rowCount = model.getRowCount();
  int v = rowCount % itemsPerPage == 0 ? 0 : 1;
  int maxPageIndex = rowCount / itemsPerPage + v;
//#endif
  int endPageIndex = currentPageIndex + LR_PAGE_SIZE - 1;
  if (endPageIndex &amp;gt; maxPageIndex) {
    endPageIndex = maxPageIndex;
  }

  box.removeAll();
  if (startPageIndex &amp;gt;= endPageIndex) {
    //if I only have one page, Y don&#39;t want to see pagination buttons
    //suggested by erServi
    return;
  }

  ButtonGroup bg = new ButtonGroup();
  JRadioButton f = makePrevNextRadioButton(itemsPerPage, 1, &quot;|&amp;lt;&quot;, currentPageIndex &amp;gt; 1);
  box.add(f); bg.add(f);
  JRadioButton p = makePrevNextRadioButton(itemsPerPage, currentPageIndex - 1, &quot;&amp;lt;&quot;, currentPageIndex &amp;gt; 1);
  box.add(p); bg.add(p);
  box.add(Box.createHorizontalGlue());
  for (int i = startPageIndex; i &amp;lt;= endPageIndex; i++) {
    JRadioButton c = makeRadioButton(itemsPerPage, currentPageIndex, i); box.add(c); bg.add(c);
  }
  box.add(Box.createHorizontalGlue());
  JRadioButton n = makePrevNextRadioButton(itemsPerPage, currentPageIndex + 1, &quot;&amp;gt;&quot;, currentPageIndex &amp;lt; maxPageIndex);
  box.add(n); bg.add(n);
  JRadioButton l = makePrevNextRadioButton(itemsPerPage, maxPageIndex, &quot;&amp;gt;|&quot;, currentPageIndex &amp;lt; maxPageIndex);
  box.add(l); bg.add(l);
  box.revalidate();
  box.repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、検索サイトなどでよく使われている、&lt;code&gt;Pagination&lt;/code&gt;を&lt;code&gt;JTable&lt;/code&gt;で行っています。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;ただし、ページ数が大量にある場合の処理や、前へ、次へなどの実装は無視して、&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;ある位置から一定の行数だけ表示するフィルタを予め作成し、これを上部の&lt;code&gt;JRadioButton&lt;/code&gt;(&lt;code&gt;BasicRadioButtonUI&lt;/code&gt;を継承して見た目だけリンク風になるよう変更している)で切り替えています。&lt;/p&gt;

&lt;p&gt;また、モデルのインデックス順でフィルタリングしているため、ソートを行っても表示される行の範囲内で変化します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/ResetRowFilter.html&quot;&gt;JTableのRowFilterを一旦解除してソート&lt;/a&gt;, &lt;a href=&quot;http://terai.xrea.jp/data/swing/TablePaginationTest.java&quot;&gt;TablePaginationTest.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PageInputForPagination.html&quot;&gt;JTableのPaginationとSwingWorkerでの逐次読み込み&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Prev&lt;/code&gt;、&lt;code&gt;Next&lt;/code&gt;ボタンなどを追加して、Google風の&lt;code&gt;Pagination&lt;/code&gt;を行うように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-26 (水) 20:28:31&lt;/li&gt;
&lt;li&gt;ブログで指摘されていた恥ずかしいバグ(&lt;code&gt;paint&lt;/code&gt;メソッドでコンポーネントの状態を変更し、無限ループ、&lt;code&gt;CPU100%&lt;/code&gt;)を修正 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-09-07 (日) 00:08:50&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java-swing-tips.blogspot.com/2008/03/jtable-pagination-example-using.html&quot;&gt;blogspot&lt;/a&gt;で、無駄な空白ページができるバグを指摘してもらったので、こちらも修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-08-15 (月) 15:54:08&lt;/li&gt;
&lt;li&gt;先頭と最後にジャンプするボタンを追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-01 (金) 16:09:21&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablepagination</link>
                <guid>http://terai.xrea.jp/swing/tablepagination</guid>
                <pubDate>2007-11-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Screen上にあるMouseの位置を取得する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Screen&lt;/code&gt;上にある&lt;code&gt;Mouse&lt;/code&gt;の絶対位置を取得して、パネル内のラケットを移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MouseInfo&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQC6wobCI/AAAAAAAAAe8/3UnK314olDM/s800/MouseInfo.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static final Dimension panelDim = new Dimension(320, 240);
private final Racket racket = new Racket(panelDim);
public MainPanel() {
  super(new BorderLayout());
  setPreferredSize(panelDim);
  new javax.swing.Timer(10, this).start();
}
@Override public void paintComponent(Graphics g) {
  super.paintComponent(g);
  racket.draw(g);
}
@Override public void actionPerformed(ActionEvent e) {
  PointerInfo pi = MouseInfo.getPointerInfo();
  Point pt = pi.getLocation();
  SwingUtilities.convertPointFromScreen(pt, this);
  racket.move(pt.x);
  repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、マウスカーソルがパネル外に移動した場合でもラケットを動かせるように、以下のような方法を使用しています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;10&lt;/code&gt;ミリ秒ごとに&lt;code&gt;MouseInfo&lt;/code&gt;から&lt;code&gt;PointerInfo&lt;/code&gt;を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PointerInfo&lt;/code&gt;から画面上でのポインタ座標を取得&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.convertPointFromScreen&lt;/code&gt;メソッドで、これをパネル相対のポインタ座標に変換&lt;/li&gt;
&lt;li&gt;ラケットに変換した座標を与えて、&lt;code&gt;repaint&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javainthebox.net/laboratory/J2SE1.5/GUI/MouseLocation/MouseLocation.html&quot;&gt;J2SE 5.0 Tiger 虎の穴 マウスの位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/aidiary/20070601/1251545490&quot;&gt;ラケットを動かす - Javaでゲーム作りますが何か？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショットの間違いを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-28 (金) 14:41:53&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/mouseinfo</link>
                <guid>http://terai.xrea.jp/swing/mouseinfo</guid>
                <pubDate>2007-10-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにJButtonを追加して行削除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに&lt;code&gt;JButton&lt;/code&gt;を追加し、クリックされたらその行を削除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DeleteButtonInCell&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKsRqqqeI/AAAAAAAAAWY/X0y-Ph7jngA/s800/DeleteButtonInCell.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DeleteButton extends JButton {
  @Override public void updateUI() {
    super.updateUI();
    setBorder(BorderFactory.createEmptyBorder());
    setFocusable(false);
    setRolloverEnabled(false);
    setText(&quot;X&quot;);
  }
}

class DeleteButtonRenderer extends DeleteButton implements TableCellRenderer {
  public DeleteButtonRenderer() {
    super();
    setName(&quot;Table.cellRenderer&quot;);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    return this;
  }
}

class DeleteButtonEditor extends DeleteButton implements TableCellEditor {
  public DeleteButtonEditor(final JTable table) {
    super();
    addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        int row = table.convertRowIndexToModel(table.getEditingRow());
        fireEditingStopped();
        ((DefaultTableModel)table.getModel()).removeRow(row);
      }
    });
  }
  @Override public Component getTableCellEditorComponent(JTable table,
      Object value, boolean isSelected, int row, int column) {
    return this;
  }
  @Override public Object getCellEditorValue() {
    return &quot;&quot;;
  }
  //Copied from AbstractCellEditor
  //protected EventListenerList listenerList = new EventListenerList();
  //transient protected ChangeEvent changeEvent = null;
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;上記のサンプルでは、ボタンがクリックされたときの削除自体は、&lt;code&gt;JTable&lt;/code&gt;に追加したマウスリスナーで行っており、セルエディタやセルレンダラーに使っている&lt;code&gt;JButton&lt;/code&gt;は表示のためのダミーです。&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;セルレンダラーに使っている&lt;code&gt;JButton&lt;/code&gt;は表示のためのダミー&lt;/li&gt;
&lt;li&gt;セルエディタとして使用する&lt;code&gt;JButton&lt;/code&gt;に&lt;code&gt;ActionListener&lt;/code&gt;を追加し、クリックされたら&lt;code&gt;AbstractCellEditor&lt;/code&gt;からコピーした&lt;code&gt;fireEditingStopped()&lt;/code&gt;メソッドで編集を終了し、&lt;code&gt;TableModel&lt;/code&gt;から行を削除

&lt;ul&gt;
&lt;li&gt;セルレンダラ、セルエディタがコンポーネント(もしくは&lt;code&gt;DefaultCellEditor&lt;/code&gt;)を継承していないと、&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;LookAndFeel&lt;/code&gt;を変更てもセルレンダラ、セルエディタの&lt;code&gt;updateUI()&lt;/code&gt;が呼ばれない

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#updateUI()&lt;/code&gt;、&lt;code&gt;Java 1.6.0&lt;/code&gt;の&lt;code&gt;JTable#updateSubComponentUI(...)&lt;/code&gt;、&lt;code&gt;Java 1.7.0&lt;/code&gt;の&lt;code&gt;SwingUtilities#updateRendererOrEditorUI(Object)&lt;/code&gt;を参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AbstractCellEditor&lt;/code&gt;を継承していても&lt;code&gt;updateUI()&lt;/code&gt;は呼ばれない、&lt;code&gt;DefaultCellEditor&lt;/code&gt;は継承しづらい…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1357728&quot;&gt;Swing - JButton inside JTable Cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AddRow.html&quot;&gt;JTableの行を追加、削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearTable.html&quot;&gt;JTableの行を全削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HyperlinkInTableCell.html&quot;&gt;JTableのセルにHyperlinkを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ボタンのセル内でマウスを移動しても削除するように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-28 (金) 16:59:11

&lt;ul&gt;
&lt;li&gt;メモ: &lt;code&gt;0&lt;/code&gt;行目のボタンをクリックし、真上のヘッダ上でリリースしても削除できる -&amp;gt; &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6291631&quot;&gt;Bug ID: 6291631 JTable: rowAtPoint returns 0 for negative y&lt;/a&gt; (追記: このバグは未修正になっているけど、&lt;code&gt;JDK 1.6, 1.7&lt;/code&gt;などのソースではコメントにある修正が追加されている) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-28 (金) 17:21:10&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//上記のBug Databaseにある回避方法
JTable table = new JTable(model) {
  @Override public int rowAtPoint(Point pt) {
    return (pt.y&amp;lt;0)?-1:super.rowAtPoint(pt);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;テスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-09-27 (日) 01:34:58

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultipleButtonsInTableCell.html&quot;&gt;JTableのセルに複数のJButtonを配置する&lt;/a&gt;に移動。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/deletebuttonincell</link>
                <guid>http://terai.xrea.jp/swing/deletebuttonincell</guid>
                <pubDate>2007-10-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameをModalにする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;を&lt;code&gt;Modal&lt;/code&gt;にして、他の&lt;code&gt;JInternalFrame&lt;/code&gt;などを操作できないようにブロックします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ModalInternalFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTP9wW-lJI/AAAAAAAAAe0/xQ9vJrX3MuQ/s800/ModalInternalFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//menuItem.setMnemonic(KeyEvent.VK_1);
class ModalInternalFrameAction1 extends AbstractAction {
  public ModalInternalFrameAction1(String label) {
    super(label);
  }
  @Override public void actionPerformed(ActionEvent e) {
    setJMenuEnabled(false);
    JOptionPane.showInternalMessageDialog(
      desktop, &quot;information&quot;, &quot;modal1&quot;, JOptionPane.INFORMATION_MESSAGE);
    setJMenuEnabled(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//menuItem.setMnemonic(KeyEvent.VK_2);
class ModalInternalFrameAction2 extends AbstractAction {
  private final JPanel glass = new MyGlassPane();
  public ModalInternalFrameAction2(String label) {
    super(label);
    Rectangle screen = frame.getGraphicsConfiguration().getBounds();
    glass.setBorder(BorderFactory.createEmptyBorder());
    glass.setLocation(0,0);
    glass.setSize(screen.width, screen.height);
    glass.setOpaque(false);
    glass.setVisible(false);
    desktop.add(glass, JLayeredPane.MODAL_LAYER);
  }
  @Override public void actionPerformed(ActionEvent e) {
    setJMenuEnabled(false);
    glass.setVisible(true);
    JOptionPane.showInternalMessageDialog(
      desktop, &quot;information&quot;, &quot;modal2&quot;, JOptionPane.INFORMATION_MESSAGE);
    glass.setVisible(false);
    setJMenuEnabled(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//menuItem.setMnemonic(KeyEvent.VK_3);
//Creating Modal Internal Frames -- Approach 1 and Approach 2
//http://web.archive.org/web/20090803142839/http://java.sun.com/developer/JDCTechTips/2001/tt1220.html
class ModalInternalFrameAction3 extends AbstractAction {
  private final Component orgGlassPane;
  private final JPanel glass = new PrintGlassPane();
  public ModalInternalFrameAction3(String label) {
    super(label);
    orgGlassPane = frame.getGlassPane();
    glass.setVisible(false);
  }
  @Override public void actionPerformed(ActionEvent e) {
    JOptionPane optionPane = new JOptionPane();
    optionPane.setMessage(&quot;Hello, World&quot;);
    optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
    JInternalFrame modal = optionPane.createInternalFrame(desktop, &quot;modal3&quot;);
    removeSystemMenuListener(modal);
    modal.addInternalFrameListener(new InternalFrameAdapter() {
      @Override public void internalFrameClosed(InternalFrameEvent e) {
        glass.setVisible(false);
        frame.setGlassPane(orgGlassPane);
      }
    });
    glass.add(modal);
    //Rectangle screen = desktop.getBounds();
    //modal.setLocation(screen.x + screen.width/2  - modal.getSize().width/2,
    //                  screen.y + screen.height/2 - modal.getSize().height/2);
    frame.setGlassPane(glass);
    glass.setVisible(true);
    modal.setVisible(true);
    try{
      modal.setSelected(true);
    }catch(java.beans.PropertyVetoException ex) {}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+1&lt;/kbd&gt;: &lt;code&gt;JOptionPane.showInternalMessageDialog&lt;/code&gt;メソッドを使用して、簡単なメッセージを表示する&lt;code&gt;Modal&lt;/code&gt;な&lt;code&gt;Dialog&lt;/code&gt;を&lt;code&gt;JDesktopPane&lt;/code&gt;内に表示

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;のマウスクリックは無効になるが、&lt;code&gt;Mnemonic&lt;/code&gt;が無効にならない

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+B&lt;/kbd&gt;でボタンを押すことが出来てしまう&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mnemonic&lt;/code&gt;を設定したコンポーネントは&lt;code&gt;setEnabled(false)&lt;/code&gt;とする必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mnemonic&lt;/code&gt;を&lt;code&gt;JMenu&lt;/code&gt;に設定していると&lt;code&gt;setEnabled(false)&lt;/code&gt;としても、&lt;kbd&gt;Alt&lt;/kbd&gt;キーに反応する

&lt;ul&gt;
&lt;li&gt;これは&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;だけ？&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;InternalMessageDialog&lt;/code&gt;を表示している間は、&lt;code&gt;JMenuBar&lt;/code&gt;をダミーと入れ替えて無効化&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;InternalMessageDialog&lt;/code&gt;を閉じない限り、アプリケーションを&lt;kbd&gt;Alt+F4&lt;/kbd&gt;などで閉じることは出来ない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InternalMessageDialog&lt;/code&gt;のシステムメニュー(左上のアイコンをクリックすると表示される)がマウスで操作不可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JToolTip&lt;/code&gt;は正常

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;showInternalMessageDialog(...)&lt;/code&gt;メソッド内で、&lt;code&gt;pane.putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP, Boolean.TRUE)&lt;/code&gt;(&lt;code&gt;JDK 1.6.0&lt;/code&gt;の場合の&lt;code&gt;Key&lt;/code&gt;は、&lt;code&gt;PopupFactory.forceHeavyWeightPopupKey&lt;/code&gt;) されているため、&lt;code&gt;JComboBox&lt;/code&gt;などのドロップダウンメニューも正常&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+2&lt;/kbd&gt;: &lt;kbd&gt;Alt+1&lt;/kbd&gt;と同様に&lt;code&gt;JOptionPane.showInternalMessageDialog&lt;/code&gt;メソッドを使用し、かつ半透明な&lt;code&gt;GlassPane&lt;/code&gt;を&lt;code&gt;JLayeredPane.MODAL_LAYER&lt;/code&gt;に追加

&lt;ul&gt;
&lt;li&gt;動作、制限などは、&lt;kbd&gt;Alt+2&lt;/kbd&gt;の&lt;code&gt;InternalMessageDialog&lt;/code&gt;と同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDesktopPane&lt;/code&gt;内にマスクが掛かる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+3&lt;/kbd&gt;: &lt;code&gt;JFrame&lt;/code&gt;に半透明な&lt;code&gt;GlassPane&lt;/code&gt;を追加し、そこに&lt;code&gt;JInternalFrame&lt;/code&gt;を追加することで&lt;code&gt;Modal&lt;/code&gt;に設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;内全体(&lt;code&gt;JMenuBar&lt;/code&gt;なども含む)にマスクが掛かる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InternalMessageDialog&lt;/code&gt;のシステムメニューが自身のレイヤーより奥に表示されるため、アイコン(&lt;code&gt;JLabel&lt;/code&gt;)をクリックしても反応しないようにリスナーを除去&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;を&lt;code&gt;InternalMessageDialog&lt;/code&gt;に追加すると、そのドロップダウンメニューが裏に表示される&lt;/li&gt;
&lt;li&gt;この&lt;code&gt;InternalMessageDialog&lt;/code&gt;を開いていても、アプリケーションを&lt;kbd&gt;Alt+F4&lt;/kbd&gt;などで閉じることが出来てしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+3&lt;/kbd&gt;の方法で、&lt;code&gt;InternalOptionDialog&lt;/code&gt;に&lt;code&gt;JComboBox&lt;/code&gt;を追加する場合、ドロップダウンメニューを正しく表示させるには、リフレクションを使って&lt;code&gt;ClientProperty&lt;/code&gt;を設定するしかない？

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JInternalFrame#putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP, Boolean.TRUE)&lt;/code&gt;とすれば、システムメニューも正常に表示されるが、&lt;code&gt;JOptionPane.showInternalXXXDialog&lt;/code&gt;では、なぜか&lt;code&gt;JOptionPane&lt;/code&gt;に設定するようになっている(&lt;code&gt;JInternalFrame&lt;/code&gt;は使い回ししているから？)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JInternalFrame modal = optionPane.createInternalFrame(desktop, &quot;modal3&quot;);
JComboBox combo = new JComboBox(new String[] {&quot;Banana&quot;, &quot;Apple&quot;, &quot;Pear&quot;, &quot;Grape&quot;});
combo.setEditable(true);
try{
  Field field;
  if(System.getProperty(&quot;java.version&quot;).startsWith(&quot;1.6.0&quot;)) {
    Class clazz = Class.forName(&quot;javax.swing.PopupFactory&quot;);
    field = clazz.getDeclaredField(&quot;forceHeavyWeightPopupKey&quot;);
  }else{ //1.7.0, 1.8.0
    Class clazz = Class.forName(&quot;javax.swing.ClientPropertyKey&quot;);
    field = clazz.getDeclaredField(&quot;PopupFactory_FORCE_HEAVYWEIGHT_POPUP&quot;);
  }
  field.setAccessible(true);
  modal.putClientProperty(field.get(null), Boolean.TRUE);
}catch(Exception ex) {
  ex.printStackTrace();
}
optionPane.setMessage(combo);
optionPane.setMessageType(JOptionPane.QUESTION_MESSAGE);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/01/&quot;&gt;Alexander Potochkin&amp;#39;s Blog: Disabling Swing Containers, the final solution?&lt;/a&gt;を参考に(&lt;code&gt;paint&lt;/code&gt;ではなく、&lt;code&gt;print&lt;/code&gt;が使用されている)して、&lt;code&gt;GlassPane&lt;/code&gt;を以下のように修正すると、上記のサンプルの&lt;kbd&gt;Alt+3&lt;/kbd&gt;(&lt;kbd&gt;Alt+2&lt;/kbd&gt;の場合は、描画が乱れる)は、&lt;code&gt;Mnemonic&lt;/code&gt;もうまくブロックできるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;のメニューバーの&lt;code&gt;Mnemonic&lt;/code&gt;もブロックできる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JRootPane&lt;/code&gt;から取得した&lt;code&gt;LayeredPane&lt;/code&gt;が非表示なので、その子コンポーネント(&lt;code&gt;JMenuBar&lt;/code&gt;や&lt;code&gt;ContentPane&lt;/code&gt;など)のキーイベントがすべて無効になる&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JRootPane.html&quot;&gt;JRootPane (Java Platform SE 6)&lt;/a&gt;の図にあるように、&lt;code&gt;GlassPane&lt;/code&gt;は、&lt;code&gt;JRootPane&lt;/code&gt;の最上位の子コンポーネントなので、&lt;code&gt;LayeredPane&lt;/code&gt;を画像として表示している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;のシステムメニューはブロックできない&lt;/li&gt;
&lt;li&gt;モーダルにした&lt;code&gt;JInternalFrame&lt;/code&gt;のシステムメニューは表示されない

&lt;ul&gt;
&lt;li&gt;ただし表示されないだけで、クリックしてからカーソル移動やダブルクリックなどが動いてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;モーダルにした&lt;code&gt;JInternalFrame&lt;/code&gt;の右上の閉じるボタンの&lt;code&gt;JToolTip&lt;/code&gt;が&lt;code&gt;JDesktopPane&lt;/code&gt;内で表示される場合、空白になる &lt;del&gt;&lt;code&gt;JDK 6&lt;/code&gt;では&lt;code&gt;JToolTip&lt;/code&gt;は表示されない&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class PrintGlassPane extends JPanel {
  TexturePaint texture = TextureFactory.createCheckerTexture(4);
  public PrintGlassPane() {
    super((LayoutManager)null);
    setOpaque(false);
  }
  @Override public void setVisible(boolean isVisible) {
    boolean oldVisible = isVisible();
    super.setVisible(isVisible);
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null &amp;amp;&amp;amp; isVisible()!=oldVisible) {
      rootPane.getLayeredPane().setVisible(!isVisible);
    }
  }
  @Override public void paintComponent(Graphics g) {
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null) {
      //http://weblogs.java.net/blog/alexfromsun/archive/2008/01/
      // it is important to call print() instead of paint() here
      // because print() doesn&#39;t affect the frame&#39;s double buffer
      rootPane.getLayeredPane().print(g);
    }
    Graphics2D g2 = (Graphics2D) g;
    g2.setPaint(texture);
    g2.fillRect(0,0,getWidth(),getHeight());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;の場合、&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/07/disabled-glass-pane/&quot;&gt;Disabled Glass Pane « Java Tips Weblog&lt;/a&gt;のようにキー入力を無効にするキーリスナーを追加する方法もあります。&lt;/p&gt;

&lt;p&gt;この方法は、&lt;code&gt;JDK 5&lt;/code&gt;などの場合、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で、&lt;kbd&gt;Alt&lt;/kbd&gt;キーを押すとメニューバーにフォーカスが移ることがあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090803142839/http://java.sun.com/developer/JDCTechTips/2001/tt1220.html&quot;&gt;Creating Modal Internal Frames -- Approach 1 and Approach 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/rootpane.html&quot;&gt;How to Use Root Panes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/01/&quot;&gt;Disabling Swing Containers, the final solution?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WaitCursor.html&quot;&gt;Cursorを砂時計に変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentFrame.html&quot;&gt;JInternalFrameを半透明にする&lt;/a&gt;と、同様に&lt;code&gt;GlassPane&lt;/code&gt;が&lt;code&gt;Ubuntu&lt;/code&gt;(&lt;code&gt;GNOME&lt;/code&gt;)などで半透明にならない場合があります。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-15 (月) 13:16:07

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Alt+2&lt;/kbd&gt;で開いた場合、&lt;code&gt;JInternalFrame&lt;/code&gt;に&lt;code&gt;GlassPane&lt;/code&gt;を乗せるのではなく、直接&lt;code&gt;JDesktopPane&lt;/code&gt;の&lt;code&gt;JLayeredPane.MODAL_LAYER&lt;/code&gt;に追加するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-16 (火) 17:31:50&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/01/&quot;&gt;Alexander Potochkin&amp;#39;s Blog: Disabling Swing Containers, the final solution?&lt;/a&gt;のサンプルでは、&lt;code&gt;Mnemonic&lt;/code&gt;もちゃんとブロックできているようなので、「あとで調べる &amp;amp; 参考にする」こと。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-01-25 (金) 17:28:21&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mnemonic&lt;/code&gt;を数字キー(&lt;kbd&gt;1&lt;/kbd&gt;, &lt;kbd&gt;2&lt;/kbd&gt;, &lt;kbd&gt;3&lt;/kbd&gt;)に変更 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-25 (金) 20:51:49&lt;/li&gt;
&lt;li&gt;すべての&lt;code&gt;Mnemonic&lt;/code&gt;を一時的に無効化したい場合に、&lt;code&gt;UIManager.java&lt;/code&gt;の&lt;code&gt;private static final String disableMnemonicKey = &amp;quot;swing.disablenavaids&amp;quot;;&lt;/code&gt;は使えない？ 以下のように、&lt;code&gt;KeyboardFocusManager.setCurrentKeyboardFocusManager(...)&lt;/code&gt;で、&lt;kbd&gt;Alt&lt;/kbd&gt;キーなどを無視する方法もあるが…、もっと簡単な方法を調査中。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-09 (木) 11:46:38&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
KeyboardFocusManager.setCurrentKeyboardFocusManager(new DefaultKeyboardFocusManager() {
  @Override public boolean dispatchEvent(AWTEvent e) {
    if(e instanceof KeyEvent) {
      KeyEvent ke = (KeyEvent)e;
      if((ke.getModifiers() &amp;amp; InputEvent.ALT_MASK) != 0) {
        System.out.println(&quot;----\n&quot;+ke);
        return false;
      }
    }
    return super.dispatchEvent(e);
  }
});
JComboBox&amp;lt;String&amp;gt; combo = new JComboBox&amp;lt;&amp;gt;(new String[] {&quot;Banana&quot;, &quot;Apple&quot;, &quot;Pear&quot;, &quot;Grape&quot;});
combo.setEditable(true);

JOptionPane.showInternalMessageDialog(
  desktop, combo, &quot;modal1&quot;, JOptionPane.INFORMATION_MESSAGE);
KeyboardFocusManager.setCurrentKeyboardFocusManager(manager);
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://terai.xrea.jp/swing/modalinternalframe</link>
                <guid>http://terai.xrea.jp/swing/modalinternalframe</guid>
                <pubDate>2007-10-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタイトルをクリップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入されたタブにコンポーネントを追加する機能を使って、長いタイトルのタブは文字列をクリップして表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClippedTabLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJU-PNaRI/AAAAAAAAAUM/yAbkpSgRNVY/s800/ClippedTabLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ClippedTitleTabbedPane extends JTabbedPane {
  public ClippedTitleTabbedPane() {
    super();
  }
  public ClippedTitleTabbedPane(int tabPlacement) {
    super(tabPlacement);
  }
  private Insets getTabInsets() {
    Insets i = UIManager.getInsets(&quot;TabbedPane.tabInsets&quot;);
    if(i!=null) {
      return i;
    }else{
      SynthStyle style = SynthLookAndFeel.getStyle(this, Region.TABBED_PANE_TAB);
      SynthContext context = new SynthContext(
          this, Region.TABBED_PANE_TAB, style, SynthConstants.ENABLED);
      return style.getInsets(context, null);
    }
  }
  private Insets getTabAreaInsets() {
    Insets i = UIManager.getInsets(&quot;TabbedPane.tabAreaInsets&quot;);
    if(i!=null) {
      return i;
    }else{
      SynthStyle style = SynthLookAndFeel.getStyle(this, Region.TABBED_PANE_TAB_AREA);
      SynthContext context = new SynthContext(
          this, Region.TABBED_PANE_TAB_AREA, style, SynthConstants.ENABLED);
      return style.getInsets(context, null);
    }
  }
  @Override public void doLayout() {
    int tabCount  = getTabCount();
    if(tabCount==0) return;
    Insets tabInsets   = getTabInsets();
    Insets tabAreaInsets = getTabAreaInsets();
    Insets insets = getInsets();
    int areaWidth = getWidth() - tabAreaInsets.left - tabAreaInsets.right
                               - insets.left        - insets.right;
    int tabWidth  = 0; // = tabInsets.left + tabInsets.right + 3;
    int gap     = 0;

    switch(getTabPlacement()) {
      case LEFT: case RIGHT:
      tabWidth = areaWidth / 4;
      gap = 0;
      break;
      case BOTTOM: case TOP: default:
      tabWidth = areaWidth / tabCount;
      gap = areaWidth - (tabWidth * tabCount);
    }
    // &quot;3&quot; is magic number @see BasicTabbedPaneUI#calculateTabWidth
    tabWidth = tabWidth - tabInsets.left - tabInsets.right - 3;
    for(int i=0;i&amp;lt;tabCount;i++) {
      JComponent l = (JComponent)getTabComponentAt(i);
      if(l==null) break;
      l.setPreferredSize(new Dimension(tabWidth+(i&amp;lt;gap?1:0), l.getPreferredSize().height));
    }
    super.doLayout();
  }
  @Override public void insertTab(
      String title, Icon icon, Component component, String tip, int index) {
    super.insertTab(title, icon, component, tip==null?title:tip, index);
    JLabel label = new JLabel(title, JLabel.CENTER);
    Dimension dim = label.getPreferredSize();
    Insets tabInsets = getTabInsets();
    label.setPreferredSize(new Dimension(0, dim.height+tabInsets.top+tabInsets.bottom));
    setTabComponentAt(index, label);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;下の&lt;code&gt;JTabbedPane&lt;/code&gt;では、タブに&lt;code&gt;JTabbedPane#setTabComponentAt&lt;/code&gt;メソッドを使って&lt;code&gt;JLabel&lt;/code&gt;を追加し、そのクリップ機能を利用して長いタイトル文字列の後半を省略表示しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTitleTab.html&quot;&gt;JTabbedPaneのタブを等幅にしてタイトルをクリップ&lt;/a&gt;と、ほぼ同等(文字列の長さがばらばらでも、左右にタブをおいた場合は全体の&lt;code&gt;1/4&lt;/code&gt;の幅に、上下にタブをおいた場合はすべてのタブ幅が均等になる)ですが、&lt;code&gt;TabbedPaneUI#paintText&lt;/code&gt;で文字列の描画をオーバーライドする必要も無く、ソースも短くて実装が簡単です。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTitleTab.html&quot;&gt;JTabbedPaneのタブを等幅にしてタイトルをクリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleAlignment.html&quot;&gt;JTabbedPaneのTabTitleを左揃えに変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tabAreaInsets&lt;/code&gt;を考慮するように修正し、&lt;code&gt;TOP-LEFT&lt;/code&gt;の切り替え機能を追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-26 (火) 22:15:27&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;に仮？対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-22 (土) 12:49:05

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;に対応するのは、&lt;code&gt;JDK 1.7&lt;/code&gt;以降になる予定？です。 &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6354790&quot;&gt;Bug ID: 6354790 GTK LAF: Painting bugs in JTabbedPane&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-24 (月) 17:27:13&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane#doLayout()&lt;/code&gt;をオーバーライドするように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-10-08 (金) 15:47:34&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;で&lt;code&gt;setForegroundAt&lt;/code&gt;が反映されないため困っていたため参考にさせていただきました。&lt;code&gt;setForegroundAt&lt;/code&gt;を&lt;code&gt;Override&lt;/code&gt;して&lt;code&gt;getTabComponentAt(index).setForeground(foreground)&lt;/code&gt;するといい感じです。 -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2012-01-05 (木) 20:23:28

&lt;ul&gt;
&lt;li&gt;情報ありがとうございます。&lt;code&gt;Java 7&lt;/code&gt;で修正されてなかったっけ？&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6939001&quot;&gt;Bug ID: 6939001 Nimbus: JTabbedPane setBackgroundAt and setForegroundAt have no effect&lt;/a&gt;とか思ったのですが、よく見たらドキュメントに&lt;code&gt;It is up to the look and feel to honor this property, some may choose to ignore it.&lt;/code&gt;と注意書きが追加されるだけだったみたいですね(^^;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-01-05 (木) 21:35:02&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: 省略記号、&lt;code&gt;Truncating&lt;/code&gt;、&lt;code&gt;3 periods(dots) ellipsis&lt;/code&gt;、&lt;code&gt;CSS3&lt;/code&gt;の&lt;code&gt;text-overflow&lt;/code&gt;プロパティに&lt;code&gt;clip&lt;/code&gt;|&lt;code&gt;ellipsis&lt;/code&gt;|&lt;code&gt;string&lt;/code&gt;、省略記号を表示しているのでタイトルは&lt;code&gt;ellipsis&lt;/code&gt;にした方がよかったかも。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-06-24 (日) 05:18:37&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/clippedtablabel</link>
                <guid>http://terai.xrea.jp/swing/clippedtablabel</guid>
                <pubDate>2007-10-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにJProgressBarを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルに&lt;code&gt;JProgressBar&lt;/code&gt;を使用して進捗を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableCellProgressBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUYeEtfWI/AAAAAAAAAl8/47mUyOKeiQY/s800/TableCellProgressBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ProgressRenderer extends DefaultTableCellRenderer {
  private final JProgressBar b = new JProgressBar(0, 100);
  public ProgressRenderer() {
    super();
    setOpaque(true);
    b.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
  }
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
                                               boolean isSelected, boolean hasFocus,
                                               int row, int column) {
    Integer i = (Integer)value;
    String text = &quot;Done&quot;;
    if(i&amp;lt;0) {
      text = &quot;Canceled&quot;;
    }else if(i&amp;lt;100) {
      b.setValue(i);
      return b;
    }
    super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column);
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Executor executor = Executors.newCachedThreadPool();
//...
final int rowNumber = model.getRowCount();
SwingWorker&amp;lt;Integer, Integer&amp;gt; worker = new SwingWorker&amp;lt;Integer, Integer&amp;gt;() {
  private int sleepDummy = new Random().nextInt(100) + 1;
  private int lengthOfTask = 120;
  @Override protected Integer doInBackground() {
    int current = 0;
    while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
      current++;
      try {
        Thread.sleep(sleepDummy);
      }catch(InterruptedException ie) {
        publish(-1);
        break;
      }
      publish(100 * current / lengthOfTask);
    }
    return sleepDummy*lengthOfTask;
  }
  @Override protected void process(java.util.List&amp;lt;Integer&amp;gt; chunks) {
    for(Integer value : chunks) {
      model.setValueAt(value, rowNumber, 2);
    }
    //model.fireTableCellUpdated(rowNumber, 2);
  }
  @Override protected void done() {
    String text = null;
    int i = -1;
    if(isCancelled()) {
      text = &quot;Canceled&quot;;
    }else{
      try{
        i = get();
        text = &quot;Done&quot;;
      }catch(Exception ignore) {
        ignore.printStackTrace();
        text = ignore.getMessage();
      }
    }
    System.out.println(rowNumber +&quot;:&quot;+text+&quot;(&quot;+i+&quot;ms)&quot;);
  }
};
model.addTest(new Test(&quot;example&quot;, 0), worker);
executor.execute(worker); //1.6.0_18
//worker.execute(); //1.6.0_21
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;add&lt;/code&gt;ボタンをクリックすると、&lt;code&gt;JDK 6&lt;/code&gt;の&lt;code&gt;SwingWorker&lt;/code&gt;を使用したダミータスクが起動して、進捗状況が&lt;code&gt;Cell&lt;/code&gt;内の&lt;code&gt;JProgressBar&lt;/code&gt;で表示されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ProgressRenderer&lt;/code&gt;は、&lt;code&gt;JProgressBar&lt;/code&gt;を一つ持ち、ダミータスクが動いている間は、その&lt;code&gt;JProgressBar&lt;/code&gt;に値を設定して描画用のコンポーネントとして返し、タスクが終了(またはキャンセル)されたら&lt;code&gt;JLabel&lt;/code&gt;(自分自身、&lt;code&gt;DefaultTableCellRenderer&lt;/code&gt;)に文字列を設定して返すようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;このサンプルでは、行番号をキーにしているため、例えばモデルから行を削除するときに実行中のタスクが手前の行などにあった場合はエラーが発生してしまいます。このため、実際には削除は行わず、フィルタを使って非表示にしています(参考: &lt;a href=&quot;http://terai.xrea.jp/Swing/RowFilter.html&quot;&gt;RowFilterでJTableの行をフィルタリング&lt;/a&gt;)。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1364600&quot;&gt;Swing - Maximum number of SwingWorker objects in a Swing app?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public abstract class SwingWorker&amp;lt;T, V&amp;gt; implements RunnableFuture&amp;lt;T&amp;gt; {
  /**
   * number of worker threads.
   */
  private static final int MAX_WORKER_THREADS = 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SwingWorker.html&quot;&gt;SwingWorkerを使った処理の中断と進捗状況表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StringPaintedCellProgressBar.html&quot;&gt;TableCellRendererに進捗文字列を設定したJProgressBarを使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;Windows&lt;/code&gt; + &lt;code&gt;Java 1.7.0-ea-b24&lt;/code&gt;での動作がおかしいみたいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-19 (水) 21:08:43&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://icedtea.classpath.org/bugzilla/show_bug.cgi?id=87&quot;&gt;Bug 87 - Icedtea 1.7.0 and SwingWorker problem&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-01-31 (木) 15:56:51&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_18&lt;/code&gt;での修正: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6799345&quot;&gt;Bug ID: 6799345 JFC demos threw exception in the Java Console when applets are closed&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-20 (水) 17:34:04

&lt;ul&gt;
&lt;li&gt;代わりに、&lt;code&gt;Executors.newCachedThreadPool().execute(worker);&lt;/code&gt;のようにしているけど、これでいいのだろうか？ 実行中にアプリケーションを終了する場合は、&lt;code&gt;ExecutorService#shutdown()&lt;/code&gt;などを呼んだほうがよさそうだけど、このサンプルでは、&lt;code&gt;WindowConstants.EXIT_ON_CLOSE&lt;/code&gt;で&lt;code&gt;VM&lt;/code&gt;ごと落としているので、関係ない？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-20 (水) 17:43:10&lt;/li&gt;
&lt;li&gt;正常に動かなくなっている&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/swingworker-137249.html&quot;&gt;Improve Application Performance With SwingWorker in Java SE 6&lt;/a&gt;などのサンプルがどう修正されるか、様子見。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-20 (水) 17:47:11&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6880336&quot;&gt;Bug ID: 6880336 SwingWorker deadlocks due one thread in the swingworker-pool&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-03-15 (月) 18:01:12&lt;/li&gt;
&lt;li&gt;修正されたようです。&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/bugfixes6u21-156339.html&quot;&gt;Java SE 6 Update 21 Bug Fixes&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-07-08 (木) 21:48:24&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6826514&quot;&gt;Bug ID: 6826514 SwingWorker: done() called before doInBackground() returns, when cancelled&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-02-04 (木) 16:54:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablecellprogressbar</link>
                <guid>http://terai.xrea.jp/swing/tablecellprogressbar</guid>
                <pubDate>2007-10-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneで長い行を折り返さない</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;や、&lt;code&gt;JTextPane&lt;/code&gt;で、行を&lt;code&gt;Viewport&lt;/code&gt;の幅で折り返さないよう設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NoWrapTextPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQbo-LQJI/AAAAAAAAAfk/YnnnPAQE-R4/s800/NoWrapTextPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class NoWrapParagraphView extends ParagraphView {
  public NoWrapParagraphView(Element elem) {
    super(elem);
  }
  @Override protected SizeRequirements calculateMinorAxisRequirements(
      int axis, SizeRequirements r) {
    SizeRequirements req = super.calculateMinorAxisRequirements(axis, r);
    req.minimum = req.preferred;
    return req;
  }
  @Override public int getFlowSpan(int index) {
    return Integer.MAX_VALUE;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、スパンの必要サイズを計算する&lt;code&gt;calculateMinorAxisRequirements&lt;/code&gt;メソッドなどをオーバーライドして、行折り返し段落のビュー(&lt;code&gt;ParagraphView&lt;/code&gt;)で折り返しが発生しないようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;や&lt;code&gt;JTextPane&lt;/code&gt;といった&lt;code&gt;StyledDocument&lt;/code&gt;をモデルにしているテキストコンポーネントに非常に長い行をペーストした場合、表示が更新されなくなりますが、折り返しできなくしてしまうと多少ましになるようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;でも行を非常に長くしてしまうと、カーソルキーの移動などで異常に時間がかかる場合があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例えば、このサンプルで、カーソルを一番最後に移動し、一行目(非常に長い行)に&lt;kbd&gt;Up&lt;/kbd&gt;キーで移動すると発生する&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1367888&quot;&gt;Swing - Long last line in wrappable textarea hangs GUI (bug in java?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下のような方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1353861&quot;&gt;Swing - Disabling word wrap for JTextPane&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BoxView#layout(...)&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java2s.com/Code/Java/Swing-JFC/NonWrappingWrapTextPane.htm&quot;&gt;Non Wrapping(Wrap) TextPane : TextField : Swing JFC : Java examples (example source code) Organized by topic&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextPane#getScrollableTracksViewportWidth()&lt;/code&gt;をオーバーライド&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1353861&quot;&gt;Swing - Disabling word wrap for JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java2s.com/Code/Java/Swing-JFC/NonWrappingWrapTextPane.htm&quot;&gt;Non Wrapping(Wrap) TextPane : TextField : Swing JFC : Java examples (example source code) Organized by topic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6502558&quot;&gt;Bug ID: 6502558 AbstractDocument fires event not on Event Dispatch Thread&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2006/02/debugging_swing.html&quot;&gt;Alexander Potochkin&amp;#39;s Blog: Debugging Swing, the final summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OneLineTextPane.html&quot;&gt;JTextPaneを一行に制限してスタイル可能なJTextFieldとして使用する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/nowraptextpane</link>
                <guid>http://terai.xrea.jp/swing/nowraptextpane</guid>
                <pubDate>2007-09-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneで全角スペースやタブを可視化</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;に表示した文字列中の全角スペースやタブを可視化します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WhitespaceMark&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTWpb1ogMI/AAAAAAAAApk/3IWJ2qvvECo/s800/WhitespaceMark.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WhitespaceLabelView extends LabelView {
  private static final Color pc = new Color(130, 140, 120);
  private static final BasicStroke dashed = new BasicStroke(1.0f, BasicStroke.CAP_BUTT,
       BasicStroke.JOIN_MITER, 10.0f, new float[] {1.0f}, 0.0f);
  public WhitespaceLabelView(Element elem) {
    super(elem);
  }
  @Override public void paint(Graphics g, Shape a) {
    super.paint(g,a);
    Graphics2D g2 = (Graphics2D)g;
    Stroke stroke = g2.getStroke();
    Rectangle alloc = (a instanceof Rectangle) ? (Rectangle)a : a.getBounds();
    FontMetrics fontMetrics = g.getFontMetrics();
    int spaceWidth = fontMetrics.stringWidth(&quot;　&quot;);
    int sumOfTabs  = 0;
    String text = getText(getStartOffset(),getEndOffset()).toString();
    for(int i=0;i&amp;lt;text.length();i++) {
      String s = text.substring(i,i+1);
      int previousStringWidth = fontMetrics.stringWidth(text.substring(0,i)) + sumOfTabs;
      int sx = alloc.x+previousStringWidth;
      int sy = alloc.y+alloc.height-fontMetrics.getDescent();
      if(&quot;　&quot;.equals(s)) {
        g2.setStroke(dashed);
        g2.setPaint(pc);
        g2.drawLine(sx+1, sy-1, sx+spaceWidth-2, sy-1);
        g2.drawLine(sx+2,   sy, sx+spaceWidth-2, sy);
      }else if(&quot;\t&quot;.equals(s)) {
        int tabWidth = (int)getTabExpander().nextTabStop((float)sx, i)-sx;
        g2.setColor(pc);
        g2.drawLine(sx+2, sy-0, sx+2+2, sy-0);
        g2.drawLine(sx+2, sy-1, sx+2+1, sy-1);
        g2.drawLine(sx+2, sy-2, sx+2+0, sy-2);
        g2.setStroke(dashed);
        g2.drawLine(sx+2, sy, sx+tabWidth-2, sy);
        sumOfTabs+=tabWidth;
      }
      g2.setStroke(stroke);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;LabelView&lt;/code&gt;を継承し、&lt;code&gt;LabelView#paint&lt;/code&gt;メソッドをオーバーライドして全角スペースやタブの場合だけ、それぞれの図形を描画しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注: タブの図形は、&lt;code&gt;xyzzy&lt;/code&gt;風だが、ドットの数は面倒なので適当&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;この&lt;code&gt;LabelView&lt;/code&gt;を使用する&lt;code&gt;EditorKit(ViewFactory)&lt;/code&gt;の作成は、&lt;a href=&quot;http://terai.xrea.jp/Swing/ParagraphMark.html&quot;&gt;JEditorPaneで改行を表示&lt;/a&gt;と同様になっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1374478&quot;&gt;Swing - JTextPane View Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20120216035951/http://java.sun.com/products/jlf/ed1/dg/higo.htm&quot;&gt;Design Guidelines: Text Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javafaq.nu/java-book-30.html&quot;&gt;Swing Chapter 19. (Advanced topics) Inside Text Components. Easy for reading, Click here!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ParagraphMark.html&quot;&gt;JEditorPaneで改行を表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabSize.html&quot;&gt;JTextPaneでタブサイズを設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/whitespacemark</link>
                <guid>http://terai.xrea.jp/swing/whitespacemark</guid>
                <pubDate>2007-09-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのドロップダウンリスト幅を指定値以上に保つ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のドロップダウンリストが表示されたとき、本体の幅が狭くても一定の幅以下にはならないように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboPopupWidth&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJ8wQD77I/AAAAAAAAAVM/Ade6cu49JUQ/s800/ComboPopupWidth.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MinWidthPopupMenuListener implements PopupMenuListener{
  private static final int POPUP_MIN_WIDTH = 320;
  private boolean adjusting = false;
  @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
    JComboBox combo = (JComboBox)e.getSource();
    Dimension size  = combo.getSize();
    if(size.width&amp;gt;=POPUP_MIN_WIDTH) return;
    if(!adjusting) {
      adjusting = true;
      combo.setSize(POPUP_MIN_WIDTH, size.height);
      combo.showPopup();
    }
    combo.setSize(size);
    adjusting = false;
  }
  @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {}
  @Override public void popupMenuCanceled(PopupMenuEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、下二つの&lt;code&gt;JComboBox&lt;/code&gt;に&lt;code&gt;PopupMenuListener&lt;/code&gt;を実装したリスナーを設定しています。このリスナーでは、ポップアップメニュー(ドロップダウンリスト)が開かれる前に&lt;code&gt;JComboBox&lt;/code&gt;本体の幅を指定値と比較し、小さかった場合は以下のような通常とは異なる手順でポップアップメニューの表示を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;のサイズを取得し保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;の幅を指定値まで拡大&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox#showPopup&lt;/code&gt;でポップアップメニューを表示

&lt;ul&gt;
&lt;li&gt;ポップアップメニューの幅も、指定値まで拡大している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;本体のサイズを保存していた元の値に戻す&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1368300&quot;&gt;Swing - How to widen the drop-down list in a JComboBox&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;dlinderm さんの投稿(2007/06/08 23:24)を参考にして、&lt;code&gt;PopupMenuListener&lt;/code&gt;を使用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/make_jcombobox_popup_wide_enough&quot;&gt;Make JComboBox popup wide enough - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらには、&lt;code&gt;JComboBox#doLayout()&lt;/code&gt;と、&lt;code&gt;JComboBox#getSize()&lt;/code&gt;をオーバーライドして、十分な幅のドロップダウンリストを表示するサンプルがあります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4743225&quot;&gt;Bug ID: 4743225 Size of JComboBox list is wrong when list is populated via PopupMenuListener&lt;/a&gt;  -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-06-05 (日) 02:34:16&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/combopopupwidth</link>
                <guid>http://terai.xrea.jp/swing/combopopupwidth</guid>
                <pubDate>2007-09-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>RowFilterでJTableの行をフィルタリング</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;TableRowSorter&lt;/code&gt;に&lt;code&gt;RowFilter&lt;/code&gt;を設定して、行のフィルタリングを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RowFilter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTST-FvjRI/AAAAAAAAAik/ZbU9nuVVCiI/s800/RowFilter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final TableRowSorter&amp;lt;? extends TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;&amp;gt;(model);
final Set&amp;lt;RowFilter&amp;lt;? super TestModel, ? super Integer&amp;gt;&amp;gt; filters = new HashSet&amp;lt;&amp;gt;(2);
final RowFilter&amp;lt;TableModel,Integer&amp;gt; filter1 = new RowFilter&amp;lt;TableModel,Integer&amp;gt;() {
  @Override public boolean include(
      Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
    TableModel model = entry.getModel();
    Test t = model.getTest(entry.getIdentifier());
    return !t.getComment().trim().isEmpty();
  }
};
final RowFilter&amp;lt;TableModel,Integer&amp;gt; filter2 = new RowFilter&amp;lt;TableModel,Integer&amp;gt;() {
  @Override public boolean include(
      Entry&amp;lt;? extends TableModel, ? extends Integer&amp;gt; entry) {
    return entry.getIdentifier() % 2 == 0;
  }
};
sorter.setRowFilter(RowFilter.andFilter(filters));
//sorter.setRowFilter(filter1);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、以下のような複数の行フィルタを、&lt;code&gt;and&lt;/code&gt;条件で&lt;code&gt;JTable&lt;/code&gt;に適用することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;コメントが空でない行のみ表示&lt;/li&gt;
&lt;li&gt;行番号が偶数の場合のみ表示

&lt;ul&gt;
&lt;li&gt;行番号はソートされている場合でも、元のモデルのインデックスで判断する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090419180550/http://java.sun.com/developer/JDCTechTips/2005/tt1115.html&quot;&gt;Splash Screens and Java SE 6, and Sorting and Filtering Tables Tech Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#sorting&quot;&gt;Sorting and Filtering (How to Use Tables)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;「&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;が発生する…」は、&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;に移動しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-04 (金) 15:19:12&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rowfilter</link>
                <guid>http://terai.xrea.jp/swing/rowfilter</guid>
                <pubDate>2007-09-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableRowSorterのSortKeysをクリアする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;TableRowSorter&lt;/code&gt;での行ソートを、テーブルヘッダの&lt;kbd&gt;Shift&lt;/kbd&gt;+クリックでクリアします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearSortingState&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJF8YbgvI/AAAAAAAAAT0/NDSO1fqmVNw/s800/ClearSortingState.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setAutoCreateRowSorter(true);
table.getTableHeader().addMouseListener(new MouseAdapter() {
  @Override public void mouseClicked(MouseEvent e) {
    final RowSorter&amp;lt;? extends TableModel&amp;gt; sorter = table.getRowSorter();
    if(sorter==null || sorter.getSortKeys().size()==0) return;
    JTableHeader h = (JTableHeader)e.getComponent();
    TableColumnModel columnModel = h.getColumnModel();
    int viewColumn = columnModel.getColumnIndexAtX(e.getX());
    if(viewColumn&amp;lt;0) return;
    int column = columnModel.getColumn(viewColumn).getModelIndex();
    if(column != -1 &amp;amp;&amp;amp; e.isShiftDown()) {
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          sorter.setSortKeys(null);
        }
      });
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;ヘッダにマウスリスナーを設定し、&lt;kbd&gt;Shift&lt;/kbd&gt;キーを押しながらのクリックの場合は、&lt;code&gt;TableRowSorter#setSortKeys&lt;/code&gt;メソッドを使って、ソートキーを空にしています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、以下のような制限があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ソートキーになっていないヘッダカラムを&lt;kbd&gt;Shift&lt;/kbd&gt;+クリックした場合でも、ソート状態をクリアする&lt;/li&gt;
&lt;li&gt;&lt;del&gt;行がソートされている場合は、ドラッグ&amp;amp;ドロップで行を入れ替え不可&lt;/del&gt; &lt;code&gt;D&amp;amp;D&lt;/code&gt;機能は削除&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TableSorterDemoProject/src/components/TableSorter.java&quot;&gt;TableSorter.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TriStateSorting.html&quot;&gt;TableRowSorterのソートをヘッダクリックで昇順、降順、初期状態に変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/clearsortingstate</link>
                <guid>http://terai.xrea.jp/swing/clearsortingstate</guid>
                <pubDate>2007-08-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTable自体の高さを拡張</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された機能を使用して、&lt;code&gt;JViewport&lt;/code&gt;の高さまで&lt;code&gt;JTable&lt;/code&gt;を拡張します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FillsViewportHeight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMkfiP8jI/AAAAAAAAAZY/qHWqJtrcUgQ/s800/FillsViewportHeight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setFillsViewportHeight(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table = new JTable(model) {
  @Override public Component prepareRenderer(TableCellRenderer tcr, int row, int column) {
    Component c = super.prepareRenderer(tcr, row, column);
    if(isRowSelected(row)) {
      c.setForeground(getSelectionForeground());
      c.setBackground(getSelectionBackground());
    }else{
      c.setForeground(getForeground());
      c.setBackground((row%2==0)?evenColor:getBackground());
    }
    return c;
  }
};
JScrollPane scroll = new JScrollPane(table);
scroll.setBackground(Color.RED);
scroll.getViewport().setBackground(Color.GREEN);
//table.setBackground(Color.BLUE);
//table.setBackground(scroll.getBackground());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、チェックボックスの選択状態で、&lt;code&gt;JTable#setFillsViewportHeight(boolean)&lt;/code&gt;を適用するかどうかを切り替えることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFillsViewportHeight() == false&lt;/code&gt;の場合(デフォルト値)

&lt;ul&gt;
&lt;li&gt;下部の余白は&lt;code&gt;JTable&lt;/code&gt;ではないため、&lt;code&gt;JViewport&lt;/code&gt;の背景色(緑)が表示される

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableBackground.html&quot;&gt;JTableの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;、または&lt;code&gt;JViewport&lt;/code&gt;に&lt;code&gt;setComponentPopupMenu&lt;/code&gt;したり、リスナーを設定していないため、下部の余白で右クリックしてもポップアップメニューは無効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getFillsViewportHeight() == true&lt;/code&gt;の場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;の高さが&lt;code&gt;JViewport&lt;/code&gt;の高さより小さい時は、両者が同じ高さになるように&lt;code&gt;JTable&lt;/code&gt;が拡張される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#setBackgorund(Color)&lt;/code&gt;で設定した色(薄い黄色)が&lt;code&gt;JTable&lt;/code&gt;下部の余白の背景色となる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;自体が拡張されるため、余白部分を右クリックしてもポップアップメニューが表示される

&lt;ul&gt;
&lt;li&gt;縦スクロールバーとテーブルヘッダで出来る余白(赤)などは&lt;code&gt;JScrollPane&lt;/code&gt;なので、ポップアップメニューは無効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;簡単に余白部分にドロップしたり、空の&lt;code&gt;JTable&lt;/code&gt;にドロップすることができる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDTable.html&quot;&gt;JTableの行をドラッグ＆ドロップ&lt;/a&gt;では、余白にドロップ出来ない&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileListFlavor.html&quot;&gt;Fileのドラッグ＆ドロップ&lt;/a&gt;では、&lt;code&gt;DropTarget&lt;/code&gt;を&lt;code&gt;JTable&lt;/code&gt;、&lt;code&gt;JViewport&lt;/code&gt;の両方に設定する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;、&lt;code&gt;JViewport&lt;/code&gt;の背景色も以下のように表示されることがあるので、実際に使う場合は&lt;code&gt;table.setBackground(scrollPane.getBackground())&lt;/code&gt;するなどして、すべておなじ色になるようにしておいた方がいいかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTMm5lGwGI/AAAAAAAAAZc/VWaIAURiCKk/s800/FillsViewportHeight1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollPane.setBackground(Color.RED);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;縦スクロールバーとテーブルヘッダで出来る余白の色&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollPane.getViewport().setBackground(Color.GREEN);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;列をドラッグして移動する場合の隙間の色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#setAutoResizeMode(JTable.AUTO_RESIZE_OFF)&lt;/code&gt;としたときの右余白&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableBackground.html&quot;&gt;JTableの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StripeTable.html&quot;&gt;TableCellRendererでセルの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileListFlavor.html&quot;&gt;Fileのドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/jtable_becomes_uglier_with_auto&quot;&gt;JTable becomes uglier with AUTO_RESIZE_OFF - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fillsviewportheight</link>
                <guid>http://terai.xrea.jp/swing/fillsviewportheight</guid>
                <pubDate>2007-08-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaでSmoothScrollによる行移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SmoothScroll&lt;/code&gt;アニメーション有りで任意の行まで移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SmoothScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTTSaxFSzI/AAAAAAAAAkI/KtedLqwCXBY/s800/SmoothScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Document doc = textArea.getDocument();
Element root = doc.getDefaultRootElement();
int ln = getDestLineNumber(textField, root);
if(ln&amp;lt;0) { Toolkit.getDefaultToolkit().beep(); return; }
try{
  final Element elem = root.getElement(ln-1);
  final Rectangle dest = textArea.modelToView(elem.getStartOffset());
  final Rectangle current = scroll.getViewport().getViewRect();
  new Timer(20, new ActionListener() {
    @Override public void actionPerformed(ActionEvent ae) {
      Timer animator = (Timer)ae.getSource();
      if(dest.y &amp;lt; current.y &amp;amp;&amp;amp; animator.isRunning()) {
        int d = Math.max(1, (current.y-dest.y)/2);
        current.y = current.y - d;
        textArea.scrollRectToVisible(current);
      }else if(dest.y &amp;gt; current.y &amp;amp;&amp;amp; animator.isRunning()) {
        int d = Math.max(1, (dest.y-current.y)/2);
        current.y = current.y + d;
        textArea.scrollRectToVisible(current);
      }else{
        textArea.setCaretPosition(elem.getStartOffset());
        animator.stop();
      }
    }
  }).start();
}catch(BadLocationException ble) {
  Toolkit.getDefaultToolkit().beep();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;java.swing.Timer&lt;/code&gt;でイベントを発生させ、目的位置と現在位置の差の半分だけ&lt;code&gt;ViewRect&lt;/code&gt;のスクロールを繰り返すことで、アニメーションを行っています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GotoLine.html&quot;&gt;JTextAreaの任意の行に移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/smoothscroll</link>
                <guid>http://terai.xrea.jp/swing/smoothscroll</guid>
                <pubDate>2007-08-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TitledBorderのタイトル位置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TitledBorder&lt;/code&gt;のタイトル位置や揃えを切り替えてテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TitledBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVZeDhwBI/AAAAAAAAAnk/QmV1N3Uqp3o/s800/TitledBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;VerticalOrientation vo = (VerticalOrientation)verticalOrientationChoices.getSelectedItem();
switch(vo) {
  case DEFAULT_POSITION: border.setTitlePosition(TitledBorder.DEFAULT_POSITION); break;
  case ABOVE_TOP:        border.setTitlePosition(TitledBorder.ABOVE_TOP);        break;
  case TOP:              border.setTitlePosition(TitledBorder.TOP);              break;
  case BELOW_TOP:        border.setTitlePosition(TitledBorder.BELOW_TOP);        break;
  case ABOVE_BOTTOM:     border.setTitlePosition(TitledBorder.ABOVE_BOTTOM);     break;
  case BOTTOM:           border.setTitlePosition(TitledBorder.BOTTOM);           break;
  case BELOW_BOTTOM:     border.setTitlePosition(TitledBorder.BELOW_BOTTOM);     break;
}
Justification jc = (Justification)justificationChoices.getSelectedItem();
switch(jc) {
  case DEFAULT_JUSTIFICATION: border.setTitleJustification(
                                              TitledBorder.DEFAULT_JUSTIFICATION); break;
  case LEFT:     border.setTitleJustification(TitledBorder.LEFT);     break;
  case CENTER:   border.setTitleJustification(TitledBorder.CENTER);   break;
  case RIGHT:    border.setTitleJustification(TitledBorder.RIGHT);    break;
  case LEADING:  border.setTitleJustification(TitledBorder.LEADING);  break;
  case TRAILING: border.setTitleJustification(TitledBorder.TRAILING); break;
}
panel.repaint();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のような定数フィールド値をコンボボックスで指定することで、タイトルの位置や揃えを変更できるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タイトルの位置を&lt;code&gt;TitledBorder#setTitlePosition&lt;/code&gt;メソッドで指定します。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_POSITION&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ABOVE_TOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BELOW_TOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ABOVE_BOTTOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOTTOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BELOW_BOTTOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;タイトルの揃えを&lt;code&gt;TitledBorder#setTitleJustification&lt;/code&gt;メソッドで指定します。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LEFT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CENTER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RIGHT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LEADING&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TRAILING&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6658876&quot;&gt;TitledBorder API inconsitent with implementation: uses TOP instead of DEFAULT_POSITION&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-12 (土) 00:35:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/titledborder</link>
                <guid>http://terai.xrea.jp/swing/titledborder</guid>
                <pubDate>2007-08-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GroupLayoutの使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で新しく導入された&lt;code&gt;GroupLayout&lt;/code&gt;と&lt;code&gt;GridBagLayout&lt;/code&gt;を比較しています。&lt;code&gt;GroupLayout&lt;/code&gt;のサンプルは、&lt;code&gt;API&lt;/code&gt;ドキュメントの例をそのまま引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GroupLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTNn9AdVUI/AAAAAAAAAbE/yOFdtRVr6P4/s800/GroupLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//GroupLayout
JPanel p1 = new JPanel();
p1.setBorder(BorderFactory.createTitledBorder(&quot;GroupLayout&quot;));
GroupLayout layout = new GroupLayout(p1);
p1.setLayout(layout);
layout.setAutoCreateGaps(true);
layout.setAutoCreateContainerGaps(true);

GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();

hGroup.addGroup(layout.createParallelGroup()
    .addComponent(label1).addComponent(label2));
hGroup.addGroup(layout.createParallelGroup()
    .addComponent(tf1).addComponent(tf2));
layout.setHorizontalGroup(hGroup);

GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();
vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE)
    .addComponent(label1).addComponent(tf1));
vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE)
    .addComponent(label2).addComponent(tf2));
layout.setVerticalGroup(vGroup);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//GridBagLayout
JPanel p2 = new JPanel(new GridBagLayout());
Border inside  = BorderFactory.createEmptyBorder(10,5+2,10,10+2);
Border outside = BorderFactory.createTitledBorder(&quot;GridBagLayout&quot;);
p2.setBorder(BorderFactory.createCompoundBorder(outside, inside));
GridBagConstraints c = new GridBagConstraints();
c.gridheight = 1;

c.gridx   = 0;
c.insets  = new Insets(5, 5, 5, 0);
c.anchor  = GridBagConstraints.WEST;
c.gridy   = 0; p2.add(label3, c); //p2.add(new JLabel(&quot;一度だけのaddで&quot;), c);
c.gridy   = 1; p2.add(label4, c); //p2.add(new JLabel(&quot;いいのは利点かも&quot;), c);

c.gridx   = 1;
c.weightx = 1.0;
c.fill    = GridBagConstraints.HORIZONTAL;
c.gridy   = 0; p2.add(tf3, c);
c.gridy   = 1; p2.add(tf4, c);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GroupLayout&lt;/code&gt;を手で書く場合は、少ないかもしれませんが、それでも&lt;code&gt;GridBagLayout&lt;/code&gt;と同程度の記述で同じようなレイアウトも作成できるようです。また手書きでも、&lt;code&gt;GroupLayout&lt;/code&gt;の場合、コンテナとコンポーネントの間に、ギャップを自動的に作成してくれる&lt;code&gt;GroupLayout#setAutoCreateContainerGaps&lt;/code&gt;などが便利です。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GroupLayout&lt;/code&gt;、&lt;code&gt;GridBagLayout&lt;/code&gt;でレイアウトしたパネルを、&lt;code&gt;GridLayout&lt;/code&gt;(&lt;code&gt;BorderLayout.CENTER&lt;/code&gt;と同じで、推奨サイズが無視される)で上下に並べているため、フレームを拡大すると、&lt;code&gt;GroupLayout&lt;/code&gt;は上揃え、&lt;code&gt;GridBagLayout&lt;/code&gt;は中央揃えになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/GroupLayout.html&quot;&gt;GroupLayout (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GridBagLayout.html&quot;&gt;GridBagLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/jawagenjin/20080127/1201444435&quot;&gt;GroupLayoutの考え方２ - ばかの一つ覚え。&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GroupLayout&lt;/code&gt;のイメージが、図で分かりやすく解説されています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/grouplayout</link>
                <guid>http://terai.xrea.jp/swing/grouplayout</guid>
                <pubDate>2007-07-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerのボタンにToolTipを付ける</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;の上下ボタンに&lt;code&gt;JToolTip&lt;/code&gt;を付けます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTmW4UoMI/AAAAAAAAAks/SXmtS71QSg0/s800/SpinnerButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static class MySpinnerUI extends BasicSpinnerUI {
  @Override protected Component createNextButton() {
    JComponent nextButton = (JComponent)super.createNextButton();
    nextButton.setToolTipText(&quot;SpinnerUI: next next&quot;);
    return nextButton;
  }
  @Override protected Component createPreviousButton() {
    JComponent previousButton = (JComponent)super.createPreviousButton();
    previousButton.setToolTipText(&quot;SpinnerUI: prev prev&quot;);
    return previousButton;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void searchSpinnerButtons(Container comp) {
  for(Component c: comp.getComponents()) {
    if(&quot;Spinner.nextButton&quot;.equals(c.getName())) {
      ((JButton)c).setToolTipText(&quot;getName: next next&quot;);
    }else if(&quot;Spinner.previousButton&quot;.equals(c.getName())) {
      ((JButton)c).setToolTipText(&quot;getName: prev prev&quot;);
    }else if(c instanceof Container) {
      searchSpinnerButtons((Container)c);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicSpinnerUI&lt;/code&gt;を継承する&lt;code&gt;SpinnerUI&lt;/code&gt;を作成し、&lt;code&gt;createNextButton&lt;/code&gt;、&lt;code&gt;createPreviousButton&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;ToolTipText&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;名前が&lt;code&gt;Spinner.nextButton&lt;/code&gt;、&lt;code&gt;Spinner.previousButton&lt;/code&gt;となっているコンポーネントを検索して、&lt;code&gt;ToolTipText&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;(&lt;code&gt;XP&lt;/code&gt;スタイル)の場合、&lt;code&gt;JSpinner&lt;/code&gt;の各ボタンに名前が付けられていないため、うまく動作しません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows&lt;/code&gt;環境の場合は&lt;code&gt;WindowsSpinnerUI&lt;/code&gt;を継承して、それ以外の場合は、名前で検索して&lt;code&gt;ToolTipText&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ:&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5036022&quot;&gt;Bug ID: 5036022 JSpinner does not reflect new font on subsequent calls to setFont&lt;/a&gt;、&lt;a href=&quot;http://d.hatena.ne.jp/kaiseh/20071120/1195560201&quot;&gt;JSpinnerのフォント指定 - kaisehのブログ&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-26 (月) 12:10:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnerbutton</link>
                <guid>http://terai.xrea.jp/swing/spinnerbutton</guid>
                <pubDate>2007-07-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ButtonGroup内のJRadioButtonなどの選択をクリア</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で追加された機能を使用して、&lt;code&gt;ButtonGroup&lt;/code&gt;内の選択をクリアします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearGroupSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTJDUnsHFI/AAAAAAAAATw/gkcmzcekHus/s800/ClearGroupSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final ButtonGroup bg = new ButtonGroup();
Vector&amp;lt;AbstractButton&amp;gt; l = new Vector&amp;lt;&amp;gt;();
l.add(new JRadioButton(&quot;RadioButton1&quot;));
l.add(new JRadioButton(&quot;RadioButton2&quot;));
l.add(new JToggleButton(icon));
for(AbstractButton b:l) { bg.add(b); add(b); }
add(new JButton(new AbstractAction(&quot;clearSelection&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    bg.clearSelection();
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JRadioButton&lt;/code&gt;、&lt;code&gt;JToggleButton&lt;/code&gt;を&lt;code&gt;ButtonGroup&lt;/code&gt;に追加し、これらの選択状態を、&lt;code&gt;ButtonGroup#clearSelection&lt;/code&gt;メソッドを使ってクリアしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20070622/275590/&quot;&gt;「Java SE 6完全攻略」第34回 Swingのその他の新機能：ITpro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/cleargroupselection</link>
                <guid>http://terai.xrea.jp/swing/cleargroupselection</guid>
                <pubDate>2007-07-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのモデルとしてenumを使用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のモデルとして&lt;code&gt;enum&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SortingAnimations&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTcZXYeSI/AAAAAAAAAkY/_frjM9wSJsc/s800/SortingAnimations.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static enum SortAlgorithms {
  Isort    (&quot;Insertion Sort&quot;),
  Selsort  (&quot;Selection Sort&quot;),
  Shellsort(&quot;Shell Sort&quot;),
  Hsort    (&quot;Heap Sort&quot;),
  Qsort    (&quot;Quicksort&quot;),
  Qsort2   (&quot;2-way Quicksort&quot;);
  private final String description;
  private SortAlgorithms(String description) {
    this.description = description;
  }
  @Override public String toString() {
    return description;
  }
}
private final JComboBox algorithmsChoices = new JComboBox(SortAlgorithms.values());
//JDK 1.7.0
//private final JComboBox&amp;lt;Enum&amp;gt; algorithmsChoices = new JComboBox&amp;lt;Enum&amp;gt;(SortAlgorithms.values());
//private final JComboBox&amp;lt;? extends Enum&amp;gt; algorithmsChoices = new JComboBox&amp;lt;&amp;gt;(SortAlgorithms.values());
//private final JComboBox&amp;lt;SortAlgorithms&amp;gt; algorithmsChoices = new JComboBox&amp;lt;&amp;gt;(SortAlgorithms.values());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;enum&lt;/code&gt;型で&lt;code&gt;JComboBox&lt;/code&gt;のモデルを作成しています。上記のコードでは、&lt;code&gt;Enum#toString()&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;JComboBox&lt;/code&gt;の表示はユーザーに分かりやすい名前になるようにしています。&lt;/p&gt;

&lt;p&gt;コード中で、どのアイテムが選択されているかなどを調べる場合などは、例えば以下のようにして使用します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;switch((SortAlgorithms)algorithmsChoices.getSelectedItem()) {
  case Isort:     isort(number);       break;
  case Selsort:   ssort(number);       break;
  case Shellsort: shellsort(number);   break;
  case Hsort:     heapsort(number);    break;
  case Qsort:     qsort(0, number-1);  break;
  case Qsort2:    qsort2(0, number-1); break;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;ソートアニメーション自体は、&lt;a href=&quot;http://www.cs.bell-labs.com/cm/cs/pearls/sortanim.html&quot;&gt;Sorting Algorithm Animations from Programming Pearls&lt;/a&gt;から基本部分はそのままコピーして、&lt;code&gt;Swing&lt;/code&gt;に移植しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingWorker&lt;/code&gt;でキャンセル可能にしたため、実行するには、&lt;code&gt;JDK 6&lt;/code&gt;以上が必要&lt;/li&gt;
&lt;li&gt;全部書き換えるのを止めて、移動する点のみウェイトを入れてゆっくり描画するように修正&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.bell-labs.com/cm/cs/pearls/sortanim.html&quot;&gt;Sorting Algorithm Animations from Programming Pearls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/painting/&quot;&gt;Lesson: Performing Custom Painting (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/sortinganimations</link>
                <guid>http://terai.xrea.jp/swing/sortinganimations</guid>
                <pubDate>2007-07-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonの形を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;円形や角丸の&lt;code&gt;JButton&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RoundButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSJxI6T0I/AAAAAAAAAiU/uPR0zvWSEnQ/s800/RoundButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RoundedCornerButton extends JButton {
  private static final float arcwidth  = 16.0f;
  private static final float archeight = 16.0f;
  protected static final int focusstroke = 2;
  protected final Color fc = new Color(100,150,255,200);
  protected final Color ac = new Color(230,230,230);
  protected final Color rc = Color.ORANGE;
  protected Shape shape;
  protected Shape border;
  protected Shape base;
  public RoundedCornerButton(String text) {
    super(text);
    //setRolloverEnabled(true);
    setContentAreaFilled(false);
    setBackground(new Color(250, 250, 250));
    initShape();
  }
  protected void initShape() {
    if(!getBounds().equals(base)) {
      base = getBounds();
      shape = new RoundRectangle2D.Float(0, 0,
                        getWidth()-1, getHeight()-1,
                        arcwidth, archeight);
      border = new RoundRectangle2D.Float(focusstroke, focusstroke,
                        getWidth()-1-focusstroke*2,
                        getHeight()-1-focusstroke*2,
                        arcwidth, archeight);
    }
  }
  @Override protected void paintComponent(Graphics g) {
    initShape();
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    if(getModel().isArmed()) {
      g2.setColor(ac);
      g2.fill(shape);
    }else if(isRolloverEnabled() &amp;amp;&amp;amp; getModel().isRollover()) {
      paintFocusAndRollover(g2, rc);
    }else if(hasFocus()) {
      paintFocusAndRollover(g2, fc);
    }else{
      g2.setColor(getBackground());
      g2.fill(shape);
    }
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_OFF);
    g2.setColor(getBackground());
    super.paintComponent(g2);
  }
  private void paintFocusAndRollover(Graphics2D g2, Color color) {
    g2.setPaint(new GradientPaint(0, 0, color,
                                  getWidth()-1, getHeight()-1, color.brighter(), true));
    g2.fill(shape);
    g2.setColor(getBackground());
    g2.fill(border);
  }
  @Override protected void paintBorder(Graphics g) {
    initShape();
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getForeground());
    g2.draw(shape);
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_OFF);
  }
  @Override protected boolean contains(int x, int y) {
    initShape();
    return shape.contains(x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンの形や縁、クリック可能な領域をラウンド矩形などの&lt;code&gt;Shape&lt;/code&gt;に置き換えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JButton#paintComponent()&lt;/code&gt;をオーバーライドして描画を変更&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton#contains()&lt;/code&gt;をオーバーライドしてクリック可能な領域を変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;円ボタンは、以下のように角丸ボタンを継承して作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;幅と高さが同じになるように&lt;code&gt;getPreferredSize()&lt;/code&gt;メソッドをオーバーライド&lt;/li&gt;
&lt;li&gt;図形の初期化メソッドをオーバーライド

&lt;ul&gt;
&lt;li&gt;メソッド名前は適当、上記のサンプルでは&lt;code&gt;initShape&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RoundButton extends RoundedCornerButton {
  public RoundButton(String text) {
    super(text);
    setFocusPainted(false);
    initShape();
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    d.width = d.height = Math.max(d.width, d.height);
    return d;
  }
  protected void initShape() {
    if(!getBounds().equals(base)) {
      base = getBounds();
      shape = new Ellipse2D.Float(0, 0, getWidth()-1, getHeight()-1);
      border = new Ellipse2D.Float(focusstroke, focusstroke,
                                   getWidth()-1-focusstroke*2,
                                   getHeight()-1-focusstroke*2);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090805104428/http://java.sun.com/developer/TechTips/1999/tt0826.html&quot;&gt;CREATING ROUND SWING BUTTONS - JDC Tech Tips: August 26, 1999&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090804054527/http://java.sun.com/developer/TechTips/txtarchive/1999/Aug99_PatrickC.txt&quot;&gt;Aug99_PatrickC.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RoundImageButton.html&quot;&gt;ImageIconの形でJButtonを作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを追加したスクリーンショットに更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-07-10 (木) 17:25:34&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/roundbutton</link>
                <guid>http://terai.xrea.jp/swing/roundbutton</guid>
                <pubDate>2007-07-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの選択状態を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の選択状態を&lt;code&gt;changeSelection&lt;/code&gt;メソッドを使って変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ChangeSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTI0VFZw9I/AAAAAAAAATY/1C_mVqWcXPc/s800/ChangeSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;box.add(new JButton(new AbstractAction(&quot;changeSelection&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    int row = -1, col = -1;
    try{
      row = Integer.parseInt(rowField.getText().trim());
      col = Integer.parseInt(colField.getText().trim());
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    table.changeSelection(row, col, toggle.isSelected(), extend.isSelected());
    //table.changeSelection(row, table.convertColumnIndexToModel(col),
    //                      toggle.isSelected(), extend.isSelected());
    table.requestFocusInWindow();
    table.repaint();
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable#changeSelection&lt;/code&gt;は、&lt;code&gt;toggle&lt;/code&gt;と&lt;code&gt;extend&lt;/code&gt;の&lt;code&gt;2&lt;/code&gt;つのフラグで、セルの選択状態を以下のようにいろいろ変更することができます(&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTable.html#changeSelection%28int,%20int,%20boolean,%20boolean%29&quot;&gt;JTable#changeSelection(int, int, boolean, boolean)&lt;/a&gt; より引用)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;:&lt;code&gt;false&lt;/code&gt;、&lt;code&gt;extend&lt;/code&gt;:&lt;code&gt;false&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;既存の選択をクリアし、新しいセルが確実に選択されるようにする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;:&lt;code&gt;false&lt;/code&gt;、&lt;code&gt;extend&lt;/code&gt;:&lt;code&gt;true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;既存の選択をアンカーから指定のセルまで拡張して、ほかのすべての選択をクリアする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;:&lt;code&gt;true&lt;/code&gt;、&lt;code&gt;extend&lt;/code&gt;:&lt;code&gt;false&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;指定されたセルが選択されている場合、そのセルを選択解除する。選択されていない場合、そのセルを選択する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;:&lt;code&gt;true&lt;/code&gt;、&lt;code&gt;extend&lt;/code&gt;:&lt;code&gt;true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;アンカーの選択状態を、そのアンカーと指定されたセル間のすべてのセルに適用する。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;上記のサンプルは、&lt;code&gt;toggle&lt;/code&gt;、&lt;code&gt;extend&lt;/code&gt;の状態を変えて、実際に選択状態の変化をテストすることができます。アンカーや選択状態、列の入れ替えなどを行って&lt;code&gt;changeSelection&lt;/code&gt;による変更の確認をしてみてください。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/changeselection</link>
                <guid>http://terai.xrea.jp/swing/changeselection</guid>
                <pubDate>2007-06-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのアイテム文字列を左側からクリップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のアイテム文字列がコンポーネントより長い場合、これを左側からクリップします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LeftClippedComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTPEaiR2iI/AAAAAAAAAdY/E5fxUtKW0sM/s800/LeftClippedComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JButton arrowButton = getArrowButton(combo02);
combo02.setRenderer(new DefaultListCellRenderer() {
  @Override public Component getListCellRendererComponent(
        JList list, Object value, int index,
        boolean isSelected, boolean cellHasFocus) {
    super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    int itb=0, ilr=0;
    Insets insets = getInsets();
    itb+=insets.top+insets.bottom; ilr+=insets.left+insets.right;
    insets = combo02.getInsets();
    itb+=insets.top+insets.bottom; ilr+=insets.left+insets.right;
    int availableWidth = combo02.getWidth()-ilr;
    if(index&amp;lt;0) {
      //@see BasicComboBoxUI#rectangleForCurrentValue
      int buttonSize = combo02.getHeight()-itb;
      if(arrowButton!=null) {
        buttonSize = arrowButton.getWidth();
      }
      availableWidth -= buttonSize;
      JTextField tf = (JTextField)combo02.getEditor().getEditorComponent();
      insets = tf.getMargin();
      availableWidth -= (insets.left + insets.right);
    }
    String cellText = (value!=null)?value.toString():&quot;&quot;;
    //&amp;lt;blockquote cite=&quot;http://tips4java.wordpress.com/2008/11/12/left-dot-renderer/&quot;&amp;gt;
    //@title Left Dot Renderer
    //@auther Rob Camick
    FontMetrics fm = getFontMetrics(getFont());
    if(fm.stringWidth(cellText)&amp;gt;availableWidth) {
      String dots = &quot;...&quot;;
      int textWidth = fm.stringWidth(dots);
      int nChars = cellText.length() - 1;
      while(nChars&amp;gt;0) {
        textWidth += fm.charWidth(cellText.charAt(nChars));
        if(textWidth &amp;gt; availableWidth) break;
        nChars--;
      }
      setText(dots+cellText.substring(nChars+1));
    }
    //&amp;lt;/blockquote&amp;gt;
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;標準の&lt;code&gt;JComboBox&lt;/code&gt;では、長い文字列は右側をクリップするので、上記のサンプルでは左側を切り取り、&lt;code&gt;...&lt;/code&gt;で置き換えるようにセルレンダラーを変更しています。&lt;/p&gt;

&lt;p&gt;例えば、コンボボックスのセルよりファイル名が長くても、拡張子が表示できるようにしたいといった場合に使用します。&lt;/p&gt;

&lt;p&gt;エディタ部分(&lt;code&gt;index&amp;lt;0&lt;/code&gt;の場合)を描画するときは、矢印ボタンの幅を考慮する必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;によって余白などのサイズが微妙に異なる場合がある？ため、うまく表示されないことがあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1389543&quot;&gt;Swing - JTable - right align in cell even if the text is wider than the cell&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;camickr さんの投稿(2005/06/10 5:52)した&lt;code&gt;JTable&lt;/code&gt;でのサンプルを参考にしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/12/left-dot-renderer/&quot;&gt;Left Dot Renderer « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;参考リンク、スクリーンショット更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-13 (木) 14:26:39&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/leftclippedcombobox</link>
                <guid>http://terai.xrea.jp/swing/leftclippedcombobox</guid>
                <pubDate>2007-06-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JEditorPaneで改行を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JEditorPane&lt;/code&gt;で改行記号を表示します。&lt;a href=&quot;https://forums.oracle.com/thread/1374478&quot;&gt;Swing - JTextPane View Problem&lt;/a&gt;から、ソースコードの大部分を引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ParagraphMark&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTQ3cf9HLI/AAAAAAAAAgQ/gIbt2d-Hz7k/s800/ParagraphMark.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyEditorKit extends StyledEditorKit {
  @Override public ViewFactory getViewFactory() {
    return new MyViewFactory();
  }
}

class MyViewFactory implements ViewFactory {
  @Override public View create(Element elem) {
    String kind = elem.getName();
    if(kind!=null) {
      if(kind.equals(AbstractDocument.ContentElementName)) {
        return new LabelView(elem);
      }else if(kind.equals(AbstractDocument.ParagraphElementName)) {
        return new MyParagraphView(elem);
      }else if(kind.equals(AbstractDocument.SectionElementName)) {
        return new BoxView(elem, View.Y_AXIS);
      }else if(kind.equals(StyleConstants.ComponentElementName)) {
        return new ComponentView(elem);
      }else if(kind.equals(StyleConstants.IconElementName)) {
        return new IconView(elem);
      }
    }
    return new LabelView(elem);
  }
}

class MyParagraphView extends ParagraphView {
  private static final Color pc = new Color(120, 130, 110);
  public MyParagraphView(Element elem) {
    super(elem);
  }
  @Override public void paint(Graphics g, Shape allocation) {
    super.paint(g, allocation);
    paintCustomParagraph(g, allocation);
  }
  private void paintCustomParagraph(Graphics g, Shape a) {
    try {
      Shape paragraph = modelToView(getEndOffset(), a, Position.Bias.Backward);
      Rectangle r = (paragraph==null)?a.getBounds():paragraph.getBounds();
      int x = r.x;
      int y = r.y;
      int h = r.height;
      Color old = g.getColor();
      g.setColor(pc);
      //paragraph mark
      g.drawLine(x+1, y+h/2, x+1, y+h-4);
      g.drawLine(x+2, y+h/2, x+2, y+h-5);
      g.drawLine(x+3, y+h-6, x+3, y+h-6);
      g.setColor(old);
    }catch(Exception e) { e.printStackTrace(); }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;StyledEditorKit&lt;/code&gt;を継承する&lt;code&gt;EditorKit&lt;/code&gt;を作成し、これを&lt;code&gt;JEditorPane#setEditorKit&lt;/code&gt;メソッドで、&lt;code&gt;JEditorPane&lt;/code&gt;に設定しています。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;EditorKit&lt;/code&gt;は、&lt;code&gt;Element&lt;/code&gt;が段落(&lt;code&gt;AbstractDocument.ParagraphElementName&lt;/code&gt;)の場合、独自の改行記号を追加で描画する&lt;code&gt;View&lt;/code&gt;を返す&lt;code&gt;ViewFactory&lt;/code&gt;を生成しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1374478&quot;&gt;Swing - JTextPane View Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WhitespaceMark.html&quot;&gt;JTextPaneで全角スペースやタブを可視化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;行の折り返しが発生すると、改行記号が縦長になるバグを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-09-21 (金) 17:05:03&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/paragraphmark</link>
                <guid>http://terai.xrea.jp/swing/paragraphmark</guid>
                <pubDate>2007-06-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのToolTipsを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードの&lt;code&gt;ToolTips&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TreeToolTips&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWQe1RL2I/AAAAAAAAAo8/6HFqbUb3UZ8/s800/TreeToolTips.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//tree = new JTree();
tree = new JTree() {
  @Override public String getToolTipText(MouseEvent e) {
    Object o = null;
    TreePath path = getPathForLocation(e.getX(), e.getY());
    if(path!=null) {
      o = path.getLastPathComponent();
    }
    return (o==null)?null:o.toString();
  }
};
//tree.setCellRenderer(new MyTreeCellRenderer(tree.getCellRenderer()));
ToolTipManager.sharedInstance().registerComponent(tree);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTree#getToolTipText(MouseEvent)&lt;/code&gt;をオーバーライドして&lt;code&gt;JToolTip&lt;/code&gt;を表示しています。以下のようなセルレンダラーを使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyTreeCellRenderer implements TreeCellRenderer {
  private final TreeCellRenderer renderer;
  public MyTreeCellRenderer(TreeCellRenderer renderer) {
    this.renderer = renderer;
  }
  @Override public Component getTreeCellRendererComponent(
        JTree tree, Object value, boolean isSelected,
        boolean expanded, boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)renderer.getTreeCellRendererComponent(
      tree, value, isSelected, expanded, leaf, row, hasFocus);
    c.setToolTipText((value==null)?null:value.toString());
    return c;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どちらの方法を使う場合でも、&lt;code&gt;JTree&lt;/code&gt;オブジェクトを&lt;code&gt;ToolTipManager&lt;/code&gt;に登録する(もしくは、&lt;code&gt;JTree#setToolTipText&lt;/code&gt;メソッドで&lt;code&gt;null&lt;/code&gt;以外を指定しておく)必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ToolTipManager.sharedInstance().registerComponent(tree);
//tree.setToolTipText(&quot;dummy&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/treetooltips</link>
                <guid>http://terai.xrea.jp/swing/treetooltips</guid>
                <pubDate>2007-06-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの内余白</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のエディタなどに内余白を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PaddingComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTQv1E_b9I/AAAAAAAAAgE/nxvnwwFoDyU/s800/PaddingComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;static Border padding = BorderFactory.createEmptyBorder(0,5,0,0);
//...
DefaultComboBoxModel&amp;lt;String&amp;gt; model = new DefaultComboBoxModel&amp;lt;&amp;gt;();
model.addElement(&quot;aaaaaaaaaaaaaaaaaaaaaaaaa&quot;);
model.addElement(&quot;aaaabbb&quot;);
model.addElement(&quot;aaaabbbcc&quot;);
model.addElement(&quot;bbb1&quot;);
model.addElement(&quot;bbb12&quot;);

JComboBox&amp;lt;String&amp;gt; combo = new JComboBox&amp;lt;String&amp;gt;(model) {
  @Override public void updateUI() {
    setRenderer(null);
    super.updateUI();
    final ListCellRenderer&amp;lt;? super String&amp;gt; lcr = getRenderer();
    setRenderer(new ListCellRenderer&amp;lt;String&amp;gt;() {
      @Override public Component getListCellRendererComponent(
          JList&amp;lt;? extends String&amp;gt; list, String value, int index,
          boolean isSelected, boolean hasFocus) {
        JLabel l = (JLabel)lcr.getListCellRendererComponent(
            list, value, index, isSelected, hasFocus);
        l.setBorder(padding);
        return l;
      }
    });
    //XXX JDK 1.7.0 ?: ((JLabel)lcr).setBorder(padding);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;に、&lt;code&gt;Border&lt;/code&gt;(&lt;code&gt;EmptyBorder&lt;/code&gt;と&lt;code&gt;MatteBorder&lt;/code&gt;を切り替え可能)を設定した&lt;code&gt;ListCellRenderer&lt;/code&gt;を設定して、ドロップダウンリストの左余白をすこし広げています。&lt;code&gt;JComboBox&lt;/code&gt;が編集不可の場合、エディタ部分もこの余白が自動的に適用されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;:編集不可

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ListCellRenderer&lt;/code&gt;で余白を指定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下は、&lt;code&gt;JComboBox&lt;/code&gt;が編集可の場合のテストです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: テキストフィールドの元&lt;code&gt;Border&lt;/code&gt; + 任意の&lt;code&gt;Border&lt;/code&gt;で余白を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor.setBorder(BorderFactory.createCompoundBorder(editor.getBorder(), padding));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox#getEditor()#getEditorComponent()&lt;/code&gt;で取得した&lt;code&gt;JTextField&lt;/code&gt;に余白を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;では余白を指定しても反映されない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;では取得した&lt;code&gt;JTextFieldをsetOpaque(true)&lt;/code&gt;としないと背景色は反映されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;: テキストフィールドの元&lt;code&gt;Border&lt;/code&gt;は無視して任意の&lt;code&gt;Border&lt;/code&gt;のみで余白を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor.setBorder(padding);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox#getEditor()#getEditorComponent()&lt;/code&gt;で取得した&lt;code&gt;JTextField&lt;/code&gt;に余白を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;でテキストフィールドの枠が描画できない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt;: テキストフィールドの&lt;code&gt;Insets&lt;/code&gt; + &lt;code&gt;5&lt;/code&gt;ピクセル余白を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor.setMargin(new Insets(i.top,i.left+5,i.bottom,i.right));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;, &lt;code&gt;MotifLookAndFeel&lt;/code&gt;, &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;などでは無効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では有効だが、&lt;code&gt;JComboBox&lt;/code&gt;の高さなども変化してしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt;: テキストフィールドの&lt;code&gt;Margin&lt;/code&gt; + &lt;code&gt;5&lt;/code&gt;ピクセル余白を設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;editor.setMargin(new Insets(m.top,m.left+5,m.bottom,m.right));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;, &lt;code&gt;MotifLookAndFeel&lt;/code&gt;, &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;などでは無効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では有効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5&lt;/code&gt;: &lt;code&gt;JComboBoxのBorder&lt;/code&gt; + 任意の&lt;code&gt;Border&lt;/code&gt;で余白を&lt;code&gt;JComboBox&lt;/code&gt;自身に設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#setBorder()&lt;/code&gt;で、元の&lt;code&gt;Border&lt;/code&gt;の内側に余白を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;, &lt;code&gt;MotifLookAndFeel&lt;/code&gt;で有効？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;, &lt;code&gt;NimbusLookAndFeel&lt;/code&gt;では、&lt;code&gt;JComboBox&lt;/code&gt;の外側に余白が付く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;6&lt;/code&gt;: &lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt; + 任意の&lt;code&gt;Border&lt;/code&gt;で余白を&lt;code&gt;JComboBox&lt;/code&gt;自身に設定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#setBorder()&lt;/code&gt;で、元の&lt;code&gt;Border&lt;/code&gt;の外側に余白を指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で余計な枠が表示される？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;del&gt;その他にも、以下のように&lt;code&gt;UIManager&lt;/code&gt;で余白を設定する方法もありますが、&lt;code&gt;LookAndFeel&lt;/code&gt;によって対応が異なる？ようです。&lt;/del&gt; &lt;code&gt;ComboBox.padding&lt;/code&gt;は無くなっている？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;が編集可能の場合は、&lt;code&gt;ComboBox.editorBorder&lt;/code&gt;が有効かもしれない。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//UIManager.put(&quot;ComboBox.padding&quot;, new InsetsUIResource(insets));
UIManager.put(&quot;ComboBox.editorBorder&quot;, BorderFactory.createEmptyBorder(0,5,0,0));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;上記のサンプルを、余白に色無しにして、&lt;code&gt;Ubuntu 7.04&lt;/code&gt;(&lt;code&gt;GNOME 2.18.1&lt;/code&gt;)、&lt;code&gt;JDK 1.6.0&lt;/code&gt;で実行すると、以下のようになります。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQyV_2TnI/AAAAAAAAAgI/yqGoi_zqsgI/s800/PaddingComboBox1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;毎に&lt;code&gt;JComboBox&lt;/code&gt;の余白の描画は異なるみたいなので、全部まとめて消すのは難しい？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI&lt;/code&gt;も、&lt;code&gt;ComboBox.buttonDarkShadow&lt;/code&gt;が&lt;code&gt;ArrowButton&lt;/code&gt;の三角とボタンの影に使われていて微妙

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BasicComboBoxUI#createArrowButton()&lt;/code&gt;をオーバーライドして別途三角形アイコンを使う方がよさそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;コードは、&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxBorder.html&quot;&gt;JComboBoxのBorderを変更する&lt;/a&gt;に移動。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4515838&quot;&gt;Bug ID: 4515838 Can&amp;#39;t change the border of a JComboBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;なんだか、よく分からなくなってきましたorz。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-11 (火) 21:38:58

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_10-beta-b22&lt;/code&gt;で、&lt;code&gt;BasicComboBoxUI&lt;/code&gt;の&lt;code&gt;padding&lt;/code&gt;にすこし修正が入っている？ようです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;の切り替えなどを追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-02 (水) 20:08:01&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.7.0_06&lt;/code&gt;で&lt;code&gt;Nimbus&lt;/code&gt;などの&lt;code&gt;ComboBox.popupInsets&lt;/code&gt;が修正？ &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7158712&quot;&gt;Bug ID: 7158712 Synth Property &amp;quot;ComboBox.popupInsets&amp;quot; is ignored&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-15 (水) 13:58:34&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;の&lt;code&gt;LookAndFeel&lt;/code&gt;、編集不可の&lt;code&gt;JComboBox&lt;/code&gt;で、&lt;code&gt;( (JLabel)combo.getRenderer() ).setBorder(padding);&lt;/code&gt;が&lt;code&gt;JComboBox&lt;/code&gt;本体に効かない(フォーカスのための&lt;code&gt;Border&lt;/code&gt;のせい？)ため、セルレンダラーを作成して毎回余白を適用するように変更。このため、&lt;code&gt;Windows 7&lt;/code&gt;の&lt;code&gt;LookAndFeel&lt;/code&gt;では、&lt;code&gt;JComboBox&lt;/code&gt;本体の点線によるフォーカス表示が無くなる。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-11-19 (火) 15:37:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/paddingcombobox</link>
                <guid>http://terai.xrea.jp/swing/paddingcombobox</guid>
                <pubDate>2007-05-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードをハイライト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノード上にマウスカーソルがきたら、ハイライト表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RollOverTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTSHWXxwwI/AAAAAAAAAiQ/MP7tLgM--lo/s800/RollOverTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyTreeCellRenderer extends DefaultTreeCellRenderer implements MouseMotionListener {
  private static final Color rollOverRowColor = new Color(220,240,255);
  private final JTree tree;
  private final TreeCellRenderer renderer;
  public MyTreeCellRenderer(JTree tree, TreeCellRenderer renderer) {
    this.tree = tree;
    this.renderer = renderer;
    tree.addMouseMotionListener(this);
  }
  @Override public Component getTreeCellRendererComponent(
          JTree tree, Object value, boolean isSelected,
          boolean expanded, boolean leaf, int row, boolean hasFocus) {
    JComponent c = (JComponent)renderer.getTreeCellRendererComponent(
        tree, value, isSelected, expanded, leaf, row, hasFocus);
    if(row==rollOverRowIndex) {
      c.setOpaque(true);
      c.setBackground(rollOverRowColor);
      if(isSelected) c.setForeground(getTextNonSelectionColor());
    }else{
      c.setOpaque(false);
    }
    return c;
  }
  private int rollOverRowIndex = -1;
  @Override public void mouseMoved(MouseEvent e) {
    int row = tree.getRowForLocation(e.getX(), e.getY());
    if(row!=rollOverRowIndex) {
      //System.out.println(row);
      rollOverRowIndex = row;
      tree.repaint();
    }
  }
  @Override public void mouseDragged(MouseEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;からデフォルトのセルレンダラーを取得し、これを委譲してセルレンダラーを作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;継承ではなく、委譲を使うのは、ノードをハイライトしない場合は、&lt;code&gt;Windows&lt;/code&gt;などでのノードアイコンは選択されない、文字列だけ選択されるという描画をそのまま利用するため&lt;/li&gt;
&lt;li&gt;継承もしているが、これは、&lt;code&gt;JTable&lt;/code&gt;と違い&lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;からノードを選択した時の色などを取得するようになっているためで、あまり意味はない&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;このレンダラーは&lt;code&gt;MouseMotionListener&lt;/code&gt;を実装し、&lt;code&gt;getTreeCellRendererComponent&lt;/code&gt;メソッドの実装で、ハイライト表示したいノードの場合は、
委譲したレンダラーから得たコンポーネントを&lt;code&gt;setOpaque(true)&lt;/code&gt;、&lt;code&gt;setForeground(Color)&lt;/code&gt;などで修飾して返すようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeNodeHighlightSearch.html&quot;&gt;JTreeで条件に一致するノードを検索しハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rollovertree</link>
                <guid>http://terai.xrea.jp/swing/rollovertree</guid>
                <pubDate>2007-05-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Animated GIFでのコマ描画時処理</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLabel&lt;/code&gt;などで使用できる&lt;code&gt;Animated GIF&lt;/code&gt;ファイルをテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedGif&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTHnR-lE1I/AAAAAAAAARc/gDDOKXhD7hQ/s800/AnimatedGif.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label1 = new JLabel(&quot;何もしない　　　&quot;,
  new ImageIcon(getClass().getResource(&quot;no_disposal_specified.gif&quot;)),
  JLabel.LEFT);
JLabel label2 = new JLabel(&quot;そのまま残す　　&quot;,
  new ImageIcon(getClass().getResource(&quot;do_not_dispose.gif&quot;)),
  JLabel.LEFT);
JLabel label3 = new JLabel(&quot;背景色でつぶす　&quot;,
  new ImageIcon(getClass().getResource(&quot;restore_to_background_color.gif&quot;)),
  JLabel.LEFT);
JLabel label4 = new JLabel(&quot;直前の画像に戻す&quot;,
  new ImageIcon(getClass().getResource(&quot;restore_to_previous.gif&quot;)),
  JLabel.LEFT);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Animated GIF&lt;/code&gt;で、次のコマを描画する時、直前の画像を異なる方法で消去する&lt;code&gt;Animated GIF&lt;/code&gt;ファイルを作成し、これらを&lt;code&gt;JLabel&lt;/code&gt;に貼り付けてアニメーションをテストしています。上記のように透過色を使用する場合、&lt;code&gt;Swing&lt;/code&gt;では、&lt;code&gt;3&lt;/code&gt;番目の「背景色でつぶす」にしておかないと残像が出てしまうようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;何もしない

&lt;ul&gt;
&lt;li&gt;No disposal specified. The decoder is not required to take any action.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;そのまま残す

&lt;ul&gt;
&lt;li&gt;Do not dispose. The graphic is to be left in place.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;背景色でつぶす

&lt;ul&gt;
&lt;li&gt;Restore to background color. The area used by the graphic must be restored to the background color.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;直前の画像に戻す

&lt;ul&gt;
&lt;li&gt;Restore to previous. The decoder is required to restore the area overwritten by the graphic with what was there prior to rendering the graphic.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;Cover Sheet for the GIF89a Specification&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;23. Graphic Control Extension. の、iv) Disposal Method から説明を引用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://homepage3.nifty.com/furumizo/giamd.htm&quot;&gt;Giam ダウンロードのページ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Giam&lt;/code&gt;を使って、各&lt;code&gt;Animated GIF&lt;/code&gt;を生成しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Swing&lt;/code&gt;のバージョンを入れておいてもらえますか？現バージョンでも背景色でつぶすにしないと残像が残るんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%A8%E3%81%8A%E3%82%8A%E3%81%99%E3%81%8C%E3%82%8A.html&quot;&gt;とおりすがり&lt;/a&gt; 2009-05-14 (木) 19:32:37

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows XP&lt;/code&gt;で現バージョン(&lt;code&gt;1.5.0_18&lt;/code&gt;, &lt;code&gt;1.6.0_14&lt;/code&gt;, &lt;code&gt;1.7.0&lt;/code&gt;)を実行してみましたが、同様だと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-05-14 (木) 21:14:04&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatedgif</link>
                <guid>http://terai.xrea.jp/swing/animatedgif</guid>
                <pubDate>2007-05-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードを展開・折り畳み</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のすべてのノードに対して、展開、折り畳みを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExpandAllNodes&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMS3T9nvI/AAAAAAAAAY8/ooi4QMbp6fA/s800/ExpandAllNodes.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//@see http://www.rgagnon.com/javadetails/java-0210.html
//Expand or collapse a JTree - Real&#39;s Java How-to
private void expandAll(JTree tree) {
  int row = 0;
  while (row &amp;lt; tree.getRowCount()) {
    tree.expandRow(row);
    row++;
  }
}
private void collapseAll(JTree tree) {
  int row = tree.getRowCount() - 1;
  while (row &amp;gt;= 0) {
    tree.collapseRow(row);
    row--;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void visitAll(JTree tree, TreePath parent, boolean expand) {
  TreeNode node = (TreeNode) parent.getLastPathComponent();
  if (!node.isLeaf() &amp;amp;&amp;amp; node.getChildCount() &amp;gt;= 0) {
    Enumeration e = node.children();
    while (e.hasMoreElements()) {
      TreeNode n = (TreeNode) e.nextElement();
      TreePath path = parent.pathByAddingChild(n);
      visitAll(tree, path, expand);
    }
  }
  if(expand) {
    tree.expandPath(parent);
  } else {
    tree.collapsePath(parent);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expandAll(A)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTree&lt;/code&gt;をリストとみなして&lt;code&gt;expandAll&lt;/code&gt;では先頭から順番に&lt;code&gt;JTree#expandRow(int)&lt;/code&gt;メソッドを実行&lt;/li&gt;
&lt;li&gt;ループは全展開された時の&lt;code&gt;JTree&lt;/code&gt;の行数だけ繰り返す&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collapseAll(A)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;末尾から順番に&lt;code&gt;JTree#collapseRow(int)&lt;/code&gt;メソッドを実行し、見かけ上すべてのノードを折り畳み&lt;/li&gt;
&lt;li&gt;子ノードは展開されているが、親ノードが折り畳まれている場合、その子ノードは折り畳まれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expandAll(B)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visitAll(tree, new TreePath(root), true);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再帰的に&lt;code&gt;TreePath&lt;/code&gt;を辿って、展開(&lt;code&gt;JTree#expandPath(TreePath)&lt;/code&gt;メソッド)を実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collapseAll(B)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visitAll(tree, new TreePath(root), false);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;再帰的に&lt;code&gt;TreePath&lt;/code&gt;を辿って、折り畳み(&lt;code&gt;JTree#collapsePath(TreePath)&lt;/code&gt;メソッド)を実行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://www.exampledepot.com/egs/javax.swing.tree/ExpandAll.html&quot;&gt;Expanding or Collapsing All Nodes in a JTree Component (Java Developers Almanac Example)&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rgagnon.com/javadetails/java-0210.html&quot;&gt;Expand or collapse a JTree - Real&amp;#39;s Java How-to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;解説のラベル&lt;code&gt;A&lt;/code&gt;と&lt;code&gt;B&lt;/code&gt;が、ソースとは逆になっていたのを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-05 (火) 19:31:53&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/expandallnodes</link>
                <guid>http://terai.xrea.jp/swing/expandallnodes</guid>
                <pubDate>2007-05-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameを半透明にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;のフレーム内を半透明にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TransparentFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTV8kztxuI/AAAAAAAAAoc/oXSU5-bQorE/s800/TransparentFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPanel p1 = new JPanel();
p1.setOpaque(false);

JPanel p2 = new JPanel() {
  @Override protected void paintComponent(Graphics g) {
    //super.paintComponent(g);
    g.setColor(new Color(100,50,50,100));
    g.fillRect(0,0,getWidth(), getHeight());
  }
};

JPanel p3 = new JPanel() {
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    //g2.setPaint(new Color(100,120,100,100));
    g2.setPaint(texture);
    g2.fillRect(0,0,getWidth(),getHeight());
    //int cs = 4;
    //for(int i=0;i*cs&amp;lt;getWidth();i++) {
    //  for(int j=0;j*cs&amp;lt;getHeight();j++) {
    //    if((i+j)%2==0) g2.fillRect(i*cs, j*cs, cs, cs);
    //  }
    //}
  }
};

protected JInternalFrame createFrame(JPanel panel) {
  MyInternalFrame frame = new MyInternalFrame();
  if(panel!=null) {
    frame.setContentPane(panel);
    //JButton button = new JButton(&quot;button&quot;);
    //button.setOpaque(false);
    panel.add(new JLabel(&quot;label&quot;));
    panel.add(new JButton(&quot;button&quot;));
  }
  desktop.add(frame);
  frame.setOpaque(false);
  frame.setVisible(true);
  //......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;各フレームは、&lt;code&gt;JInternalFrame#setContentPane(Container)&lt;/code&gt;メソッドを使用して、&lt;code&gt;ContentPane&lt;/code&gt;を以下のような半透明パネルに変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Frame#1&lt;/code&gt; (&lt;code&gt;Transparent&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentPane&lt;/code&gt;を&lt;code&gt;setOpaque(false)&lt;/code&gt;して透過しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Frame#2&lt;/code&gt; (&lt;code&gt;Translucent&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentPane&lt;/code&gt;を半透明な色で塗りつぶしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Frame#3&lt;/code&gt; (&lt;code&gt;Translucent&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ContentPane&lt;/code&gt;を半透明な色を使ってチェック柄で塗りつぶしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bekkoame.ne.jp/%7Ebootan/free2.html&quot;&gt;デジタル出力工房　絵写楽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentFrame.html&quot;&gt;SynthでJInternalFrameを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JRE6.0&lt;/code&gt;だと、半透明にならずチェック模様が描画されるだけですね。仕様変わったのかな… --  2007-05-25 (金) 11:05:17

&lt;ul&gt;
&lt;li&gt;御指摘ありがとうございます。&lt;code&gt;Windows XP&lt;/code&gt;で、&lt;code&gt;Java 1.6.0_01&lt;/code&gt;、&lt;code&gt;1.5.0_11&lt;/code&gt;は、半透明になったのですが、&lt;code&gt;Ubuntu 7.04&lt;/code&gt;で、&lt;code&gt;Java 1.6.0&lt;/code&gt;では駄目みたいです。&lt;code&gt;Mac&lt;/code&gt;は環境がないので試せてません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-25 (金) 13:02:13&lt;/li&gt;
&lt;li&gt;すこし調べてみたのですが、&lt;code&gt;Ubuntu&lt;/code&gt;(&lt;code&gt;GNOME&lt;/code&gt;) でも半透明にするには&lt;code&gt;JInternalFrame#setOpaque(false)&lt;/code&gt;も必要みたいです。修正しておきます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-25 (金) 13:07:50&lt;/li&gt;
&lt;li&gt;再度試してみたら、&lt;code&gt;JInternalFrame#setOpaque(false)&lt;/code&gt;しても、&lt;code&gt;Ubuntu&lt;/code&gt;(&lt;code&gt;GNOME&lt;/code&gt;)+&lt;code&gt;JDK 1.6.0&lt;/code&gt;+&lt;code&gt;GTKLookAndFeel&lt;/code&gt;で半透明になってくれません。&lt;del&gt;なにか&lt;code&gt;Ubuntu&lt;/code&gt;の設定を弄ったから？&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-10 (水) 18:49:22&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;でも透明にできないようです。どちらも&lt;code&gt;SynthLookAndFeel&lt;/code&gt;がベースなので、それが原因？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-15 (木) 13:32:50

&lt;ul&gt;
&lt;li&gt;追記:&lt;a href=&quot;http://terai.xrea.jp/Swing/TranslucentFrame.html&quot;&gt;SynthでJInternalFrameを半透明にする&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-01 (月) 15:06:12&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/transparentframe</link>
                <guid>http://terai.xrea.jp/swing/transparentframe</guid>
                <pubDate>2007-04-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipのアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ツールチップにアニメーションするアイコンを使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedToolTip&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTHpat_rFI/AAAAAAAAARg/fzkRLOHGb7I/s800/AnimatedToolTip.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l3 = new JLabel(&quot;Gif Animated ToolTip(html)&quot;);
l3.setToolTipText(&quot;&amp;lt;html&amp;gt;&amp;lt;img src=&#39;&quot;+url+&quot;&#39;&amp;gt;Test3&amp;lt;/html&amp;gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使ってアニメーションするラベルを使用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;アニメ&lt;code&gt;GIF&lt;/code&gt;ファイルをアイコンとして使用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下

&lt;ul&gt;
&lt;li&gt;アニメ&lt;code&gt;GIF&lt;/code&gt;ファイルを&lt;code&gt;html&lt;/code&gt;タグを使って貼り付けています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ToolTipIcon.html&quot;&gt;JToolTipにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimeIcon.html&quot;&gt;Timerでアニメーションするアイコンを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimatedTrayIcon.html&quot;&gt;TrayIconのアニメーション&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatedtooltip</link>
                <guid>http://terai.xrea.jp/swing/animatedtooltip</guid>
                <pubDate>2007-04-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルの編集をコミット</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;セルの編集中、フォーカスが別のコンポーネントに移動した場合、その編集を確定する方法をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TerminateEdit&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVKX5loMI/AAAAAAAAAnM/hbhZT30xAgc/s800/TerminateEdit.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.putClientProperty(&quot;terminateEditOnFocusLost&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;デフォルトの&lt;code&gt;JTable&lt;/code&gt;では、&lt;kbd&gt;Tab&lt;/kbd&gt;キーやマウスのクリックなどで同じテーブルの別セルにフォーカスが移動すると編集が確定しますが、別のコンポーネントにフォーカスが移動しても編集は確定しません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.putClientProperty(&amp;quot;terminateEditOnFocusLost&amp;quot;, Boolean.TRUE);&lt;/code&gt;とすると、

&lt;ul&gt;
&lt;li&gt;同じフレームを親に持つコンポーネントにフォーカスが移動したとき、編集が確定するようになります。&lt;/li&gt;
&lt;li&gt;別フレームのコンポーネントにフォーカスが移動しても編集中のままです。&lt;/li&gt;
&lt;li&gt;ヘッダをクリック、入れ替え、サイズ変更すると、編集はキャンセルされます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultCellEditor&lt;/code&gt;からエディタコンポーネントを取得し、&lt;code&gt;FocusListener&lt;/code&gt;を設定して、セルが編集中なら&lt;code&gt;table.getCellEditor().stopCellEditing();&lt;/code&gt;とすると、

&lt;ul&gt;
&lt;li&gt;別フレームのコンポーネントにフォーカスが移動したときも、編集が確定するようになります。&lt;/li&gt;
&lt;li&gt;ヘッダをクリック、入れ替え、サイズ変更すると、編集はキャンセルされます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DefaultCellEditor dce = (DefaultCellEditor)table.getDefaultEditor(Object.class);
dce.getComponent().addFocusListener(new FocusAdapter() {
  @Override public void focusLost(FocusEvent e) {
    if(!focusCheck.isSelected()) return;
    if(table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableHeader&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;を設定して、セルが編集中なら&lt;code&gt;table.getCellEditor().stopCellEditing();&lt;/code&gt;とすると、

&lt;ul&gt;
&lt;li&gt;ヘッダをクリックしたとき、編集が確定するようになります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;では、&lt;code&gt;TableHeader&lt;/code&gt;にこの&lt;code&gt;MouseListener&lt;/code&gt;を設定しなくても編集が確定するように修正されています。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4330950&quot;&gt;Bug ID: 4330950 Lost newly entered data in the cell when resizing column width&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.getTableHeader().addMouseListener(new MouseAdapter() {
  @Override public void mousePressed(MouseEvent e) {
    if(!headerCheck.isSelected()) return;
    if(table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;親フレームの状態変化でテーブルのヘッダのサイズ変更が発生する場合、ヘッダのリサイズモデルによって、編集中のセルの状態変化が異なります(&lt;code&gt;JDK 1.7.0&lt;/code&gt;では修正されています。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4330950&quot;&gt;Bug ID: 4330950 Lost newly entered data in the cell when resizing column width&lt;/a&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable.AUTO_RESIZE_OFF&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;親フレームのリサイズや最大化は編集中のまま&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable.AUTO_RESIZE_ALL_COLUMNS&lt;/code&gt;など

&lt;ul&gt;
&lt;li&gt;親フレームのリサイズや最大化を行うとヘッダのサイズが変化するため、キャンセル扱い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;ヘッダのサイズが変化しない場合は、どちらの設定でも以下のようになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;親フレームの最小化(アイコン化)は編集中のまま&lt;/li&gt;
&lt;li&gt;親フレームを閉じる場合はキャンセル扱い&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;親フレームの状態変化に応じて編集の確定を行う場合は、以下のように、&lt;code&gt;JTable#columnMarginChanged&lt;/code&gt;メソッドなどをオーバーライドしたり、各種リスナーを設定する必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table = new JTable(sorter) {
  @Override public void columnMarginChanged(ChangeEvent e) {
    if(table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
    super.columnMarginChanged(e);
  }
};

frame.addWindowListener(new WindowAdapter() {
  @Override public void windowClosing(WindowEvent e) {
    if(table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
  }
});

frame.addWindowStateListener(new WindowStateListener() {
  @Override public void windowStateChanged(WindowEvent e) {
    if(frame.getExtendedState()==JFrame.MAXIMIZED_BOTH
       &amp;amp;&amp;amp; table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4330950&quot;&gt;Bug ID: 4330950 Lost newly entered data in the cell when resizing column width&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hg.openjdk.java.net/jdk7/swing/jdk/rev/e753db9c4416&quot;&gt;jdk7/swing/jdk: changeset 2709:e753db9c4416&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;どわー。助かりましたっ！ -- &lt;a href=&quot;http://terai.xrea.jp/shun.html&quot;&gt;shun&lt;/a&gt; 2007-05-31 (木) 19:51:20

&lt;ul&gt;
&lt;li&gt;お役に立てて何よりです(自分もこの辺りよく混乱します)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-06-01 (金) 17:30:34&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columnMarginChanged&lt;/code&gt;、役に立ちました。ありがとうございます。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%AF%E3%81%98%E3%82%81.html&quot;&gt;はじめ&lt;/a&gt; 2008-04-04 (金) 00:35:14

&lt;ul&gt;
&lt;li&gt;どうもです。&lt;code&gt;JTable#columnMarginChanged&lt;/code&gt;メソッドの&lt;code&gt;JavaDoc&lt;/code&gt;の説明では、&amp;quot;If a cell is being edited, then editing is stopped and the cell is redrawn.&amp;quot;となっているので、&lt;code&gt;JTable#editingStopped&lt;/code&gt;メソッドを使っている(現在の文字列が新しい値となる)のかなと思ったら、実際は、&lt;code&gt;JTable#editingCanceled&lt;/code&gt;メソッド(=&lt;code&gt;JTable#removeEditor&lt;/code&gt;メソッド)でキャンセルしている(編集内容は適用されない)ので、ちょっと混乱してしまいます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-04 (金) 14:11:01&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.7.0&lt;/code&gt;では、&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4330950&quot;&gt;Bug ID: 4330950 Lost newly entered data in the cell when resizing column width&lt;/a&gt; で、修正済みになっているのですが、&lt;code&gt;getCellEditor().cancelCellEditing()&lt;/code&gt;を使うように変更されているので、編集が消えてしまうのは同じような・・・。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-23 (木) 14:59:49&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/terminateedit</link>
                <guid>http://terai.xrea.jp/swing/terminateedit</guid>
                <pubDate>2007-04-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JCheckBoxのチェックアイコンを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JCheckBox&lt;/code&gt;で使用するチェックアイコンの色や形を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CheckBoxColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTI225hC_I/AAAAAAAAATc/YxhkQ5Bq2sk/s800/CheckBoxColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox cb2 = new JCheckBox(&quot;check2&quot;);
cb2.setIcon(new MyCheckBoxIcon2());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyCheckBoxIcon2 implements Icon {
  private final Icon orgIcon = UIManager.getIcon(&quot;CheckBox.icon&quot;);
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    orgIcon.paintIcon(c, g, x, y);
    AbstractButton b = (AbstractButton)c;
    ButtonModel model = b.getModel();
    g.setColor(new Color(255, 155, 155, 100));
    g.fillRect(x+2,y+2,getIconWidth()-4,getIconHeight()-4);
    if(model.isSelected()) {
      g.setColor(Color.RED);
      g.drawLine(x+9, y+3, x+9, y+3);
      g.drawLine(x+8, y+4, x+9, y+4);
      g.drawLine(x+7, y+5, x+9, y+5);
      g.drawLine(x+6, y+6, x+8, y+6);
      g.drawLine(x+3, y+7, x+7, y+7);
      g.drawLine(x+4, y+8, x+6, y+8);
      g.drawLine(x+5, y+9, x+5, y+9);
      g.drawLine(x+3, y+5, x+3, y+5);
      g.drawLine(x+3, y+6, x+4, y+6);
    }
  }
  @Override public int getIconWidth() {
    return orgIcon.getIconWidth();
  }
  @Override public int getIconHeight() {
    return orgIcon.getIconHeight();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;通常の&lt;code&gt;JCheckBox&lt;/code&gt;です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check1&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;com/sun/java/swing/plaf/windows/WindowsIconFactory.java&lt;/code&gt;から、&lt;code&gt;XP&lt;/code&gt;スタイルではない場合のアイコンをコピーし、一部色などを変更しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check2&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIManager.getIcon(&amp;quot;CheckBox.icon&amp;quot;)&lt;/code&gt;で取得したオリジナルのアイコンを、アルファ値を設定した色で上書きし、チェック(レ)も色を変えて塗り潰しています。ただしチェックの形は&lt;code&gt;WindowsIconFactory&lt;/code&gt;からコピーしているので、別の&lt;code&gt;LookAndFeel&lt;/code&gt;では枠からはみ出してしまいます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check3&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.swing.plaf.metal.MetalCheckBoxIcon&lt;/code&gt;をアルファ値を設定した色で上書きしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;check1&lt;/code&gt;～&lt;code&gt;check3&lt;/code&gt;で生成したアイコンを、それぞれ&lt;code&gt;JCheckBox#setIcon&lt;/code&gt;で設定しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;XP&lt;/code&gt;スタイルで無い場合(&lt;code&gt;Windows&lt;/code&gt;環境以外ではテストしていない)、色を変更するだけなら、以下のようにする方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;System.setProperty(&quot;swing.noxp&quot;, &quot;true&quot;);
UIManager.put(&quot;CheckBox.interiorBackground&quot;, new ColorUIResource(Color.GREEN));
UIManager.put(&quot;CheckBox.darkShadow&quot;, new ColorUIResource(Color.RED));
JCheckBox cb = new JCheckBox(&quot;check box&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/java/library/j-synth/&quot;&gt;進歩したSynth&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;を使って、画像でチェックを描画するサンプルなどが紹介されています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/checkboxcolor</link>
                <guid>http://terai.xrea.jp/swing/checkboxcolor</guid>
                <pubDate>2007-04-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行をドラッグ＆ドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行をドラッグ＆ドロップで入れ替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTLl0NAFoI/AAAAAAAAAX0/su1r-c7f4V0/s800/DnDTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DnDTable extends JTable implements DragGestureListener, DragSourceListener, Transferable {
  private static final String NAME = &quot;test&quot;;
  private static final Color lineColor = new Color(255,100,100);
  private Rectangle2D targetLine = new Rectangle2D.Float();
  private int draggedIndex = -1;
  private int targetIndex  = -1;
  public DnDTable(TableModel model) {
    super(model);
    DropTarget dropTarget = new DropTarget(this,
      DnDConstants.ACTION_COPY_OR_MOVE, new CDropTargetListener(), true);
    DragSource dragSource = new DragSource();
    dragSource.createDefaultDragGestureRecognizer((Component)this,
      DnDConstants.ACTION_COPY_OR_MOVE, (DragGestureListener)this);
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    if(targetIndex&amp;gt;=0) {
      Graphics2D g2 = (Graphics2D)g;
      g2.setPaint(lineColor);
      g2.fill(targetLine);
    }
  }
  private void initTargetLine(Point p) {
    Rectangle2D testArea = new Rectangle2D.Float();
    int cellHeight = getRowHeight();
    int lineWidht  = getWidth();
    int lineHeight = 2;
    int modelSize  = getRowCount();
    targetIndex = -1;
    for(int i=0;i&amp;lt;modelSize;i++) {
      testArea.setRect(0, cellHeight*i-(cellHeight/2), lineWidht, cellHeight);
      if(testArea.contains(p)) {
        targetIndex = i;
        targetLine.setRect(0, i*cellHeight, lineWidht, lineHeight);
        break;
      }
    }
    if(targetIndex&amp;lt;0) {
      targetIndex = modelSize;
      targetLine.setRect(0, targetIndex*cellHeight-lineHeight, lineWidht, lineHeight);
    }
  }
  // Interface: DragGestureListener
  @Override public void dragGestureRecognized(DragGestureEvent e) {
    if(getSelectedRowCount()&amp;gt;1) return;
    draggedIndex = rowAtPoint(e.getDragOrigin());
    if(draggedIndex&amp;lt;0) return;
    try{
      e.startDrag(DragSource.DefaultMoveDrop, (Transferable)this, (DragSourceListener)this);
    }catch(InvalidDnDOperationException idoe) {}
  }
  // Interface: DragSourceListener
  @Override public void dragEnter(DragSourceDragEvent e) {
    e.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop);
  }
  @Override public void dragExit(DragSourceEvent e) {
    e.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);
  }
  @Override public void dragOver(DragSourceDragEvent e) {}
  @Override public void dropActionChanged(DragSourceDragEvent e) {}
  @Override public void dragDropEnd(DragSourceDropEvent e) {}
  // Interface: Transferable
  private final DataFlavor FLAVOR
    = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType, NAME);
  @Override public Object getTransferData(DataFlavor flavor) {
    return this;
  }
  @Override public DataFlavor[] getTransferDataFlavors() {
    DataFlavor[] f = new DataFlavor[1];
    f[0] = this.FLAVOR;
    return f;
  }
  @Override public boolean isDataFlavorSupported(DataFlavor flavor) {
    return flavor.getHumanPresentableName().equals(NAME);
  }

  class CDropTargetListener implements DropTargetListener{
    // DropTargetListener interface
    @Override public void dragExit(DropTargetEvent e) {
      targetIndex = -1;
      repaint();
    }
    @Override public void dragEnter(DropTargetDragEvent e) {
      if(isDragAcceptable(e)) {
        e.acceptDrag(e.getDropAction());
      }else{
        e.rejectDrag();
      }
    }
    @Override public void dragOver(final DropTargetDragEvent e) {
      if(isDragAcceptable(e)) {
        e.acceptDrag(e.getDropAction());
      }else{
        e.rejectDrag();
        return;
      }
      initTargetLine(e.getLocation());
      repaint();
    }
    @Override public void dropActionChanged(DropTargetDragEvent e) {
      // if(isDragAcceptable(e)) e.acceptDrag(e.getDropAction());
      // else e.rejectDrag();
    }
    @Override public void drop(DropTargetDropEvent e) {
      DefaultTableModel model = (DefaultTableModel)getModel();
      Transferable t = e.getTransferable();
      DataFlavor[] f = t.getTransferDataFlavors();
      try {
        if(isDropAcceptable(e)) {
          Component comp = (Component) t.getTransferData(f[0]);
          if(targetIndex==draggedIndex) {
            setRowSelectionInterval(targetIndex,targetIndex);
          }else{
            int tg = (targetIndex&amp;lt;draggedIndex)?targetIndex:targetIndex-1;
            model.moveRow(draggedIndex,draggedIndex,tg);
            setRowSelectionInterval(tg,tg);
          }
          e.dropComplete(true);
        }else{
          e.dropComplete(false);
        }
      }catch(UnsupportedFlavorException ex) {
        e.dropComplete(false);
      }catch(IOException ie) {
        e.dropComplete(false);
      }
      e.dropComplete(false);
      targetIndex = -1;
      repaint();
    }
    public boolean isDragAcceptable(DropTargetDragEvent e) {
      DataFlavor[] f = e.getCurrentDataFlavors();
      return isDataFlavorSupported(f[0]);
    }
    public boolean isDropAcceptable(DropTargetDropEvent e) {
      Transferable t = e.getTransferable();
      DataFlavor[] f = t.getTransferDataFlavors();
      return isDataFlavorSupported(f[0]);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;ドラッグソースとドラッグターゲットをどちらも&lt;code&gt;JTable&lt;/code&gt;にして、行の入れ替えがドラッグ＆ドロップで出来るようになっています。&lt;/p&gt;

&lt;p&gt;このサンプルのドラッグ＆ドロップの手順は、行の入れ替え処理などを除けば、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDList.html&quot;&gt;JListの項目をドラッグ＆ドロップ&lt;/a&gt;とほぼ同一です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;複数行を選択しての移動には対応していません。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt;以上で複数行選択して移動する方法: &lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderTable.html&quot;&gt;TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDList.html&quot;&gt;JListの項目をドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FillsViewportHeight.html&quot;&gt;JTable自体の高さを拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderTable.html&quot;&gt;TransferHandlerを使ってJTableの行をドラッグ＆ドロップ、並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragRowsAnotherTable.html&quot;&gt;JTableの行を別のJTableにドラッグして移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndtable</link>
                <guid>http://terai.xrea.jp/swing/dndtable</guid>
                <pubDate>2007-04-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>RandomDissolveで表示を切り替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;RandomDissolve&lt;/code&gt;効果で表示する画像を切り替えます。このサンプルは、&lt;a href=&quot;https://forums.oracle.com/thread/1270228&quot;&gt;Java 2D - random pixelwise fading ?&lt;/a&gt;に投稿されているソースコードを参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RandomDissolve&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRdPqz07I/AAAAAAAAAhM/h3EaItM41Yw/s800/RandomDissolve.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RandomDissolve extends JComponent implements ActionListener {
  private final javax.swing.Timer animator;
  private final BufferedImage image1;
  private final BufferedImage image2;
  private BufferedImage srcimg, dstimg;
  private boolean mode = true;
  private int currentStage;
  private int[] src, dst, step;
  public RandomDissolve(BufferedImage i1, BufferedImage i2) {
    this.image1 = i1;
    this.image2 = i2;
    this.srcimg = copyImage(mode?image2:image1);
    animator = new javax.swing.Timer(10, this);
  }
  public boolean nextStage() {
    if(currentStage &amp;gt; 0) {
      currentStage = currentStage - 1;
      for(int i=0; i&amp;lt;step.length; i++) {
        if(step[i]==currentStage) src[i] = dst[i];
      }
      return true;
    }else{
      return false;
    }
  }
  private BufferedImage copyImage(final BufferedImage image) {
    int w = image.getWidth();
    int h = image.getHeight();
    BufferedImage result = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
    Graphics2D g = result.createGraphics();
    g.drawRenderedImage(image, null);
    g.dispose();
    return result;
  }
  private int[] getData(BufferedImage image) {
    WritableRaster wr = image.getRaster();
    DataBufferInt dbi = (DataBufferInt)wr.getDataBuffer();
    return dbi.getData();
    //return ((DataBufferInt)(image.getRaster().getDataBuffer())).getData();
  }
  private static final int STAGES = 16;
  public void animationStart() {
    currentStage = STAGES;
    dstimg = copyImage(mode?image1:image2);
    srcimg = copyImage(mode?image2:image1);
    src  = getData(srcimg);
    dst  = getData(dstimg);
    step   = new int[src.length];
    mode   = !mode;
    Random rnd = new Random();
    for(int i=0;i&amp;lt;step.length;i++) {
      step[i] = rnd.nextInt(currentStage);
    }
    animator.start();
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    Graphics2D g2d = (Graphics2D)g;
    g2d.setPaint(getBackground());
    g2d.fillRect(0, 0, getWidth(), getHeight());
    g2d.drawImage(srcimg, 0, 0, srcimg.getWidth(), srcimg.getHeight(), this);
  }
  @Override public void actionPerformed(ActionEvent e) {
    if(nextStage()) {
      repaint();
    }else{
      animator.stop();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BufferedImage&lt;/code&gt;から&lt;code&gt;WritableRaster&lt;/code&gt;を取得し、元画像と次の画像のコピーから、&lt;code&gt;int&lt;/code&gt;配列をそれぞれ用意しています。元画像の配列を次の画像のピクセルでランダムに置き換えて、これを再描画することで画像の切り替えを行っています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1270228&quot;&gt;Java 2D - random pixelwise fading ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/randomdissolve</link>
                <guid>http://terai.xrea.jp/swing/randomdissolve</guid>
                <pubDate>2007-03-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのCellRendererにJComboBoxを設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellRenderer&lt;/code&gt;として&lt;code&gt;JComboBox&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboCellRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJ35Po_yI/AAAAAAAAAVE/z4Jn6Mv7-pc/s800/ComboCellRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboCellRenderer extends JComboBox implements TableCellRenderer {
  private static final Color ec = new Color(240, 240, 255);
  private final JTextField editor;
  public ComboCellRenderer() {
    super();
    setEditable(true);
    setBorder(BorderFactory.createEmptyBorder());

    editor = (JTextField) getEditor().getEditorComponent();
    editor.setBorder(BorderFactory.createEmptyBorder());
    editor.setOpaque(true);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    removeAllItems();
    if(isSelected) {
      editor.setForeground(table.getSelectionForeground());
      editor.setBackground(table.getSelectionBackground());
    }else{
      editor.setForeground(table.getForeground());
      editor.setBackground((row%2==0)?ec:table.getBackground());
    }
    addItem((value==null)?&quot;&quot;:value.toString());
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;1&lt;/code&gt;列目(中央)のセルの表示を&lt;code&gt;JComboBox&lt;/code&gt;にするために、これを継承するセルレンダラーを設定しています。&lt;code&gt;1&lt;/code&gt;列目はセルエディタも&lt;code&gt;JComboBox&lt;/code&gt;ですが、これらは同じ&lt;code&gt;JComboBox&lt;/code&gt;のインスタンスではなく、別々に用意しています。&lt;/p&gt;

&lt;p&gt;レンダラーで使用する&lt;code&gt;JComboBox&lt;/code&gt;は、セルの表示のみに使用するため、以下のように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表示用のアイテム(文字列)を一つだけ持つ&lt;/li&gt;
&lt;li&gt;編集可にして&lt;code&gt;EditorComponent&lt;/code&gt;の背景色などを他のセルと同様になるように変更&lt;/li&gt;
&lt;li&gt;セル内にきれいに収まるように余白を&lt;code&gt;0&lt;/code&gt;に設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboCellEditor.html&quot;&gt;JTableのCellEditorにJComboBoxを設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;セルの幅を大きくするとセルの表示が消えますが・・・これは一体なんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/ichikawa.html&quot;&gt;ichikawa&lt;/a&gt; 2010-11-01 (月) 23:09:02

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。リサイズなどでセルの表示がおかしくなるのは、バグです。&lt;code&gt;DefaultTableCellRenderer#invalidate()&lt;/code&gt;などと同じ(パフォーマンス上の理由)にするため、何もしないようにオーバーライドした、テスト中のコードとサンプルを誤ってアップロードしていました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-11-02 (火) 14:23:32&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/combocellrenderer</link>
                <guid>http://terai.xrea.jp/swing/combocellrenderer</guid>
                <pubDate>2007-03-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Crossfadeで画像の切り替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Crossfade&lt;/code&gt;アニメーションで画像の切り替えを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Crossfade&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTKRJIdouI/AAAAAAAAAVs/yU1oEsWfzvA/s800/Crossfade.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class Crossfade extends JComponent implements ActionListener {
  private final javax.swing.Timer animator;
  private final ImageIcon icon1;
  private final ImageIcon icon2;
  private int alpha = 10;
  private boolean direction = true;
  public Crossfade(ImageIcon icon1, ImageIcon icon2) {
    this.icon1 = icon1;
    this.icon2 = icon2;
    animator = new javax.swing.Timer(50, this);
  }
  public void animationStart() {
    direction = !direction;
    animator.start();
  }
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2d = (Graphics2D)g;
    g2d.setPaint(getBackground());
    g2d.fillRect(0, 0, getWidth(), getHeight());
    if(direction &amp;amp;&amp;amp; alpha&amp;lt;10) {
      alpha = alpha + 1;
    }else if(!direction &amp;amp;&amp;amp; alpha&amp;gt;0) {
      alpha = alpha - 1;
    }else{
      animator.stop();
    }
    g2d.setComposite(AlphaComposite.getInstance(
      AlphaComposite.SRC_OVER, 1.0f-alpha*0.1f));
    g2d.drawImage(icon1.getImage(), 0, 0,
      (int)icon1.getIconWidth(), (int)icon1.getIconHeight(), this);
    g2d.setComposite(AlphaComposite.getInstance(
      AlphaComposite.SRC_OVER, alpha*0.1f));
    g2d.drawImage(icon2.getImage(), 0, 0,
      (int)icon2.getIconWidth(), (int)icon2.getIconHeight(), this);
  }
  @Override public void actionPerformed(ActionEvent e) {
    repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、二枚の画像の描画に使用する&lt;code&gt;AlphaComposite&lt;/code&gt;をそれぞれ変化させながら上書きすることで、&lt;code&gt;Crossfade&lt;/code&gt;による画像の切り替えを行っています。&lt;/p&gt;

&lt;p&gt;上書きの規則には、&lt;code&gt;AlphaComposite.SRC_OVER&lt;/code&gt;を使っています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/crossfade</link>
                <guid>http://terai.xrea.jp/swing/crossfade</guid>
                <pubDate>2007-03-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SystemTrayにアイコンを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で追加された機能を使って、&lt;code&gt;SystemTray&lt;/code&gt;にアイコンを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SystemTray&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUJeisovI/AAAAAAAAAlk/zvAoP96Ntcs/s800/SystemTray.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public MainPanel(final JFrame frame) {
  super();
  if(!SystemTray.isSupported()) {
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    return;
  }
  frame.addWindowStateListener(new WindowAdapter() {
    @Override public void windowIconified(WindowEvent e) {
      frame.dispose();
    }
  });
  final SystemTray tray = SystemTray.getSystemTray();
  final Image image     = new ImageIcon(
                            getClass().getResource(&quot;16x16.png&quot;)).getImage();
  final PopupMenu popup = new PopupMenu();
  final TrayIcon icon   = new TrayIcon(image, &quot;TRAY&quot;, popup);

  MenuItem item1 = new MenuItem(&quot;OPEN&quot;);
  item1.addActionListener(new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      frame.setVisible(true);
    }
  });
  MenuItem item2 = new MenuItem(&quot;EXIT&quot;);
  item2.addActionListener(new ActionListener() {
    @Override public void actionPerformed(ActionEvent e) {
      tray.remove(icon);
      frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      frame.dispose();
      //System.exit(0);
    }
  });
  popup.add(item1);
  popup.add(item2);

  try{
    tray.add(icon);
  }catch(AWTException e) {
    e.printStackTrace();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;トレイアイコンでは、&lt;code&gt;JPopupMenu&lt;/code&gt;ではなく、&lt;code&gt;PopupMenu&lt;/code&gt;や&lt;code&gt;MenuItem&lt;/code&gt;を使用します。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、フレームがアイコン化(最小化)されたときにタスクバーの表示を消して、システムトレイにアイコンだけ表示したいので、初期状態を&lt;code&gt;frame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);&lt;/code&gt;にしておき、アイコン化された場合でも、&lt;code&gt;frame.dispose();&lt;/code&gt;するようにしています。&lt;/p&gt;

&lt;p&gt;実際に&lt;code&gt;VM&lt;/code&gt;を終了する場合は、表示可能なウィンドウをすべて破棄して(&lt;code&gt;frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);&lt;/code&gt;)、システムトレイからも&lt;code&gt;tray.remove(icon);&lt;/code&gt;してアイコンを取り除けばいいようです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimatedTrayIcon.html&quot;&gt;TrayIconのアニメーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClickTrayIcon.html&quot;&gt;TrayIconのダブルクリック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;だと通知スペースに表示されるのですが、背景色や位置がどうもうまくいっていないようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-08 (火) 20:23:38

&lt;ul&gt;
&lt;li&gt;位置は以下みたいにすれば適当に補正できそうですが、背景色はどうしたらいいんだろう？ &lt;code&gt;g.setColor(UIManager.getColor(&amp;quot;Panel.background&amp;quot;));g.fillRect(0,0,d.width,d.height);&lt;/code&gt;とかするのは酷いか…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-08 (火) 21:11:09&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SystemTray tray = SystemTray.getSystemTray();
Dimension d = tray.getTrayIconSize();
//Image image = new ImageIcon(getClass().getResource(&quot;16x16.png&quot;)).getImage();
BufferedImage image = new BufferedImage(d.width,d.height,BufferedImage.TYPE_INT_ARGB);
ImageIcon i = new ImageIcon(getClass().getResource(&quot;16x16.png&quot;));
Graphics g = image.createGraphics();
i.paintIcon(null,g,(d.width-i.getIconWidth())/2,(d.height-i.getIconWidth())/2);
g.dispose();
PopupMenu popup = new PopupMenu();
TrayIcon icon   = new TrayIcon(image, &quot;TRAY&quot;, popup);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- `g.setBackground(new Color(0,0,0,0));g.clearRect(0,0,d.width,d.height);`とかしても変化無し。 -- [aterai](http://terai.xrea.jp/aterai.html) 2007-05-09 (水) 13:54:25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6707273&quot;&gt;TrayIcon does not support 8-bit alpha channel in Windows XP&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-08 (火) 09:28:46&lt;/li&gt;
&lt;li&gt;タスクバーのアイコンがなくなりシステムトレイのアイコンだけになりませんか？ --  2010-03-05 (金) 21:05:36

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows&lt;/code&gt;でしか試していませんが、&lt;code&gt;JFrame&lt;/code&gt;の代わりに、&lt;code&gt;JDialog&lt;/code&gt;を使えばタスクバーには何も表示されないと思います(質問の意味を取り違えてなければいいのですが……)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-03-06 (土) 23:22:39&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;消したいのはタイトルバーではなくてシステムトレイの隣のタスクバーアイコンです。文字で伝えるのは難しいですね。 --  2010-03-08 (月) 17:28:43&lt;/li&gt;
&lt;li&gt;スクリーンショットで&lt;code&gt;JST&lt;/code&gt;システムトレイとタスクバーにあるやつです --  2010-03-08 (月) 17:30:21

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;の代わりに、&lt;code&gt;JWindow&lt;/code&gt;を使うのはどうでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-03-09 (火) 16:26:47&lt;/li&gt;
&lt;li&gt;もしくは、&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableDefaultIcon.html&quot;&gt;JFrameのアイコンを非表示&lt;/a&gt;のように透明なアイコンを設定する(クリックすると反応してしまいますが…)とか。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/systemtray</link>
                <guid>http://terai.xrea.jp/swing/systemtray</guid>
                <pubDate>2007-03-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTreeのノードをドラッグ＆ドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTree&lt;/code&gt;のノードをドラッグ＆ドロップで移動します。&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/&quot;&gt;Java Swing Hacks #26: DnD JTree&lt;/a&gt;のソースコードをベースにしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDTree&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTLofRhAtI/AAAAAAAAAX4/d1C6sFO5s4g/s800/DnDTree.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void dragOver(DropTargetDragEvent dtde) {
  DataFlavor[] f = dtde.getCurrentDataFlavors();
  boolean isDataFlavorSupported = f[0].getHumanPresentableName().equals(NAME);
  if(!isDataFlavorSupported) {
    //サポートされていないDataFlavor(例えばデスクトップからファイルなど)
    rejectDrag(dtde);
    return;
  }
  // figure out which cell it&#39;s over, no drag to self
  Point pt = dtde.getLocation();
  TreePath path = getPathForLocation(pt.x, pt.y);
  if(path==null) {
    //ノード以外の場所(例えばJTreeの余白など)
    rejectDrag(dtde);
    return;
  }
  //Object draggingObject;
  //try {
  //  draggingObject = dtde.getTransferable().getTransferData(localObjectFlavor);
  //}catch(Exception ex) {
  //  rejectDrag(dtde);
  //  return;
  //}
  Object draggingObject = getSelectionPath().getLastPathComponent();
  MutableTreeNode draggingNode
    = (MutableTreeNode) draggingObject;
  DefaultMutableTreeNode targetNode
    = (DefaultMutableTreeNode) path.getLastPathComponent();
  DefaultMutableTreeNode parentNode
    = (DefaultMutableTreeNode) targetNode.getParent();
  while(parentNode!=null) {
    if(draggingNode.equals(parentNode)) {
      //親ノードを子ノードにドロップしようとしている
      rejectDrag(dtde);
      return;
    }
    parentNode = (DefaultMutableTreeNode)parentNode.getParent();
  }
  //dropTargetNode は、描画用(Rectangle2D、Line)のflag
  dropTargetNode = targetNode;
  dtde.acceptDrag(dtde.getDropAction());
  repaint();
}
private void rejectDrag(DropTargetDragEvent dtde) {
  dtde.rejectDrag();
  dropTargetNode = null; // dropTargetNode(flag)をnullにして
  repaint();             // Rectangle2D、Lineを消すためJTreeを再描画
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/&quot;&gt;HACK #26: DnD JTree&lt;/a&gt;から以下の動作を変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ルートノードのドラッグを禁止&lt;/li&gt;
&lt;li&gt;自ノードから自ノードへのドラッグ＆ドロップを禁止

&lt;ul&gt;
&lt;li&gt;ノードを自分と一つ上のノードとの間にドロップするとノードが消える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;親ノードを子ノードにドロップすることを禁止

&lt;ul&gt;
&lt;li&gt;フォルダノードを自分自身にドロップするとフォルダノードが消えてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サポートされていない&lt;code&gt;DataFlavor&lt;/code&gt;のドロップを禁止

&lt;ul&gt;
&lt;li&gt;エクスプローラなどからファイルをドロップすると、描画が乱れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;制限事項:兄弟ノードの末尾に直接ドラッグ＆ドロップすることは出来ません。それらの親ノードにドロップすると兄弟ノードの一番最後に追加されます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/&quot;&gt;HACK #26: DnD JTree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/javatips/jw-javatip114.html&quot;&gt;Java Tip 114: Add ghosted drag images to your JTrees - Java World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java2s.com/Code/Java/Swing-JFC/DnDdraganddropJTreecode.htm&quot;&gt;DnD (drag and drop)JTree code : Tree : Swing JFC : Java examples (example source code) Organized by topic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JWS&lt;/code&gt;による起動の場合、&lt;code&gt;AccessControlException&lt;/code&gt;が発生します。解決する方法はあるのでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/hiraoka.html&quot;&gt;hiraoka&lt;/a&gt; 2010-09-21 (火) 18:24:44

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。たしか&lt;code&gt;Java 1.6.0_20&lt;/code&gt;あたりから&lt;code&gt;droppedObject = dtde.getTransferable().getTransferData(localObjectFlavor);&lt;/code&gt;が&lt;code&gt;Web Start&lt;/code&gt;で駄目だったような気がします。&lt;code&gt;JTable&lt;/code&gt;とか&lt;code&gt;JTabbedPane&lt;/code&gt;のサンプル(&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDExportTabbedPane.html&quot;&gt;JTabbedPane間でタブのドラッグ＆ドロップ移動&lt;/a&gt;)は修正したけど、&lt;code&gt;JTree&lt;/code&gt;はすっかり忘れていました。このサンプルの場合はひとつの&lt;code&gt;JTree&lt;/code&gt;の中で並べ替えるだけなので、&lt;code&gt;Object droppedObject = getSelectionPath().getLastPathComponent();&lt;/code&gt;のように修正すればいいようです。&lt;del&gt;あとでもう少し調べてサンプルコードも修正しようと思います。&lt;/del&gt; 修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-09-21 (火) 21:15:43&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;情報ありがとうございました。 -- &lt;a href=&quot;http://terai.xrea.jp/hiraoka.html&quot;&gt;hiraoka&lt;/a&gt; 2010-09-22 (水) 15:08:46&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndtree</link>
                <guid>http://terai.xrea.jp/swing/dndtree</guid>
                <pubDate>2007-02-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Desktopでブラウザを起動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された&lt;code&gt;Desktop&lt;/code&gt;を使ってブラウザを起動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Desktop&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTKu9HhvrI/AAAAAAAAAWc/iMheiQnF4hQ/s800/Desktop.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;if(!Desktop.isDesktopSupported()) return;
try{
  Desktop.getDesktop().browse(new URI(href));
}catch(IOException ioe) {
  ioe.printStackTrace();
}catch(URISyntaxException use) {
  use.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Desktop&lt;/code&gt;を使用することで、ブラウザのほかにも、メーラーや拡張子に関連付けられたデフォルトのアプリケーションを起動することが出来るようになります。&lt;/p&gt;

&lt;p&gt;このため、&lt;code&gt;OS&lt;/code&gt;毎に、&lt;code&gt;Runtime.getRuntime().exec(String[])&lt;/code&gt;でアプリケーションを切り替えて実行する必要がなくなります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/index-135182.html&quot;&gt;Using the Desktop API in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BrowserLauncher.html&quot;&gt;Browserを起動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/desktop</link>
                <guid>http://terai.xrea.jp/swing/desktop</guid>
                <pubDate>2007-02-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableRowSorterでJTableのソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で導入された、&lt;code&gt;TableRowSorter&lt;/code&gt;を利用して、&lt;code&gt;JTable&lt;/code&gt;の行を降順、昇順にソートします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableRowSorter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUnbg2jyI/AAAAAAAAAmU/-7yjlGSjBmo/s800/TableRowSorter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableModel model = makeTestTableModel();
JTable table = new JTable(model);
RowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model);
table.setRowSorter(sorter);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;では、&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;TableRowSorter&lt;/code&gt;を設定することで、カラムヘッダのクリックによる行ソートが行えます。&lt;/p&gt;

&lt;p&gt;以下のように、&lt;code&gt;JTable#autoCreateRowSorter(true);&lt;/code&gt;メソッドを使用した場合も、&lt;code&gt;JTable&lt;/code&gt;が自動的に&lt;code&gt;RowSorter&lt;/code&gt;を作成して、ソートが出来るようになります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model);
table.setAutoCreateRowSorter(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;TableRowSorter&lt;/code&gt;のデフォルトでは、ヘッダクリックで(降順、昇順)とソートが切り替わり、&lt;code&gt;TableSorter.java&lt;/code&gt;のように(降順、昇順、初期状態)ではなくなっています。上記のサンプルでは、下のボタンをクリックすると、&lt;code&gt;DefaultRowSorter#setSortKeys(List)&lt;/code&gt;に&lt;code&gt;null&lt;/code&gt;を代入することで初期状態に戻るようにしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingLabs&lt;/code&gt;の&lt;code&gt;JXTable&lt;/code&gt;のように「&lt;kbd&gt;Shift&lt;/kbd&gt;+ヘッダクリック」で初期状態

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSortingState.html&quot;&gt;TableRowSorterのSortKeysをクリアする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableSorter.java&lt;/code&gt;のようにヘッダクリックで降順、昇順、初期状態とループ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TriStateSorting.html&quot;&gt;TableRowSorterのソートをヘッダクリックで昇順、降順、初期状態に変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;del&gt;第二キーを使ったソートは&lt;code&gt;TableRowSorter&lt;/code&gt;版では出来ない?ようなので、&lt;code&gt;TableSorter.java&lt;/code&gt;を使う場合もまだあるかもしれません。&lt;/del&gt; 複数キーを使ったソートも可能です(ページ下部にあるsyoさんのコメントを参照)。デフォルトではソートキーは&lt;code&gt;3&lt;/code&gt;つで、ヘッダにマークが表示されるのは最新のソートキーのみですが、クリックした順に保持されるようです。詳しくはドキュメントや&lt;a href=&quot;http://syo.cocolog-nifty.com/freely/2006/08/table_616d.html&quot;&gt;Tableの内容をソート&lt;/a&gt;などを参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2010/08/29/multisort-table-header-cell-renderer/&quot;&gt;Multisort Table Header Cell Renderer « Java Tips Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;第二キー以下を薄く表示するサンプルがあります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MultisortHeaderRenderer.html&quot;&gt;JTableの複数キーを使ったソートをヘッダに表示する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ソートキーの状態を文字列にして追加しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableModel&lt;/code&gt;に要素を追加した後で、&lt;code&gt;table.setRowSorter(sorter);&lt;/code&gt;とすると、&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;: &lt;code&gt;Invalid range&lt;/code&gt;が、モデルへの追加、削除、編集中に別の行クリックなどで発生する。

&lt;ul&gt;
&lt;li&gt;以下のサンプルの場合、&lt;code&gt;model.fireTableDataChanged()&lt;/code&gt;メソッドを&lt;code&gt;table.setRowSorter(sorter)&lt;/code&gt;の後で呼び出すと回避できる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
public class RowSorterTest extends JPanel{
  public RowSorterTest() {
    super(new BorderLayout());
    final DefaultTableModel model = new DefaultTableModel(null, new String[] {&quot;A&quot;,&quot;B&quot;,&quot;C&quot;});
    JTable table = new JTable(model);
    TableRowSorter&amp;lt;TableModel&amp;gt; sorter = new TableRowSorter&amp;lt;TableModel&amp;gt;(model);
    //table.setRowSorter(sorter); // OK
    model.addRow(new String[] {&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;});
    model.addRow(new String[] {&quot;dd&quot;, &quot;ee&quot;, &quot;ff&quot;});
    table.setRowSorter(sorter); // IndexOutOfBoundsException: Invalid range
    //model.fireTableDataChanged(); // &amp;lt;----
    add(new JButton(new AbstractAction(&quot;model.addRow(...); -&amp;gt; IndexOutOfBoundsException&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        model.addRow(new String[] {&quot;gg&quot;, &quot;hh&quot;, &quot;ii&quot;});
      }
    }), BorderLayout.SOUTH);
    add(new JScrollPane(table));
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    JFrame frame = new JFrame(&quot;Test&quot;);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(new RowSorterTest());
    frame.setSize(320,240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/RowSorter.html&quot;&gt;RowSorter (Java Platform SE 6)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RowSorter&lt;/code&gt;の具象実装は、&lt;code&gt;TableModel&lt;/code&gt;、&lt;code&gt;ListModel&lt;/code&gt;などのモデルを参照する必要があります。&lt;code&gt;JTable&lt;/code&gt;や&lt;code&gt;JList&lt;/code&gt;などのビュークラスも、モデルを参照します。順序の依存性を回避するため、&lt;code&gt;RowSorter&lt;/code&gt;実装がモデル上にリスナーをインストールしないようにしてください。モデルが変更されると、ビュークラスが&lt;code&gt;RowSorter&lt;/code&gt;を呼び出します。例えば、&lt;code&gt;TableModel&lt;/code&gt; &lt;code&gt;JTable&lt;/code&gt; で行が更新された場合、&lt;code&gt;rowsUpdated&lt;/code&gt;が呼び出されます。モデルが変更されると、ビューは、&lt;code&gt;modelStructureChanged&lt;/code&gt;、&lt;code&gt;allRowsChanged&lt;/code&gt;、&lt;code&gt;rowsInserted&lt;/code&gt;、&lt;code&gt;rowsDeleted&lt;/code&gt;、&lt;code&gt;rowsUpdated&lt;/code&gt;のいずれかのメソッドを呼び出します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableSorter.html&quot;&gt;TableSorterでJTableをソート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearSortingState.html&quot;&gt;TableRowSorterのSortKeysをクリアする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TriStateSorting.html&quot;&gt;TableRowSorterのソートをヘッダクリックで昇順、降順、初期状態に変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://syo.cocolog-nifty.com/freely/2006/08/table_616d.html&quot;&gt;Tableの内容をソート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultRowSorter#setMaxSortKeys(int)&lt;/code&gt;で複数のキーを用いたソートも出来ているように思います(&lt;code&gt;b86&lt;/code&gt;)。ただ、ヘッダー部分がわかりにくいですが。 -- &lt;a href=&quot;http://terai.xrea.jp/syo.html&quot;&gt;syo&lt;/a&gt; 2006-08-03 (木) 11:12:55

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。なるほど、こちら(&lt;a href=&quot;http://syo.cocolog-nifty.com/freely/2006/08/table_616d.html&quot;&gt;Tableの内容をソート&lt;/a&gt;)を使えばうまくいきそうですね。解説を修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-08-03 (木) 12:34:53&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renderer&lt;/code&gt;がないので、基本的に数字は左揃え、文字列は右揃えで、中央揃えするにはどうすれば宜しいでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%91%E3%83%B3%E3%83%80.html&quot;&gt;パンダ&lt;/a&gt; 2007-06-14 (木) 09:40:20

&lt;ul&gt;
&lt;li&gt;長いので&lt;a href=&quot;http://terai.xrea.jp/Swing/CellTextAlignment.html&quot;&gt;JTableのセル文字揃え&lt;/a&gt;に移動しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-06-14 (木) 13:19:36&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablerowsorter</link>
                <guid>http://terai.xrea.jp/swing/tablerowsorter</guid>
                <pubDate>2007-02-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TrayIconのアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SystemTray&lt;/code&gt;に追加したアイコン(&lt;code&gt;JDK 6&lt;/code&gt;以上)をアニメーションさせます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedTrayIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTHtWabBgI/AAAAAAAAARk/J0ExgthCnn4/s800/AnimatedTrayIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final TrayIcon icon = new TrayIcon(imglist[0], &quot;TRAY&quot;, popup);
animator = new javax.swing.Timer(100, new ActionListener() {
  private int idx = 0;
  @Override public void actionPerformed(ActionEvent e) {
    icon.setImage(imglist[idx]);
    idx = (idx + 1) % imglist.length;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;16*16&lt;/code&gt;の画像を&lt;code&gt;3&lt;/code&gt;パターン用意し、これを&lt;code&gt;JDK 6&lt;/code&gt;で追加された&lt;code&gt;TrayIcon#setImage(Image)&lt;/code&gt;メソッドを使って切り替えることでアニメーションしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SystemTray.html&quot;&gt;SystemTrayにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClickTrayIcon.html&quot;&gt;TrayIconのダブルクリック&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;animated gif&lt;/code&gt;を使うほうが簡単だと思うのですが、作った&lt;code&gt;Gif&lt;/code&gt;が悪いのか、環境のせいなのか、残像がでてしまいます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-02-05 (月) 19:00:34

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6453582&quot;&gt;Bug ID: 6453582 Animation gif too fast&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-19 (木) 21:11:50&lt;/li&gt;
&lt;li&gt;上のバグ？でウェイトが効かずに残像が残っていたのではなく、前のコマがそのまま残して透過色(背景色)でクリアしないタイプ？のアニメ&lt;code&gt;GIF&lt;/code&gt;になっていたようです。&lt;a href=&quot;http://homepage3.nifty.com/furumizo/giamd.htm&quot;&gt;Giam&lt;/a&gt;を使って、全コマの消去方法を「背景色で塗りつぶす」に変更したファイルを使用すると、正常に描画されるようになりました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-19 (木) 22:04:52&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatedtrayicon</link>
                <guid>http://terai.xrea.jp/swing/animatedtrayicon</guid>
                <pubDate>2007-02-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneにタブを閉じるボタンを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;の新機能を使って&lt;code&gt;JTabbedPane&lt;/code&gt;にタブを閉じるボタンを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabWithCloseButton&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTVCzHeo0I/AAAAAAAAAnA/hnMCEbHXnnw/s800/TabWithCloseButton.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CloseButtonTabbedPane extends JTabbedPane {
  private final Icon icon;
  private final Dimension buttonSize;
  public CloseButtonTabbedPane(Icon icon) {
    super();
    //icon = new CloseTabIcon();
    this.icon = icon;
    buttonSize = new Dimension(icon.getIconWidth(), icon.getIconHeight());
  }
  @Override public void addTab(String title, final JComponent content) {
    JPanel tab = new JPanel(new BorderLayout());
    tab.setOpaque(false);
    JLabel label = new JLabel(title);
    label.setBorder(BorderFactory.createEmptyBorder(0,0,0,4));
    JButton button = new JButton(icon);
    button.setPreferredSize(buttonSize);
    button.addActionListener(new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        removeTabAt(indexOfComponent(content));
      }
    });
    tab.add(label,  BorderLayout.WEST);
    tab.add(button, BorderLayout.EAST);
    tab.setBorder(BorderFactory.createEmptyBorder(2,1,1,1));
    super.addTab(null, content);
    setTabComponentAt(getTabCount()-1, tab);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;から追加されたタブにコンポーネントを配置する機能を使って、&lt;code&gt;JButton&lt;/code&gt;をタブに追加しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseIcon.html&quot;&gt;以前のサンプル&lt;/a&gt;に比べると、実装も簡単でコードも短くなっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/index-135776.html&quot;&gt;More Enhancements in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html&quot;&gt;How to Use Tabbed Panes (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseIcon.html&quot;&gt;JTabbedPaneにタブを閉じるアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleAlignment.html&quot;&gt;JTabbedPaneのTabTitleを左揃えに変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabwithclosebutton</link>
                <guid>http://terai.xrea.jp/swing/tabwithclosebutton</guid>
                <pubDate>2007-01-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserのリサイズなどを制限</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;のリサイズや、最小サイズ以下へのサイズ変更を禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FixedSizeFileChooser&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTM16q-C_I/AAAAAAAAAZ0/i21vjp9vPjc/s800/FixedSizeFileChooser.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFileChooser fileChooser = new JFileChooser() {
  @Override protected JDialog createDialog(Component parent) throws HeadlessException {
    JDialog dialog = super.createDialog(parent);
    dialog.setResizable(false);
    //dialog.setMinimumSize(new Dimension(640,480)); // JDK 6
    //dialog.addComponentListener(new MinimumSizeAdapter());
    return dialog;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;の&lt;code&gt;createDialog&lt;/code&gt;メソッドをオーバーライドして、リサイズを制限したり、最小サイズを設定したりしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;では、&lt;code&gt;Windows&lt;/code&gt;環境でも、オーバーライドした&lt;code&gt;createDialog&lt;/code&gt;メソッド内で、&lt;code&gt;JDialog#setMinimumSize(Dimension)&lt;/code&gt;を使うだけで、最小サイズの設定が出来るようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1374445&quot;&gt;Swing - JFileChooser setMinimunSize not working?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MinimumFrame.html&quot;&gt;JFrameの最小サイズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fixedsizefilechooser</link>
                <guid>http://terai.xrea.jp/swing/fixedsizefilechooser</guid>
                <pubDate>2007-01-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DesktopManagerでアイコンの再配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDesktopPane&lt;/code&gt;のサイズが変更されたとき、アイコン化している&lt;code&gt;JInternalFrame&lt;/code&gt;の再配置を行います。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4765256&quot;&gt;Bug ID: 4765256 REGRESSION: Icons in JDesktopPane not repositioned when pane is resized&lt;/a&gt;からソースコードの大部分を引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RelocatedIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRm01W30I/AAAAAAAAAhc/eBhL-DDKkSo/s800/RelocatedIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ReIconifyDesktopManager extends DefaultDesktopManager {
  public void reIconifyFrame(JInternalFrame jif) {
    deiconifyFrame(jif);
    Rectangle r = getBoundsForIconOf(jif);
    iconifyFrame(jif);
    jif.getDesktopIcon().setBounds(r);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void doReIconify(JDesktopPane desktopPane) {
  DesktopManager dm = desktopPane.getDesktopManager();
  if(dm instanceof ReIconifyDesktopManager) {
    ReIconifyDesktopManager rdm = (ReIconifyDesktopManager)dm;
    for(JInternalFrame f: desktopPane.getAllFrames()) {
      if(f.isIcon()) rdm.reIconifyFrame(f);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JDesktopPane&lt;/code&gt;がリサイズされた場合、以下のような手順で再配置を行っています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;アイコン化した&lt;code&gt;JInternalFrame&lt;/code&gt;を一旦、元のサイズと位置に復元&lt;/li&gt;
&lt;li&gt;アイコン化した場合の位置を再計算&lt;/li&gt;
&lt;li&gt;再びアイコン化&lt;/li&gt;
&lt;li&gt;再計算した位置への移動&lt;/li&gt;
&lt;/ol&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;の場合、アイコンを移動することは出来ないので、このサンプルには意味がありません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4765256&quot;&gt;Bug ID: 4765256 REGRESSION: Icons in JDesktopPane not repositioned when pane is resized&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;https://forums.oracle.com/thread/1374482&quot;&gt;Swing - JInternalFrame - iconify in a JDesktopPane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4110799&quot;&gt;Bug ID: 4110799 JInternalFrame icon position unchanged w/ resize&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tori31001/20060901&quot;&gt;JInternalFrameは最初にアイコン化しておかないと位置が更新されない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LayeredPane.html&quot;&gt;JInternalFrameを一番手前に表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.7.0 b38&lt;/code&gt;で修正されているようです。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6647340&quot;&gt;Bug ID: 6647340 Minimized JInternalFrame icons appear in incorrect positions if the main frame is resized&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-10 (水) 21:27:26&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows7&lt;/code&gt; + &lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で&lt;code&gt;JDesktopPane&lt;/code&gt;の背景が黒になる: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7008416&quot;&gt;Bug ID: 7008416 JDesktopPane - Wrong background color with Win7+WindowsLnf&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-04 (火) 16:58:32&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/relocatedicon</link>
                <guid>http://terai.xrea.jp/swing/relocatedicon</guid>
                <pubDate>2007-01-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollBarをJScrollPaneの左と上に配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;の配置位置を、&lt;code&gt;JScrollPane&lt;/code&gt;の左側、上側に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LeftScrollBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTPG13yZbI/AAAAAAAAAdc/1a4aTgyblRo/s800/LeftScrollBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scroll.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
JPanel panel = new JPanel(new BorderLayout());
int w = scroll.getVerticalScrollBar().getPreferredSize().width;
panel.add(Box.createHorizontalStrut(w), BorderLayout.WEST);
panel.add(scroll.getHorizontalScrollBar(), BorderLayout.CENTER);
add(panel,  BorderLayout.NORTH);
add(scroll, BorderLayout.CENTER);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;水平スクロールバーを右から左に

&lt;ul&gt;
&lt;li&gt;パネルのレイアウトを、&lt;code&gt;BorderLayout&lt;/code&gt;にして、&lt;code&gt;JScrollPane&lt;/code&gt;をそのパネルの中央(&lt;code&gt;BorderLayout.CENTER&lt;/code&gt;)に追加し、&lt;code&gt;JScrollPane#setComponentOrientation&lt;/code&gt;メソッドで、&lt;code&gt;ComponentOrientation.RIGHT_TO_LEFT&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;垂直スクロールバーを下から上に

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#getHorizontalScrollBar()&lt;/code&gt;メソッドでスクロールバーを取得し、パネルレイアウトを使って&lt;code&gt;JScrollPane&lt;/code&gt;の上部(&lt;code&gt;BorderLayout.NORTH&lt;/code&gt;)に配置されているように見せかけています。&lt;/li&gt;
&lt;li&gt;左上隅の余白は、&lt;code&gt;Box.createHorizontalStrut&lt;/code&gt;(縦スクロールバーの幅)です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1375964&quot;&gt;Swing - JScrollPane with scroll bar on the left&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollBarButtonLayout.html&quot;&gt;JScrollBarのButtonの位置を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;グッド -- &lt;a href=&quot;http://terai.xrea.jp/a1.html&quot;&gt;a1&lt;/a&gt; 2008-12-26 (金) 13:52:59

&lt;ul&gt;
&lt;li&gt;どうも -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/leftscrollbar</link>
                <guid>http://terai.xrea.jp/swing/leftscrollbar</guid>
                <pubDate>2007-01-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JDesktopPaneにJInternalFrameを吸着させる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDesktopPane&lt;/code&gt;と&lt;code&gt;JInternalFrame&lt;/code&gt;の距離が近くなった場合、これらを自動的に吸着させます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MagneticFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPnXoiDZI/AAAAAAAAAeQ/9SMGwoIqOi8/s800/MagneticFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
desktop.setDesktopManager(new DefaultDesktopManager() {
  @Override public void dragFrame(JComponent frame, int x, int y) {
    int e = x; int n = y;
    int w = desktop.getSize().width -frame.getSize().width -e;
    int s = desktop.getSize().height-frame.getSize().height-n;
    if(isNear(e) || isNear(n) || isNear(w) || isNear(s)) {
      x = (e&amp;lt;w)?(isNear(e)?0:e):(isNear(w)?w+e:e);
      y = (n&amp;lt;s)?(isNear(n)?0:n):(isNear(s)?s+n:n);
    }
    super.dragFrame(frame, x, y);
  }
  private boolean isNear(int c) {
    return (Math.abs(c)&amp;lt;10);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DesktopManager#dragFrame(JInternalFrame,int,int)&lt;/code&gt;メソッドをオーバーライドすることで&lt;code&gt;JInternalFrame&lt;/code&gt;の位置を調整しています。上記のサンプルでは、&lt;code&gt;JDesktopPane&lt;/code&gt;と&lt;code&gt;JInternalFrame&lt;/code&gt;の距離が&lt;code&gt;10px&lt;/code&gt;以下になった場合、それぞれ吸着するよう設定しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/magneticframe</link>
                <guid>http://terai.xrea.jp/swing/magneticframe</guid>
                <pubDate>2007-01-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableで文字列をクリックした場合だけセルを選択状態にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の文字列以外の場所がクリックされた場合、そのセルが選択されないようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableFileList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUdT6R-SI/AAAAAAAAAmE/AYebcaiE77Y/s800/TableFileList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//SwingUtilities2.pointOutsidePrefSize(...)
private static Rectangle getCellRect2(JTable table, int row, int col) {
  TableCellRenderer tcr = table.getCellRenderer(row, col);
  Object value = table.getValueAt(row, col);
  Component cell = tcr.getTableCellRendererComponent(table, value, false, false, row, col);
  Dimension itemSize = cell.getPreferredSize();
  Rectangle cellBounds = table.getCellRect(row, col, false);
  cellBounds.width = itemSize.width;
  return cellBounds;
//   FontMetrics fm = table.getFontMetrics(table.getFont());
//   Object o = table.getValueAt(row, col);
//   int w = fm.stringWidth(o.toString()) + 16 + 2 + 2;
//   Rectangle rect = table.getCellRect(row, col, true);
//   rect.setSize(w, rect.height);
//   return rect;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Name&lt;/code&gt;カラムのセル中にあるアイコンと文字列の上でクリックされた場合のみ、そのセルが選択されるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JTable#columnAtPoint(Point)&lt;/code&gt;メソッドをオーバーライドし &lt;code&gt;MouseAdapter&lt;/code&gt;を設定し、&lt;code&gt;Name&lt;/code&gt;カラムのセルの文字列上でクリックされたかどうかを判別&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;クリックされたポイントがそのセルの文字列上に無い場合、別のセル(幅&lt;code&gt;0&lt;/code&gt;のダミーカラム)がクリックされたように偽装し、現在の選択状態を解除&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable.putClientProperty(&amp;quot;Table.isFileList&amp;quot;, Boolean.TRUE)&lt;/code&gt;で、&lt;code&gt;0&lt;/code&gt;列目の文字列以外がクリックされても選択されないように変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;のみ？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;範囲選択の場合は、文字列の幅を自前で計算&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExplorerLikeTable.html&quot;&gt;JTableのセルをエクスプローラ風に表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#columnAtPoint(Point)&lt;/code&gt;メソッドをオーバーライドする方法では、&lt;code&gt;CPU&lt;/code&gt;が&lt;code&gt;100%&lt;/code&gt;になってしまうので、クリック、ドラッグした場合だけ、評価するように修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-16 (月) 18:46:39&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable#getToolTipText(MouseEvent)&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;Name&lt;/code&gt;カラムのセルの余白では、ツールチップも表示しないように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-16 (月) 18:49:02&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table.putClientProperty(&amp;quot;Table.isFileList&amp;quot;, Boolean.TRUE);&lt;/code&gt;を使えば、&lt;code&gt;MouseListener&lt;/code&gt;などもすべて必要なさそう…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-01 (金) 02:02:50

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;putClientProperty(&amp;quot;Table.isFileList&amp;quot;, Boolean.TRUE)&lt;/code&gt;を使用するように変更、&lt;a href=&quot;http://terai.xrea.jp/Swing/RubberBanding.html&quot;&gt;JListのアイテムを範囲指定で選択&lt;/a&gt;での範囲選択機能を追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-05 (火) 16:07:48&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+A&lt;/kbd&gt;などの&lt;code&gt;JTable#selectAll()&lt;/code&gt;で、&lt;code&gt;Comment&lt;/code&gt;カラムが選択できるのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-25 (水) 18:41:45&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablefilelist</link>
                <guid>http://terai.xrea.jp/swing/tablefilelist</guid>
                <pubDate>2006-12-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxなどの幅をカラム数で指定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;,&lt;code&gt;JPasswordField&lt;/code&gt;,&lt;code&gt;JSpinner&lt;/code&gt;,&lt;code&gt;JComboBox&lt;/code&gt;の幅をカラム数で指定して比較しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SetColumns&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTS72PP0tI/AAAAAAAAAjk/RRG_w2fJBtA/s800/SetColumns.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextField field      = new JTextField(20);
JPasswordField passwd = new JPasswordField(20);
JSpinner.DefaultEditor e = (JSpinner.DefaultEditor)spinner.getEditor();
e.getTextField().setColumns(20);
combo1.setEditable(true);
Component c = combo1.getEditor().getEditorComponent();
if(c instanceof JTextField) ((JTextField)c).setColumns(20);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、要素が空の&lt;code&gt;JComboBox&lt;/code&gt;などのカラム幅を同じにして(下二つは&lt;code&gt;default&lt;/code&gt;のまま)、以下のような順番で並べています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;JTextField&lt;/code&gt; [&lt;code&gt;setColumns(20)&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JPasswordField&lt;/code&gt; [&lt;code&gt;setColumns(20)&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSpinner&lt;/code&gt; [&lt;code&gt;setColumns(20)&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt; [&lt;code&gt;setEditable(true)&lt;/code&gt;, &lt;code&gt;setColumns(20)&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt; [&lt;code&gt;setEditable(true)&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt; [&lt;code&gt;setEditable(false)&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;]&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;スクリーンショットは、左が&lt;code&gt;JDK 1.6.0&lt;/code&gt;、右が、&lt;code&gt;JDK 1.5.0_10&lt;/code&gt;で実行したものになっています(どちらも&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;)。&lt;code&gt;1.6.0&lt;/code&gt;ではきれいに揃っていますが、&lt;code&gt;1.5.0_10&lt;/code&gt;などでは幅も高さも余白もガタガタ(左の内余白も&lt;code&gt;JTextField&lt;/code&gt;は広すぎ、&lt;code&gt;JComboBox&lt;/code&gt;などは狭すぎるなどバラバラ)なので、レイアウトマネージャーで工夫するか、&lt;code&gt;setPreferredSize(Dimension)&lt;/code&gt;を使って幅を揃える方がよさそうです(&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonWidth.html&quot;&gt;JButtonなどの高さを変更せずに幅を指定&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonWidth.html&quot;&gt;JButtonなどの高さを変更せずに幅を指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/setcolumns</link>
                <guid>http://terai.xrea.jp/swing/setcolumns</guid>
                <pubDate>2006-12-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPasswordFieldのエコー文字を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPasswordField&lt;/code&gt;のエコー文字を独自の図形に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PasswordView&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQ8cs8ApI/AAAAAAAAAgY/gxUUdKI65yA/s800/PasswordView.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyPasswordFieldUI extends BasicPasswordFieldUI {
  public View create(Element elem) {
    return new MyPasswordView(elem);
  }
  class MyPasswordView extends PasswordView{
    public MyPasswordView(Element element) {
      super(element);
    }
    @Override protected int drawEchoCharacter(Graphics g, int x, int y, char c) {
      Graphics2D g2d = (Graphics2D) g;
      FontMetrics fm = g2d.getFontMetrics();
      icon.paintIcon(null, g, x, y-fm.getAscent());
      return x + icon.getIconWidth();

      //g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
      //                                    RenderingHints.VALUE_ANTIALIAS_ON);
      //FontMetrics fm = g2d.getFontMetrics();
      //int r = fm.charWidth(c)-4;
      ////g2d.setPaint(Color.GRAY);
      //g2d.drawRect(x+2, y+4-fm.getAscent(), r, r);
      ////g2d.setPaint(Color.GRAY.brighter());
      //g2d.fillOval(x+2, y+4-fm.getAscent(), r, r);
      //return x + fm.charWidth(c);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、下の&lt;code&gt;JPasswordField&lt;/code&gt;のエコー文字を独自の図形に変更しています。またこの図形のサイズを上の&lt;code&gt;JPasswordField&lt;/code&gt;のエコー文字と幅を合わせるために同じ文字を&lt;code&gt;setEchoChar&lt;/code&gt;しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/passwordview</link>
                <guid>http://terai.xrea.jp/swing/passwordview</guid>
                <pubDate>2006-12-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSliderのUIや色を変更する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSlider&lt;/code&gt;のトラックやつまみ、色などを変更して、音量調節風のスライダーを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/VolumeSlider&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWc-B0OXI/AAAAAAAAApQ/t1b78yBXWUQ/s800/VolumeSlider.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TriangleSliderUI extends javax.swing.plaf.metal.MetalSliderUI {
  @Override public void paintThumb(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2.fillOval(thumbRect.x,thumbRect.y,thumbRect.width,thumbRect.height);
  }
  @Override public void paintTrack(Graphics g) {
    int cx, cy, cw, ch;
    int pad;
    Rectangle trackBounds = trackRect;
    if(slider.getOrientation() == JSlider.HORIZONTAL ) {
      Graphics2D g2 = (Graphics2D)g;

//......

slider2.setUI(new javax.swing.plaf.metal.MetalSliderUI() {
  @Override protected void paintHorizontalLabel(Graphics g, int v, Component l) {
    JLabel lbl = (JLabel)l;
    lbl.setForeground(Color.GREEN);
    super.paintHorizontalLabel(g,v,lbl);
  }
});
slider2.setForeground(Color.BLUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上の&lt;code&gt;JSlider&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalSliderUI&lt;/code&gt;を継承する&lt;code&gt;SliderUI&lt;/code&gt;をセットしています。この&lt;code&gt;SliderUI&lt;/code&gt;は、&lt;code&gt;paintThumb(Graphics)&lt;/code&gt;メソッドをオーバーライドしてつまみの形を変更、&lt;code&gt;paintTrack(Graphics)&lt;/code&gt;メソッドをオーバーライドしてトラックの形と色を変更します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下の&lt;code&gt;JSlider&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSlider#setForeground(Color)&lt;/code&gt;で、目盛のキャプションの色を青にしています。また、&lt;code&gt;MetalSliderUI&lt;/code&gt;を継承する&lt;code&gt;SliderUI&lt;/code&gt;を作成して、&lt;code&gt;paintHorizontalLabel(Graphics, int, Component)&lt;/code&gt;メソッドをオーバーライドし目盛を緑色に変更しています。&lt;/li&gt;
&lt;li&gt;別の方法: &lt;a href=&quot;http://terai.xrea.jp/Swing/SliderLabelTable.html&quot;&gt;JSliderの目盛にアイコンや文字列を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;注意点

&lt;ul&gt;
&lt;li&gt;垂直方向には対応していません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1375990&quot;&gt;Swing - Problem in changing forground color of JSlider!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SliderLabelTable.html&quot;&gt;JSliderの目盛にアイコンや文字列を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java SE 6 Runtime (JRE) Update N build 12 Kernel Installer&lt;/code&gt;だと、&lt;code&gt;NullPointerException&lt;/code&gt;が発生する？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-03 (月) 19:34:50&lt;/li&gt;
&lt;li&gt;&lt;del&gt;別方法のメモ:&lt;/del&gt; &lt;a href=&quot;http://terai.xrea.jp/Swing/TriangleTickSlider.html&quot;&gt;JSliderの目盛りをアイコンに変更する&lt;/a&gt;に移動 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-05-19 (水) 16:52:13&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5099681&quot;&gt;Bug ID: 5099681 Windows/Motif L&amp;amp;F: JSlider should use foreground color for ticks.&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-05-20 (木) 17:24:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/volumeslider</link>
                <guid>http://terai.xrea.jp/swing/volumeslider</guid>
                <pubDate>2006-12-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセルのアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;の選択されたセルをアニメーションさせます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ListCellAnimation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPa7B8VkI/AAAAAAAAAd8/uLpJ50Oxwf8/s800/ListCellAnimation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class AnimeListCellRenderer extends JPanel implements ListCellRenderer {
  private static final Color selectedColor = new Color(230,230,255);
  private final AnimeIcon icon = new AnimeIcon();
  private final MarqueeLabel label = new MarqueeLabel();
  private final javax.swing.Timer animator;
  private final JList list;
  private boolean isRunning = false;
  public AnimeListCellRenderer(final JList l) {
    super(new BorderLayout());
    this.list = l;
    animator = new Timer(80, new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        int i = l.getSelectedIndex();
        if(isRunning=(i&amp;gt;=0)) l.repaint(l.getCellBounds(i,i));
      }
    });
    setOpaque(true);
    add(icon,  BorderLayout.WEST);
    add(label);
    animator.start();
  }
  @Override public Component getListCellRendererComponent(JList list, Object object,
            int index, boolean isSelected, boolean cellHasFocus) {
    setBackground(isSelected ? selectedColor : list.getBackground());
    label.setText((object==null) ? &quot;&quot; : object.toString());
    animate_index = index;
    return this;
  }
  private boolean isAnimatingCell() {
    return isRunning &amp;amp;&amp;amp; animate_index==list.getSelectedIndex();
  }
  int animate_index = -1;
  private class MarqueeLabel extends JLabel {
  //...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、セルが選択されると左のアイコンがアニメーションし、文字列がクリップされている場合は、スクロールするようになっています。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;選択されたセルだけ再描画しているのではなく、&lt;code&gt;ActionListener&lt;/code&gt;を実装したセルレンダラーを作成して&lt;code&gt;JList&lt;/code&gt;全体を&lt;code&gt;repaint&lt;/code&gt;しています。&lt;/del&gt;
選択されたセルだけ再描画してアニメーションを行っています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimeIcon.html&quot;&gt;Timerでアニメーションするアイコンを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollingMessage.html&quot;&gt;GlyphVectorで文字列を電光掲示板風にスクロール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;選択されたセルのみ再描画、&lt;code&gt;JScrollPane&lt;/code&gt;に対応、スクリーンショット更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-13 (火) 14:53:51&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/listcellanimation</link>
                <guid>http://terai.xrea.jp/swing/listcellanimation</guid>
                <pubDate>2006-11-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserに画像プレビューを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;に画像のプレビュー機能を追加します。プレビューを表示するコンポーネントは、チュートリアルの&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/FileChooserDemo2Project/src/components/ImagePreview.java&quot;&gt;ImagePreview.java&lt;/a&gt;をそのまま利用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PreviewAccessory&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRN6_UpeI/AAAAAAAAAg0/eJZas5kcb34/s800/PreviewAccessory.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;fileChooser = new JFileChooser();
fileChooser.setAccessory(new ImagePreview(fileChooser));
//...

//http://docs.oracle.com/javase/tutorial/uiswing/examples/components/FileChooserDemo2Project/src/components/ImagePreview.java
class ImagePreview extends JComponent implements PropertyChangeListener {
  private static final int PREVIEW_WIDTH  = 90;
  private static final int PREVIEW_MARGIN = 5;
  private ImageIcon thumbnail = null;
  private File file = null;
  public ImagePreview(JFileChooser fc) {
    setPreferredSize(new Dimension(PREVIEW_WIDTH+PREVIEW_MARGIN*2, 50));
    fc.addPropertyChangeListener(this);
  }
  public void loadImage() {
    if(file == null) {
      thumbnail = null;
      return;
    }
    ImageIcon tmpIcon = new ImageIcon(file.getPath());
    if(tmpIcon.getIconWidth()&amp;gt;PREVIEW_WIDTH) {
      //Image img = tmpIcon.getImage().getScaledInstance(
      //     PREVIEW_WIDTH,-1,Image.SCALE_DEFAULT);
      //The Perils of Image.getScaledInstance() | Java.net
      //http://today.java.net/pub/a/today/2007/04/03/perils-of-image-getscaledinstance.html
      float scale = PREVIEW_WIDTH/(float)tmpIcon.getIconWidth();
      int newW = (int)(tmpIcon.getIconWidth()  * scale);
      int newH = (int)(tmpIcon.getIconHeight() * scale);
      BufferedImage img = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);
      Graphics2D g2 = (Graphics2D)img.getGraphics();
      g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                          RenderingHints.VALUE_INTERPOLATION_BILINEAR);
      g2.drawImage(tmpIcon.getImage(), 0, 0, newW, newH, null);
      g2.dispose();
      thumbnail = new ImageIcon(img);
    }else{
      thumbnail = tmpIcon;
    }
  }
  @Override public void propertyChange(PropertyChangeEvent e) {
    boolean update = false;
    String prop = e.getPropertyName();
    if(JFileChooser.DIRECTORY_CHANGED_PROPERTY.equals(prop)) {
      file = null;
      update = true;
    }else if(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(prop)) {
      file = (File)e.getNewValue();
      update = true;
    }
    if(update) {
      thumbnail = null;
      if(isShowing()) {
        loadImage();
        repaint();
      }
    }
  }
  @Override protected void paintComponent(Graphics g) {
    if(thumbnail==null) {
      loadImage();
    }
    if(thumbnail!=null) {
      int x = getWidth()/2  - thumbnail.getIconWidth()/2;
      int y = getHeight()/2 - thumbnail.getIconHeight()/2;
      if(y &amp;lt; 0)              y = 0;
      if(x &amp;lt; PREVIEW_MARGIN) x = PREVIEW_MARGIN;
      thumbnail.paintIcon(this, g, x, y);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のファイルチューザーでは、画像ファイルを選択すると、そのプレビューが表示されます。プレビューコンポーネントは、&lt;code&gt;JFileChooser#setAccessory(JComponent)&lt;/code&gt;メソッドで、ファイルチューザーに追加しています。&lt;/p&gt;

&lt;p&gt;プレビュー側でファイルの選択、解除などのイベントを受け取るために、&lt;code&gt;PropertyChangeListener&lt;/code&gt;を実装する必要があります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bekkoame.ne.jp/%7Ebootan/free2.html&quot;&gt;デジタル出力工房　絵写楽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/previewaccessory</link>
                <guid>http://terai.xrea.jp/swing/previewaccessory</guid>
                <pubDate>2006-11-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GlyphVectorで文字列を電光掲示板風にスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GlyphVector&lt;/code&gt;を生成して、これを電光掲示板のようにスクロールさせます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollingMessage&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTSlbxO22I/AAAAAAAAAjA/SJLXTaAYArY/s800/ScrollingMessage.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MarqueePanel extends JComponent implements ActionListener {
  public final javax.swing.Timer animator;
  private final GlyphVector gv;
  private float xx, yy;
  public MarqueePanel() {
    super();
    animator = new javax.swing.Timer(10, this);
    String text = &quot;asffdfaaAAASFDsfasdfsdfasdfasd&quot;;
    Font font = new Font(Font.SERIF, Font.PLAIN, 100);
    FontRenderContext frc = new FontRenderContext(null,true,true);
    gv = font.createGlyphVector(frc, text);
    LineMetrics lm = font.getLineMetrics(text, frc);
    yy = lm.getAscent()/2f + (float)gv.getVisualBounds().getY();
  }
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    int cw = getWidth();
    int ch = getHeight();
    g2.setPaint(Color.WHITE);
    g2.draw(new Line2D.Float(0,ch/2f,cw,ch/2f));
    g2.setPaint(Color.BLACK);
    g2.drawGlyphVector(gv, cw-xx, ch/2f-yy);
    xx = (cw+gv.getVisualBounds().getWidth()-xx &amp;gt; 0) ? xx+2f : 0f;
  }
  @Override public void actionPerformed(ActionEvent e) {
    repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GlyphVector&lt;/code&gt;や&lt;code&gt;LineMetrics&lt;/code&gt;から、テキストの&lt;code&gt;VisualBounds&lt;/code&gt;や&lt;code&gt;Ascent&lt;/code&gt;を取得して、文字列を描画する位置などを計算しています。&lt;/p&gt;

&lt;p&gt;以下のように&lt;code&gt;TextLayout&lt;/code&gt;を使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TextLayout tl = new TextLayout(text, font, frc);
Rectangle2D b = tl.getBounds();
yy = tl.getAscent()/2f + (float)b.getY();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollingmessage</link>
                <guid>http://terai.xrea.jp/swing/scrollingmessage</guid>
                <pubDate>2006-11-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの縦横比を一定にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;の幅と高さの比率が一定になるように制限します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ConstrainedProportions&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTKJeWlAAI/AAAAAAAAAVg/GMclfo0TYBM/s800/ConstrainedProportions.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final int mw = 320;
final int mh = 200;
frame.addComponentListener(new ComponentAdapter() {
  @Override public void componentResized(ComponentEvent e) {
    int fw = frame.getSize().width;
    int fh = mh*fw/mw;
    frame.setSize((mw&amp;gt;fw)?mw:fw, (mh&amp;gt;fh)?mh:fh);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFrame&lt;/code&gt;のサイズを変更した後、その幅から縦横比が同じになるような高さを計算して、&lt;code&gt;JFrame#setSize(int,int)&lt;/code&gt;でサイズを設定し直しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MinimumFrame.html&quot;&gt;JFrameの最小サイズ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DynamicLayout.html&quot;&gt;DynamicLayoutでレイアウトの動的評価&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;これはドラッグ中は自由なサイズでボタンを離したときにサイズが正しく変更されます。ドラッグ中も正しい比率になるのは無理でしょうか？ --  2007-11-10 (土) 00:17:13

&lt;ul&gt;
&lt;li&gt;ども。今の&lt;code&gt;Java&lt;/code&gt;だけだと難しいかもしれません。すこし調べてみます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-12 (月) 11:45:22&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/constrainedproportions</link>
                <guid>http://terai.xrea.jp/swing/constrainedproportions</guid>
                <pubDate>2006-11-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontを回転する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;文字のアウトラインを取得して、これを回転してみます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TransformedShape&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTVtRPTfJI/AAAAAAAAAoE/Qiy0jcMt_l0/s800/TransformedShape.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class FontRotateAnimation extends JComponent implements ActionListener {
  private final javax.swing.Timer animator;
  private int rotate;
  private final Shape shape;
  private Shape s;
  public FontRotateAnimation(String str) {
    super();
    animator = new javax.swing.Timer(5, this);
    addHierarchyListener(new HierarchyListener() {
      @Override public void hierarchyChanged(HierarchyEvent e) {
        JComponent c = (JComponent)e.getSource();
        if((e.getChangeFlags() &amp;amp; HierarchyEvent.DISPLAYABILITY_CHANGED)!=0 &amp;amp;&amp;amp;
           animator!=null &amp;amp;&amp;amp; !c.isDisplayable()) {
          animator.stop();
        }
      }
    });
    Font font = new Font(Font.SERIF, Font.PLAIN, 200);
    FontRenderContext frc = new FontRenderContext(null, true, true);
    shape = new TextLayout(str, font, frc).getOutline(null);
    s = shape;
    animator.start();
  }
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setPaint(Color.BLACK);
    g2.fill(s);
  }
  @Override public void actionPerformed(ActionEvent e) {
    repaint(s.getBounds());
    Rectangle2D b = shape.getBounds();
    Point2D.Double p = new Point2D.Double(
        b.getX() + b.getWidth()/2d, b.getY() + b.getHeight()/2d);
    AffineTransform at = AffineTransform.getRotateInstance(
        Math.toRadians(rotate), p.getX(), p.getY());
    AffineTransform toCenterAT = AffineTransform.getTranslateInstance(
        getWidth()/2d - p.getX(), getHeight()/2d - p.getY());
    Shape s1 = at.createTransformedShape(shape);
    s = toCenterAT.createTransformedShape(s1);
    repaint(s.getBounds());
    rotate = (rotate&amp;gt;=360) ? 0 : rotate+2;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;TextLayout&lt;/code&gt;から文字列のアウトラインを&lt;code&gt;Shape&lt;/code&gt;として取得しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/transformedshape</link>
                <guid>http://terai.xrea.jp/swing/transformedshape</guid>
                <pubDate>2006-10-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Menuに半透明の影を付ける</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;メニューに半透明の影を付けます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MenuWithShadow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPz0ZEG6I/AAAAAAAAAek/pd0ErBB9eBg/s800/MenuWithShadow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class CustomPopupMenuUI extends BasicPopupMenuUI {
  public static ComponentUI createUI(JComponent c) {
    return new CustomPopupMenuUI();
  }
  private static boolean isHeavyWeightContainer(Component contents) {
    for(Container p=contents.getParent();p!=null;p=p.getParent()) {
      if((p instanceof JWindow) || (p instanceof Panel)) {
        return true;
      }
    }
    return false;
  }
  public Popup getPopup(JPopupMenu popup, int x, int y) {
    Popup pp = super.getPopup(popup,x,y);
    JPanel panel = (JPanel)popup.getParent();
    if(isHeavyWeightContainer(panel)) {
        System.out.println(&quot;outer&quot;);
        Point p = new Point(x,y);
        panel.setBorder(new ShadowBorder(panel,p));
    }else{
        System.out.println(&quot;inner&quot;);
        panel.setBorder(new ShadowBorderInPanel());
    }
    panel.setOpaque(false);
    return pp;
  }
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicPopupMenuUI&lt;/code&gt;を継承した、&lt;code&gt;CustomPopupMenuUI&lt;/code&gt;を作成して、これを&lt;code&gt;UIManager&lt;/code&gt;に登録しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;PopupMenuUI&quot;,&quot;example.CustomPopupMenuUI&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この&lt;code&gt;CustomPopupMenuUI&lt;/code&gt;では、ポップアップメニューがフレームの中にあるか外にあるかで、影のつけ方を切り替えています。外にある場合は、&lt;code&gt;Robot&lt;/code&gt;を使って画面をキャプチャーしています。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;メニューがフレームの外にはみ出す場合に、メニューをすばやく切り替えたりすると、ゴミが残ることがあるようです。参考リンクの&lt;code&gt;contrib.com.jgoodies.looks.common.ShadowPopupFactory&lt;/code&gt;を使っても同様のゴミが出る場合があります。&lt;/del&gt; 再現しなくなった？ようです。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;contrib.com.jgoodies.looks.common.ShadowPopupFactory&lt;/code&gt;を使用しても、同様の影を作成することができます。&lt;a href=&quot;http://www.jgoodies.com/&quot;&gt;JGoodies | We make Java look good and work well&lt;/a&gt;などからダウンロードして、以下のように設定してみてください。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//UIManager.put(&quot;PopupMenuUI&quot;,&quot;example.CustomPopupMenuUI&quot;);
contrib.com.jgoodies.looks.common.ShadowPopupFactory.install();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Web Start&lt;/code&gt;で起動してフレームの外側にメニューが表示される場合は、&lt;code&gt;java.security.AccessControlException: access denied (java.awt.AWTPermission createRobot)&lt;/code&gt;が発生します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/toc.html&quot;&gt;Java Swing Hacks #11 ドロップシャドウ付きのメニューを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jgoodies.com/&quot;&gt;JGoodies | We make Java look good and work well&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contrib.com.jgoodies.looks.common.ShadowPopupFactory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DropShadowPopup.html&quot;&gt;JPopupMenuに半透明の影を付ける&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ポップアップメニューがフレーム内にあるかどうかではなく、&lt;code&gt;HeavyWeightContainer&lt;/code&gt;かどうかで影のつけ方を切り替えるように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-29 (木) 16:13:30&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/menuwithshadow</link>
                <guid>http://terai.xrea.jp/swing/menuwithshadow</guid>
                <pubDate>2006-10-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MouseWheelで画像のズームイン・アウト表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;マウスホイールなどで画像をズームイン、ズームアウトします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Zoom&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTW1yBNHvI/AAAAAAAAAp4/ba6eQ-Ul2sg/s800/Zoom.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ZoomImage extends JComponent implements MouseWheelListener {
  private final ImageIcon icon;
  private final int iw;
  private final int ih;
  private double scale = 1.0d;
  public ZoomImage(final ImageIcon icon) {
    super();
    this.icon = icon;
    iw = icon.getIconWidth();
    ih = icon.getIconHeight();
    addMouseWheelListener(this);
  }
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D) g;
    g2.scale(scale, scale);
    g2.drawImage(icon.getImage(), 0, 0, iw, ih, this);
  }
  @Override public void mouseWheelMoved(MouseWheelEvent e) {
    changeScale(e.getWheelRotation());
  }
  public void initScale() {
    scale = 1.0d;
    repaint();
  }
  @Override public void changeScale(int iv) {
    scale = Math.max(0.05d, Math.min(5.0d, scale-iv*0.05d));
    repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルではホイールの上回転で拡大、下回転で縮小しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ZoomingAndPanning.html&quot;&gt;JPanelに表示した画像のズームとスクロール&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;を使用せずに、画像のズーム、スクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ih = icon.getIconWidth();&lt;/code&gt;の部分は&lt;code&gt;getIconHeight();&lt;/code&gt;ではありませんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/syo.html&quot;&gt;syo&lt;/a&gt; 2007-05-18 (金) 13:11:04

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。スクリーンショットもよく見たら中の画像が正方形になってますね(^^;。修正しておきます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-18 (金) 13:25:06&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/zoom</link>
                <guid>http://terai.xrea.jp/swing/zoom</guid>
                <pubDate>2006-10-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaから一行ずつ文字列を取得</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;などのテキストコンポーネントから一行ずつ文字列を取り出してそれを処理します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GetLineText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTNWn74dWI/AAAAAAAAAao/pNdeF8CSOfM/s800/GetLineText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;int count = 0;
StringTokenizer st = new StringTokenizer(textArea.getText(), &quot;\n&quot;) ;
while(st.hasMoreTokens()) {
  if(st.nextToken().startsWith(&quot;#&quot;)) {
    count++;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextArea#getText()&lt;/code&gt;ですべてのテキストを取得し、&lt;code&gt;StringTokenizer&lt;/code&gt;を使って行毎に分解しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String#split&lt;/code&gt;を使用する場合&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;for(String line: textArea.getText().split(&quot;\\n&quot;)) {
  if(line.startsWith(&quot;#&quot;)) {
    count++;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LineNumberReader&lt;/code&gt;を使用する場合&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try(LineNumberReader lnr = new LineNumberReader(new StringReader(textArea.getText()))) {
  String line = null;
  while((line = lnr.readLine()) != null) {
    if(line.startsWith(&quot;#&quot;)) {
      count++;
    }
  }
}catch(IOException ioe) {
  ioe.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Element#getElementCount&lt;/code&gt;を使用する場合&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Document doc = textArea.getDocument();
Element root = doc.getDefaultRootElement();
try{
  for(int i=0;i&amp;lt;root.getElementCount();i++) {
    Element elem = root.getElement(i);
    String line = doc.getText(elem.getStartOffset(), elem.getEndOffset()-elem.getStartOffset());
    if(line.startsWith(&quot;#&quot;)) {
      count++;
    }
  }
}catch(BadLocationException ble) {
  ble.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/getlinetext</link>
                <guid>http://terai.xrea.jp/swing/getlinetext</guid>
                <pubDate>2006-10-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaの任意の行まで移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;指定した行番号が&lt;code&gt;JTextArea&lt;/code&gt;の中で先頭にくるようにジャンプします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GotoLine&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNdpDdyKI/AAAAAAAAAa0/cOjr09yncHI/s800/GotoLine.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton button = new JButton(new AbstractAction(&quot;Goto Line&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    Document doc = textArea.getDocument();
    Element root = doc.getDefaultRootElement();
    int i = 1;
    try{
      i = Integer.parseInt(textField.getText().trim());
      i = Math.max(1, Math.min(root.getElementCount(), i));
    }catch(NumberFormatException nfe) {
      java.awt.Toolkit.getDefaultToolkit().beep();
      return;
    }
    try{
      Element elem = root.getElement(i-1);
      Rectangle rect = textArea.modelToView(elem.getStartOffset());
      Rectangle vr = scroll.getViewport().getViewRect();
      rect.setSize(10, vr.height);
      textArea.scrollRectToVisible(rect);
      textArea.setCaretPosition(elem.getStartOffset());
      //textArea.requestFocus();
    }catch(BadLocationException ble) {
      java.awt.Toolkit.getDefaultToolkit().beep();
    }
  }
});
frame.getRootPane().setDefaultButton(button);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、任意の行番号を指定して&lt;kbd&gt;Enter&lt;/kbd&gt;キー、またはボタンをクリックすると、&lt;code&gt;1&lt;/code&gt;から最大行数までの範囲で、その行が先頭にくるように表示位置が変更されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JTextArea#setCaretPosition(int)&lt;/code&gt;メソッドによるキャレットの位置変更だけでは、移動先を移動元より大きな行番号にした場合、&lt;code&gt;JTextArea&lt;/code&gt;の下までしかスクロールしないので、&lt;code&gt;JTextArea#modelToView(int)&lt;/code&gt;メソッドで取得した座標が出来るだけ上部にくるように処理しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SmoothScroll.html&quot;&gt;JTextAreaでSmoothScrollによる行移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/gotoline</link>
                <guid>http://terai.xrea.jp/swing/gotoline</guid>
                <pubDate>2006-10-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaの行をマウスでロールオーバー表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;のマウスカーソルがある行をロールオーバー表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MouseOverPainter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTQFUVNyQI/AAAAAAAAAfA/cTsyoFPSNEg/s800/MouseOverPainter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightCursorTextArea extends JTextArea {
  public HighlightCursorTextArea() {
    super();
    setOpaque(false);
    RollOverListener rol = new RollOverListener();
    addMouseMotionListener(rol);
    addMouseListener(rol);
  }
  private final Color linecolor = new Color(250,250,220);
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    Insets i = getInsets();
    int h = g2.getFontMetrics().getHeight();
    int y = rollOverRowIndex*h+i.top;
    g2.setPaint(linecolor);
    g2.fillRect(i.left, y, getSize().width-i.left-i.right, h);
    super.paintComponent(g);
  }
  private int rollOverRowIndex = -1;
  private class RollOverListener extends MouseInputAdapter {
    @Override public void mouseExited(MouseEvent e) {
      rollOverRowIndex = -1;
      repaint();
    }
    @Override public void mouseMoved(MouseEvent e) {
      int row = getLineAtPoint(e.getPoint());
      if(row != rollOverRowIndex) {
        rollOverRowIndex = row;
        repaint();
      }
    }
    @Override public int getLineAtPoint(Point pt) {
      Element root = getDocument().getDefaultRootElement();
      return root.getElementIndex(viewToModel(pt));
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MouseInputAdapter&lt;/code&gt;を継承した&lt;code&gt;RollOverListener&lt;/code&gt;で、マウスカーソルのある行を記憶し、&lt;code&gt;JTextArea#paintComponent&lt;/code&gt;メソッドをオーバーライドして、その行の背景に色を付けています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mouseoverpainter</link>
                <guid>http://terai.xrea.jp/swing/mouseoverpainter</guid>
                <pubDate>2006-09-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolBarのドッキングを上下のみに制限</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolBar&lt;/code&gt;のドッキングを上下のみに制限して、左右を無視するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DockingConstraint&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLq6lRV0I/AAAAAAAAAX8/dKnoZJh1xrM/s800/DockingConstraint.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;toolbar.setUI(new BasicToolBarUI() {
  @Override public boolean canDock(Component c, Point p) {
    return super.canDock(c, p) ? isHorizontalDockingConstraint(c, p) : false;
  }
  private boolean isHorizontalDockingConstraint(Component c, Point p) {
    if (!c.contains(p)) return false;
    int iv = (toolBar.getOrientation() == JToolBar.HORIZONTAL)
                  ? toolBar.getSize().height
                  : toolBar.getSize().width;
    if (p.x &amp;gt;= c.getWidth() - iv) {
      return false;
    }else if (p.x &amp;lt; iv) {
      return false;
    }else{
      return true;
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JToolBar&lt;/code&gt;は上下のみドッキングできるようになっているため、&lt;code&gt;JComboBox&lt;/code&gt;のような横長のコンポーネントを配置している場合でもレイアウトが崩れにくくなっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ToolBarUI#canDock(Component, Point)&lt;/code&gt;メソッドをオーバーライドして、左右の場合は&lt;code&gt;false&lt;/code&gt;を返すようにしています。&lt;/p&gt;

&lt;p&gt;ドッキングできるかどうかを判定している&lt;code&gt;BasicToolBarUIのgetDockingConstraint&lt;/code&gt;メソッドが&lt;code&gt;private&lt;/code&gt;のため、サンプルコードでは、これをコピーしてすこしだけ条件を変更した&lt;code&gt;isHorizontalDockingConstraint&lt;/code&gt;メソッドを作成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;BorderLayout&lt;/code&gt;の&lt;code&gt;WEST&lt;/code&gt;と&lt;code&gt;EAST&lt;/code&gt;に、適当なダミーコンポーネント(例えばサイズ&lt;code&gt;0&lt;/code&gt;の&lt;code&gt;Box&lt;/code&gt;)を配置するだけで、同様にドッキングをブロック出来るようです。こちらの方が、&lt;code&gt;LookAndFeel&lt;/code&gt;への影響もなく簡単です。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JPanel panel = new JPanel(new BorderLayout());
panel.add(toolbar, BorderLayout.NORTH);
panel.add(Box.createRigidArea(new Dimension()), BorderLayout.WEST);
panel.add(Box.createRigidArea(new Dimension()), BorderLayout.EAST);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dockingconstraint</link>
                <guid>http://terai.xrea.jp/swing/dockingconstraint</guid>
                <pubDate>2006-09-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのセルをカーソル移動でロールオーバー</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;でマウスカーソルの下にあるセルをハイライト表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RollOverListener&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTSE8rUioI/AAAAAAAAAiM/4EMPSFpuBVo/s800/RollOverListener.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RollOverList extends JList {
  private int rollOverRowIndex = -1;
  public RollOverList() {
    super();
    RollOverListener rol = new RollOverListener();
    addMouseMotionListener(rol);
    addMouseListener(rol);
    setCellRenderer(new RollOverCellRenderer());
  }
  private class RollOverCellRenderer extends DefaultListCellRenderer{
    @Override public Component getListCellRendererComponent(
            JList list, Object value, int index,
            boolean isSelected, boolean cellHasFocus) {
      Component c = super.getListCellRendererComponent(
          list, value, index, isSelected, cellHasFocus);
      if(index == rollOverRowIndex) {
        c.setBackground(new Color(220,240,255));
        if(isSelected) c.setForeground(Color.BLACK);
      }
      return c;
    }
  }
  private class RollOverListener extends MouseInputAdapter {
    @Override public void mouseExited(MouseEvent e) {
      rollOverRowIndex = -1;
      repaint();
    }
    @Override public void mouseMoved(MouseEvent e) {
      int row = locationToIndex(e.getPoint());
      if(row != rollOverRowIndex) {
        rollOverRowIndex = row;
        repaint();
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MouseInputAdapter&lt;/code&gt;をオーバーライドして、マウスカーソルのあるセルを記憶し、&lt;code&gt;JList&lt;/code&gt;をリペイントしてそのセルの背景色などを変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1389010&quot;&gt;Swing - Highlight JTable rows on rollover&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CellHighlight.html&quot;&gt;JTableのセルのハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rolloverlistener</link>
                <guid>http://terai.xrea.jp/swing/rolloverlistener</guid>
                <pubDate>2006-09-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableに行ヘッダを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;に行ヘッダを追加を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableRowHeader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUk9YzW7I/AAAAAAAAAmQ/wjin9CuyfBg/s800/TableRowHeader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RowHeaderList extends JList {
  private final JTable table;
  private final ListSelectionModel tableSelection;
  private final ListSelectionModel rListSelection;
  public RowHeaderList(ListModel model, JTable table) {
    super(model);
    this.table = table;
    setFixedCellHeight(table.getRowHeight());
    setCellRenderer(new RowHeaderRenderer(table.getTableHeader()));
    RollOverListener rol = new RollOverListener();
    addMouseListener(rol);
    addMouseMotionListener(rol);
    tableSelection = table.getSelectionModel();
    rListSelection = getSelectionModel();
  }
  class RowHeaderRenderer extends JLabel implements ListCellRenderer {
    private final JTableHeader header;
    public RowHeaderRenderer(JTableHeader header) {
      this.header = header;
      this.setOpaque(true);
      //this.setBorder(UIManager.getBorder(&quot;TableHeader.cellBorder&quot;));
      this.setBorder(BorderFactory.createMatteBorder(0,0,1,2,Color.GRAY));
      this.setHorizontalAlignment(CENTER);
      this.setForeground(header.getForeground());
      this.setBackground(header.getBackground());
      this.setFont(header.getFont());
    }
    @Override public Component getListCellRendererComponent(JList list, Object value,
               int index, boolean isSelected, boolean cellHasFocus) {
      if(index==pressedRowIndex) {
        setBackground(Color.GRAY);
      }else if(index==rollOverRowIndex) {
        setBackground(Color.WHITE);
      }else if(isSelected) {
        setBackground(Color.GRAY.brighter());
      }else{
        setForeground(header.getForeground());
        setBackground(header.getBackground());
      }
      setText((value==null)?&quot;&quot;:value.toString());
      return this;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JList&lt;/code&gt;で作成した行ヘッダを&lt;code&gt;JScrollPane&lt;/code&gt;に&lt;code&gt;setRowHeaderView&lt;/code&gt;メソッドで追加しています。&lt;/p&gt;

&lt;p&gt;表の余白などに色がついているのは、テストの名残です。特に意味は無いのですが、そのまま残しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;rowHeader.setBackground(Color.BLUE);
scrollPane.setBackground(Color.RED);
scrollPane.getViewport().setBackground(Color.GREEN);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTableExamples1.html&quot;&gt;JTable Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1395446&quot;&gt;Swing - excel styled table?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RollOverListener.html&quot;&gt;JListのセルをカーソル移動でロールオーバー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;不正なセルレンダラーを設定していたので修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-11-16 (木) 20:22:33&lt;/li&gt;
&lt;li&gt;&lt;code&gt;excel&lt;/code&gt;のように、行ヘッダをクリックしてその行が選択されたり、テーブルの本体にてセルをクリックしてそのセルだけが選択されたりすることはできますか？いろいろ試しましたが、なかなかできませんでした。 -- &lt;a href=&quot;http://terai.xrea.jp/javalover.html&quot;&gt;javalover&lt;/a&gt; 2008-03-11 (火) 09:52:12

&lt;ul&gt;
&lt;li&gt;セル選択は、&lt;code&gt;table.setCellSelectionEnabled(true);&lt;/code&gt;で可能です。行ヘッダをクリックしてその行を選択することは、現在でも出来るような。もし、列のことなら、&lt;del&gt;&lt;code&gt;JTableHeader&lt;/code&gt;に以下のようなコードを書けばよさそうです。&lt;/del&gt; &lt;a href=&quot;http://terai.xrea.jp/Swing/ColumnSelection.html&quot;&gt;JTableHeaderをクリックしてそのColumnのセルを全選択&lt;/a&gt;を参考にしてください。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-11 (火) 13:45:47&lt;/li&gt;
&lt;li&gt;あ、もしかして、&lt;a href=&quot;http://terai.xrea.jp/Swing/StripeTable.html&quot;&gt;TableCellRendererでセルの背景色を変更&lt;/a&gt; の例のように、&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;をオーバーライドして行ごとの背景色を変更していますか？　あちらの例では、行選択しか考慮していなので&lt;code&gt;isRowSelected&lt;/code&gt;を使って、一行まるごと選択色で塗りつぶすかどうかを判断しています(&lt;code&gt;table.setCellSelectionEnabled(true)&lt;/code&gt;しても、一行選択されているように見えるようになっている)が、セル選択する場合は、ちゃんと&lt;code&gt;isCellSelected(int,int)&lt;/code&gt;でそのセルが選択されているかを判断する必要があります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-11 (火) 14:48:45&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ここのサンプルを変更して、行列ヘッダクリックで、各行列を選択するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-11 (火) 15:40:58&lt;/li&gt;
&lt;li&gt;プログラム自体大学で始めて触れてる者で参考にさせてもらっています。 -- &lt;a href=&quot;http://terai.xrea.jp/D.Umeda(ES).html&quot;&gt;D.Umeda(ES)&lt;/a&gt; 2009-02-26 (木) 06:14:52&lt;/li&gt;
&lt;li&gt;すいません、上のミスです。改行と思って&lt;code&gt;EnterKey&lt;/code&gt;を..。&lt;code&gt;DefaultTableCellRenderer r1 = (DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer()&lt;/code&gt;をした上でこの&lt;code&gt;r1&lt;/code&gt;を必要な&lt;code&gt;Column&lt;/code&gt;に&lt;code&gt;setCellRenderer&lt;/code&gt;してやれば、その機能は再現できるのではないでしょうか？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ver1.6&lt;/code&gt;環境&lt;code&gt;Vista&lt;/code&gt;で実行しましたが、オンマウス時の背景変化以外は全て実装できているように思います。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;に対して&lt;code&gt;JPanel&lt;/code&gt;を追加、その上にテーブルヘッダを&lt;code&gt;1&lt;/code&gt;行ずつ追加していけば&lt;code&gt;Vista&lt;/code&gt;仕様でも&lt;code&gt;XP&lt;/code&gt;仕様でもオンマウスの変化を再現できますが、&lt;code&gt;Vista&lt;/code&gt;の場合、グラフィックの問題で&lt;code&gt;1px&lt;/code&gt;ずれる上、結局リスナを設定しなければヘッダ選択による行の全選択が出来ないので前者の方が効率が良いですが。&lt;/li&gt;
&lt;li&gt;逐一ヘッダを作って張ってなので後者は処理速度的にも実装形式的にも非効率だと思われます。ちなみに&lt;code&gt;Default&lt;/code&gt;でも&lt;code&gt;TableCellRenderer&lt;/code&gt;でも&lt;code&gt;Vista&lt;/code&gt;上では結果は同じで&lt;code&gt;WindowsClassic&lt;/code&gt;が適応されているように見えます。&lt;/li&gt;
&lt;li&gt;多々間違いがあれば訂正か削除をお願いします。長文、ミス失礼しました。 -- &lt;a href=&quot;http://terai.xrea.jp/D.Umeda(ES).html&quot;&gt;D.Umeda(ES)&lt;/a&gt; 2009-02-26 (木) 06:27:46

&lt;ul&gt;
&lt;li&gt;どうもです。多分以下のような提案だと思っているのですが、合ってます？　処理速度とかは、この程度のサンプルだと、どちらもあまり気にしなくてもいいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-02-26 (木) 13:36:28&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
public class HeaderRendererTest{
  public JComponent makeUI() {
    String[] columnNames = {&quot;&quot;, &quot;String&quot;, &quot;Boolean&quot;};
    Object[][] data = {
      {0, &quot;AAA&quot;, true}, {1, &quot;BBB&quot;, false},
    };
    DefaultTableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
        return getValueAt(0, column).getClass();
      }
    };
    JTable table = new JTable(model);
    table.setRowSelectionAllowed(true);
    table.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

    JTableHeader header = table.getTableHeader();
    header.setReorderingAllowed(false);

    TableCellRenderer hr = header.getDefaultRenderer();
    TableColumn col = table.getColumnModel().getColumn(0);
    col.setCellRenderer(new HeaderRenderer(table, hr));

    JPanel p = new JPanel(new BorderLayout());
    p.add(new JScrollPane(table));
    p.setPreferredSize(new Dimension(320, 160));
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    try{
      UIManager.setLookAndFeel(
        UIManager.getSystemLookAndFeelClassName());
    }catch(Exception e) {
      e.printStackTrace();
    }
    JFrame frame = new JFrame();
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(new HeaderRendererTest().makeUI());
    frame.pack();
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
class HeaderRenderer implements TableCellRenderer {
  private final TableCellRenderer tcr;
  public HeaderRenderer(JTable table, TableCellRenderer tcr) {
    this.tcr  = tcr;
    RollOverListener rol = new RollOverListener();
    table.addMouseListener(rol);
    table.addMouseMotionListener(rol);
  }
  @Override public Component getTableCellRendererComponent(
    JTable tbl, Object val, boolean isS,
    boolean hasF, int row, int col) {
    JLabel l;
    boolean flg = (row==rollOverRowIndex);
    l = (JLabel)tcr.getTableCellRendererComponent(
      tbl, val, isS, flg?flg:hasF, row, col);
    l.setOpaque(!flg);
    return l;
  }
  private int rollOverRowIndex = -1;
  private class RollOverListener extends MouseInputAdapter {
    @Override public void mouseExited(MouseEvent e) {
      rollOverRowIndex = -1;
      JTable table = (JTable)e.getSource();
      table.repaint();
    }
    @Override public void mouseMoved(MouseEvent e) {
      JTable table = (JTable)e.getSource();
      Point pt = e.getPoint();
      int column = table.columnAtPoint(pt);
      rollOverRowIndex = (column==0)?table.rowAtPoint(pt):-1;
      table.repaint();
    }
    @Override public void mouseDragged(MouseEvent e) {}
    @Override public void mousePressed(MouseEvent e) {}
    @Override public void mouseReleased(MouseEvent e) {}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;すばやい返答ありがとうございます。わざわざサンプルまで。自分で定義する&lt;code&gt;HeaderRenderer&lt;/code&gt;は無くとも&lt;code&gt;col.setCellRenderer(hr);&lt;/code&gt;である程度再現できますが、やはりオンマウスやクリックでの変化は&lt;code&gt;UI&lt;/code&gt;観点から見て必要ですね。やはり行ヘッダの領域を見るとどうしても&lt;code&gt;Vista&lt;/code&gt;だとズレが生じてしまうのが気になりますが、結局&lt;code&gt;OS&lt;/code&gt;依存しないプログラムを作ろうとすると&lt;code&gt;Metal&lt;/code&gt;かカスタム&lt;code&gt;UI&lt;/code&gt;ですね。列ヘッダを&lt;code&gt;Vista&lt;/code&gt;,行ヘッダをクラシックにする誤差は生じないのですが。 -- &lt;a href=&quot;http://terai.xrea.jp/D.Umeda.html&quot;&gt;D.Umeda&lt;/a&gt; 2009-02-26 (木) 19:35:46

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vista&lt;/code&gt;は持ってないので、なんとも言えないのですが、&lt;code&gt;XP&lt;/code&gt;でもオレンジのハイライト？が下に付くのはあれですね。まじめにやるなら右につけたいところです。-- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;また醜い状態で設定してしまったorz見苦しいようであれば是非とも削除を。参考になるかは定かではありませんが、&lt;code&gt;javaForum&lt;/code&gt;で掲示したところ次のようなサンプルURLを頂きました。&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/18/row-number-table/&quot;&gt;http://tips4java.wordpress.com/2008/11/18/row-number-table/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;camickrさんとこのブログですね。どこのjavaForum かは知らないのですが、いいとこ突いてると思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;終わりに、わざわざサンプルを提示してくださってありがとうございました。これからも活用させてもらいます。

&lt;ul&gt;
&lt;li&gt;文章で説明するより、サンプルのほうが簡単なので(^^;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;追記になりますが、処理速度の件は私がこれをする前に&lt;code&gt;1&lt;/code&gt;列&lt;code&gt;1&lt;/code&gt;行だけのヘッダを&lt;code&gt;rowHeaderView&lt;/code&gt;のパネルにひたすら並べ続けた、ということを書きたかったんですが、きちんと用語を用いて説明する勉強もしなければいけないようです。データ数によってはヘッダを量産するので非常に非効率だと思ったのですが、勉強しておきます。 -- &lt;a href=&quot;http://terai.xrea.jp/D.Umeda.html&quot;&gt;D.Umeda&lt;/a&gt; 2009-02-26 (木) 19:46:39

&lt;ul&gt;
&lt;li&gt;あー、前者と後者が何を指しているのか誤解してたみたいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こんばんは。&lt;del&gt;ページ上部の「このページを編集する」で、だれでも適当に編集できます。パスワードは日付を更新せずに編集する場合に必要なだけです。&lt;/del&gt; スパムが鬱陶しいので編集禁止にしました(2014-05-16)。とりあえず勝手に改行入れときましたm(_ _)m。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-02-26 (木) 20:15:21&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablerowheader</link>
                <guid>http://terai.xrea.jp/swing/tablerowheader</guid>
                <pubDate>2006-09-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの編集にセルより大きなセルエディタを使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;通常のセルエディタではなく、セルより大きなアイコンを選択する為のセルエディタを使用して&lt;code&gt;JTable&lt;/code&gt;を編集します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LargeCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTO6b-zTJI/AAAAAAAAAdI/UAROdzzun4k/s800/LargeCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class IconTable extends JTable {
  private final MyGlassPane panel = new MyGlassPane();
  private final EditorFromList editor;
  private final JFrame frame;
  private Rectangle rect;

  public IconTable(JFrame _frame, TableModel model, Vector list) {
    super(model);
    setDefaultRenderer(Object.class, new TestRenderer());
    setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    initCellSize(50);
    frame = _frame;
    addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent me) {
        startEditing();
      }
    });
    editor = new EditorFromList(list);
    editor.addKeyListener(new KeyAdapter() {
      @Override public void keyPressed(KeyEvent e) {
        if(e.getKeyCode()==KeyEvent.VK_ESCAPE) {
          cancelEditing();
        }
      }
    });
    editor.addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent me) {
        changeValue(me.getPoint());
      }
    });
    panel.add(editor);
    frame.setGlassPane(panel);
    panel.setVisible(false);
  }
  private void initCellSize(int size) {
    setRowHeight(size);
    JTableHeader tableHeader = getTableHeader();
    tableHeader.setResizingAllowed(false);
    tableHeader.setReorderingAllowed(false);
    TableColumnModel m = getColumnModel();
    for(int i=0;i&amp;lt;m.getColumnCount();i++) {
      TableColumn col = m.getColumn(i);
      col.setMinWidth(size);
      col.setMaxWidth(size);
    }
    setBorder(BorderFactory.createLineBorder(Color.BLACK));
  }
  private void initEditor() {
    Dimension dim = editor.getPreferredSize();
    rect = getCellRect(getSelectedRow(), getSelectedColumn(), true);
    int iv = (dim.width-rect.width)/2;
    Point p = SwingUtilities.convertPoint(this,
                rect.getLocation(), panel);
    rect.setRect(p.x-iv, p.y-iv, dim.width, dim.height);
    editor.setBounds(rect);
    Object o = getValueAt(getSelectedRow(), getSelectedColumn());
    editor.setSelectedValue(o, true);
  }
  public void startEditing() {
    initEditor();
    panel.setVisible(true);
    editor.requestFocusInWindow();
  }
  private void cancelEditing() {
    panel.setVisible(false);
  }
  private void changeValue(Point p) {
    int index = editor.locationToIndex(p);
    Object o = editor.getModel().getElementAt(index);
    if(o != null) {
      setValueAt(o, getSelectedRow(), getSelectedColumn());
    }
    panel.setVisible(false);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;のセルをクリックするとそのセル上にセルエディタが表示されて編集できるようになっています。&lt;/p&gt;

&lt;p&gt;通常のセルエディタは使用しないため、すべてのセルを編集不可にしています。かわりにセルをクリックしたときに、フレームの&lt;code&gt;GlassPane&lt;/code&gt;を有効にして、そこに&lt;code&gt;JList&lt;/code&gt;で作成したアイコン選択エディタや、その影などを描画しています。&lt;/p&gt;

&lt;p&gt;このように&lt;code&gt;GlassPane&lt;/code&gt;を使用しているため、フレームの外にセルエディタを描画することができません。このためサンプルでは&lt;code&gt;JTable&lt;/code&gt;の周りに余白をかなり多めにとっています。&lt;code&gt;JTable&lt;/code&gt;からはみ出す場合(端の方のセルを編集する場合)は、セルエディタの表示位置を内部にずらすように変更するようにしたほうがいいかもしれません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;表示をアニメーションさせたり、音を出したりしても面白そうです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-10-29 (日) 02:03:44&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/largecelleditor</link>
                <guid>http://terai.xrea.jp/swing/largecelleditor</guid>
                <pubDate>2006-08-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>RGBImageFilterでアイコンの色調を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;RGBImageFilter&lt;/code&gt;で色調を変更したアイコンの用意し、評価用コンポーネントを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RatingLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRfRNaARI/AAAAAAAAAhQ/8Rj6Rw8bkwU/s800/RatingLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final ImageProducer ip = orgIcon.getImage().getSource();
private ImageIcon makeStarImageIcon(float[] filter) {
  SelectedImageFilter sif = new SelectedImageFilter(filter);
  return new ImageIcon(
    createImage(new FilteredImageSource(ip, sif)));
}
private class SelectedImageFilter extends RGBImageFilter {
  private final float[] filter;
  public SelectedImageFilter(float[] arrays) {
    filter = new float[arrays.length];
    System.arraycopy(arrays, 0, filter, 0, arrays.length);
    canFilterIndexColorModel = false;
  }
  @Override public int filterRGB(int x, int y, int argb) {
    int r = (int)(((argb &amp;gt;&amp;gt; 16) &amp;amp; 0xff) * filter[0]);
    int g = (int)(((argb &amp;gt;&amp;gt;  8) &amp;amp; 0xff) * filter[1]);
    int b = (int)(((argb      ) &amp;amp; 0xff) * filter[2]);
    return (argb &amp;amp; 0xff000000) | (r&amp;lt;&amp;lt;16) | (g&amp;lt;&amp;lt;8) | (b);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、&lt;code&gt;RGBImageFilter&lt;/code&gt;を使用して、一つのアイコンから複数の色の異なるアイコンを生成し、&lt;code&gt;5&lt;/code&gt;段階の評価を行うコンポーネントを作成しています。クリックしたアイコンの位置が評価レベルになります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.freeiconsdownload.com/Free_Downloads.asp?id=60&quot;&gt;PI Diagona Icons Pack 1.0 - Download Royalty Free Icons and Stock Images For Web &amp;amp; Graphics Design&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;素晴しい！：）--  2006-08-23 (水) 17:34:40

&lt;ul&gt;
&lt;li&gt;どうもです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メモ: 一般的？には&lt;code&gt;Rating Bar&lt;/code&gt;と言うみたいです。&lt;a href=&quot;http://www.masugadesign.com/the-lab/scripts/unobtrusive-ajax-star-rating-bar/&quot;&gt;Masuga Design » Unobtrusive AJAX Star Rating Bar&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-11-07 (火) 12:38:34&lt;/li&gt;
&lt;li&gt;アイコンを変更、アイコンの間隔を設定 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-20 (月) 18:20:50&lt;/li&gt;
&lt;li&gt;スクリーンショットを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-25 (火) 11:19:25&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/ratinglabel</link>
                <guid>http://terai.xrea.jp/swing/ratinglabel</guid>
                <pubDate>2006-08-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListのアイテムを範囲指定で選択</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のアイテムをラバーバンドで範囲指定して選択します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RubberBanding&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSd-lu2aI/AAAAAAAAAi0/AQTsBqR1OUc/s800/RubberBanding.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RubberBandingListener extends MouseInputAdapter {
  @Override public void mouseDragged(MouseEvent e) {
    setFocusable(true);
    if(srcPoint==null) srcPoint = e.getPoint();
    Point destPoint = e.getPoint();
    polygon.reset();
    polygon.addPoint(srcPoint.x,  srcPoint.y);
    polygon.addPoint(destPoint.x, srcPoint.y);
    polygon.addPoint(destPoint.x, destPoint.y);
    polygon.addPoint(srcPoint.x,  destPoint.y);
    //setSelectedIndices(getIntersectsIcons(polygon));
    if(srcPoint.getX()==destPoint.getX() || srcPoint.getY()==destPoint.getY()) {
      line.setLine(srcPoint.getX(),srcPoint.getY(),destPoint.getX(),destPoint.getY());
      setSelectedIndices(getIntersectsIcons(line));
    }else{
      setSelectedIndices(getIntersectsIcons(polygon));
    }
    repaint();
  }
  @Override public void mouseReleased(MouseEvent e) {
    setFocusable(true);
    srcPoint = null;
    repaint();
  }
  @Override public void mousePressed(MouseEvent e) {
    int index = locationToIndex(e.getPoint());
    Rectangle rect = getCellBounds(index,index);
    if(!rect.contains(e.getPoint())) {
      clearSelection();
      getSelectionModel().setAnchorSelectionIndex(-1);
      getSelectionModel().setLeadSelectionIndex(-1);
      //getSelectionModel().setLeadSelectionIndex(getModel().getSize());
      setFocusable(false);
    }else{
      setFocusable(true);
    }
  }
  private int[] getIntersectsIcons(Shape p) {
    ListModel model = getModel();
    Vector&amp;lt;Integer&amp;gt; list = new Vector&amp;lt;&amp;gt;(model.getSize());
    for(int i=0;i&amp;lt;model.getSize();i++) {
      Rectangle r = getCellBounds(i,i);
      if(p.intersects(r)) {
        list.add(i);
      }
    }
    int[] il = new int[list.size()];
    for(int i=0;i&amp;lt;list.size();i++) {
      il[i] = list.get(i);
    }
    return il;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JList&lt;/code&gt;にマウスリスナーを設定して、ドラッグに応じた矩形が描画されるようになっています。&lt;/p&gt;

&lt;p&gt;この矩形の内部にアイテムアイコンが重なる場合は、それを選択状態に変更しています。選択範囲が矩形にならずに直線になっている場合は、別途その直線と交差するアイテムを選択するようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;内のアイテムの配置は、&lt;code&gt;JList#setLayoutOrientation(JList.HORIZONTAL_WRAP)&lt;/code&gt;メソッドを使っているため、水平方向に整列されます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1378164&quot;&gt;Swing - Can someone optimise the following code ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragSelectDropReordering.html&quot;&gt;JListのアイテムをラバーバンドで複数選択、ドラッグ＆ドロップで並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;点線のアニメーション: &lt;a href=&quot;http://programamemo2.blogspot.com/2007/08/java.html&quot;&gt;プログラマメモ2: java ラバーバンドを表現するためのした調べ&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-08-01 (金) 16:24:28&lt;/li&gt;
&lt;li&gt;スクリーンショットなどを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-06 (月) 21:29:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rubberbanding</link>
                <guid>http://terai.xrea.jp/swing/rubberbanding</guid>
                <pubDate>2006-08-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldにフォーカスがある場合の背景色を設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;どの&lt;code&gt;JTextField&lt;/code&gt;を編集しているのかを分かりやすくするために、フォーカスのある&lt;code&gt;JTextField&lt;/code&gt;の背景色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FocusColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTM__NmYpI/AAAAAAAAAaE/EUMDKR-Rwa4/s800/FocusColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static class BGFocusListener implements FocusListener {
  private final Color dColor;
  private final Color oColor;
  public BGFocusListener(Color oColor, Color dColor) {
    this.dColor = dColor;
    this.oColor = oColor;
  }
  @Override public void focusGained(final FocusEvent e) {
    ((JTextField)e.getSource()).setBackground(dColor);
  }
  @Override public void focusLost(final FocusEvent e) {
    ((JTextField)e.getSource()).setBackground(oColor);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;に&lt;code&gt;FocusListener&lt;/code&gt;を追加することで、&lt;code&gt;focusGained&lt;/code&gt;、&lt;code&gt;focusLost&lt;/code&gt;した場合にそれぞれ背景色を変更しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/focuscolor</link>
                <guid>http://terai.xrea.jp/swing/focuscolor</guid>
                <pubDate>2006-08-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのサムネイルをJToolTipで表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ツールチップを使って、&lt;code&gt;JTabbedPane&lt;/code&gt;のサムネイルを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabThumbnail&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUz8_Yw-I/AAAAAAAAAmo/wLoOmG5I3oc/s800/TabThumbnail.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyTabbedPane extends JTabbedPane {
  private int current = -1;
  private static final double SCALE = 0.15d;
  private Component getTabThumbnail(int index) {
    Component c = getComponentAt(index);
    Icon icon = null;
    if(c instanceof JScrollPane) {
      c = ((JScrollPane)c).getViewport().getView();
      Dimension d = c.getPreferredSize();
      int newW = (int)(d.width  * SCALE);
      int newH = (int)(d.height * SCALE);
      BufferedImage image = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);
      Graphics2D g2 = (Graphics2D)image.getGraphics();
      g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
      g2.scale(SCALE,SCALE);
      c.paint(g2);
      g2.dispose();
      icon = new ImageIcon(image);
    }else if(c instanceof JLabel) {
      icon = ((JLabel)c).getIcon();
    }
    return new JLabel(icon);
  }
  @Override public JToolTip createToolTip() {
    int index = current;
    if(index&amp;lt;0) return null;
    final JPanel p = new JPanel(new BorderLayout());
    p.setBorder(BorderFactory.createEmptyBorder());
    p.add(new JLabel(getTitleAt(index)), BorderLayout.NORTH);
    p.add(getTabThumbnail(index));
    JToolTip tip = new JToolTip() {
      @Override public Dimension getPreferredSize() {
        Insets i = getInsets();
        Dimension d = p.getPreferredSize();
        return new Dimension(d.width+i.left+i.right,d.height+i.top+i.bottom);
      }
    };
    tip.setComponent(this);
    LookAndFeel.installColorsAndFont(
        p, &quot;ToolTip.background&quot;, &quot;ToolTip.foreground&quot;, &quot;ToolTip.font&quot;);
    tip.setLayout(new BorderLayout());
    tip.add(p);
    return tip;
  }
  @Override public String getToolTipText(MouseEvent e) {
    int index = indexAtLocation(e.getX(), e.getY());
    String str = (current!=index)?null:super.getToolTipText(e);
    current = index;
    return str;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;マウスカーソルがタブタイトル上にきた場合、そのタブ内部のコンポーネントを縮小して&lt;code&gt;JToolTip&lt;/code&gt;に貼り付けています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bekkoame.ne.jp/%7Ebootan/free2.html&quot;&gt;デジタル出力工房　絵写楽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabthumbnail</link>
                <guid>http://terai.xrea.jp/swing/tabthumbnail</guid>
                <pubDate>2006-07-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaに行ハイライトカーソルを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;のカーソルがある行をハイライト表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineHighlighter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTPQ5j7_JI/AAAAAAAAAds/kbet-1O8x-A/s800/LineHighlighter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightCursorTextArea extends JTextArea {
  private static final Color linecolor = new Color(250,250,220);
  private final DefaultCaret caret;
  public HighlightCursorTextArea() {
    super();
    setOpaque(false);
    caret = new DefaultCaret() {
      @Override protected synchronized void damage(Rectangle r) {
        if(r!=null) {
          JTextComponent c = getComponent();
          x = 0;
          y = r.y;
          width  = c.getSize().width;
          height = r.height;
          c.repaint();
        }
      }
    };
    caret.setBlinkRate(getCaret().getBlinkRate());
    setCaret(caret);
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    Insets i = getInsets();
    int h = caret.height;
    int y = caret.y;
    g2.setPaint(linecolor);
    g2.fillRect(i.left, y, getSize().width-i.left-i.right, h);
    super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;ほぼ、&lt;a href=&quot;http://terai.xrea.jp/Swing/LineCursor.html&quot;&gt;JTextAreaに行カーソルを表示&lt;/a&gt;とやっていることは同じです。&lt;/p&gt;

&lt;p&gt;違うのは、以下の点になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Viewport&lt;/code&gt;の色を&lt;code&gt;scroll.getViewport().setBackground(Color.WHITE)&lt;/code&gt;にする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea#setOpaque(false)&lt;/code&gt;と設定して透明にする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTextArea#paintComponent(...)&lt;/code&gt;をオーバーライドするとき、カーソルのある行を塗りつぶしてから&lt;code&gt;super.paintComponent(g)&lt;/code&gt;する&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1364121&quot;&gt;Swing - Stretching background colour across whole JTextPane for one line of text&lt;/a&gt; の Darryl.Burke さんのコード(以下に部分コピー)のように、&lt;code&gt;BasicTextPaneUI#paintBackground&lt;/code&gt;をオーバーライドする方法(こちらの方がシンプルで美しいかも)もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//JTextPane textPane = new JTextPane();
//textPane.setUI(new LineHighlightTextPaneUI(textPane));
class LineHighlightTextPaneUI extends BasicTextPaneUI {
  private final JTextPane tc;
  public LineHighlightTextPaneUI(JTextPane t) {
    tc = t;
    tc.addCaretListener(new CaretListener() {
      @Override public void caretUpdate(CaretEvent e) {
        tc.repaint();
      }
    });
  }
  @Override public void paintBackground(Graphics g) {
    super.paintBackground(g);
    try{
      Rectangle rect = modelToView(tc, tc.getCaretPosition());
      int y = rect.y;
      int h = rect.height;
      g.setColor(Color.YELLOW);
      g.fillRect(0, y, tc.getWidth(), h);
    }catch(BadLocationException ex) {
      ex.printStackTrace();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これらの方法なら、&lt;code&gt;JTextEditor&lt;/code&gt;や&lt;code&gt;JTextPane&lt;/code&gt;で行の高さが異なる場合でも、うまくハイライトできるようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTPTaywxYI/AAAAAAAAAdw/RIlfRHiC-JY/s800/LineHighlighter1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LineCursor.html&quot;&gt;JTextAreaに行カーソルを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1364121&quot;&gt;Swing - Stretching background colour across whole JTextPane for one line of text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;行の折り返しに対応しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-17 (月) 16:22:56&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/linehighlighter</link>
                <guid>http://terai.xrea.jp/swing/linehighlighter</guid>
                <pubDate>2006-07-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルをエクスプローラ風に表示する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;セルの中にアイコンと文字列を配置し、エクスプローラ風に見えるよう、文字列だけにフォーカスをかけます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExplorerLikeTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMWzLLVKI/AAAAAAAAAZA/k3vF14Jt-V0/s800/ExplorerLikeTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TestRenderer extends Box implements TableCellRenderer {
  private final Border emptyBorder = BorderFactory.createEmptyBorder(1,1,1,1);
  private final ImageIcon nicon;
  private final ImageIcon sicon;
  private final JLabel textLabel;
  private final JLabel iconLabel;
  public TestRenderer(JTable table) {
    super(BoxLayout.X_AXIS);
    textLabel = new JLabel(&quot;dummy&quot;);
    textLabel.setOpaque(true);
    textLabel.setBorder(emptyBorder);
    nicon = new ImageIcon(getClass().getResource(&quot;wi0063-16.png&quot;));
    FilteredImageSource fis = new FilteredImageSource(
      nicon.getImage().getSource(), new SelectedImageFilter());
    sicon = new ImageIcon(createImage(fis));
    iconLabel = new JLabel(nicon);
    iconLabel.setBorder(BorderFactory.createEmptyBorder());
    table.setRowHeight(Math.max(textLabel.getPreferredSize().height,
                  iconLabel.getPreferredSize().height));
    add(iconLabel);
    add(textLabel);
    add(Box.createHorizontalGlue());
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    textLabel.setText(Objects.toString(value, &quot;&quot;));
    FontMetrics fm = table.getFontMetrics(table.getFont());
    int swidth = fm.stringWidth(textLabel.getText())+textLabel.getInsets().left
                                +textLabel.getInsets().right;
    int cwidth = table.getColumnModel().getColumn(column).getWidth()
                   -iconLabel.getPreferredSize().width;
    textLabel.setPreferredSize(new Dimension(swidth&amp;gt;cwidth?cwidth:swidth,0));
    if(isSelected) {
      textLabel.setForeground(table.getSelectionForeground());
      textLabel.setBackground(table.getSelectionBackground());
    }else{
      textLabel.setForeground(table.getForeground());
      textLabel.setBackground(table.getBackground());
    }
    if(hasFocus) {
      textLabel.setBorder(UIManager.getBorder(&quot;Table.focusCellHighlightBorder&quot;));
    }else{
      textLabel.setBorder(emptyBorder);
    }
    textLabel.setFont(table.getFont());
    iconLabel.setIcon(isSelected?sicon:nicon);
    return this;
  }
  private static class SelectedImageFilter extends RGBImageFilter {
    public SelectedImageFilter() {
      canFilterIndexColorModel = false;
    }
    @Override public int filterRGB(int x, int y, int argb) {
      //Color color = new Color(argb,true);
      //float[] array = new float[4];
      //color.getComponents(array);
      //return new Color(array[0]*0.5f, array[1]*0.5f, array[2], array[3]).getRGB();
      int r = (argb &amp;gt;&amp;gt; 16) &amp;amp; 0xff;
      int g = (argb &amp;gt;&amp;gt;  8) &amp;amp; 0xff;
      return (argb &amp;amp; 0xff0000ff) | ((r &amp;gt;&amp;gt; 1) &amp;lt;&amp;lt; 16) | ((g &amp;gt;&amp;gt; 1) &amp;lt;&amp;lt; 8);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Windows Explorer&lt;/code&gt;(ファイルシステム・エクスプローラ)の詳細表示風にするため、以下のような設定をしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;セル間の罫線を非表示(&lt;code&gt;JTable#setShowHorizontalLines&lt;/code&gt;, &lt;code&gt;JTable#setShowVerticalLines&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;ひとつのセルの中でアイコンと文字列を表示するセルレンダラーを作成&lt;/li&gt;
&lt;li&gt;フォーカスが&lt;code&gt;JTable&lt;/code&gt;に無い場合、選択されたセルの背景色をパネルの背景色に変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;このレンダラーでは、アイコンと文字列を別々の&lt;code&gt;JLabel&lt;/code&gt;で作成して並べることで、&lt;code&gt;JList#putClientProperty(&amp;quot;List.isFileList&amp;quot;, Boolean.TRUE)&lt;/code&gt;した場合のように、フォーカスはセルではなく文字列だけに点線で掛かるようになっています。&lt;/p&gt;

&lt;p&gt;選択時にはセル全体の背景色を変更するのではなく、文字列を表示している&lt;code&gt;JLabel&lt;/code&gt;の背景色を変更し、その&lt;code&gt;PreferredSize&lt;/code&gt;を文字列の長さまで縮小して右側に余白を作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows Explorer&lt;/code&gt;との相違点

&lt;ul&gt;
&lt;li&gt;アイコンと文字列以外の場所(セル内)をクリックしても、選択できてしまう

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;での&lt;code&gt;JFileChooser&lt;/code&gt;は、&lt;code&gt;JTable.putClientProperty(&amp;quot;Table.isFileList&amp;quot;, Boolean.TRUE)&lt;/code&gt;を使用？&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableFileList.html&quot;&gt;JTableで文字列をクリックした場合だけセルを選択状態にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;矩形による範囲指定で選択することができない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableFileList.html&quot;&gt;JTableで文字列をクリックした場合だけセルを選択状態にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RubberBanding.html&quot;&gt;JListのアイテムを範囲指定で選択&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ソートすると選択状態がクリアされてしまう&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TableRowSorter&lt;/code&gt;では選択状態を維持するのが標準に&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SelectionKeeper.html&quot;&gt;TableSorterでソートしても選択状態を維持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キー、矢印キーによる選択状態の移動がおかしい&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;編集不可&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableFileList.html&quot;&gt;JTableで文字列をクリックした場合だけセルを選択状態にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/explorerliketable</link>
                <guid>http://terai.xrea.jp/swing/explorerliketable</guid>
                <pubDate>2006-07-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToggleButtonからポップアップメニューを開く</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;クリックするとポップアップメニューを表示する&lt;code&gt;JToggleButton&lt;/code&gt;を作成し、これをツールバーに追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolButtonPopup&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTVg5xIBaI/AAAAAAAAAnw/ds2ybXI2lUE/s800/ToolButtonPopup.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MenuArrowIcon implements Icon {
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setPaint(Color.BLACK);
    g2.translate(x,y);
    g2.drawLine( 2, 3, 6, 3 );
    g2.drawLine( 3, 4, 5, 4 );
    g2.drawLine( 4, 5, 4, 5 );
    g2.translate(-x,-y);
  }
  @Override public int getIconWidth()  { return 9; }
  @Override public int getIconHeight() { return 9; }
}
class MenuToggleButton extends JToggleButton {
  private static final Icon i = new MenuArrowIcon();
  public MenuToggleButton() {
    this(&quot;&quot;, null);
  }
  public MenuToggleButton(Icon icon) {
    this(&quot;&quot;, icon);
  }
  public MenuToggleButton(String text) {
    this(text, null);
  }
  public MenuToggleButton(String text, Icon icon) {
    super();
    Action a = new AbstractAction(text) {
      @Override public void actionPerformed(ActionEvent ae) {
        MenuToggleButton b = (MenuToggleButton)ae.getSource();
        if(pop!=null) pop.show(b, 0, b.getHeight());
      }
    };
    a.putValue(Action.SMALL_ICON, icon);
    setAction(a);
    setFocusable(false);
    setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4+i.getIconWidth()));
  }
  protected JPopupMenu pop;
  @Override public void setPopupMenu(final JPopupMenu pop) {
    this.pop = pop;
    pop.addPopupMenuListener(new PopupMenuListener() {
      @Override public void popupMenuCanceled(PopupMenuEvent e) {}
      @Override public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}
      @Override public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
        setSelected(false);
      }
    });
  }
  @Override protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    Dimension dim = getSize();
    Insets ins = getInsets();
    int x = dim.width-ins.right;
    int y = ins.top+(dim.height-ins.top-ins.bottom-i.getIconHeight())/2;
    i.paintIcon(this, g, x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JToggleButton&lt;/code&gt;の右側に余白を設定して、そこに下向きの矢印を上書きしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコン(矢印ではない)を利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1375327&quot;&gt;Swing - Swing bug? cannot set width of JToggleButton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いつもお世話になっております。&lt;code&gt;JToggleButton&lt;/code&gt;を&lt;code&gt;On/Off&lt;/code&gt;時、背景色を変える方法はありますか？&lt;code&gt;jToggleButton.setBackground(Color.RED);&lt;/code&gt;で試してみましたが、色変化はありませんでした。ご教示、よろしくお願いいたします -- &lt;a href=&quot;http://terai.xrea.jp/Panda.html&quot;&gt;Panda&lt;/a&gt; 2011-04-04 (月) 14:23:21&lt;/li&gt;
&lt;li&gt;こんばんは。&lt;code&gt;JToggleButton#setBackground(Color)&lt;/code&gt;は、&lt;code&gt;LookAndFeel&lt;/code&gt;によっては適用されない場合があります。このため、独自の&lt;code&gt;ToggleButtonUI&lt;/code&gt;を用意したり、例えば以下のような方法を使用する必要があります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-04-04 (月) 17:15:55

&lt;ul&gt;
&lt;li&gt;例&lt;code&gt;1&lt;/code&gt;: 文字列から背景色、縁などのすべてを含めたアイコンを用意して&lt;code&gt;setSelectedIcon&lt;/code&gt;で設定する&lt;/li&gt;
&lt;li&gt;例&lt;code&gt;2&lt;/code&gt;: &lt;code&gt;setContentAreaFilled(false);&lt;/code&gt;として、自前で選択時の背景を描画する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JToggleButton button = new JToggleButton(&quot;text&quot;, icon) {
  @Override public void paintComponent(Graphics g) {
    if(getModel().isSelected()) {
      Graphics2D g2 = (Graphics2D)g.create();
      g2.setColor(getBackground());
      g2.fillRoundRect(0,0,getWidth(),getHeight(),4,4);
      g2.dispose();
    }
    super.paintComponent(g);
    //......
  }
};
button.setBackground(Color.RED);
button.setContentAreaFilled(false);
&lt;/code&gt;&lt;/pre&gt;
</description>
                <link>http://terai.xrea.jp/swing/toolbuttonpopup</link>
                <guid>http://terai.xrea.jp/swing/toolbuttonpopup</guid>
                <pubDate>2006-07-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPopupMenuに半透明の影を付ける</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Robot&lt;/code&gt;で画面をキャプチャーするなどして、半透明の影を&lt;code&gt;JPopupMenu&lt;/code&gt;に付けます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DropShadowPopup&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMBgsMvZI/AAAAAAAAAYg/QBh9VXR7P-I/s800/DropShadowPopup.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ShadowBorder extends AbstractBorder {
  private final int xoff, yoff;
  private final Insets insets;
  private BufferedImage screen = null;
  private BufferedImage shadow = null;

  public ShadowBorder(int x, int y, JComponent c, Point p) {
    this.xoff = x;
    this.yoff = y;
    this.insets = new Insets(0,0,xoff,yoff);
    try{
      Robot robot = new Robot();
      Dimension d = c.getPreferredSize();
      screen = robot.createScreenCapture(
          new Rectangle(p.x, p.y, d.width+xoff, d.height+yoff));
    }catch (java.awt.AWTException ex) {
      ex.printStackTrace();
    }
  }
  @Override public Insets getBorderInsets(Component c) {
    return insets;
  }
  @Override public void paintBorder(Component c, Graphics g,
                                    int x, int y, int w, int h) {
    if(screen==null) return;
    if(shadow==null || shadow.getWidth()!=w || shadow.getHeight()!=h) {
      shadow = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
      Graphics2D g2 = shadow.createGraphics();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      g2.setComposite(
          AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
      g2.setPaint(Color.BLACK);
      for(int i=0;i&amp;lt;xoff;i++) {
        g2.fillRoundRect(xoff, xoff, w-xoff-xoff+i, h-xoff-xoff+i, 4, 4);
      }
      g2.dispose();
    }
    Graphics2D g2d = (Graphics2D)g;
    g2d.drawImage(screen, 0, 0, c);
    g2d.drawImage(shadow, 0, 0, c);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;ポップアップメニューに半透明の影をつける際、フレームからはみ出すかどうかで異なる処理を行っています。&lt;/p&gt;

&lt;p&gt;上記のサンプルコードは、フレームからはみ出す場合に使用する&lt;code&gt;Border&lt;/code&gt;クラスです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フレーム内

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPopupMenu#paintComponent&lt;/code&gt;メソッドで半透明の影を描画しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;フレーム外

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Robot&lt;/code&gt;を使って画面全体をキャプチャーし、これを利用して半透明の影を&lt;code&gt;Border&lt;/code&gt;として作成しています。このためポップアップメニューがはみ出しても、影を付けることができますが、多少時間が掛かります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;や、&lt;code&gt;1.6.0_10&lt;/code&gt;以上の場合は、フレーム外でも&lt;code&gt;Robot&lt;/code&gt;を使用せず、以下のように&lt;code&gt;JPopupMenu&lt;/code&gt;の上位&lt;code&gt;Window&lt;/code&gt;の背景色を透明にすることで影をつけることができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DropShadowPopupMenu extends JPopupMenu {
  private static final int off = 4;
  private BufferedImage shadow = null;
  private Border border = null;
  @Override public boolean isOpaque() {
    return false;
  }
  @Override public void paintComponent(Graphics g) {
    ((Graphics2D)g).drawImage(shadow, 0, 0, this);
    super.paintComponent(g);
  }
  @Override public void show(Component c, int x, int y) {
    if(border==null) {
      Border inner = getBorder();
      Border outer = BorderFactory.createEmptyBorder(0, 0, off, off);
      border = BorderFactory.createCompoundBorder(outer, inner);
    }
    setBorder(border);
    Dimension d = getPreferredSize();
    int w = d.width, h = d.height;
    if(shadow==null || shadow.getWidth()!=w || shadow.getHeight()!=h) {
      shadow = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
      Graphics2D g2 = shadow.createGraphics();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));
      g2.setPaint(Color.BLACK);
      for(int i=0;i&amp;lt;off;i++) {
        g2.fillRoundRect(off, off, w-off-off+i, h-off-off+i, 4, 4);
      }
      g2.dispose();
    }
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        Window pop = SwingUtilities.getWindowAncestor(DropShadowPopupMenu.this);
        if(pop instanceof JWindow) {
          System.out.println(pop instanceof JWindow);
          pop.setBackground(new Color(0,0,0,0)); //JDK 1.7.0
          //com.sun.awt.AWTUtilities.setWindowOpaque(pop, false); //JDK 1.6.0_10
        }
      }
    });
    super.show(c, x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MenuWithShadow.html&quot;&gt;Menuに半透明の影を付ける&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;キャプチャーが遅いのは画面全体を撮っているからで、必要なサイズだけにすれば結構速いようです。サンプルを修正してみたところ、毎回キャプチャーするようにしても特に気にならない速度で動いてます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-18 (火) 12:02:13&lt;/li&gt;
&lt;li&gt;ソース中で&lt;code&gt;isInRootPanel&lt;/code&gt;がおかしい気がするのですが・・・&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;convertPointToScreen&lt;/code&gt;がいらないのと&lt;code&gt;return r.contains(pt)&amp;amp;&amp;amp;r.contains(p)&lt;/code&gt;にしないとフレーム内の判定がおかしいようです -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2006-10-05 (木) 11:23:39
    - ご指摘ありがとうごさいます。&lt;code&gt;convertPointToScreen&lt;/code&gt;を削除して、&lt;code&gt;MyPopupMenu#isInRootPanel&lt;/code&gt;は以下のように修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-10-05 (木) 12:34:12&lt;/p&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private boolean isInRootPanel(JComponent root, Point p) {
  Rectangle r = root.getBounds();
  Dimension d = this.getPreferredSize();
  //pointed out by sawshun
  return r.contains(p.x, p.y, d.width+off, d.height+off);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;https://forums.oracle.com/thread/1393754&quot;&gt;Swing - Can popup menu events be consumed by other (e.g. background) components?&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-10 (木) 18:24:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final MyPopupMenu pop = new MyPopupMenu();
pop.add(new JMenuItem(&quot;Open&quot;));
pop.add(new JMenuItem(&quot;Save&quot;));
pop.add(new JMenuItem(&quot;Close&quot;));
//pop.addSeparator(); //XXX: Nimbus
JSeparator s = new JSeparator();
s.setOpaque(true);
pop.add(s);
pop.add(new JMenuItem(&quot;Exit&quot;));
JLabel label = new JLabel(icon);
label.setComponentPopupMenu(pop);
//JDK 1.5 label.addMouseListener(new MouseAdapter() {});
//addMouseListener(new MouseAdapter() {
//  public void mouseReleased(MouseEvent e) {
//    if(e.isPopupTrigger()) {
//      Point pt = e.getPoint();
//      pop.show(e.getComponent(), pt.x, pt.y);
//    }
//    repaint();
//  }
//});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SynthLookAndFeel&lt;/code&gt;(&lt;code&gt;Nimbus&lt;/code&gt;など)で、&lt;code&gt;JSeparator&lt;/code&gt;だけでなく&lt;code&gt;JMenuItem&lt;/code&gt;まで透明になった修正？に対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-05 (日) 14:22:34&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.7.0_03&lt;/code&gt;でなにか変更があった？のか、変な挙動をするようになったので、調査中。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-21 (火) 16:45:48&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt;や&lt;code&gt;close&lt;/code&gt;が動作するのかと思ったのですが動かないんですよね？ &lt;code&gt;JPopupMenu&lt;/code&gt;に表示させているだけでしょうか、もしそうなら&lt;code&gt;Exit&lt;/code&gt;を押したときにフレームが終了するようなコードはどう書けばいいのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-02 (土) 05:32:25

&lt;ul&gt;
&lt;li&gt;影を付けるだけのサンプルコードなので、&lt;code&gt;JMenuItem&lt;/code&gt;は名前だけのダミーになっています。「フレームを終了するコード…」は、複数の&lt;code&gt;JFrame&lt;/code&gt;が開いているかもしれない場合を考慮して、以下のような方法を使用するのがいいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-04 (月) 09:53:00&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JMenuItem mi = new JMenuItem(new AbstractAction(&quot;Exit&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JMenuItem m = (JMenuItem)e.getSource();
    JPopupMenu popup = (JPopupMenu)m.getParent();
    JComponent invoker = (JComponent)popup.getInvoker();
    Window f = SwingUtilities.getWindowAncestor(invoker);
    if(f!=null) f.dispose();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;返信ありがとうございます、当方&lt;code&gt;Netbeans&lt;/code&gt;で開発してまして、上記のコードを&lt;code&gt;jPopupMenu1.add(この中);&lt;/code&gt;に&lt;code&gt;new JMenuItem&lt;/code&gt;以降を入れたのですが動きませんでした。よって&lt;code&gt;JMenuItem ｍ～f.dispose();&lt;/code&gt;までを削除し、かわりに&lt;code&gt;jFrame1.setVisible(false);&lt;/code&gt;を入れると動作しました。 -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-05 (火) 20:22:26

&lt;ul&gt;
&lt;li&gt;メモ: せっかくなので？、&lt;a href=&quot;http://terai.xrea.jp/Swing/WindowClosingAction.html&quot;&gt;JPopupMenuなどからWindowを閉じる&lt;/a&gt;を作成してみました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-11 (月) 17:09:34&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dropshadowpopup</link>
                <guid>http://terai.xrea.jp/swing/dropshadowpopup</guid>
                <pubDate>2006-07-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ScrollBarの表示を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollBar&lt;/code&gt;のバー表示を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IconScrollBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTOPy62F7I/AAAAAAAAAcE/M4J9GIXdfBY/s800/IconScrollBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;scrollPane.getVerticalScrollBar().setUI(new WindowsScrollBarUI() {
  @Override protected void paintThumb(Graphics g,
                            JComponent c, Rectangle thumbBounds) {
    super.paintThumb(g,c,thumbBounds);
    Graphics2D g2 = (Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
    Color oc = null;
    Color ic = null;
    JScrollBar sb = (JScrollBar)c;
    if (!sb.isEnabled() || thumbBounds.width&amp;gt;thumbBounds.height) {
      return;
    }else if(isDragging) {
      oc = SystemColor.activeCaption.darker();
      ic = SystemColor.inactiveCaptionText.darker();
    }else if(isThumbRollover()) {
      oc = SystemColor.activeCaption.brighter();
      ic = SystemColor.inactiveCaptionText.brighter();
    }else{
      oc = SystemColor.activeCaption;
      ic = SystemColor.inactiveCaptionText;
    }
    paintCircle(g2,thumbBounds,6,oc);
    paintCircle(g2,thumbBounds,10,ic);
  }
  private void paintCircle(Graphics2D g2, Rectangle thumbBounds,
                           int w, Color color) {
    g2.setPaint(color);
    int ww = thumbBounds.width-w;
    g2.fillOval(thumbBounds.x+w/2,
                thumbBounds.y+(thumbBounds.height-ww)/2,
                ww,ww);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;WindowsScrollBarUI&lt;/code&gt;を取得して、垂直スクロールバーに円状のアイコンを表示しています。このため&lt;code&gt;Windows&lt;/code&gt;では、ドラッグしている状態、カーソルがバー上にあってロールオーバーしている状態、通常の状態でこのアイコンの色が変わります。&lt;/p&gt;

&lt;p&gt;スクロールバーの長さが足りない場合、アイコンの表示は行われません。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/iconscrollbar</link>
                <guid>http://terai.xrea.jp/swing/iconscrollbar</guid>
                <pubDate>2006-06-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Separatorを波線で表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;波線を使った&lt;code&gt;Separator&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WavyLineSeparator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWkeY23gI/AAAAAAAAApc/r6W1VFeeAYA/s800/WavyLineSeparator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WavyLineSeparator extends JSeparator {
  private static final int ICONWIDTH = 3;
  private static final Icon WAVY_HLINE = new WavyLineIcon();
  private static final Icon WAVY_VLINE = new WavyLineIcon(VERTICAL);
  public WavyLineSeparator() {
    this(HORIZONTAL);
  }
  public WavyLineSeparator(int orientation) {
    super(orientation);
    if(orientation==HORIZONTAL) {
      setBorder(BorderFactory.createEmptyBorder(2,1,2,1));
    }else{
      setBorder(BorderFactory.createEmptyBorder(1,2,1,2));
    }
  }
  @Override public void paintComponent(Graphics g) {
    //super.paintComponent(g);
    //g.setClip(0, 0, getWidth(), getHeight());
    int pos;
    Insets i = getInsets();
    if(getOrientation()==HORIZONTAL) {
      for(pos=i.left;getWidth()-pos&amp;gt;0;pos+=WAVY_HLINE.getIconWidth()) {
        WAVY_HLINE.paintIcon(this, g, pos, i.top);
      }
    }else{
      for(pos=i.top;getHeight()-pos&amp;gt;0;pos+=WAVY_VLINE.getIconHeight()) {
        WAVY_VLINE.paintIcon(this, g, i.left, pos);
      }
    }
  }
  @Override public Dimension getPreferredSize() {
    Insets i = getInsets();
    if(getOrientation()==HORIZONTAL) {
      return new Dimension(30, ICONWIDTH+i.top+i.bottom);
    }else{
      return new Dimension(ICONWIDTH+i.left+i.right, 30);
    }
  }
  static class WavyLineIcon implements Icon {
    private final Color sfc = UIManager.getColor(&quot;Separator.foreground&quot;);
    private final int orientation;
    public WavyLineIcon() {
      this.orientation = HORIZONTAL;
    }
    public WavyLineIcon(int orientation) {
      this.orientation = orientation;
    }
    @Override public void paintIcon(Component c, Graphics g, int x, int y) {
      Graphics2D g2 = (Graphics2D)g;
      AffineTransform oldTransform = g2.getTransform();
      g2.setPaint(sfc);
      if(orientation==VERTICAL) {
        g2.translate(x+getIconWidth(), y);
        g2.rotate(Math.PI/2);
      }else{
        g2.translate(x,y);
      }
      g2.drawLine( 0, 2, 0, 2 );
      g2.drawLine( 1, 1, 1, 1 );
      g2.drawLine( 2, 0, 3, 0 );
      g2.drawLine( 4, 1, 4, 1 );
      g2.drawLine( 5, 2, 5, 2 );
      g2.setTransform(oldTransform);
    }
    @Override public int getIconWidth()  {
      return (orientation==HORIZONTAL)?ICONWIDTH*2:ICONWIDTH;
    }
    @Override public int getIconHeight() {
      return (orientation==HORIZONTAL)?ICONWIDTH:ICONWIDTH*2;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;水平用の波パターン&lt;code&gt;Icon&lt;/code&gt;を作成して、これを順番に並べてセパレータとして描画しています。垂直用のパターンは水平用を回転して生成しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt;に対応しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-19 (月) 14:39:49&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/wavylineseparator</link>
                <guid>http://terai.xrea.jp/swing/wavylineseparator</guid>
                <pubDate>2006-06-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>BoxLayoutでリスト状に並べる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;高さの異なるコンポーネントをスクロールできるようにリスト状に並べます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComponentList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJ_UDZVaI/AAAAAAAAAVQ/BbW1hLhenS8/s800/ComponentList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Box box = Box.createVerticalBox();
private final Component glue = Box.createVerticalGlue();
public void addComp(final JComponent comp) {
  comp.setMaximumSize(new Dimension(
      Short.MAX_VALUE, comp.getPreferredSize().height));
  box.remove(glue);
  box.add(Box.createVerticalStrut(5));
  box.add(comp);
  box.add(glue);
  box.revalidate();
  EventQueue.invokeLater(new Runnable() {
    @Override public void run() {
      comp.scrollRectToVisible(comp.getBounds());
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Box.createVerticalBox&lt;/code&gt;を使ってリスト状に並べています。この際、各コンポーネントの高さは変化せず、幅だけフレームサイズに追従するように、&lt;code&gt;JComponent#setMaximumSize&lt;/code&gt;を設定しています。&lt;/p&gt;

&lt;p&gt;コンポーネントの高さの合計がフレームの高さより小さい場合は、下部に余白が出来るように、最後に&lt;code&gt;Box.createVerticalGlue&lt;/code&gt;を追加しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;ではなく、&lt;code&gt;BoxLayout&lt;/code&gt;を使うようにサンプルを変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-26 (月) 15:34:41&lt;/li&gt;
&lt;li&gt;解説がソースと異なり、&lt;code&gt;setMinimumSize&lt;/code&gt;となっていたのを&lt;code&gt;setMaximumSize&lt;/code&gt;に修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-05-15 (金) 22:58:16&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/componentlist</link>
                <guid>http://terai.xrea.jp/swing/componentlist</guid>
                <pubDate>2006-06-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPane、JLabelなどで複数行を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;、&lt;code&gt;JTextArea&lt;/code&gt;、&lt;code&gt;JLabel&lt;/code&gt;を使った複数行のラベルをテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MultiLineLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQPZi7whI/AAAAAAAAAfQ/ynZxQGkn3_A/s800/MultiLineLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JTextPane label1 = new JTextPane();
private final JTextArea label2 = new JTextArea();
private final JLabel    label3 = new JLabel();
public MainPanel() {
  super(new GridLayout(3,1));
  ImageIcon icon = new ImageIcon(getClass().getResource(&quot;wi0124-32.png&quot;));

  SimpleAttributeSet attr = new SimpleAttributeSet();
  StyleConstants.setLineSpacing(attr, -0.2f);
  label1.setParagraphAttributes(attr, true);

  label1.setText(&quot;JTextPane\nasdfasdf&quot;);
  label2.setText(&quot;JTextArea\nasdfasdf&quot;);
  label3.setText(&quot;&amp;lt;html&amp;gt;JLabel+html&amp;lt;br&amp;gt;asdfasdf&quot;);
  label3.setIcon(icon);

  add(setLeftIcon(label1, icon));
  add(setLeftIcon(label2, icon));
  add(label3);

  setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  setPreferredSize(new Dimension(320, 160));
}
private static Box setLeftIcon(JTextComponent label, ImageIcon icon) {
  label.setForeground(UIManager.getColor(&quot;Label.foreground&quot;));
  //label.setBackground(UIManager.getColor(&quot;Label.background&quot;));
  label.setOpaque(false);
  label.setEditable(false);
  label.setFocusable(false);
  label.setMaximumSize(label.getPreferredSize());
  label.setMinimumSize(label.getPreferredSize());

  JLabel l = new JLabel(icon);
  l.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  Box box = Box.createHorizontalBox();
  box.add(l);
  box.add(Box.createHorizontalStrut(2));
  box.add(label);
  box.add(Box.createHorizontalGlue());
  return box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上:&lt;code&gt;JTextPane&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文字色、背景色を変更し、編集不可、フォーカスの取得不可にした&lt;code&gt;JTextPane&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;を使って改行し複数行を表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SimpleAttributeSet&lt;/code&gt;を使って、行間を詰めている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;中:&lt;code&gt;JTextArea&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文字色、背景色を変更し、編集不可、フォーカスの取得不可にした&lt;code&gt;JTextArea&lt;/code&gt;を使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;を使って改行し複数行を表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;下:&lt;code&gt;JLabel&lt;/code&gt;+&lt;code&gt;html&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;の文字列に&lt;code&gt;html&lt;/code&gt;タグを使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;タグを使って改行し複数行を表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LineSpacing.html&quot;&gt;JEditorPaneやJTextPaneに行間を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 6&lt;/code&gt;で、&lt;code&gt;html&lt;/code&gt;タグを使った&lt;code&gt;JLabel&lt;/code&gt;での複数行表示がすこし変更(それとも自分の環境のフォントなどが変わっただけ？)されている？ようです(&lt;code&gt;Windows&lt;/code&gt;環境)。行間が詰まって見易くなっているようで、わざわざ&lt;code&gt;JTextPane&lt;/code&gt;+&lt;code&gt;SimpleAttributeSet&lt;/code&gt;で行間を調節する必要もなさそうです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-01-10 (水) 12:44:53&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label.setBackground(UIManager.getColor(&amp;quot;Label.background&amp;quot;));&lt;/code&gt;(いつの間にか白になっていた)を&lt;code&gt;label.setOpaque(false);&lt;/code&gt;に変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-01 (月) 12:12:55&lt;/li&gt;
&lt;li&gt;はじめまして。&lt;code&gt;Java&lt;/code&gt;初心者なのですが、&lt;code&gt;JLabel&lt;/code&gt;で英字フォントを指定するとギザギザで表示されるのですが、ギザギザをなくすにはどうしたらよいでしょうか？ネットで探すと&lt;code&gt;setRenderingHint&lt;/code&gt;を使うとできると出てはくるのですが、&lt;code&gt;JLabel&lt;/code&gt;を使った場合の例が出てこなくて。。。ご教授よろしくお願いします。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B0%E3%81%97%E3%81%B0%E3%81%97.html&quot;&gt;ばしばし&lt;/a&gt; 2007-10-17 (水) 20:16:10

&lt;ul&gt;
&lt;li&gt;こんばんは。&lt;a href=&quot;http://itpro.nikkeibp.co.jp/article/COLUMN/20070205/260649/&quot;&gt;「Java SE 6完全攻略」第17回 文字に対するアンチエイリアス：ITpro&lt;/a&gt;にいろんな環境での方法がまとめられています。自宅の環境(&lt;code&gt;Windows XP&lt;/code&gt; + &lt;code&gt;java1.6.0_03&lt;/code&gt;)では、以下のようにオプションを設定して起動するとアンチエイリアスが掛かるようです(&lt;code&gt;XP&lt;/code&gt;の画面のプロパティ、デザイン、効果を&lt;code&gt;ClearType&lt;/code&gt;に変更してもなぜかうまくいかない…)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-17 (水) 21:54:38&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java -Dawt.useSystemAAFontSettings=on -cp &amp;quot;.\target\classes&amp;quot; example.MainPanel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;ありがとうございます。なるほど、いろいろ書かれていますね！明日試してみます！ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B0%E3%81%97%E3%81%B0%E3%81%97.html&quot;&gt;ばしばし&lt;/a&gt; 2007-10-17 (水) 23:59:34&lt;/li&gt;
&lt;li&gt;こんにちは。当方の環境が&lt;code&gt;JDK1.5&lt;/code&gt;であったので、非標準の&lt;code&gt;-Dswing.aatext=true&lt;/code&gt;を設定するとアンチエイリアスがかかりました。けれども、標準ではどうするのかと言う疑問が。。。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B0%E3%81%97%E3%81%B0%E3%81%97.html&quot;&gt;ばしばし&lt;/a&gt; 2007-10-18 (木) 09:37:28

&lt;ul&gt;
&lt;li&gt;ども。Sunに「&lt;code&gt;1.5&lt;/code&gt;にも標準のオプション用意して」とお願いする…のはひとまず置いといて…。&lt;code&gt;Java Swing Hacks&lt;/code&gt;本では、テキストにアンチエイリアスを適用するためだけの&lt;code&gt;Look &amp;amp; Feel&lt;/code&gt;(&lt;a href=&quot;http://wraplf.l2fprod.com/&quot;&gt;Wrap Look And Feel - L2FProd.com&lt;/a&gt;)を使用する方法が紹介(&lt;code&gt;HACK#52&lt;/code&gt;)されています。これを使えば、&lt;code&gt;-Dswing.aatext=true&lt;/code&gt;無しで、&lt;code&gt;1.5&lt;/code&gt;でもアンチエイリアスが掛かります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-18 (木) 14:42:33&lt;/li&gt;
&lt;li&gt;もし、一部の&lt;code&gt;JLabel&lt;/code&gt;をアンチエイリアスするだけでいいのなら、以下のように&lt;code&gt;JLabel#paintComponent&lt;/code&gt;メソッドをオーバーライドしてしまうのが手っ取り早いかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-18 (木) 15:16:04&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel(&quot;asdfasdfasdf&quot;) {
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2d = (Graphics2D)g;
    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                         RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    g2d.setRenderingHint(RenderingHints.KEY_RENDERING,
                         RenderingHints.VALUE_RENDER_QUALITY);
    super.paintComponent(g2d);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;お返事遅くなりましたm(__)m。試してみます！ありがとうございます！ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B0%E3%81%97%E3%81%B0%E3%81%97.html&quot;&gt;ばしばし&lt;/a&gt; 2007-10-22 (月) 09:57:29&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;で&lt;code&gt;html&lt;/code&gt;を使用すると&lt;code&gt;setEnabled(false)&lt;/code&gt;でグレーアウトしてくれないです。どうしたものでしょう。 -- &lt;a href=&quot;http://terai.xrea.jp/ApplePedlar.html&quot;&gt;ApplePedlar&lt;/a&gt; 2007-12-11 (火) 17:34:00

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4740519&quot;&gt;Bug ID: 4740519 HTML JLabel not greyed out on setEnabled(false)&lt;/a&gt;ですね。今のところ、&lt;a href=&quot;https://forums.oracle.com/thread/1377943&quot;&gt;Swing - JLabel with html tag can not be disabled or setForegroud?!&lt;/a&gt;みたいに &lt;del&gt;逃げるしかない？みたいです。&lt;/del&gt; する方法があります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-11 (火) 18:27:05&lt;/li&gt;
&lt;li&gt;コードが長くなってしまったので、別ページを作成しました。&lt;code&gt;JEditorPane&lt;/code&gt;を使用する方法も追加しています。&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledHtmlLabel.html&quot;&gt;Htmlを使ったJLabelとJEditorPaneの無効化&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-24 (月) 23:24:50&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こんにちは。ココのおかげでとても助かっています。ところで、&lt;code&gt;1&lt;/code&gt;行の高さ（文字の高さを含めた高さ）を指定したい、というときには、&lt;code&gt;setLineSpacing&lt;/code&gt;ではダメってことですよね？「指定したい高さ－フォントの大きさ」を&lt;code&gt;setLineSpacing&lt;/code&gt;で指定してあげなきゃいけないんですよね？（文字サイズによって&lt;code&gt;1&lt;/code&gt;行の高さが揃わなくなるのはイヤで揃えたいなと思うのですが、フォントによってそれだと、そうすると、フォントの大きさを変えるたびに指定しなおさなきゃいけないってことですよね。面倒…） -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B3%E3%81%B3%E3%81%82%E3%81%9A.html&quot;&gt;びびあず&lt;/a&gt; 2008-10-31 (金) 10:42:47

&lt;ul&gt;
&lt;li&gt;こんにちは。どういたしまして。&lt;code&gt;LineSpacing&lt;/code&gt;はフォントサイズに依存するみたいですね。固定の間隔を指定するのなら、例えば以下のように、&lt;code&gt;ParagraphView#getBottomInset&lt;/code&gt;メソッドなどをオーバーライドするのが簡単かも。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-31 (金) 14:36:51&lt;/li&gt;
&lt;li&gt;ソースコードを&lt;a href=&quot;http://terai.xrea.jp/Swing/LineSpacing.html&quot;&gt;JEditorPaneやJTextPaneに行間を設定する&lt;/a&gt;に移動しました。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;（変な日本語を書いてましたね、失礼しました。）　ところで…、さっそくご親切にソースまで書いて教えていただけて嬉しいです。ありがとうございました。これを参考にして、また勉強したいと思います。本当にありがとうございました。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%B3%E3%81%B3%E3%81%82%E3%81%9A.html&quot;&gt;びびあず&lt;/a&gt; 2008-11-07 (金) 14:22:27&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Swing&lt;/code&gt;初心者です。&lt;code&gt;JTextPane&lt;/code&gt;での複数行表示、大変参考になりました。複数行表示自体はおかげ様でうまくいったのですが、ボーダーが思い通りにならず困っています。&lt;code&gt;TitledBorder&lt;/code&gt;を設定しているのですが、タイトルを囲む線の外側（コンポーネントの枠）がくぼんだ状態になってしまいます。外枠は表示させたくないのですが、どこかで&lt;code&gt;OFF&lt;/code&gt;できるのでしょうか。ご教授いただければ幸いです。 -- &lt;a href=&quot;http://terai.xrea.jp/ka-ka.html&quot;&gt;ka-ka&lt;/a&gt; 2008-12-25 (木) 00:03:08

&lt;ul&gt;
&lt;li&gt;こんばんは。&lt;code&gt;TitledBorder&lt;/code&gt;の枠線を変更する場合は、&lt;code&gt;label.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), &amp;quot;title&amp;quot;));&lt;/code&gt;のように、他の&lt;code&gt;Border&lt;/code&gt;(この場合、&lt;code&gt;EmptyBorder&lt;/code&gt;で非表示にしている)と組み合わせて使用します。&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/border/TitledBorder.html#TitledBorder%28javax.swing.border.Border,%20java.lang.String%29&quot;&gt;TitledBorder (Java Platform SE 6)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-25 (木) 01:46:20&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ありがとうございます。&lt;code&gt;NetBeans&lt;/code&gt;で開発しているのですが、あ～でもないこ～でもないとプロパティ画面をいじっていたら、&lt;code&gt;JScrollPane&lt;/code&gt;と&lt;code&gt;JTextPane&lt;/code&gt;の組み合わせで思い描いたものはできました。&lt;code&gt;Swing&lt;/code&gt;も&lt;code&gt;NetBeans&lt;/code&gt;も初めてなので色々と思い通りにできずに四苦八苦しております。。。今後ともこちらのサイトで勉強させていただきます！ -- &lt;a href=&quot;http://terai.xrea.jp/ka-ka.html&quot;&gt;ka-ka&lt;/a&gt; 2008-12-26 (金) 00:38:15&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/multilinelabel</link>
                <guid>http://terai.xrea.jp/swing/multilinelabel</guid>
                <pubDate>2006-06-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SwingWorkerを使った処理の中断と進捗状況表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;で新しくなった&lt;code&gt;SwingWorker&lt;/code&gt;を使って、処理の中断や進捗状況の表示更新などを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SwingWorker&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTT8xXI-cI/AAAAAAAAAlQ/ueJc6P4EJVg/s800/SwingWorker.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class Task extends SwingWorker&amp;lt;String, String&amp;gt; {
  //public Task(List&amp;lt;File&amp;gt; list) {
  //  this.list = list;
  //}
  @Override public String doInBackground() {
    System.out.println(&quot;doInBackground() is EDT?: &quot; + EventQueue.isDispatchThread());
    try {
      Thread.sleep(1000);
    } catch(InterruptedException ie) {
      return &quot;Interrupted&quot;;
    }
    int current = 0;
    int lengthOfTask = 120; //list.size();
    publish(&quot;Length Of Task: &quot; + lengthOfTask);
    publish(&quot;\n------------------------------\n&quot;);

    while(current&amp;lt;lengthOfTask &amp;amp;&amp;amp; !isCancelled()) {
      try {
        Thread.sleep(50); //doSomething(file = list(current));
      } catch(InterruptedException ie) {
        return &quot;Interrupted&quot;;
      }
      setProgress(100 * current / lengthOfTask);
      publish(&quot;.&quot;);
      current++;
    }
    publish(&quot;\n&quot;);
    return &quot;Done&quot;;
  }
}

class RunAction extends AbstractAction {
  public RunAction() {
    super(&quot;run&quot;);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    System.out.println(&quot;actionPerformed() is EDT?: &quot; + EventQueue.isDispatchThread());
    final JProgressBar bar = new JProgressBar(0, 100);
    runButton.setEnabled(false);
    canButton.setEnabled(true);
    anil.startAnimation();
    statusPanel.removeAll();
    statusPanel.add(bar);
    statusPanel.revalidate();
    bar.setIndeterminate(true);

    worker = new Task() {
      @Override protected void process(List&amp;lt;String&amp;gt; chunks) {
        System.out.println(&quot;process() is EDT?: &quot; + EventQueue.isDispatchThread());
        if(!isDisplayable()) {
          System.out.println(&quot;process: DISPOSE_ON_CLOSE&quot;);
          cancel(true);
          return;
        }
        for(String message : chunks) {
          appendText(message);
        }
      }
      @Override public void done() {
        System.out.println(&quot;done() is EDT?: &quot; + EventQueue.isDispatchThread());
        if(!isDisplayable()) {
          System.out.println(&quot;done: DISPOSE_ON_CLOSE&quot;);
          cancel(true);
          return;
        }
        anil.stopAnimation();
        runButton.setEnabled(true);
        canButton.setEnabled(false);
        statusPanel.remove(bar);
        statusPanel.revalidate();
        String text = null;
        if(isCancelled()) {
          text = &quot;Cancelled&quot;;
        } else {
          try {
            text = get();
          } catch(InterruptedException | ExecutionException ex) {
            ex.printStackTrace();
            text = &quot;Exception&quot;;
          }
        }
        appendText(text);
      }
    };
    worker.addPropertyChangeListener(new ProgressListener(bar));
    worker.execute();
  }
}

class CancelAction extends AbstractAction{
  public CancelAction() {
    super(&quot;cancel&quot;);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    if(worker!=null &amp;amp;&amp;amp; !worker.isDone()) {
      worker.cancel(true);
    }
    worker = null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;以前の&lt;code&gt;SwingWorker.java&lt;/code&gt;から一部メソッド名が変更されていますが、基本的な使い方は一緒のようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingWorker#execute()&lt;/code&gt;メソッドで処理が開始され、&lt;code&gt;SwingWorker#doInBackground()&lt;/code&gt;メソッドが、バックグラウンドのワーカースレッドで実行されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EDT&lt;/code&gt;で実行する必要のある処理(上記の例では処理中に&lt;code&gt;JTextArea&lt;/code&gt;へのメッセージの書き出し)は、&lt;code&gt;SwingWorker#process()&lt;/code&gt;メソッドをオーバーライドして&lt;code&gt;SwingWorker#publish()&lt;/code&gt;メソッドで呼び出したり、&lt;code&gt;SwingWorker#firePropertyChange()&lt;/code&gt;を使えば良いようです。&lt;/li&gt;
&lt;li&gt;プログレスバーの処理には、&lt;code&gt;SwingWorker#setProgress(int)&lt;/code&gt;が予め用意されているので、&lt;code&gt;SwingWorker#addPropertyChangeListener(ProgressListener)&lt;/code&gt;を設定するだけで使用することが出来ます。&lt;/li&gt;
&lt;li&gt;実行中の処理のキャンセルは、&lt;code&gt;SwingWorker#cancel(boolean)&lt;/code&gt;メソッドで行います。キャンセルされたかどうかは、&lt;code&gt;SwingWorker#isCancelled()&lt;/code&gt;メソッドで知ることが出来ます。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;現在のスレッドがイベントディスパッチスレッド(以下&lt;code&gt;EDT&lt;/code&gt;)かどうかを調べる&lt;code&gt;EventQueue.isDispatchThread()&lt;/code&gt;を、このサンプルで使用すると以下のようになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;actionPerformed() is EDT?&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;現在のスレッド(このサンプルでは&lt;code&gt;EDT&lt;/code&gt;)で、ボタンを選択不可にしたり、&lt;code&gt;SwingWorker#execute()&lt;/code&gt;を実行している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;doInBackground() is EDT?&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ワーカースレッド(バックグラウンド)で重い処理を行い、&lt;code&gt;EDT&lt;/code&gt;をブロックして停止状態にならないようにする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;process() is EDT?&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;done() is EDT?&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Swing&lt;/code&gt;関連のすべての作業(例えば&lt;code&gt;JProgressBar&lt;/code&gt;の進捗表示更新)は、&lt;code&gt;EDT&lt;/code&gt;で行う必要があるので、&lt;code&gt;process()&lt;/code&gt;か&lt;code&gt;done()&lt;/code&gt;メソッド内で実行する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;SwingWorker#process()&lt;/code&gt;メソッド内などで&lt;code&gt;JPanel#sDisplayable()&lt;/code&gt;を呼び、アプリケーション(&lt;code&gt;frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);&lt;/code&gt;が設定されている)が終了している場合は、タスクを中断することで&lt;code&gt;SwingWorker&lt;/code&gt;が生き残るのを防止しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/SwingWorker.html&quot;&gt;SwingWorker (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/swingworker-137249.html&quot;&gt;Improve Application Performance With SwingWorker in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/concurrency/worker.html&quot;&gt;Worker Threads and SwingWorker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableCellProgressBar.html&quot;&gt;JTableのセルにJProgressBarを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TwoProgressBars.html&quot;&gt;SwingWorkerで複数のJProgressBarを使用する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PauseResumeSwingWorker.html&quot;&gt;SwingWorkerの一時停止と再開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;以前の&lt;code&gt;SwingWorker&lt;/code&gt;の使い方などは、&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimeIcon.html&quot;&gt;Timerでアニメーションするアイコンを作成&lt;/a&gt;、&lt;a href=&quot;http://terai.xrea.jp/Swing/RecursiveFileSearch.html&quot;&gt;Fileの再帰的検索&lt;/a&gt;などのソースコードやリンク先を参考にしてみてください。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-02-22 (木) 17:57:58

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RecursiveFileSearch.html&quot;&gt;Fileの再帰的検索&lt;/a&gt;は、&lt;code&gt;JDK 1.6&lt;/code&gt;の&lt;code&gt;javax.swing.SwingWorker&lt;/code&gt;を使用するように変更しました。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AnimeIcon.html&quot;&gt;Timerでアニメーションするアイコンを作成&lt;/a&gt;は &lt;del&gt;https://swingworker.dev.java.net/ にある&lt;/del&gt; &lt;code&gt;JDK 1.6&lt;/code&gt;からバックポートされた&lt;code&gt;org.jdesktop.swingworker.SwingWorker&lt;/code&gt;を使用するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-17 (木) 01:47:38&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.net&lt;/code&gt;が新しくなって結構時間が経ったけど、&lt;a href=&quot;http://java.net/projects/swingworker&quot;&gt;http://java.net/projects/swingworker&lt;/a&gt; から&lt;code&gt;jar&lt;/code&gt;がダウンロードできない…。&lt;a href=&quot;http://download.java.net/maven/2/org/jdesktop/swing-worker/1.1/&quot;&gt;maven2 のリポジトリ&lt;/a&gt;から取得するしかない？  -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-12-02 (金) 17:23:45&lt;/li&gt;
&lt;li&gt;上記の&lt;code&gt;jar&lt;/code&gt;は、&lt;code&gt;1.1&lt;/code&gt;なので、&lt;code&gt;1.2&lt;/code&gt;が必要なら、 ソースを取得して、&lt;code&gt;ant bundles&lt;/code&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-12-02 (金) 17:38:31&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/swingworker</link>
                <guid>http://terai.xrea.jp/swing/swingworker</guid>
                <pubDate>2006-06-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのフォーカスを一行全体に適用する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のフォーカスをセルではなく、一行全体に掛かっているように表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineFocusTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTPOarzqiI/AAAAAAAAAdo/uwFLFlU_EpI/s800/LineFocusTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DotBorder extends EmptyBorder {
  public enum Type { START, END; }
  private static final BasicStroke dashed = new BasicStroke(
    1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER,
    10.0f, (new float[] {1.0f}), 0.0f);
  private static final Color dotColor = new Color(200,150,150);
  public DotBorder(int top, int left, int bottom, int right) {
    super(top, left, bottom, right);
  }
  public EnumSet&amp;lt;Type&amp;gt; type = EnumSet.noneOf(Type.class);
  @Override public boolean isBorderOpaque() {
    return true;
  }
  @Override public void paintBorder(
        Component c, Graphics g, int x, int y, int w, int h) {
    Graphics2D g2 = (Graphics2D)g;
    g2.translate(x,y);
    g2.setPaint(dotColor);
    g2.setStroke(dashed);
    if(type.contains(Type.START)) {
      g2.drawLine(0,0,0,h);
    }
    if(type.contains(Type.END)) {
      g2.drawLine(w-1,0,w-1,h);
    }
    if(c.getBounds().x%2==0) {
      g2.drawLine(0,0,w,0);
      g2.drawLine(0,h-1,w,h-1);
    }else{
      g2.drawLine(1,0,w,0);
      g2.drawLine(1,h-1,w,h-1);
    }
    g2.translate(-x,-y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;通常の&lt;code&gt;JTable&lt;/code&gt;では、&lt;code&gt;JTable#setRowSelectionAllowed(true)&lt;/code&gt;とすることで選択状態は一行毎になりますが、フォーカスはセル毎のままです。上記のサンプルでは、レンダラーでフォーカスの有るセルを&lt;code&gt;JTable#getSelectionModel()#getLeadSelectionIndex()&lt;/code&gt;で取得し、独自ラベルを使って最初と最後のセルの垂直の点線、途中のセルの水平点線を描画しています。このため、フォーカスが一行全体に掛かっているように見せることができます。&lt;/p&gt;

&lt;p&gt;カラム幅を変更するなどの操作を行っても、セル上下の水平点線のつなぎ目でドットが重ならないようにするため、偶数奇数ドット目のどちらで始まっているかで開始位置をずらしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SelectNextRow.html&quot;&gt;JTableの次行にTabキーでフォーカスを移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/linefocustable</link>
                <guid>http://terai.xrea.jp/swing/linefocustable</guid>
                <pubDate>2006-06-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Borderのアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Border&lt;/code&gt;の描画をアニメーションさせます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RippleBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTR9UHQaAI/AAAAAAAAAiA/_Kn7tNr8M3s/s800/RippleBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class RippleBorder extends EmptyBorder {
  private final javax.swing.Timer animator;
  private final JComponent comp;
  public RippleBorder(JComponent c, int width) {
    super(width, width, width, width);
    this.comp = c;
    animator = new Timer(80, new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        comp.repaint();
        count+=0.9f;
      }
    });
    comp.addMouseListener(new MouseAdapter() {
      @Override public void mouseEntered(MouseEvent e) {
        comp.setForeground(Color.RED);
        animator.start();
      }
      @Override public void mouseExited(MouseEvent e) {
        comp.setForeground(Color.BLACK);
      }
    });
  }
  private float count = 1.0f;
  @Override public void paintBorder(Component c, Graphics g, int x, int y, int w, int h) {
    if(!animator.isRunning()) {
      super.paintBorder(c, g, x, y, w, h);
      return;
    }
    Graphics2D g2 = (Graphics2D) g;
    g2.setPaint(Color.WHITE);
    float a = 1.0f/count;
    if( 0.12f-a&amp;gt;1.0e-2 ) a = 0.0f;
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,a));
    Insets i = getBorderInsets();
    int xx = i.left-(int)count;
    int yy = i.top-(int)count;
    int ww = i.left+i.right-(int)(count*2.0f);
    int hh = i.top+i.bottom-(int)(count*2.0f);
    g2.setStroke(new BasicStroke(count*1.2f));
    g2.drawRoundRect(xx, yy, w-ww, h-hh, 10, 10);
    if(xx&amp;lt;0 &amp;amp;&amp;amp; animator.isRunning()) {
      count = 1.0f;
      animator.stop();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;コンポーネント上にカーソルがきた場合、&lt;code&gt;Border&lt;/code&gt;をアニメーションさせることで、波紋状の効果を描画しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rippleborder</link>
                <guid>http://terai.xrea.jp/swing/rippleborder</guid>
                <pubDate>2006-05-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ClassLoaderでリソース(URL)を取得</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;クラスパスからのエントリ(相対パス風)を使って、&lt;code&gt;ClassLoader&lt;/code&gt;から&lt;code&gt;URL&lt;/code&gt;を取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClassLoader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTI-UTFN-I/AAAAAAAAATo/6sdQoVO0Kc4/s800/ClassLoader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;URL url = getClass().getClassLoader().getResource(&quot;example/test.png&quot;);
//URL url = getClass().getResource(&quot;test.png&quot;);
JLabel icon = new JLabel(new ImageIcon(url));
JLabel path = new JLabel(url.toString());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ClassLoader&lt;/code&gt;を使用して、位置に依存しない方法でリソース(&lt;code&gt;URL&lt;/code&gt;)を取得します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;例えば&lt;code&gt;new ImageIcon(String filename)&lt;/code&gt;のようにファイルパスを文字列で指定した場合、このファイルパスが位置(カレントディレクトリ)に依存しているため、実行時にカレントディレクトリを変更したり、&lt;code&gt;jar&lt;/code&gt;ファイルにまとめたりするとファイルが参照できなくなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;以下、&lt;code&gt;.\target\classes\example\test.png&lt;/code&gt;にある画像ファイルの&lt;code&gt;URL&lt;/code&gt;をクラスパスからのエントリ(相対パス風)を使って取得する場合を考えます。&lt;/p&gt;

&lt;p&gt;上記のサンプルに添付しているバッチファイルでは、クラスパスは次のように設定しています。
    java -classpath &amp;quot;.\target\classes&amp;quot; example.MainPanel&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ClassLoader#getResource&lt;/code&gt;メソッドを使用する場合は、以下のようにクラスパスからのエントリを使用します。このエントリは、相対パス風で頭に&lt;code&gt;/&lt;/code&gt;は付けず、&lt;code&gt;/&lt;/code&gt;区切りで記述します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;getClass().getClassLoader().getResource(&quot;example/test.png&quot;);
//ただし、getClass().getClassLoader().getResource(&quot;./example/test.png&quot;);
//だとjar内にパッケージした時うまくいかない。
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;ClassLoader&lt;/code&gt;からでは無く、&lt;code&gt;Class#getResource&lt;/code&gt;メソッドを使う方法もあります。この場合、エントリ名がメソッド内で以下のように変換されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;相対パス風(頭に&lt;code&gt;/&lt;/code&gt;が付かない)の場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;が&lt;code&gt;/&lt;/code&gt;に変換された、&lt;code&gt;modified_package_name&lt;/code&gt;が名前の前に補完される&lt;/li&gt;
&lt;li&gt;例えば、&lt;code&gt;com.example.Test&lt;/code&gt;クラスなら、&lt;code&gt;com/example/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;このサンプルでは&lt;code&gt;example.MainPanel&lt;/code&gt;クラスなので、&lt;code&gt;example/&lt;/code&gt;が補完されて、&lt;code&gt;example/test.png&lt;/code&gt;になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;getClass().getResource(&quot;test.png&quot;); //or MainPanel.class.getResource(&quot;test.png&quot;);
//getClass().getClassLoader().getResource(&quot;example/test.png&quot;);と同じ
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;絶対パス風(頭に&lt;code&gt;/&lt;/code&gt;が付く)の場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modified_package_name&lt;/code&gt;は補完せず、頭の&lt;code&gt;/&lt;/code&gt;は削除される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;getClass().getResource(&quot;/test.png&quot;);
//getClass().getClassLoader().getResource(&quot;test.png&quot;);と同じ
//上記の相対パスと同じリソースを取得する場合は、
//getClass().getResource(&quot;/example/test.png&quot;);としなくてはならない
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;クラスパス上に同名のリソースが複数存在する場合は、最初に見つかったものが使用されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src.zip&lt;/code&gt;をダウンロードして適当な場所に展開する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c:\temp\example\test.png&lt;/code&gt;という画像ファイルを別途用意する&lt;/li&gt;
&lt;li&gt;展開したフォルダにある&lt;code&gt;run.bat&lt;/code&gt;の&lt;code&gt;6&lt;/code&gt;行目(クラスパス)を以下のように変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set LOCALCLASSPATH=c:\temp;.\target\classes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ant&lt;/code&gt;などでコンパイルして、修正した&lt;code&gt;run.bat&lt;/code&gt;で実行&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;この場合、&lt;code&gt;src.zip&lt;/code&gt;に元々入っていた&lt;code&gt;適当な場所/test.png&lt;/code&gt;ではなく、&lt;code&gt;file:/C:/temp/example/test.png&lt;/code&gt;という&lt;code&gt;URL&lt;/code&gt;が&lt;code&gt;getResource&lt;/code&gt;で取得できます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/technotes/guides/lang/resources.html&quot;&gt;位置に依存しない方法でのリソースへのアクセス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/icon.html#getresource&quot;&gt;Loading Images Using getResource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;「クラスパスからのパス」などの意味が分かり辛いので、&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/net/JarURLConnection.html&quot;&gt;JarURLConnection (Java Platform SE 6)&lt;/a&gt;を参考にして「パス」を「エントリ」に変更してみました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-15 (金) 18:04:14&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jar&lt;/code&gt;ファイルのクラスで -- &lt;a href=&quot;http://terai.xrea.jp/kind.html&quot;&gt;kind&lt;/a&gt; 2012-03-02 (金) 14:04:06

&lt;ul&gt;
&lt;li&gt;見落としてました。最近なんか重いので途切れてしまったのでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-03-05 (月) 16:26:35&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/classloader</link>
                <guid>http://terai.xrea.jp/swing/classloader</guid>
                <pubDate>2006-05-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListで異なる高さのセルを使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;のレンダラーに&lt;code&gt;JTextArea&lt;/code&gt;を使って、異なる高さのセルを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DifferentCellHeight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTK2Z8UOTI/AAAAAAAAAWo/7GoDkuVX8Fc/s800/DifferentCellHeight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TextAreaRenderer extends JTextArea implements ListCellRenderer {
  private final Border border = new DotBorder(2,2,2,2);
  private final Color evenColor = new Color(230,255,230);
  @Override public Component getListCellRendererComponent(
      JList list, Object object, int index,
      boolean isSelected, boolean cellHasFocus) {
    setText((object==null) ? &quot;&quot; : object.toString());
    setBorder(cellHasFocus ? border
                : BorderFactory.createEmptyBorder(2,2,2,2));
    if(isSelected) {
      setBackground(list.getSelectionBackground());
      setForeground(list.getSelectionForeground());
    }else{
      setBackground(index%2==0 ? evenColor : list.getBackground());
      setForeground(list.getForeground());
    }
    return this;
  }
}

private DefaultListModel makeList() {
  DefaultListModel model = new DefaultListModel();
  model.addElement(&quot;一行&quot;);
  model.addElement(&quot;一行目\n二行目&quot;);
  model.addElement(&quot;一行目\n二行目\n三行目&quot;);
  model.addElement(&quot;四行\n以上ある\nテキスト\nの場合&quot;);
  return model;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;左が複数行に対応した&lt;code&gt;JList&lt;/code&gt;、右が通常の&lt;code&gt;JList&lt;/code&gt;になります。左の&lt;code&gt;JList&lt;/code&gt;では、&lt;code&gt;JList#getFixedCellHeight()&lt;/code&gt;が&lt;code&gt;-1&lt;/code&gt;で、&lt;code&gt;ListCellRenderer&lt;/code&gt;に&lt;code&gt;JTextArea&lt;/code&gt;を使用しているため、テキストに&lt;code&gt;\n&lt;/code&gt;を含めることで複数行を作成することができます。&lt;/p&gt;

&lt;p&gt;セルの区切りを分かりやすくするために、偶数奇数で行の背景色を変更しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;にセルフォーカスがある状態を表現するために、&lt;code&gt;LineBorder&lt;/code&gt;を継承して作成した&lt;code&gt;DotBorder&lt;/code&gt;を使用しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DotBorder extends LineBorder {
  public DotBorder(Color color, int thickness) {
    super(color, thickness);
  }
  @Override public boolean isBorderOpaque() {
    return true;
  }
  @Override public void paintBorder(
      Component c, Graphics g, int x, int y, int w, int h) {
    Graphics2D g2 = (Graphics2D)g;
    g2.translate(x,y);
    g2.setPaint(getLineColor());
    BasicGraphicsUtils.drawDashedRect(g2, 0, 0, w, h);
    g2.translate(-x,-y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/javax/swing/JList.html#setFixedCellHeight-int-&quot;&gt;JList#setFixedCellHeight(int) (Java Platform SE 8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/differentcellheight</link>
                <guid>http://terai.xrea.jp/swing/differentcellheight</guid>
                <pubDate>2006-05-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのアイテム履歴</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;で入力した文字列などのアイテムを順に保存します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DropDownHistory&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTL-2krEbI/AAAAAAAAAYc/9yTnbMmSi1Q/s800/DropDownHistory.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public boolean addItem(JComboBox combo, String str, int max) {
  if(str==null || str.length()==0) return false;
  combo.setVisible(false);
  DefaultComboBoxModel model = (DefaultComboBoxModel) combo.getModel();
  model.removeElement(str);
  model.insertElementAt(str, 0);
  if(model.getSize()&amp;gt;max) {
    model.removeElementAt(max);
  }
  combo.setSelectedIndex(0);
  combo.setVisible(true);
  return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;に検索する文字列が入力されて、検索ボタンが押されるたびに履歴を更新しています。上記のサンプルでは、&lt;code&gt;4&lt;/code&gt;個まで履歴を保存し、それ以上は古いものから消されます。履歴にある文字列が再度検索された場合は、それを一番上に移動しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dropdownhistory</link>
                <guid>http://terai.xrea.jp/swing/dropdownhistory</guid>
                <pubDate>2006-05-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Cursorのアニメーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;マウスカーソルをアニメーションさせます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimatedCursor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTHkbNXdwI/AAAAAAAAARY/RzDAT8xyR3c/s800/AnimatedCursor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;list[0] = tk.createCustomCursor(tk.createImage(url00), p, &quot;00&quot;);
list[1] = tk.createCustomCursor(tk.createImage(url01), p, &quot;01&quot;);
list[2] = tk.createCustomCursor(tk.createImage(url02), p, &quot;02&quot;);
setCursor(list[0]);
animator = new javax.swing.Timer(100, new ActionListener() {
  private int count = 0;
  @Override public void actionPerformed(ActionEvent e) {
    setCursor(list[count]);
    count = (count + 1+ list.length) % list.length;
  }
});
JButton button = new JButton(new AbstractAction(&quot;スタート&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JButton button = (JButton)e.getSource();
    if(animator.isRunning()) {
      button.setText(&quot;スタート&quot;);
      animator.stop();
    }else{
      button.setText(&quot;ストップ&quot;);
      animator.start();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンをクリックすると、パネル上にあるカーソルがアニメーションするようになっています。&lt;code&gt;3&lt;/code&gt;枚の透過&lt;code&gt;png&lt;/code&gt;ファイルをコマにして、&lt;code&gt;Timer&lt;/code&gt;で順番にこれを切り替えています。&lt;/p&gt;

&lt;p&gt;各コマは、&lt;a href=&quot;http://www11.atwiki.jp/vippointer/pages/54.html&quot;&gt;ぶーん(通常の選択.ani、VIPポインタ)&lt;/a&gt;から、&lt;a href=&quot;http://www.vector.co.jp/soft/win95/amuse/se195017.html&quot;&gt;ANIめーかー&lt;/a&gt;を使って生成しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www11.atwiki.jp/vippointer/&quot;&gt;VIPポインタ@Wiki - トップページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vector.co.jp/soft/win95/amuse/se195017.html&quot;&gt;ANIめーかー(Windows95/98/Me/アミューズメント)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CustomCursor.html&quot;&gt;Cursorオブジェクトの生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/download.html&quot;&gt;oreilly.co.jp -- Online Catalog: Java Swing Hacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cursor&lt;/code&gt;に用いる&lt;code&gt;png&lt;/code&gt;ファイルは、フルカラー(&lt;code&gt;24&lt;/code&gt;ビット)ではなく&lt;code&gt;256&lt;/code&gt;色にしておかないと、うまく透過できないようです。もしかしたら自分の&lt;code&gt;PC&lt;/code&gt;の画面の色が&lt;code&gt;16&lt;/code&gt;ビットになっているせいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-11 (火) 12:41:59

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;32&lt;/code&gt;ビットにしてもだめみたいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-25 (火) 16:53:29&lt;/li&gt;
&lt;li&gt;追記: &lt;code&gt;JDK 6&lt;/code&gt;なら、フルカラーでも問題なく透過できるようです。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6388546&quot;&gt;Bug ID: 6388546 PNG with transparent background doesn&amp;#39;t render correctly&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-07-28 (月) 16:27:56&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Windows XP&lt;/code&gt;で、カーソルを&lt;code&gt;Animated GIF&lt;/code&gt;ファイルから生成(&lt;code&gt;Toolkit.getDefaultToolkit().createCustomCursor&lt;/code&gt;)しようとすると、 &lt;del&gt;落ちる？&lt;/del&gt; &lt;code&gt;Ubuntu&lt;/code&gt;だと、アニメーションはしないけど、ちゃんと画像がカーソルになる。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-08 (火) 14:25:37

&lt;ul&gt;
&lt;li&gt;デッドロック？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-07 (水) 19:38:38&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4343270&quot;&gt;Bug ID: 4343270 Toolkit.createCustomCursor() hangs the VM under Win NT&lt;/a&gt;、&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4939855&quot;&gt;Bug ID: 4939855 Please allow Toolkit.createCustomCursor() to accept multi-frame images&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-09-01 (月) 23:18:57&lt;/li&gt;
&lt;li&gt;よくみたら、&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/Toolkit.html#createCustomCursor%28java.awt.Image,%20java.awt.Point,%20java.lang.String%29&quot;&gt;Toolkit#createCustomCursor&lt;/a&gt;に、「マルチフレームイメージは無効で、このメソッドがハングすることがあります。」と注意書きがあった(&lt;code&gt;1.4.2&lt;/code&gt;のドキュメントから？)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-19 (火) 17:03:17&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/animatedcursor</link>
                <guid>http://terai.xrea.jp/swing/animatedcursor</guid>
                <pubDate>2006-05-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブをソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブをソートします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SortTabs&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTTe98QmaI/AAAAAAAAAkc/w7tzozy5FqM/s800/SortTabs.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SortAction extends AbstractAction {
  public SortAction(String label, Icon icon) {
    super(label,icon);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    setSortedTab(tab, makeSortedVector(tab));
  }
  private Vector makeSortedVector(JTabbedPane t) {
    Vector l = new Vector();
    for(int i=0;i&amp;lt;t.getTabCount();i++) {
      l.addElement(new ComparableTab(t.getTitleAt(i), t.getComponentAt(i)));
    }
    Collections.sort(l);
    return l;
  }
  private void setSortedTab(final JTabbedPane t, final Vector l) {
    t.setVisible(false);
    t.removeAll();
    for(int i=0;i&amp;lt;l.size();i++) {
      ComparableTab c = (ComparableTab)l.get(i);
      t.addTab(c.title, c.comp);
    }
    t.setVisible(true);
  }
  class ComparableTab implements Comparable{
    final public String title;
    final public Component comp;
    public ComparableTab(String title, Component comp) {
      this.title = title;
      this.comp  = comp;
    }
    @Override public int compareTo(Object o) {
      return this.title.compareTo(((ComparableTab)o).title);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ソートしたリストを作成したあと、一旦タブをすべて削除し、リストから&lt;code&gt;JTabbedPane&lt;/code&gt;にタブを戻しています。&lt;/p&gt;

&lt;p&gt;タブを追加、削除、ダブルクリックで名前変更して確認してみてください。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/sorttabs</link>
                <guid>http://terai.xrea.jp/swing/sorttabs</guid>
                <pubDate>2006-04-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameのアイコンを非表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;などのタイトルバーにあるアイコンを非表示にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableDefaultIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTK49Ua_nI/AAAAAAAAAWs/Ipb_maWCOgY/s800/DisableDefaultIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame frame = new JFrame(&quot;test&quot;);
MainPanel panel = new MainPanel();
URL url = panel.getClass().getResource(&quot;16x16transparent.png&quot;);
frame.setIconImage(Toolkit.getDefaultToolkit().createImage(url));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame#setIconImage(Image)&lt;/code&gt;メソッドを使用して、タイトルバーなどにあるフレームのアイコンを変更しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトのアイコンが表示される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new ImageIcon(&amp;quot;&amp;quot;).getImage();&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;では、アイコン非表示、&lt;code&gt;JDK 1.6&lt;/code&gt;からは、デフォルトのアイコンが表示される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;で起動した場合、&lt;code&gt;AccessControlException: access denied (&amp;quot;java.io.FilePermission&amp;quot; &amp;quot;&amp;quot; &amp;quot;read&amp;quot;)&lt;/code&gt;が発生&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new BufferedImage(1,1,BufferedImage.TYPE_INT_ARGB);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;サイズが&lt;code&gt;1x1&lt;/code&gt;で、透明な&lt;code&gt;Image&lt;/code&gt;を表示&lt;/li&gt;
&lt;li&gt;タイトルバーの左端をクリックするとタイトルメニューは表示することができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toolkit.createImage(url_16x16transparent);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;透過色で塗りつぶした&lt;code&gt;16x16&lt;/code&gt;の&lt;code&gt;PNG&lt;/code&gt;画像をアイコンとして使用&lt;/li&gt;
&lt;li&gt;タイトルバーの左端をクリックするとタイトルメニューは表示することができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1381127&quot;&gt;Swing - Java Default Icon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;thank u -- &lt;a href=&quot;http://terai.xrea.jp/mid.html&quot;&gt;mid&lt;/a&gt; 2006-06-15 (木) 17:15:20

&lt;ul&gt;
&lt;li&gt;np -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-02-05 (木) 18:10:07&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンショットなどを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-02-05 (木) 18:15:32&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/disabledefaulticon</link>
                <guid>http://terai.xrea.jp/swing/disabledefaulticon</guid>
                <pubDate>2006-04-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>BorderにJComponentを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Border&lt;/code&gt;に&lt;code&gt;JCheckBox&lt;/code&gt;や&lt;code&gt;JButton&lt;/code&gt;などを配置します。&lt;a href=&quot;http://www.jroller.com/page/santhosh&quot;&gt;Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;の&lt;a href=&quot;http://www.jroller.com/page/santhosh?entry=component_titled_border&quot;&gt;ComponentTitledBorder&lt;/a&gt;を利用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComponentTitledBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKEdJmyzI/AAAAAAAAAVY/FTQKJ7__MnE/s800/ComponentTitledBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox c = new JCheckBox(&quot;CheckBox&quot;, true);
c.setFocusPainted(false);
JLabel l1 = new JLabel(&quot;adfasdfasdfa&quot;);
Border eb = BorderFactory.createEtchedBorder();
l1.setBorder(new ComponentTitledBorder(c, l1, eb));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、&lt;a href=&quot;http://www.jroller.com/page/santhosh&quot;&gt;Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;の&lt;a href=&quot;http://www.jroller.com/page/santhosh?entry=component_titled_border&quot;&gt;ComponentTitledBorder&lt;/a&gt;を参考にして作成しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SwingUtilities.paintComponent&lt;/code&gt;で&lt;code&gt;Border&lt;/code&gt;にコンポーネントを描画しているため、&lt;code&gt;JComboBox&lt;/code&gt;などが選択されてもイベントが伝わりません。このため&lt;code&gt;ComponentTitledBorder&lt;/code&gt;では、マウスリスナーを設定して&lt;code&gt;Component#dispatchEvent&lt;/code&gt;メソッドで描画しているコンポーネントにイベントを飛ばしています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void mouseClicked(MouseEvent me) {
  Component src = me.getComponent();
  tgtCmp.dispatchEvent(SwingUtilities.convertMouseEvent(src, me, tgtCmp));
  src.repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/page/santhosh?entry=component_titled_border&quot;&gt;ComponentTitledBorder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RightAlignComponentBorder.html&quot;&gt;Borderの右下にJComponentを配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/componenttitledborder</link>
                <guid>http://terai.xrea.jp/swing/componenttitledborder</guid>
                <pubDate>2006-04-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneの余白にJCheckBoxを配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の余白に&lt;code&gt;JCheckBox&lt;/code&gt;を配置して特定のタブの開閉を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabbedPaneWithCheckBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUQ8ALIWI/AAAAAAAAAlw/7jfCbNrxWK8/s800/TabbedPaneWithCheckBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TabbedPaneWithCompBorder implements Border, MouseListener, SwingConstants {
  private final JComponent  dummy = new JPanel();
  private final JCheckBox   cbox;
  private final JTabbedPane tab;
  private Rectangle rect;
  public TabbedPaneWithCompBorder(JCheckBox cbox, JTabbedPane tab) {
    this.cbox = cbox;
    this.tab  = tab;
    tab.addMouseListener(this);
    cbox.setFocusPainted(false);
    cbox.addMouseListener(new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent me) {
        JCheckBox cb = (JCheckBox)me.getSource();
        cb.setSelected(!cb.isSelected());
      }
    });
  }
  @Override public void paintBorder(Component c, Graphics g, int x, int y, int w, int h) {
    Dimension size = cbox.getPreferredSize();
    int xx = tab.getSize().width - size.width;
    Rectangle lastTab = tab.getUI().getTabBounds(tab, tab.getTabCount()-1);
    int tabEnd = lastTab.x + lastTab.width;
    if(xx&amp;lt;tabEnd) xx = tabEnd;
    rect = new Rectangle(xx, -2, size.width, size.height);
    SwingUtilities.paintComponent(g, cbox, dummy, rect);
  }
  @Override public Insets getBorderInsets(Component c) {
    return new Insets(0,0,0,0);
  }
  @Override public boolean isBorderOpaque() {
    return true;
  }
  private void dispatchEvent(MouseEvent me) {
    if(rect==null || !rect.contains(me.getX(), me.getY())) return;
    cbox.setBounds(rect);
    cbox.dispatchEvent(SwingUtilities.convertMouseEvent(tab,me,cbox));
  }
  @Override public void mouseClicked(MouseEvent me)  { dispatchEvent(me); }
  @Override public void mouseEntered(MouseEvent me)  { dispatchEvent(me); }
  @Override public void mouseExited(MouseEvent me)   { dispatchEvent(me); }
  @Override public void mousePressed(MouseEvent me)  { dispatchEvent(me); }
  @Override public void mouseReleased(MouseEvent me) { dispatchEvent(me); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt;に&lt;code&gt;SwingUtilities.paintComponent&lt;/code&gt;メソッドを使って&lt;code&gt;JCheckBox&lt;/code&gt;を描画しています。&lt;code&gt;JCheckBox&lt;/code&gt;が&lt;code&gt;JTabbedPane&lt;/code&gt;の子になってタブが増えないように、ダミーパネルを中間コンテナに指定しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;で受け取ったマウスイベントを、&lt;code&gt;SwingUtilities.convertMouseEvent&lt;/code&gt;メソッドを利用し、チェックボックス用に座標などを変換して送り出しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;タブとチェックボックスが重ならないように、フレームの最小サイズを設定しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setMinimumSize(new Dimension(240, 80));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;他にも、レイアウトマネージャーを利用して同様のことを行う方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1389350&quot;&gt;Swing - Any layout suggestions for this?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;レイアウトマネージャーを自作するweebibさんの投稿 (reply 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverlayLayout&lt;/code&gt;を利用するcamickrさんの投稿 (reply 2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPaneWithText.html&quot;&gt;JTabbedPaneの余白に文字列を表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPaneWithButton.html&quot;&gt;JTabbedPaneの余白にJButtonを配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabbedpanewithcheckbox</link>
                <guid>http://terai.xrea.jp/swing/tabbedpanewithcheckbox</guid>
                <pubDate>2006-04-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブタイトルを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブタイトルを直接編集します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EditTabTitle&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMGR-jIQI/AAAAAAAAAYo/g3tGLp5zrdY/s800/EditTabTitle.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class EditableTabbedPane extends JTabbedPane {
  private final MyGlassPane panel  = new MyGlassPane();
  private final JTextField  editor = new JTextField();
  private final JFrame      frame;
  private Rectangle rect;

  public EditableTabbedPane(JFrame frame) {
    this.frame = frame;
    //......
    panel.add(editor);
    frame.setGlassPane(panel);
    panel.setVisible(false);
  }
  class MyGlassPane extends JPanel{
    public MyGlassPane() {
      super((LayoutManager)null);
      setOpaque(false);
      addMouseListener(new MouseAdapter() {
        @Override public void mouseClicked(MouseEvent me) {
          if(rect==null || rect.contains(me.getPoint())) return;
          renameTab();
        }
      });
    }
  }
  private void initEditor() {
    rect = getUI().getTabBounds(this, getSelectedIndex());
    rect.setRect(rect.x+2, rect.y+2, rect.width-2, rect.height-2);
    editor.setBounds(rect);
    editor.setText(getTitleAt(getSelectedIndex()));
  }
  private void startEditing() {
    initEditor();
    panel.setVisible(true);
    editor.requestFocusInWindow();
  }
  private void cancelEditing() {
    panel.setVisible(false);
  }
  private void renameTab() {
    if(editor.getText().trim().length()&amp;gt;0) {
      setTitleAt(getSelectedIndex(), editor.getText());
    }
    panel.setVisible(false);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Excel&lt;/code&gt;風に&lt;code&gt;JTabbedPane&lt;/code&gt;のタブタイトルを直接編集しています。&lt;/p&gt;

&lt;p&gt;編集が開始されると、対象となるタブ上に&lt;code&gt;JTextField&lt;/code&gt;をレイアウトした&lt;code&gt;GlassPane&lt;/code&gt;を表示しています。この&lt;code&gt;GlassPane&lt;/code&gt;には、編集中はフォーカスの移動が起こらないようにするための&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;などを設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;操作方法

&lt;ul&gt;
&lt;li&gt;マウスでタブをダブルクリック、またはタブを選択して&lt;kbd&gt;Enter&lt;/kbd&gt;キーで編集開始&lt;/li&gt;
&lt;li&gt;編集中に入力欄以外をクリック、または&lt;kbd&gt;Enter&lt;/kbd&gt;キーでタイトル文字列が確定&lt;/li&gt;
&lt;li&gt;編集中は&lt;kbd&gt;Tab&lt;/kbd&gt;キーを押しても無視&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;キーで編集をキャンセル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;文字で確定した場合も、キャンセル扱い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WaitCursor.html&quot;&gt;Cursorを砂時計に変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleEditor.html&quot;&gt;JTabbedPaneのタブにJTextFieldを配置してタイトルを編集&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 6&lt;/code&gt;版です。タブに&lt;code&gt;JTextField&lt;/code&gt;を&lt;code&gt;JTabbedPane#setTabComponentAt&lt;/code&gt;メソッドを使用して配置しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1359811&quot;&gt;Swing - Floating text field&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPopupMenu&lt;/code&gt;に&lt;code&gt;JTextField&lt;/code&gt;を配置することで同様のことを行うコードをKelVarnsonさんが投稿しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.4&lt;/code&gt;系だと編集開始時にうまく選択状態にできない場合があるようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-27 (月) 15:03:01

&lt;ul&gt;
&lt;li&gt;上記の問題と、選択状態がマウスの移動で外れてしまうバグを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-29 (水) 03:26:56&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;余白などを追加するとエディタがずれるバグを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-09-01 (金) 15:04:00&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTabComponentAt(...)&lt;/code&gt;メソッドで閉じるボタンなどと併用していた場合、編集後に文字列の長さがおかしくなるので、&lt;code&gt;revalidate()&lt;/code&gt;するように修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-10 (火) 16:49:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/edittabtitle</link>
                <guid>http://terai.xrea.jp/swing/edittabtitle</guid>
                <pubDate>2006-03-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneにタブを閉じるアイコンを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;にタブを閉じるためのアイコンやボタンを追加します。以下の参考リンクから引用したコードをほぼそのまま引用して紹介しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabWithCloseIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTVFao3q4I/AAAAAAAAAnE/SarJyg-AIQk/s800/TabWithCloseIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class JTabbedPaneWithCloseIcons extends JTabbedPane {
  public JTabbedPaneWithCloseIcons() {
    super();
    addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        tabClicked(e);
      }
    });
  }
  public void addTab(String title, Component component) {
    this.addTab(title, component, null);
  }
  public void addTab(String title, Component component, Icon extraIcon) {
    super.addTab(title, new CloseTabIcon(extraIcon), component);
  }
  private void tabClicked(MouseEvent e) {
    int index = getUI().tabForCoordinate(this, e.getX(), e.getY());
    if(index&amp;lt;0) return;
    Rectangle rect = ((CloseTabIcon)getIconAt(index)).getBounds();
    if(rect.contains(e.getX(), e.getY())) {
      removeTabAt(index);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTabbedPaneWithCloseButton&lt;/code&gt;(上)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TabbedPaneLayout&lt;/code&gt;を使用して、ボタンをタブの中にレイアウト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTabbedPaneWithCloseIcons&lt;/code&gt;(中)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の、タブにアイコンを表示する機能を利用&lt;/li&gt;
&lt;li&gt;タブのクリックされた位置がアイコン上かどうかで、そのタブを閉じるかどうかを判断&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CloseableTabbedPane&lt;/code&gt;(下)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTabbedPaneWithCloseIcons&lt;/code&gt;の改良版&lt;/li&gt;
&lt;li&gt;アイコンの位置、マウスがアイコン上に来たときの描画機能などを追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Java 1.6.0&lt;/code&gt;では、&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ部分に、文字列・アイコンに加え&lt;code&gt;Swing&lt;/code&gt;コンポーネントが使えるようになっているので、上記のサンプルはもっと簡単に実現できるようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabWithCloseButton.html&quot;&gt;JTabbedPaneにタブを閉じるボタンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.02.246.ne.jp/%7Etorutk/jvm/mustang.html&quot;&gt;Java SE 6 Mustangの新機能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1501884&quot;&gt;Swing (Archive) - Adding a close icon to a JTabbedPane tab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1356993&quot;&gt;Swing - JTabbedPane with close Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1480617&quot;&gt;Swing (Archive) - Closable Tab in JTabbedPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-09-2004/jw-0906-tabbedpane.html&quot;&gt;CloseAndMaxTabbedPane: An enhanced JTabbedPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infonode.net/index.html?itp&quot;&gt;InfoNode - Java Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/kirillcool/archive/2005/12/spicing_up_your_1.html&quot;&gt;Kirill Grouchnikov&amp;#39;s Blog: Spicing up your JTabbedPane - part II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPane.html&quot;&gt;JTabbedPaneでタブを追加削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/index-135776.html&quot;&gt;More Enhancements in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabwithcloseicon</link>
                <guid>http://terai.xrea.jp/swing/tabwithcloseicon</guid>
                <pubDate>2006-03-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Timerでアニメーションするアイコンを作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使って、アニメーションするアイコンを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AnimeIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTHuI0XeDI/AAAAAAAAARo/CVs615Dtkqs/s800/AnimeIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class AnimatedLabel extends JLabel implements ActionListener {
  private final javax.swing.Timer animator;
  private final AnimeIcon icon = new AnimeIcon();
  public AnimatedLabel() {
    super();
    animator = new javax.swing.Timer(100, this);
    setIcon(icon);
  }
  @Override public void actionPerformed(ActionEvent e) {
    icon.next();
    repaint();
  }
  public void startAnimation() {
    icon.setRunning(true);
    animator.start();
  }
  public void stopAnimation() {
    icon.setRunning(false);
    animator.stop();
  }
}
class AnimeIcon implements Icon {
  private static final Color cColor = new Color(0.5f,0.5f,0.5f);
  private final List&amp;lt;Shape&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
  private final Dimension dim;
  private boolean isRunning = false;
  public AnimeIcon() {
    super();
    double r  = 2.0d;
    double sx = 1.0d;
    double sy = 1.0d;
    list.add(new Ellipse2D.Double(sx+3*r, sy+0*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+5*r, sy+1*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+6*r, sy+3*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+5*r, sy+5*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+3*r, sy+6*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+1*r, sy+5*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+0*r, sy+3*r, 2*r, 2*r));
    list.add(new Ellipse2D.Double(sx+1*r, sy+1*r, 2*r, 2*r));
    dim = new Dimension((int)(r*8+sx*2), (int)(r*8+sy*2));
  }
  @Override public int getIconWidth() {
    return dim.width;
  }
  @Override public int getIconHeight() {
    return dim.height;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.setPaint((c!=null)?c.getBackground():Color.WHITE);
    g2d.fillRect(x, y, getIconWidth(), getIconHeight());
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setColor(cColor);
    float alpha = 0.0f;
    g2d.translate(x, y);
    for(Shape s: list) {
      alpha = isRunning?alpha+0.1f:0.5f;
      g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
      g2d.fill(s);
    }
    g2d.translate(-x, -y);
  }
  public void next() {
    if(isRunning) list.add(list.remove(0));
  }
  public void setRunning(boolean isRunning) {
    this.isRunning = isRunning;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、スタートボタンを押すと(&lt;code&gt;JTextArea&lt;/code&gt;に表示している作業状況はダミーで、実際は&lt;code&gt;Thread.sleep()&lt;/code&gt;で時間を稼いでいるだけ)アイコンが&lt;code&gt;FireFox&lt;/code&gt;風にアニメーションします。&lt;/p&gt;

&lt;p&gt;アニメーションは、&lt;code&gt;8&lt;/code&gt;個の円からアイコンを生成して、それぞれのインデックスを順に変更することで行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アイコンの生成

&lt;ul&gt;
&lt;li&gt;リスト(&lt;code&gt;Vector&lt;/code&gt;)に、座標の異なる円(&lt;code&gt;Ellipse2D.Double&lt;/code&gt;)を&lt;code&gt;8&lt;/code&gt;個生成して追加します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インデックスの変更

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Timer&lt;/code&gt;を使って、リストの先頭にある円を最後に移動します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;異なるアルファ値で円を描画

&lt;ul&gt;
&lt;li&gt;インデックスに応じたアルファ値でそれぞれの円を描画します。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;円がいびつだったので、アンチエイリアスをかけていまが、&lt;code&gt;Java 1.6.0&lt;/code&gt;では「小さな円(曲線)が円に見えなかった問題」が解消されているようです(&lt;a href=&quot;http://www.02.246.ne.jp/%7Etorutk/jvm/mustang.html#SEC26&quot;&gt;参考&lt;/a&gt;)。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;一々自分で座標を計算して&lt;code&gt;new Ellipse2D&lt;/code&gt;を&lt;code&gt;8&lt;/code&gt;個も並べるのが嫌だったり、もうすこし正確に円を配置したい場合は、&lt;code&gt;AffineTransform&lt;/code&gt;などを使ってアイコンを生成する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class AnimeIcon implements Icon {
  private static final Color cColor = new Color(0.5f,0.8f,0.5f);
  //private final Vector&amp;lt;Shape&amp;gt; list = new Vector&amp;lt;&amp;gt;();
  private final List&amp;lt;Shape&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
  private final Dimension dim;
  private boolean isRunning = false;
  //int rotate = 45;
  public AnimeIcon() {
    super();
    int r = 4;
    Shape s = new Ellipse2D.Float(0, 0, 2*r, 2*r);
    for(int i=0;i&amp;lt;8;i++) {
      AffineTransform at = AffineTransform.getRotateInstance(i*2*Math.PI/8);
      at.concatenate(AffineTransform.getTranslateInstance(r, r));
      list.add(at.createTransformedShape(s));
    }
    //int d = (int)(r*2*(1+2*Math.sqrt(2)));
    int d = (int)r*2*(1+3); // 2*Math.sqrt(2) is nearly equal to 3.
    dim = new Dimension(d, d);
  }
  @Override public int getIconWidth() {
    return dim.width;
  }
  @Override public int getIconHeight() {
    return dim.height;
  }
  @Override public void paintIcon(Component c, Graphics g, int x, int y) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.setPaint((c!=null)?c.getBackground():Color.WHITE);
    g2d.fillRect(x, y, getIconWidth(), getIconHeight());
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    g2d.setColor(cColor);
    float alpha = 0.0f;
    int xx = x + dim.width/2;
    int yy = y + dim.height/2;
    //AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(rotate), xx, yy);
    //at.concatenate(AffineTransform.getTranslateInstance(xx, yy));
    g2d.translate(xx, yy);
    for(Shape s: list) {
      alpha = isRunning?alpha+0.1f:0.5f;
      g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
      //g2d.fill(at.createTransformedShape(s));
      g2d.fill(s);
    }
  }
  public void next() {
    if(isRunning) {
      list.add(list.remove(0));
      //rotate = rotate&amp;lt;360?rotate+45:45;
    }
  }
  public void setRunning(boolean isRunning) {
    this.isRunning = isRunning;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;色の濃い円が時計回りに回転するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-15 (水) 11:12:08&lt;/li&gt;
&lt;li&gt;ロードインジケータと呼ぶらしい。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-07-11 (水) 23:49:44&lt;/li&gt;
&lt;li&gt;&lt;del&gt;このサンプルでは、&lt;code&gt;Swing Tutorial&lt;/code&gt;にあった古い&lt;code&gt;SwingWorker&lt;/code&gt;を使用しているけど、&lt;/del&gt; &lt;a href=&quot;http://java.net/projects/swingworker&quot;&gt;Swingworker — Java.net&lt;/a&gt; にある&lt;code&gt;JDK 1.6&lt;/code&gt;からバックポートされた&lt;code&gt;org.jdesktop.swingworker.SwingWorker&lt;/code&gt;を使用 &lt;del&gt;したほうがいいかも。そのうち修正する予定&lt;/del&gt; するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-17 (木) 01:44:29&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/animeicon</link>
                <guid>http://terai.xrea.jp/swing/animeicon</guid>
                <pubDate>2006-03-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaの背景に画像を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;の背景に画像を表示しています。&lt;a href=&quot;https://forums.oracle.com/thread/1395763&quot;&gt;Swing - How can I use TextArea with Background Picture ?&lt;/a&gt;のコードを引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CentredBackgroundBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTIyAIY_mI/AAAAAAAAATU/GovGMBqjzRo/s800/CentredBackgroundBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class CentredBackgroundBorder implements Border {
  private final BufferedImage image;
  public CentredBackgroundBorder(BufferedImage image) {
    this.image = image;
  }
  @Override public void paintBorder(Component c, Graphics g,
      int x, int y, int width, int height) {
    x += (width-image.getWidth())/2;
    y += (height-image.getHeight())/2;
    ((Graphics2D)g).drawRenderedImage(
        image, AffineTransform.getTranslateInstance(x,y));
  }
  @Override public Insets getBorderInsets(Component c) {
    return new Insets(0,0,0,0);
  }
  @Override public boolean isBorderOpaque() {
    return true;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のようにして&lt;code&gt;JTextArea&lt;/code&gt;の背景に画像を表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;画像を中央に表示するようにした&lt;code&gt;Border&lt;/code&gt;を作成し、これを&lt;code&gt;Viewport&lt;/code&gt;の&lt;code&gt;Border&lt;/code&gt;として設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Viewport&lt;/code&gt;に追加した&lt;code&gt;JTextArea&lt;/code&gt;の背景を透明化

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;textarea.setOpaque(false);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textarea.setBackground(new Color(0,0,0,0)));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Border&lt;/code&gt;を使って背景に画像を表示する方法は、&lt;code&gt;JDesktopPane&lt;/code&gt;(参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentFrame.html&quot;&gt;JInternalFrameを半透明にする&lt;/a&gt;)や、その他の&lt;code&gt;JComponent&lt;/code&gt;でも使用することが出来ます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1395763&quot;&gt;Swing - How can I use TextArea with Background Picture ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TransparentFrame.html&quot;&gt;JInternalFrameを半透明にする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bekkoame.ne.jp/%7Ebootan/free2.html&quot;&gt;デジタル出力工房　絵写楽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;centre&lt;/code&gt;は英式の&lt;code&gt;center&lt;/code&gt;のこと？らしいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-23 (木) 00:00:58&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/centredbackgroundborder</link>
                <guid>http://terai.xrea.jp/swing/centredbackgroundborder</guid>
                <pubDate>2006-03-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaに表示できる行数を制限</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ドキュメントのサイズを一定にして、&lt;code&gt;JTextArea&lt;/code&gt;など表示できる行数を制限します。&lt;a href=&quot;https://forums.oracle.com/thread/1479784&quot;&gt;Swing (Archive) - JTextArea Memory Overflow ??&lt;/a&gt;にあるソースコードを参考にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FIFODocument&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMafjL8xI/AAAAAAAAAZI/-KMSGPcn0jM/s800/FIFODocument.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;jta.setEditable(false);
jta.getDocument().addDocumentListener(new DocumentListener() {
  @Override public void insertUpdate(DocumentEvent e) {
    final Document doc = jta.getDocument();
    final Element root = doc.getDefaultRootElement();
    if(root.getElementCount()&amp;lt;=maxLines) return;
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        removeLines(doc, root);
      }
    });
    jta.setCaretPosition(doc.getLength());
  }
  private void removeLines(Document doc, Element root) {
    Element fl = root.getElement(0);
    try{
      doc.remove(0, fl.getEndOffset());
    }catch(BadLocationException ble) {
      System.out.println(ble);
    }
  }
  @Override public void removeUpdate(DocumentEvent e) {}
  @Override public void changedUpdate(DocumentEvent e) {}
});
final Timer timer = new Timer(100, new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    String s = new Date().toString();
    jta.append((jta.getDocument().getLength()&amp;gt;0)?&quot;\n&quot;+s:s);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;一行追加された時に、規定の行数を越えている場合は、先頭から一行を削除しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;10&lt;/code&gt;行以上になると先頭行から削除されていきます。また、複数行の入力やペーストには対応していません。それらにも対応する場合は、&lt;a href=&quot;https://forums.oracle.com/thread/1479784&quot;&gt;Swing (Archive) - JTextArea Memory Overflow ??&lt;/a&gt;を参考にしてみてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1479784&quot;&gt;Swing (Archive) - JTextArea Memory Overflow ??&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample&lt;/code&gt;実行できないよ -- &lt;a href=&quot;http://terai.xrea.jp/cinik.html&quot;&gt;cinik&lt;/a&gt; 2006-11-16 (木) 01:09:03

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jnlp&lt;/code&gt;ファイルの名前を&lt;code&gt;sample&lt;/code&gt;から&lt;code&gt;example&lt;/code&gt;に変更しているので、一旦キャッシュを消してみるとうまくいくかもしれません。(じゃなくて&lt;code&gt;Exception&lt;/code&gt;などが発生しているのでしょうか？) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-11-16 (木) 12:39:54&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fifodocument</link>
                <guid>http://terai.xrea.jp/swing/fifodocument</guid>
                <pubDate>2006-02-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaに行番号を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;に行番号を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineNumber&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPV_bkDWI/AAAAAAAAAd0/Jktuzx5j5gU/s800/LineNumber.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LineNumberView extends JComponent {
  private static final int MARGIN = 5;
  private final JTextArea textArea;
  private final FontMetrics fontMetrics;
  //private final int topInset;
  private final int fontAscent;
  private final int fontHeight;
  private final int fontDescent;
  private final int fontLeading;

  public LineNumberView(JTextArea textArea) {
    this.textArea = textArea;
    Font font   = textArea.getFont();
    fontMetrics = getFontMetrics(font);
    fontHeight  = fontMetrics.getHeight();
    fontAscent  = fontMetrics.getAscent();
    fontDescent = fontMetrics.getDescent();
    fontLeading = fontMetrics.getLeading();
    //topInset  = textArea.getInsets().top;

    textArea.getDocument().addDocumentListener(new DocumentListener() {
      @Override public void insertUpdate(DocumentEvent e) {
        repaint();
      }
      @Override public void removeUpdate(DocumentEvent e) {
        repaint();
      }
      @Override public void changedUpdate(DocumentEvent e) {}
    });
    textArea.addComponentListener(new ComponentAdapter() {
      @Override public void componentResized(ComponentEvent e) {
        revalidate();
        repaint();
      }
    });
    Insets i = textArea.getInsets();
    setBorder(BorderFactory.createCompoundBorder(
      BorderFactory.createMatteBorder(0, 0, 0, 1, Color.GRAY),
      BorderFactory.createEmptyBorder(i.top, MARGIN, i.bottom, MARGIN - 1)));
    setOpaque(true);
    setBackground(Color.WHITE);
    setFont(font);
  }
  private int getComponentWidth() {
    Document doc  = textArea.getDocument();
    Element root  = doc.getDefaultRootElement();
    int lineCount = root.getElementIndex(doc.getLength());
    int maxDigits = Math.max(3, String.valueOf(lineCount).length());
    Insets i = getBorder().getBorderInsets(this);
    return maxDigits * fontMetrics.stringWidth(&quot;0&quot;) + i.left + i.right;
    //return 48;
  }
  private int getLineAtPoint(int y) {
    Element root = textArea.getDocument().getDefaultRootElement();
    int pos = textArea.viewToModel(new Point(0, y));
    return root.getElementIndex(pos);
  }
  @Override public Dimension getPreferredSize() {
    return new Dimension(getComponentWidth(), textArea.getHeight());
  }
  @Override public void paintComponent(Graphics g) {
    g.setColor(getBackground());
    Rectangle clip = g.getClipBounds();
    g.fillRect(clip.x, clip.y, clip.width, clip.height);

    g.setColor(getForeground());
    int base  = clip.y;
    int start = getLineAtPoint(base);
    int end   = getLineAtPoint(base + clip.height);
    int y     = start * fontHeight;
    int rmg   = getBorder().getBorderInsets(this).right;
    for(int i=start;i&amp;lt;=end;i++) {
      String text = String.valueOf(i + 1);
      int x = getComponentWidth() - rmg - fontMetrics.stringWidth(text);
      y += fontAscent;
      g.drawString(text, x, y);
      y += fontDescent + fontLeading;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1479759&quot;&gt;Swing (Archive) - Advice for editor gutter implementation...&lt;/a&gt;を参考にして、&lt;code&gt;JTextArea&lt;/code&gt;に行番号を表示しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルで使用する&lt;code&gt;JTextArea&lt;/code&gt;は、使用するフォントや余白などは変更不可で、各行の高さは最後まで一定であると想定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1479759&quot;&gt;Swing (Archive) - Advice for editor gutter implementation...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1369109&quot;&gt;Swing - Line Number in JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1493292&quot;&gt;Swing - line number in jtextpane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;すごいね！私はこのような資料を探しています、どうも　ありがとうございます。 -- &lt;a href=&quot;http://terai.xrea.jp/%EF%BC%A3%EF%BC%AB.html&quot;&gt;ＣＫ&lt;/a&gt; 2007-04-21 (Sat) 18:29:31

&lt;ul&gt;
&lt;li&gt;どういたしまして。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-23 (月) 09:47:47&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こちらのソースは非常に参考になります。現在趣味でエディタを作成しているのですが、&lt;code&gt;JTextPane&lt;/code&gt;の&lt;code&gt;Document&lt;/code&gt;を&lt;code&gt;JTextArea&lt;/code&gt;に与えてカーソル位置を取得しています。&lt;code&gt;JTextPane&lt;/code&gt;で行番号、列番号を正確に取得できないものでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/shusen.html&quot;&gt;shusen&lt;/a&gt; 2007-11-09 (金) 10:22:30&lt;/li&gt;
&lt;li&gt;どうもです。&lt;code&gt;JTextPane&lt;/code&gt;だと、デフォルトの行の折り返しをどう扱うかで、行番号の表示が異なります。   -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-09 (金) 14:52:40

&lt;ul&gt;
&lt;li&gt;折り返しても表示は前の行のままの場合

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1369109&quot;&gt;Swing - Line Number in JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;このページのサンプルは、上記のリンク先にある&lt;code&gt;LineNumberView&lt;/code&gt;(@author Alan Moore)を参考にしていますが、&lt;code&gt;JTextArea&lt;/code&gt;に必要なさそうな折り返しや各行の高さが異なる場合などの処理を削っているので、&lt;code&gt;JTextPane&lt;/code&gt;で使う場合は、リンク先などのオリジナルのソースを参考にしてください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;折り返された行にも行番号を表示したい場合

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1493292&quot;&gt;Swing - line number in jtextpane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;上記のリンク先にあるサンプルでは、&lt;code&gt;EditorKit&lt;/code&gt;を使って行番号を表示しており、&lt;code&gt;JTextPane&lt;/code&gt;で折り返された行でも、表示に従って行番号が割り振られています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ご返答ありがとうございます。現在はこちらにある折り返し抑制のソースを利用させていただいているので、&lt;code&gt;EditorKit&lt;/code&gt;を利用する分を試してみたいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/shusen.html&quot;&gt;shusen&lt;/a&gt; 2007-11-09 (金) 19:16:05&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EditorKit&lt;/code&gt;を利用した分をｺﾋﾟﾍﾟして、とりあえずそのままコンパイル・実行してみました。ここでおかしいことがありまして、コマンドプロンプトから起動すると文字が挿入された行のみ行番号が表示されるのですが、自作エディタから&lt;code&gt;ProcessBuilder&lt;/code&gt;と&lt;code&gt;Process&lt;/code&gt;で&lt;code&gt;&amp;quot;java Test&amp;quot;&lt;/code&gt;となるように呼び出すと、未入力の行も含めて全ての行番号が表示されます。コレはプロンプトの実効環境がおかしいのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/shusen.html&quot;&gt;shusen&lt;/a&gt; 2007-11-14 (水) 17:20:54&lt;/li&gt;
&lt;li&gt;すみません、自己解決しました（たぶん）。ランタイムの問題で、&lt;code&gt;jre1.6.0_01&lt;/code&gt;以下だと上記の状態になりました。&lt;code&gt;jre1.6.0_02&lt;/code&gt;と&lt;code&gt;jre1.6.0_03&lt;/code&gt;ではちゃんと表示されました。 -- &lt;a href=&quot;http://terai.xrea.jp/shusen.html&quot;&gt;shusen&lt;/a&gt; 2007-11-14 (水) 17:31:45

&lt;ul&gt;
&lt;li&gt;情報ありがとうございます。直接は関係のない話ですが、バージョンかぁと何気にダウンロードサイトに行ったら、 &lt;del&gt;サーバー落ちてるっぽいですねorz&lt;/del&gt; あとで見たらダウンロードのページがすこし変更されているみたいなので、単に更新中だっただけ？みたいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-14 (水) 18:43:29&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ありがとう。参考になりました。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%9F%E3%83%AB%E3%82%B3%E3%83%BB%E3%83%9E%E3%82%B0%E3%82%AB%E3%83%83%E3%83%97.html&quot;&gt;ミルコ・マグカップ&lt;/a&gt; 2013-08-08 (木) 16:38:51&lt;/li&gt;
&lt;li&gt;ところで、これってJTextAreaとフォントを同じにしないとgetComponentWidth()で適切な幅が得られないと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%9F%E3%83%AB%E3%82%B3%E3%83%BB%E3%83%9E%E3%82%B0%E3%82%AB%E3%83%83%E3%83%97.html&quot;&gt;ミルコ・マグカップ&lt;/a&gt; 2013-08-08 (木) 16:40:32&lt;/li&gt;
&lt;li&gt;getComponentWidth()はJTextAreaのフォントを基に幅を算出しているけど、実際に描画されるフォントはデフォルトのフォントだから -- &lt;a href=&quot;http://terai.xrea.jp/%E3%83%9F%E3%83%AB%E3%82%B3%E3%83%BB%E3%83%9E%E3%82%B0%E3%82%AB%E3%83%83%E3%83%97.html&quot;&gt;ミルコ・マグカップ&lt;/a&gt; 2013-08-08 (木) 16:44:11

&lt;ul&gt;
&lt;li&gt;こんばんは。「JTextAreaのフォントの幅...」は、確かにそうですね。この幅は行番号の表示幅とその右寄せにしか使ってないので、いっそ固定にしてもいいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-08 (木) 22:24:41&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LineNumberView&lt;/code&gt;に&lt;code&gt;setFont&lt;/code&gt;で同じフォントを使用するように修正しました(ミルコさん、ありがとうございました)。ついでに&lt;code&gt;JTextArea&lt;/code&gt;のフォントより&lt;code&gt;RowHeaderView&lt;/code&gt;(行番号表示用)のフォントサイズがすこし小さい場合などでも問題ないように、ベースラインを真面目に揃えて描画するよう修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-08-09 (金) 12:59:25&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/linenumber</link>
                <guid>http://terai.xrea.jp/swing/linenumber</guid>
                <pubDate>2006-02-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipにアイコンを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolTip&lt;/code&gt;にアイコンを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolTipIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVl25jXSI/AAAAAAAAAn4/-g0LJzeMmbc/s800/ToolTipIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l1 = new JLabel(&quot;JLabelを使ってツールチップにアイコン&quot;) {
  @Override public JToolTip createToolTip() {
    final JLabel iconlabel = new JLabel(icon);
    iconlabel.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));
    LookAndFeel.installColorsAndFont(
        iconlabel, &quot;ToolTip.background&quot;, &quot;ToolTip.foreground&quot;, &quot;ToolTip.font&quot;);
    JToolTip tip = new JToolTip() {
      @Override public Dimension getPreferredSize() {
        //https://forums.oracle.com/thread/2199222
        return getLayout().preferredLayoutSize(this);
      }
      @Override public void setTipText(final String tipText) {
        String oldValue = iconlabel.getText();
        iconlabel.setText(tipText);
        firePropertyChange(&quot;tiptext&quot;, oldValue, tipText);
      }
    };
    tip.setComponent(this);
    tip.setLayout(new BorderLayout());
    tip.add(iconlabel);
    return tip;
  }
};
l1.setToolTipText(&quot;Test1&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l2 = new JLabel(&quot;MatteBorderでツールチップにアイコン&quot;) {
  @Override public JToolTip createToolTip() {
    JToolTip tip = new JToolTip() {
      @Override public Dimension getPreferredSize() {
        Dimension d = super.getPreferredSize();
        Insets i = getInsets();
        d.height = Math.max(d.height, icon.getIconHeight()+i.top+i.bottom);
        return d;
      }
    };
    tip.setComponent(this);
    Border b1 = tip.getBorder();
    Border b2 = BorderFactory.createMatteBorder(0, icon.getIconWidth(), 0, 0, icon);
    Border b3 = BorderFactory.createEmptyBorder(1,1,1,1);
    Border b4 = BorderFactory.createCompoundBorder(b3, b2);
    tip.setBorder(BorderFactory.createCompoundBorder(b1, b4));
    return tip;
  }
};
l2.setToolTipText(&quot;Test2&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l3 = new JLabel(&quot;htmlタグでツールチップにアイコン&quot;);
l3.setToolTipText(&quot;&amp;lt;html&amp;gt;&amp;lt;img src=&#39;&quot;+url+&quot;&#39;&amp;gt;テスト&amp;lt;/img&amp;gt;&amp;lt;/html&amp;gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上ラベル

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JToolTip&lt;/code&gt;に&lt;code&gt;JLabel&lt;/code&gt;を追加しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中ラベル

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MatteBorder&lt;/code&gt;を使ってアイコンを表示するように、&lt;code&gt;createToolTip&lt;/code&gt;メソッドをオーバーライドしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下ラベル

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt;の&lt;code&gt;img&lt;/code&gt;タグを&lt;code&gt;setToolTipText&lt;/code&gt;メソッドに使ってアイコンを表示しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.icongalore.com/&quot;&gt;XP Style Icons - Windows Application Icon, Software XP Icons&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アイコンを利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/2199222&quot;&gt;Swing - Using text and a progress bar inside of a tooltip.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MatteBorder&lt;/code&gt;を使うと&lt;code&gt;Java 1.4&lt;/code&gt;と&lt;code&gt;1.5&lt;/code&gt;で表示が微妙に異なるようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-02-13 (月) 14:57:57&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;JToolTip&lt;/code&gt;に貼る方法を追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-05 (水) 18:40:54&lt;/li&gt;
&lt;li&gt;「&lt;code&gt;MatteBorder&lt;/code&gt;でツールチップにアイコン」で、&lt;code&gt;MatteBorder&lt;/code&gt;と&lt;code&gt;EmptyBorder&lt;/code&gt;の内外が反対になっていたのを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-05 (水) 19:15:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltipicon</link>
                <guid>http://terai.xrea.jp/swing/tooltipicon</guid>
                <pubDate>2006-02-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Browserを起動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ラベル上の&lt;code&gt;URL&lt;/code&gt;がクリックされると&lt;code&gt;Browser&lt;/code&gt;を起動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BrowserLauncher&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTIRWyBTSI/AAAAAAAAASg/pT9GD2uz8BI/s800/BrowserLauncher.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JEditorPane editor = new JEditorPane(&quot;text/html&quot;,
  &quot;&amp;lt;html&amp;gt;&amp;lt;a href=&#39;&quot;+MYSITE+&quot;&#39;&amp;gt;&quot;+MYSITE+&quot;&amp;lt;/a&amp;gt;&quot;);
editor.setOpaque(false);
editor.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
editor.setEditable(false);
editor.addHyperlinkListener(new HyperlinkListener() {
  @Override public void hyperlinkUpdate(HyperlinkEvent e) {
    if(e.getEventType()==HyperlinkEvent.EventType.ACTIVATED) {
      BrowserLauncher.openURL(MYSITE);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;ブラウザの起動には、&lt;a href=&quot;http://www.centerkey.com/java/browser/&quot;&gt;Bare Bones Browser Launch&lt;/a&gt;を使用しています。&lt;code&gt;Mac OS X&lt;/code&gt;, &lt;code&gt;GNU/Linux&lt;/code&gt;, &lt;code&gt;Unix&lt;/code&gt;, &lt;code&gt;Windows XP&lt;/code&gt;に対応しているようです。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java SE 6&lt;/code&gt;の新機能である、&lt;code&gt;java.awt.Desktop&lt;/code&gt;を使用すると、同じようにブラウザやメーラーを起動することができるようになっています。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/index-135182.html&quot;&gt;Using the Desktop API in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Desktop.html&quot;&gt;Desktopでブラウザを起動(JDK 6)&lt;/a&gt;)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.centerkey.com/&quot;&gt;Bare Bones Browser Launch for Java • • • Use Default Browser to Open a Web Page from a Swing Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java-tips.org/content/view/40/2/&quot;&gt;Java Tips: Free Java Programs, Free Java Applets, Free Java Code, Free Java Tutorials, Free Java Scripts, Java Programming Help&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/browserlauncher</link>
                <guid>http://terai.xrea.jp/swing/browserlauncher</guid>
                <pubDate>2006-02-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaに行カーソルを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;のカーソルがある行全体にアンダーラインを引きます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LineCursor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTPL3eZj2I/AAAAAAAAAdk/KJTR3_NeAZE/s800/LineCursor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LineCursorTextArea extends JTextArea {
  private static final Color cfc = Color.BLUE;
  private final DefaultCaret caret;
  public LineCursorTextArea() {
    super();
    caret = new DefaultCaret() {
      @Override protected synchronized void damage(Rectangle r) {
        if(r!=null) {
          JTextComponent c = getComponent();
          x = 0;
          y = r.y;
          width  = c.getSize().width;
          height = r.height;
          c.repaint();
        }
      }
    };
    caret.setBlinkRate(getCaret().getBlinkRate());
    setCaret(caret);
  }
  @Override protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    Graphics2D g2 = (Graphics2D)g;
    Insets i = getInsets();
    //int y = g2.getFontMetrics().getHeight()*getLineAtCaret(this)+i.top;
    int y = caret.y+caret.height-1;
    g2.setPaint(cfc);
    g2.drawLine(i.left, y, getSize().width-i.left-i.right, y);
  }
//   public static int getLineAtCaret(JTextComponent component) {
//     int caretPosition = component.getCaretPosition();
//     Element root = component.getDocument().getDefaultRootElement();
//     return root.getElementIndex(caretPosition)+1;
//   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea#paintComponent&lt;/code&gt;メソッドをオーバーライドして、カーソルがある行にアンダーラインを引いています。&lt;/p&gt;

&lt;p&gt;キャレットの移動に対応するため、&lt;code&gt;DefaultCaret#damage&lt;/code&gt;メソッドを変更して、描画に使われる領域を描画し直しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jroller.com/page/santhosh/20050601?catname=%2FSwing&quot;&gt;Highlighting Current Line&lt;/a&gt;のように、&lt;code&gt;Highlighter&lt;/code&gt;を使っても同様のことができるようです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1393939&quot;&gt;Swing - Line Number in JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1377129&quot;&gt;Swing - Line highlighting problem in presence of text highlighting!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/page/santhosh/20050601?catname=%2FSwing&quot;&gt;Highlighting Current Line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LineHighlighter.html&quot;&gt;JTextAreaに行ハイライトカーソルを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Caret&lt;/code&gt;の高さを使用するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-17 (月) 16:54:50&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/linecursor</link>
                <guid>http://terai.xrea.jp/swing/linecursor</guid>
                <pubDate>2006-01-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>来週のネタとか(ﾟεﾟ)</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing.html&quot;&gt;Swing&lt;/a&gt;関係の自分用のメモとかネタ帳みたいなものです。&lt;/p&gt;

&lt;h2&gt;移動: ネタのリクエスト、Swingのサンプルに関するメモ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以前ここで頂いたコメントは、&lt;a href=&quot;http://terai.xrea.jp/Comments/Swing.html&quot;&gt;Comments/Swing&lt;/a&gt;に移動しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;Swing調整中のネタ一覧&lt;/h2&gt;

&lt;h3&gt;調整中&lt;/h3&gt;

&lt;p&gt;以下テスト中なので、&lt;code&gt;Exception&lt;/code&gt;が発生したり、まともに動作しなくても(ﾟεﾟ)ｷﾆｼﾅｲ!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CubeEffect.html&quot;&gt;Swing/CubeEffect&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://java.net/projects/animatingcardlayout&quot;&gt;Animatingcardlayout — Project Kenai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kawa.net/works/js/animation/cube-e.html&quot;&gt;(JavaScript) Animation.Cube - Rotating Cube Animation Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?topic=36768&amp;amp;forum=12&amp;amp;7&quot;&gt;http://www.atmarkit.co.jp/bbs/phpBB/viewtopic.php?topic=36768&amp;amp;forum=12&amp;amp;7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jogl-demos.dev.java.net/&quot;&gt;jogl-demos:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://programamemo2.blogspot.com/2008/06/image-processing.html&quot;&gt;プログラマメモ2: Image Processing 台形変形への道 - へたれなので。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-03-2008/jw-03-opensourcejava-animatingcardlayout.html&quot;&gt;Open source Java projects: AnimatingCardLayout - JavaWorld&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://animatingcardlayout.dev.java.net/&quot;&gt;animatingcardlayout: ホーム&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DropOnTabTitle.html&quot;&gt;Swing/DropOnTabTitle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultLookAndFeelDecorated.html&quot;&gt;Swing/DefaultLookAndFeelDecorated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/NoArrowButtonCellEditor.html&quot;&gt;Swing/NoArrowButtonCellEditor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/UninstallListeners.html&quot;&gt;Swing/UninstallListeners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ScrollPaneCorner.html&quot;&gt;Swing/ScrollPaneCorner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/16547365/swing-gui-flickering-white-error&quot;&gt;java - swing gui flickering white error - Stack Overflow&lt;/a&gt;のサンプルを試していたら面白い挙動に遭遇。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JDK1.7.0_21&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IllegalArgumentException: Comparison method violates its general contract!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.lang.IllegalArgumentException: Comparison method violates its general contract!
    at java.util.TimSort.mergeLo(TimSort.java:747)
    at java.util.TimSort.mergeAt(TimSort.java:483)
    at java.util.TimSort.mergeCollapse(TimSort.java:410)
    at java.util.TimSort.sort(TimSort.java:214)
    at java.util.TimSort.sort(TimSort.java:173)
    at java.util.Arrays.sort(Arrays.java:659)
    at java.util.Collections.sort(Collections.java:217)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;フレームのリサイズで上下左右に余白？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;JDK1.6.0_41&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;フレームのリサイズで右と下に余白？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import javax.swing.*;

public class Gui {
  public JComponent makeUI() {
    JPanel p = new JPanel(new GridLayout(22,12,10,10));
    p.setBackground(Color.WHITE);
    p.setBorder(BorderFactory.createLineBorder(Color.BLUE, 10));
    for (int i = 0; i &amp;lt; 22; i++) {
      for (int j = 0; j &amp;lt; 12; j++) {
        JLabel label = new JLabel();
        label.setBorder(BorderFactory.createLineBorder(Color.RED));
        label.setBackground(Color.GRAY);
        label.setOpaque(true);
        //label.setPreferredSize(new Dimension(50, 50));
        p.add(label);
      }
    }
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new Gui().makeUI());
    f.setSize(320, 240);
    //f.pack();
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JMenuBar&lt;/code&gt;を検索して&lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;に、&lt;code&gt;ActionListener&lt;/code&gt;を追加&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Arrays.stream(menuBar.getSubElements())
  .flatMap(new Function&amp;lt;MenuElement, Stream&amp;lt;MenuElement&amp;gt;&amp;gt; () {
      @Override public Stream&amp;lt;MenuElement&amp;gt; apply(MenuElement me) {
          MenuElement[] sub = me.getSubElements();
          if (sub.length != 0) {
              return Arrays.stream(sub).flatMap(sme -&amp;gt; apply(sme));
          } else {
              return Stream.of(me);
          }
      }
  })
  .filter(mi -&amp;gt; mi instanceof JRadioButtonMenuItem)
  .forEach(mi -&amp;gt; ((JRadioButtonMenuItem) mi).addActionListener(al));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;検討中で未実装&lt;/h3&gt;

&lt;p&gt;こっそり消えても(ﾟεﾟ)ｷﾆｼﾅｲ!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileChooserWithOptionPane.html&quot;&gt;Swing/FileChooserWithOptionPane&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;%JAVA_HOME%\demo\jfc\FileChooserDemo\src\FileChooserDemo.java&lt;/li&gt;
&lt;li&gt;%JAVA_HOME%\demo\jfc\SwingSet2\src\FileChooserDemo.java&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearComboBoxSelection.html&quot;&gt;Swing/ClearComboBoxSelection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SecondaryLoop.html&quot;&gt;Swing/SecondaryLoop&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10196809/secondaryloop-instead-of-swingworker&quot;&gt;java - SecondaryLoop instead of SwingWorker? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h3&gt;メモ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JTree Table&lt;/li&gt;
&lt;li&gt;JPopupMenu BlankIcon&lt;/li&gt;
&lt;li&gt;UIDefaults ProxyLazyValue&lt;/li&gt;
&lt;li&gt;JTable setSurrendersFocusOnKeystroke&lt;/li&gt;
&lt;li&gt;File createTempFile&lt;/li&gt;
&lt;li&gt;JTable Vertical Table Header&lt;/li&gt;
&lt;li&gt;File getTotalSpace, getFreeSpace, getUsableSpace&lt;/li&gt;
&lt;li&gt;JTabbedPane tab height animation&lt;/li&gt;
&lt;li&gt;Formatter and password char&lt;/li&gt;
&lt;li&gt;Cells with rouded corners in JTable&lt;/li&gt;
&lt;li&gt;Tearaway tabs&lt;/li&gt;
&lt;li&gt;Multi selection JComboBox&lt;/li&gt;
&lt;li&gt;JSplitPane hide unhide tab&lt;/li&gt;
&lt;li&gt;JScrollBar BlockIncrement&lt;/li&gt;
&lt;li&gt;JScrollPane MapView subview&lt;/li&gt;
&lt;li&gt;JDesktopPane JInternalFrame Tab Loop&lt;/li&gt;
&lt;li&gt;JTabbedPane ScrollButton Layout&lt;/li&gt;
&lt;li&gt;JTabbedPane Transparency&lt;/li&gt;
&lt;li&gt;JTextField(search) in JButton(Tab, ButtonBar)&lt;/li&gt;
&lt;li&gt;switch JInternalFrame to JTabbedPane&lt;/li&gt;
&lt;li&gt;JTree JList(1.8.0) Nimbus Selection Rect&lt;/li&gt;
&lt;li&gt;Highlighter#removeAllHighlights()&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/html/HTMLDocument.html#getIterator%28javax.swing.text.html.HTML.Tag%29&quot;&gt;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/html/HTMLDocument.html#getIterator(javax.swing.text.html.HTML.Tag)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;Swingのサンプルに関するメモ(引用)&lt;/h2&gt;

&lt;p&gt;目標にしようと思っているけど、なかなか難しそう…。&lt;/p&gt;

&lt;h3&gt;シンプルで、小さなサンプル(Simple Client Applications)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://forums.java.net/jive/thread.jspa?messageID=165001&amp;amp;tstart=0#165001&quot;&gt;java.net Forums : Simple Client Applications ...&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;via: &lt;a href=&quot;http://weblogs.java.net/blog/editors/archives/2006/10/all_i_want.html&quot;&gt;Editor&amp;#39;s Daily Blog: All I Want&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;What surprises me about Java on the desktop is that there are very few simple clean example of it in use that are fundamental.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;** 「チュートリアル」「小さなサンプル」「レビュー」 [#t1152eab]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://dodgson.org/omo/t/?date=20070706#p02&quot;&gt;社内ライブラリのチュートリアル&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;社内にはそのライブラリで作られたアプリケーションが色々あり, ライブラリを使う時はその中から欲しいコード片を掘り起こすのが常だった.苦労の多い作業だった. オブジェクトの初期化, 設定, 利用のシーケンスはコード内に分散しており, それを漏れなく抜き出すのは難しい. コードの質も玉石混合で, バグを持ったままコピペされることもあった. 私達の目的は, 極端に言えば便利で正しいコピペ素材を提供することだった.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;** Examples should be exemplary (例は典型的であるべき) [#kf951705]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.javalobby.org/java/forums/t99065.html&quot;&gt;Interested in Writing New Tutorial Demos for Sun?&lt;/a&gt;についてたコメントを引用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;開発者はサンプルコードに頼って(コピペして)いる&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.javalobby.org/java/forums/t99065.html&quot;&gt;Examples should be exemplary&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;He references a research study that found that a bug in one of the original JDK applet examples was replicated in 75% of applets attempting similar goal in their sampling of applets found on the internet. This underscores the fact that developers rely on example code, even, unfortunately, to the point that we copy bugs too. This is sometimes described as &amp;quot;Monkey see, monkey do&amp;quot;, or &amp;quot;Rape and Paste&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;** コピー指向プログラミング [#bda55670]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ameblo.jp/argv/entry-10144604985.html&quot;&gt;http://ameblo.jp/argv/entry-10144604985.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;あらかじめ完成度の高い「コピー元」を用意する&lt;/li&gt;
&lt;li&gt;コピー元を品質の高いコードに集中させることで、「バグのコピー」や「似て非なるバージョンの散在」を防ぐ。&lt;/li&gt;
&lt;li&gt;「コピーされたもの」が分かるようにする

&lt;ul&gt;
&lt;li&gt;例えば、コピー元のコードに特殊なコメントを埋め込む（もちろん、コピー先でも消さないでおく）などして、後からコピー先を検索しやすくする。これは、不具合修正や仕様変更などの際に、影響範囲（全てのコピー先）を特定しやすくするためである。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h3&gt;Best Practice for Swing coding&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2007/09/why_i_dont_like.html&quot;&gt;Alexander Potochkin&amp;#39;s Blog: Why I don&amp;#39;t use Swing hacks (in production code)&lt;/a&gt;についてたコメントを引用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For deities sake, coordinate your documentation and example in one single place. And make sure they demonstrate best practice.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://sourceforge.jp/magazine/10/01/20/0420230&quot;&gt;米Microsoft、コードサンプル集「All-In-One Code Framework」 - SourceForge.JP Magazine&lt;/a&gt;&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;http://weblogs.java.net/blog/alexfromsun/archive/2007/09/why_i_dont_like.html:title=Best Practice for Swing coding&amp;gt;
The problem with the &quot;Swing Hacks&quot; book is that it contains solutions in search for problems. And that is just the wrong motivation to add a hack to production code. 

There are other, good motivations to add hacks to production code. Let&#39;s start with a better definition of the word hack: 
A creative circumvention of a limitation 
And unfortunately Swing has many limitations which hurt in the real world. If your customer insists that you make something happen &quot;or else ...&quot; you have a very good motivation for a hack. I do not agree that a programmer has to understand all implications of a hack. Swing is such a complex system, itself full of ugly hacks, bugs, and badly documented, that this is just not feasible. 

When it comes to Swing then part of the problem is not only that Swing is so limited, but also that the limitations don&#39;t get fixed. This is an attitude problem at Sun. Sun lacks the understanding and imagination of what is needed on the desktop. Many Sun people still seem to live in SunView (ups, I am showing my age here) lala-land. Sun thinks it&#39;s always right. 

Sun has totally failed to establish a best-practice for Swing coding. The examples that ship with the JDK are some of the worst Swing code. What is even worse, while Sun employees were busy writing shiny conference demos, no one at Sun could be arsed to clean up the JDK example mess during the last ten years. This is not an isolated case. The Swing tutorial examples are equally bad. They can&#39;t even be bothered to use JavaDoc for documentation and typically demonstrate badly structured code for badly structured GUIs. 

Sun also has fragmented and hidden GUI information in unbelievable ways. For example, try to find a single page listing all Swing system properties. Good luck. In general, some Swing information comes with the JDK. Some can be found in the TSC (which is on life support). Others on ominous pages like JDCTechTips, Almanac (blech!), Code samples, Online Training article, Java.net articles, multi-media samples, technical articles, 2D examples in four places (did you know Sun has a half-finished Postscript Interpreter in Java http://java.sun.com/products/java-media/2D/samples/postscript/PostscriptDemo.zip?). Then there are dev.java.net examples, JDC, SDN, whatnot. I have probably forgot another ten places where Sun hides Swing, 2D, media, GUI or desktop information. 

No one at Sun seems to coordinate the stuff. Instead everyone at Sun seems to run the his own show, trying to establish an own kingdom. For deities sake, coordinate your documentation and example in one single place. And make sure they demonstrate best practice. 

Posted by: ewin on September 28, 2007 at 02:58 PM
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Swing 修正予定・検討メモ [#h1c0f889]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;実際にやるかどうかは未定ですが、今後&lt;code&gt;Swing Tips&lt;/code&gt;を改良したいと思っていることをメモしています(順不同)。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Swing Tips&lt;/code&gt;のみ分離して、&lt;code&gt;Markdown&lt;/code&gt;、静的サイト生成に移行できないか検討中&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/index.html&quot;&gt;http://terai.xrea.jp/index.html&lt;/a&gt; で、&lt;code&gt;Jekyll Bootstrap&lt;/code&gt;、&lt;code&gt;DISQUS&lt;/code&gt;のテスト中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jekyll&lt;/code&gt;、タグ付け&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;の&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;タグ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;などのアンダーライン&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;new JPanel()&lt;/code&gt;などの翻訳拒否&lt;/del&gt; &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;で翻訳されないはず&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;https://sites.google.com/site/javaswingtips/ は、&lt;code&gt;500&lt;/code&gt;ページ近く手動でアップロードすることになりそうなので無理かも&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;ソースコード

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wiki&lt;/code&gt;中のサンプルコードでクラスなどを&lt;code&gt;javadoc&lt;/code&gt;に自動リンク&lt;/li&gt;
&lt;li&gt;日本語、文字コード

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javalobby.org/java/forums/t103377.html&quot;&gt;Awesome Translator API!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;簡単にコンパイル、実行

&lt;ul&gt;
&lt;li&gt;Ant(build.xml)、バッチファイル、シェルスクリプトの改良

&lt;ul&gt;
&lt;li&gt;build.xml の整理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NetBeans (Eclipse) .classpath、.projectの追加&lt;/li&gt;
&lt;li&gt;src.zipのファイル名を、それぞれ適当なものに変更？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;各Tipsの難易度表示

&lt;ul&gt;
&lt;li&gt;こちらで適当に評価するか、ユーザに評価してもらうか…&lt;/li&gt;
&lt;li&gt;レーティングバー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;Web Start

&lt;ul&gt;
&lt;li&gt;「プログラムの追加と削除」に登録されない方法を探す

&lt;ul&gt;
&lt;li&gt;キャッシュを無効にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UI操作無しで全部削除できる方法を探す

&lt;ul&gt;
&lt;li&gt;javaws -uninstall&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;起動時にスプラッシュスクリーンを表示しない方法を探す

&lt;ul&gt;
&lt;li&gt;javaws -Xnosplash &lt;jnlp&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;バージョンの表記

&lt;ul&gt;
&lt;li&gt;JDK 6 と JDK 1.6 どちらかに揃える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;変更済み&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ライセンス

&lt;ul&gt;
&lt;li&gt;google code においたソースコードは、&lt;a href=&quot;http://www.opensource.org/licenses/mit-license.php&quot;&gt;MIT License&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/259384/what-license-should-i-use-for-code-snippets-released-on-my-blog&quot;&gt;What license should I use for code snippets released on my blog? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hobbylinux.info/download/rtl8181/src/GPL/wireless_tools.25-broken!!!/sample_pm.c&quot;&gt;http://hobbylinux.info/download/rtl8181/src/GPL/wireless_tools.25-broken!!!/sample_pm.c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This particular snipset of code is available under the Apache license, BSD license, CC0, ..., WTFPL (at your choice).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショット

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;screenshot一覧ページの分割&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;スクリーンショットはすべて Picasa に移動&lt;/li&gt;
&lt;li&gt;一覧は https://picasaweb.google.com/112210866074949770793/JavaSwingTips02?authuser=0&amp;amp;feat=directlink&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;スパム対策

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;英数のみのコメント禁止&lt;/del&gt; &lt;del&gt;別の対策を導入&lt;/del&gt; 再度英数のみのコメント禁止&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ソースコード、FindBugs, PMD&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;リポジトリ(Subversion)を公開(JavaForge、sourceforge.jpとか調べる)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/java-swing-tips/source/checkout&quot;&gt;http://code.google.com/p/java-swing-tips/source/checkout&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;もしくは全ソースコードの一括ダウンロードを簡単に(wgetなどの対策)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Mercurial にするかも&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ソースコード、Ubuntuなどでも実行できるように&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;e.isPopupTrigger()を使ってJPopupMenuを表示している箇所(JDK 5 以前のソース)を、すべてsetComponentPopupMenuに変更する。&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ソースコード、1.5以上対応に変更&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Color クラスにおける定数の大文字化&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ソースコード、codeプラグインで色分け&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;ソースコード、build.xmlなどをすべてUTF-8化&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;バッチファイルの代わりにantのタスクを使うように変更&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;antのbuild.xmlにrunタスクを追加、ただしバッチファイルも残すことに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;sampleをexampleに統一&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;[Swing/JarFile]]を[&lt;a href=&quot;http://terai.xrea.jp/Swing/JarFile%5D%5D%E3%82%92%5B%5BAnt.html&quot;&gt;Ant&lt;/a&gt;の下に移動する&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;分類: JTree JButton&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;TableSorter.javaをJDK6のTableRwoSorterに置き換える&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ソートする意味のないサンプルで使用しているTableSorter.javaは削除&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;スクリーンショット&lt;/del&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;すべて撮り直す(prefixのコロン:)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;screenshot一覧ページの分割、画像サイズ削減&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;キャッシュ一覧で探しやすいように、タイトルの頭に「サ:」(サンプル)を付けていたのを、「JST 」(Java Swing Tips)に変更&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;日本標準時ではない…&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;分類&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;JTableのTipsを分割&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ソースを一つにまとめる(ワンクリックで全ソースコードを表示したい)ためにTestModel.javaを検索してpackageプライベートなクラスに変更中&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;amp;gt;find . -type f -name TestModel.java -ls | gawk &amp;quot;{print $7, $11}&amp;quot; | sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look&amp;amp;Feel関係でpublic クラスでないとダメなのは…、放置。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;リンクメモ(自分用)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8039464&quot;&gt;#JDK-8039464 The scrollbar in JScrollPane has no right border if used WindowsLookAndFeel - Java Bug System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/JDCTechTips/&quot;&gt;Core Java Technologies Tech Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/JDCTechTips/2004/tt0210.html&quot;&gt;Styling Digital Images with ConvolveOp and Using HttpURLConnection to Access Web Pages Tech Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/onlineTraining/&quot;&gt;Online Training and Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/onlineTraining/new2java/supplements/2005/jan05.html&quot;&gt;Java Technology Fundamentals Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/onlineTraining/Programming/JDCBook/advprint.html&quot;&gt;Chapter 6 Continued: Advanced Printing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/onlineTraining/GUI/Swing1/shortcourse.html&quot;&gt;Short Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/GUI/java2d/java2dpart1.html&quot;&gt;Learning Java 2D, Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/GUI/swing/wizard/&quot;&gt;Creating Wizard Dialogs with Java Swing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html&quot;&gt;Using JConsole to Monitor Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/Media/imagestrategies/&quot;&gt;VolatileBufferedToolkitImage Strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/Media/intimages/&quot;&gt;Intermediate Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/Printing/Java2DPrinting/&quot;&gt;Java 2D: New Printing Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/Programming/jnlp/&quot;&gt;Deploying Software with JNLP and Java Web Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/developer/techDocs/hi/repository/&quot;&gt;Java look and feel Graphics Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.sun.com/products/java-media/2D/samples/suite/&quot;&gt;Java 2D API Sample Programs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/jlf-135985.html&quot;&gt;Java Look and Feel Design Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html&quot;&gt;How to Write Doc Comments for the Javadoc Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;Bugリンクメモ(自分用)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6723524&quot;&gt;Bug ID: 6723524 Invalid background of components displayed in JTable in Nimbus L&amp;amp;F&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Fixed: 1.7.0 &lt;del&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6910490&quot;&gt;Bug ID: 6910490 MatteBorder JScrollpane interaction&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6612928&quot;&gt;Bug ID: 6612928 Win32ShellFolder2 throws RejectedExecutionException on application exit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4280944&quot;&gt;Bug ID: 4280944 Attributes on last newline character cause undesirable extra spacing.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6780505&quot;&gt;Bug ID: 6780505 java.awt.Desktop.getDesktop().open() fails on shared files with white spaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4777210&quot;&gt;Bug ID: 4777210 setText causes deadlock in JFormattedTextField, JTextComponent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6937538&quot;&gt;Bug ID: 6937538 Nimbus: JInternalFrame() causes exception if user UI installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Fixed: 1.4.0  &lt;del&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4463424&quot;&gt;Bug ID: 4463424 LineBreakMeasurer inconsistent with TextLayout&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6700748&quot;&gt;Bug ID: 6700748 Cursor flickering during D&amp;amp;D when using CellRendererPane with validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6723524&quot;&gt;Bug ID: 6723524 Invalid background of components displayed in JTable in Nimbus L&amp;amp;F&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4292511&quot;&gt;Bug ID: 4292511 JTableHeader height determined by first column given HTML text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6826514&quot;&gt;Bug ID: 6826514 SwingWorker: done() called before doInBackground() returns, when cancelled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6413228&quot;&gt;Bug ID: 6413228 Many links broken with &amp;quot;?is-external=true&amp;quot;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4908277&quot;&gt;Bug ID: 4908277 Animated GIF does not play inside JTable, customized TableCellRenderer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Fixed: 1.7.0, 1.6.0_18 &lt;del&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4833524&quot;&gt;Bug ID: 4833524 BasicTreeUI.isToggleSelectionEvent() does not properly handle popup triggers&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Release Fixed: 1.7.0, 1.6.0_18 &lt;del&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6840086&quot;&gt;Bug ID: 6840086 JFileChooser lacks icons on top right when running on Windows 7&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4765261&quot;&gt;Bug ID: 4765261 JTextArea.append does not follow spec (it is not ThreadSafe)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4760477&quot;&gt;Bug ID: 4760477 JTextArea.append(String) is not ThreadSafe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Release Fixed: 1.7.0 &lt;del&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4765383&quot;&gt;Bug ID: 4765383 JTextArea.append(String) not thread safe&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7140863&quot;&gt;Bug ID: 7140863 Lots of Japanese OpenType fonts do not render correctly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=5036549&quot;&gt;Bug ID: JDK-5036549 PopupMenu not adjusting its location correctly depending on taskbar&amp;#39;s position.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;メモ: 痒いところに手が届かないJavaのコード&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下、&lt;a href=&quot;http://d.hatena.ne.jp/nowokay/20070529#1180430016&quot;&gt;Java6でLogger.globalが非推奨になっている&lt;/a&gt;から引用&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;初期化時にデッドロックの可能性があるからということで、それはいいとして。
代わりに使うのが
Logger.getLogger(Logger.GLOBAL_LOGGER_NAME)
だなんて、どうにかしてほしい。
Logger.getGlobal()
を用意してくれればいいのに。なに考えてんだろう？EoDじゃなかったの？
Javaのコード書きにくさって、静的動的よりも、こういう痒いところに手が届かないことの積み重ねが大きいと思う。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;

&lt;p&gt;Swing関係&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;表の全行を削除するメソッド

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearTable.html&quot;&gt;表の全行を削除&lt;/a&gt;する場合、&lt;code&gt;DefaultTableModel#setRowCount(0);&lt;/code&gt;ではなく、もっと分かりやすいメソッドが欲しい。&lt;/li&gt;
&lt;li&gt;例えば&lt;code&gt;DefaultComboBoxModel#removeAllElements()&lt;/code&gt;、&lt;code&gt;DefaultListModel#clear()&lt;/code&gt;のような(これはこれでどれかひとつに統一して欲しい…)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;フレームを画面中央に表示するメソッド

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CenterFrame.html&quot;&gt;フレームを画面中央に表示&lt;/a&gt;する場合、&lt;code&gt;Window#setLocationRelativeTo(null);&lt;/code&gt;ではなく、もっと分かりやすいメソッドが欲しい。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JavaFX Script&lt;/code&gt;では、&lt;code&gt;centerOnScreen: true&lt;/code&gt;が用意されていたが…。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;ポイントからインデックスを取得するメソッド

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTabbedPane.html#indexAtLocation%28int,%20int%29&quot;&gt;JTabbedPane#indexAtLocation(int, int) (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JList.html#locationToIndex%28java.awt.Point%29&quot;&gt;JList#locationToIndex(java.awt.Point) (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://terai.xrea.jp/swing/_sandbox</link>
                <guid>http://terai.xrea.jp/swing/_sandbox</guid>
                <pubDate>2006-01-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolBarでアイコンボタンを右寄せ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolBar&lt;/code&gt;でアイコンボタンを右寄せ、下寄せで表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolBarLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVb-HPZjI/AAAAAAAAAno/dMILsHzlipk/s800/ToolBarLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;String path = &quot;/toolbarButtonGraphics/general/&quot;;
URL url1 = getClass().getResource(path+&quot;Copy24.gif&quot;);
URL url2 = getClass().getResource(path+&quot;Cut24.gif&quot;);
URL url3 = getClass().getResource(path+&quot;Help24.gif&quot;);
toolbar.add(createToolbarButton(url1));
toolbar.add(createToolbarButton(url2));
toolbar.add(Box.createGlue());
toolbar.add(createToolbarButton(url3));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JButton createToolbarButton(URL url) {
  JButton b = new JButton(new ImageIcon(url));
  b.setRequestFocusEnabled(false);
  return b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JToolBar&lt;/code&gt;や&lt;code&gt;JMenuBar&lt;/code&gt;のデフォルトレイアウトは&lt;code&gt;BoxLayout&lt;/code&gt;なので、&lt;code&gt;Box.createGlue&lt;/code&gt;を間に挟むことでボタンやメニューの右寄せが可能です。&lt;/p&gt;

&lt;p&gt;ボタンとボタンの間隔を固定値で空けたい場合は、&lt;code&gt;Box.createRigidArea&lt;/code&gt;を使用します。&lt;code&gt;Box.createHorizontalStrut&lt;/code&gt;や&lt;code&gt;Box.createVerticalStrut&lt;/code&gt;を使うとツールバーが水平垂直に切り替わった時に、余計な余白が出来てしまうことがあります。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;ツールバーが垂直になった場合のことも考えて、&lt;code&gt;VerticalGlue&lt;/code&gt;も一緒に挿入していますが、特に問題ないようです。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;アイコンは、&lt;a href=&quot;http://web.archive.org/web/20120818143859/http://java.sun.com/developer/techDocs/hi/repository/&quot;&gt;Java look and feel Graphics Repository&lt;/a&gt;の&lt;code&gt;jlfgr-1_0.jar&lt;/code&gt;から読み込んでいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTVeG6fVBI/AAAAAAAAAns/II_0GGIdnNk/s800/ToolBarLayout1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;で、&lt;code&gt;JDK 1.5&lt;/code&gt;のようなボタン表示(フォーカスを取得しない)にするには、&lt;code&gt;JButton#setRequestFocusEnabled(false)&lt;/code&gt;(マウスクリックではフォーカスを取得しないが、キーボードからは許可)、または、&lt;code&gt;JButton#setFocusable(false)&lt;/code&gt;とする必要があるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マウスクリックでツールバーボタンにフォーカスが移動すると、コピーボタンを押したらテキストエディタでの文字列選択状態がクリアされたり、参考の質問のような不具合が起こる&lt;/li&gt;
&lt;li&gt;参考: &lt;a href=&quot;https://forums.oracle.com/thread/1358842&quot;&gt;Swing - JTextPane selection color problem&lt;/a&gt;の camickr さんの投稿(2008/10/25 0:34)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%JAVA_HOME%\demo\jfc\Notepad\src\Notepad.java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20120818143859/http://java.sun.com/developer/techDocs/hi/repository/&quot;&gt;Java look and feel Graphics Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1365522&quot;&gt;Swing - Buttons like Netbeans&amp;#39;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/menu.html#custom&quot;&gt;Customizing Menu Layout - How to Use Menus (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;環境によって、上記のサンプルが右寄せにならない場合もあるようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-22 (水) 15:58:10&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setRequestFocusEnabled(false)&lt;/code&gt;、スクリーンショット更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-27 (月) 15:20:38&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/toolbarlayout</link>
                <guid>http://terai.xrea.jp/swing/toolbarlayout</guid>
                <pubDate>2006-01-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextAreaのキャレットを上書きモード対応にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;にキャレット上の文字を上書きする上書きモードを追加します。&lt;a href=&quot;https://forums.oracle.com/forums/thread.jspa?threadID=1383467&quot;&gt;Swing - JTextPane edit mode (insert or overwrite)???&lt;/a&gt;のソースコードを変更して全角文字対応にしています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/OverTypeMode&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQtaGO6gI/AAAAAAAAAgA/XPqHe-c_DUo/s800/OverTypeMode.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;// Paint a horizontal line the width of a column and 1 pixel high
class OvertypeCaret extends DefaultCaret {
  //The overtype caret will simply be a horizontal line
  //one pixel high (once we determine where to paint it)
  @Override public void paint(Graphics g) {
    if(isVisible()) {
      try{
        JTextComponent component = getComponent();
        TextUI mapper = component.getUI();
        Rectangle r = mapper.modelToView(component, getDot());
        g.setColor(component.getCaretColor());
        int width = g.getFontMetrics().charWidth(&#39;w&#39;);
        //全角などに対応
        if(isOvertypeMode()) {
          int pos = getCaretPosition();
          if(pos&amp;lt;getDocument().getLength()) {
            if(getSelectedText()!=null) {
              width = 0;
            }else{
              String str = getText(pos, 1);
              width = g.getFontMetrics().stringWidth(str);
            }
          }
        } //ここまで追加
        int y = r.y + r.height - 2;
        g.drawLine(r.x, y, r.x + width - 2, y);
      }catch(BadLocationException e) {}
    }
  }
  // Damage must be overridden whenever the paint method is overridden
  // (The damaged area is the area the caret is painted in. We must
  // consider the area for the default caret and this caret)
  @Override protected synchronized void damage(Rectangle r) {
    if(r != null) {
      JTextComponent c = getComponent();
      x = r.x;
      y = r.y;
      //width = c.getFontMetrics(c.getFont()).charWidth(&#39;w&#39;);
      //全角対応
      width = c.getFontMetrics(c.getFont()).charWidth(&#39;あ&#39;);
      height = r.height;
      repaint();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、上書きモード用のキャレットを作成して、&lt;kbd&gt;Insert&lt;/kbd&gt;キーで切り替えるようになっています。&lt;/p&gt;

&lt;p&gt;上書きモード自体の動作は、&lt;code&gt;JTextArea#replaceSelection&lt;/code&gt;メソッドをオーバーライドすることで行われています。キー入力があった場合、次の文字までを選択して置き換える処理がこのメソッドに追加されています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/forums/thread.jspa?threadID=1383467&quot;&gt;Swing - JTextPane edit mode (insert or overwrite)???&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;改行の処理がまだいい加減です。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-01-16 (月) 15:56:38&lt;/li&gt;
&lt;li&gt;テキストを選択状態にして&lt;kbd&gt;Insert&lt;/kbd&gt;キーを押すと、反転されたままになるようなので修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-01-16 (月) 18:45:02&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IME&lt;/code&gt;起動時、「あ」を入力し、&lt;kbd&gt;変換&lt;/kbd&gt;キー（or &lt;kbd&gt;Space&lt;/kbd&gt;キー）を押すたびに減っていきます。日本語対応のソースを心待ちにしています。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%88%9D%E5%BF%83%E8%80%85.html&quot;&gt;初心者&lt;/a&gt; 2006-03-24 (金) 10:40:01&lt;/li&gt;
&lt;li&gt;バグですね。報告ありがとうございます。減らないように修正はしたのですが、置換は以下のように適当です。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-24 (金) 16:26:25&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aaaabbbb   //元のテキストの先頭で「ああ」と入力、変換して確定すると
嗚呼bbbb   //こうならずに
嗚呼aabbbb //こうなってしまう(まじめにやれば、なんとかなりそうだが)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;早速のご対応ありがとうございます。m時 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%88%9D%E5%BF%83%E8%80%85.html&quot;&gt;初心者&lt;/a&gt; 2006-03-27 (月) 14:09:27&lt;/li&gt;
&lt;li&gt;ごめんなさい。途中で送信してしまいました。文字という点で、半角&lt;code&gt;１&lt;/code&gt;文字の上書きが全角&lt;code&gt;１&lt;/code&gt;文字でOKだと個人的には思います。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%88%9D%E5%BF%83%E8%80%85.html&quot;&gt;初心者&lt;/a&gt; 2006-03-27 (月) 14:10:36&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xyzzy&lt;/code&gt;を参考にして「嗚呼bbbb」の方がいかなと思ったのですが、さっき試した&lt;code&gt;excel&lt;/code&gt;だと「嗚呼aabbbb」になるみたいです。ので、これは仕様ということにしておきます(^^;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-27 (月) 15:00:06&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xyzzy&lt;/code&gt;は使ったことがないのですが、秀丸と同じでしょうか。「嗚呼」に「a」と入力して、「a 呼」なのは、ちょっといやでした。&lt;code&gt;excel&lt;/code&gt;上書できるんですね。&lt;code&gt;word&lt;/code&gt;で&lt;code&gt;IME&lt;/code&gt;起動中に&lt;kbd&gt;Insert&lt;/kbd&gt;キー押下したら、ダイアログに驚きました。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%88%9D%E5%BF%83%E8%80%85.html&quot;&gt;初心者&lt;/a&gt; 2006-03-28 (火) 13:05:15&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xyzzy&lt;/code&gt;でも「a 呼」です。他の文字の位置が上書きで出来るだけ移動しないようにするための処理だと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-31 (金) 16:39:04&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/overtypemode</link>
                <guid>http://terai.xrea.jp/swing/overtypemode</guid>
                <pubDate>2006-01-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MIDIファイルの演奏</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MidiSystem&lt;/code&gt;から&lt;code&gt;Sequencer&lt;/code&gt;を作成取得し、&lt;code&gt;MIDI&lt;/code&gt;ファイルを演奏します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MidiSystem&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTP2Xw5rXI/AAAAAAAAAeo/3v8-ggh9ZBE/s800/MidiSystem.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;URL url = getClass().getResource(&quot;Mozart_toruko_k.mid&quot;);
final Sequencer sequencer;
try{
  Sequence s = MidiSystem.getSequence(url);
  sequencer  = MidiSystem.getSequencer();
  sequencer.open();
  sequencer.setSequence(s);
}catch(Exception ex) {
  ex.printStackTrace();
  return;
}
start = new JButton(new AbstractAction(&quot;start&quot;) {
  @Override public void actionPerformed(ActionEvent ae) {
    sequencer.start();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MidiSystem.getSequencer&lt;/code&gt;メソッドで&lt;code&gt;Sequencer&lt;/code&gt;を取得し、これに&lt;code&gt;MidiSystem.getSequence&lt;/code&gt;メソッドで&lt;code&gt;MIDI&lt;/code&gt;ファイルから生成した&lt;code&gt;Sequence&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sequencer.start&lt;/code&gt;メソッドで演奏を開始することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://muimi.com/j/game/sound/&quot;&gt;Javaでゲーム - サウンドメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://classic-midi.com/&quot;&gt;クラシックMIDI ラインムジーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Sound.html&quot;&gt;Wavファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Beep.html&quot;&gt;Beep音を鳴らす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AuditoryCues.html&quot;&gt;AuditoryCuesでイベント音を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/midisystem</link>
                <guid>http://terai.xrea.jp/swing/midisystem</guid>
                <pubDate>2006-01-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneのViewportをマウスで掴んでスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;の窓の中をマウスで掴んで画像をスクロールします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HandScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNqjajfcI/AAAAAAAAAbI/Km-h7tWdYOo/s800/HandScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HandScrollListener extends MouseAdapter {
  private final Cursor defCursor = Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR);
  private final Cursor hndCursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  private final Point pp = new Point();
  @Override public void mouseDragged(MouseEvent e) {
    JViewport vport = (JViewport) e.getComponent();
    Point cp = e.getPoint();
    Point vp = vport.getViewPosition(); //= SwingUtilities.convertPoint(vport, 0, 0, label);
    vp.translate(pp.x - cp.x, pp.y - cp.y);
    //if (r1.isSelected()) {
    label.scrollRectToVisible(new Rectangle(vp, vport.getSize()));
    //} else {
    //  vport.setViewPosition(vp);
    //}
    pp.setLocation(cp);
  }
  @Override public void mousePressed(MouseEvent e) {
    e.getComponent().setCursor(hndCursor);
    pp.setLocation(e.getPoint());
  }
  @Override public void mouseReleased(MouseEvent e) {
    e.getComponent().setCursor(defCursor);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JViewport&lt;/code&gt;の原点(左上)を &lt;del&gt;&lt;code&gt;SwingUtilities.convertPoint&lt;/code&gt;メソッドを使って中の&lt;code&gt;JLabel&lt;/code&gt;(画像)の座標に変換し、これを基準座標としています。この座標を&lt;/del&gt; マウスの移動に応じて変更し、&lt;code&gt;JComponent#scrollRectToVisible&lt;/code&gt;メソッドの引数として使用することで、覗き窓のスクロールを行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JComponent#scrollRectToVisible(...)&lt;/code&gt;ではなく、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;を使用すると、内部コンポーネントの外側に移動することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoScroll.html&quot;&gt;JScrollPaneのオートスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;猫の写真を拝借しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6333318&quot;&gt;Bug ID: 6333318 JViewport.scrollRectToVisible( Rectangle cr ) doesn&amp;#39;t scroll if cr left or above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KineticScrolling.html&quot;&gt;JScrollPaneでキネティックスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TreeDragScroll.html&quot;&gt;JTreeの余白をドラッグしてスクロール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;つかんで移動ということですが、移動方向が逆の気がします。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%90%8D%E7%84%A1%E3%81%97.html&quot;&gt;名無し&lt;/a&gt; 2006-02-25 (土) 01:24:46

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。確かに逆ですね。画像を掴んでというより、スクロールバーを掴んでみたいな動きになってました。修正しておきます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-02-25 (土) 03:33:50&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.convertPoint&lt;/code&gt;の代わりに、&lt;code&gt;vport.getViewPosition()&lt;/code&gt;を使用するように変更。スクリーンショットの更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-01-19 (Mon) 16:58:27&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;では、&lt;code&gt;JViewport#setViewPosition(Point)&lt;/code&gt;を使って右下外部に移動できなくなっている。&lt;code&gt;Heavyweight&lt;/code&gt;と&lt;code&gt;Lightweight&lt;/code&gt;コンポーネントが混在しても問題ないようにするために、内部で&lt;code&gt;revalidate()&lt;/code&gt;しているのが原因？ このサンプルでは&lt;code&gt;Lightweight&lt;/code&gt;コンポーネントしか使用しないので、&lt;code&gt;revalidate()&lt;/code&gt;しないように対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-10-03 (月) 18:03:55&lt;/li&gt;
&lt;li&gt;サンプルほしい --  2013-05-11 (土) 03:30:34

&lt;ul&gt;
&lt;li&gt;ページ上部にソースコードなどへのリンクがあるので、使ってみてください。上げ忘れてるとかメンテ中などでなければダウンロードできると思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-13 (月) 20:08:18&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/handscroll</link>
                <guid>http://terai.xrea.jp/swing/handscroll</guid>
                <pubDate>2006-01-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneの余白に文字列を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;の右側の余白に文字列を表示します。&lt;a href=&quot;https://forums.oracle.com/thread/1392495&quot;&gt;Swing - JTabbedPane with non-tabbed text&lt;/a&gt;の投稿からソースコードを引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabbedPaneWithText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUTbAqf_I/AAAAAAAAAl0/APOrWdnvDko/s800/TabbedPaneWithText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tab = new JTabbedPane() {
  @Override protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    String text = &quot;←ちょっとしたタブの説明など&quot;;
    FontMetrics fm = getFontMetrics(getFont());
    int stringWidth = fm.stringWidth(text)+10;
    int x = getSize().width-stringWidth;
    Rectangle lastTab = getUI().getTabBounds(this, getTabCount()-1);
    int tabEnd = lastTab.x + lastTab.width;
    if(x&amp;lt;tabEnd) x = tabEnd;
    g.drawString(text, x+5, 18);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane#paintComponent&lt;/code&gt;メソッドをオーバーライドして、タブコンポーネントの右側の余白に文字列を描画しています。&lt;/p&gt;

&lt;p&gt;右端に十分な余白が無く、文字列を描画するとタブ上に重なってしまう場合は、最後のタブの横から文字列を描画するようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;の&lt;code&gt;JLayer&lt;/code&gt;を使用する場合は、以下のような方法があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import javax.swing.*;
import javax.swing.plaf.*;

public class TopRightCornerLabelLayerUITest {
  public static JComponent makeUI() {
    JTabbedPane tab = new JTabbedPane();
    tab.addTab(&quot;New tab1&quot;, new JLabel(&quot;1&quot;));
    tab.addTab(&quot;New Tab2&quot;, new JLabel(&quot;2&quot;));
    JPanel p = new JPanel(new BorderLayout());
    p.add(new JLayer&amp;lt;JComponent&amp;gt;(tab, new TopRightCornerLabelLayerUI()));
    return p;
  }
  private static void createAndShowUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    f.getContentPane().add(makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowUI();
      }
    });
  }
}
class TopRightCornerLabelLayerUI extends LayerUI&amp;lt;JComponent&amp;gt; {
  private JLabel l = new JLabel(&quot;A Label at right corner&quot;);
  private JPanel rubberStamp = new JPanel();
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    Dimension d = l.getPreferredSize();
    int x = c.getWidth() - d.width - 5;
    SwingUtilities.paintComponent(g, l, rubberStamp, x, 2, d.width, d.height);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1392495&quot;&gt;Swing - JTabbedPane with non-tabbed text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabbedPaneWithCheckBox.html&quot;&gt;JTabbedPaneの余白にJCheckBoxを配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabbedpanewithtext</link>
                <guid>http://terai.xrea.jp/swing/tabbedpanewithtext</guid>
                <pubDate>2005-12-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelにマウスで自由曲線を描画</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;マウスをドラッグしてパネル上に自由曲線を描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/PaintPanel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQ0y2U6WI/AAAAAAAAAgM/AAHllQ3_VHw/s800/PaintPanel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class PaintPanel extends JPanel implements MouseMotionListener, MouseListener {
  private Point startPoint = new Point(-1,-1);
  private Point endPoint   = new Point(-1,-1);
  public PaintPanel() {
    super();
    addMouseMotionListener(this);
    addMouseListener(this);
  }
  @Override public void paintComponent(Graphics g) {
    //super.paintComponent(g);
    Graphics2D g2d = (Graphics2D)g;
    g2d.setStroke(new BasicStroke(3.0F));
    g2d.setPaint(Color.BLACK);
    g2d.drawLine(startPoint.x, startPoint.y,
                 endPoint.x,   endPoint.y);
    startPoint = endPoint;
  }
  @Override public void mouseDragged(MouseEvent e) {
    endPoint = e.getPoint();
    repaint();
  }
  @Override public void mousePressed(MouseEvent e) {
    startPoint = e.getPoint();
  }
  @Override public void mouseMoved(MouseEvent e) {}
  @Override public void mouseExited(MouseEvent e) {}
  @Override public void mouseEntered(MouseEvent e) {}
  @Override public void mouseReleased(MouseEvent e) {}
  @Override public void mouseClicked(MouseEvent e) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、パネル上でマウスがドラッグされた場合、その軌跡を短い直線でつなぎ合わせることで、曲線を描画しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マウスがクリックされた場所を始点にする&lt;/li&gt;
&lt;li&gt;ドラッグされた時の位置を終点にしてパネルを&lt;code&gt;repaint()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paintComponent(...)&lt;/code&gt;をオーバーライドして、上記の始点、終点で直線を描画&lt;/li&gt;
&lt;li&gt;次の直線のための始点を現在の終点に変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MemoryImageSource.html&quot;&gt;MemoryImageSourceで配列から画像を生成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;マウス右ボタンをドラッグで消しゴム…のテスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-12 (火) 16:16:59

&lt;ul&gt;
&lt;li&gt;追記:不要なコードを削除。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-04-30 (金) 19:26:37&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MemoryImageSource.html&quot;&gt;MemoryImageSourceで配列から画像を生成&lt;/a&gt;に移動。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-07 (月) 15:21:37&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;わからん！！ --  2010-04-30 (金) 18:11:55&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/paintpanel</link>
                <guid>http://terai.xrea.jp/swing/paintpanel</guid>
                <pubDate>2005-12-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DoubleBufferingで自由曲線を描画</title>
                <description>&lt;p&gt;以前ここに在ったサンプルは修正して、&lt;a href=&quot;http://terai.xrea.jp/Swing/PaintPanel.html&quot;&gt;JPanelにマウスで自由曲線を描画&lt;/a&gt;に移動しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Swing&lt;/code&gt;のコンポーネントでは、自動的に&lt;code&gt;Double Buffering&lt;/code&gt;が行われる

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/painting-140037.html&quot;&gt;Painting in AWT and Swing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/se-ji-cafe/20070306/1173231679&quot;&gt;se-ji-cafe翻訳日記 - AwtとSwingにおける描画処理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;自前での&lt;code&gt;Double Buffering&lt;/code&gt;は、&lt;a href=&quot;http://terai.xrea.jp/Swing/SortingAnimations.html&quot;&gt;JComboBoxのモデルとしてenumを使用する&lt;/a&gt;のアニメーション部分などを参考にしてみてください。&lt;/p&gt;
</description>
                <link>http://terai.xrea.jp/swing/doublebuffering</link>
                <guid>http://terai.xrea.jp/swing/doublebuffering</guid>
                <pubDate>2005-12-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableSorterでソートしても選択状態を維持</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableSorter.java&lt;/code&gt;を使ってソートしても、行の選択状態を保存しておきます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectionKeeper&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTS229Uo9I/AAAAAAAAAjc/ay3eckOCWco/s800/SelectionKeeper.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private class MouseHandler extends MouseAdapter {
  public void mouseClicked(MouseEvent e) {
    JTableHeader h = (JTableHeader) e.getSource();
//......
    if (column != -1) {
      int keyCol = 0;
      Vector list = saveSelectedRow(h.getTable(), keyCol);
      int status = getSortingStatus(column);
//......
      setSortingStatus(column, status);
      loadSelectedRow(h.getTable(), list, keyCol);
    }
  }
}
Vector saveSelectedRow(JTable table, int keyCol) {
  Vector list = new Vector();
  int[] ilist = table.getSelectedRows();
  if(ilist==null || ilist.length&amp;lt;=0) return;
  TestModel model = (TestModel)tableModel;
  for(int i=ilist.length-1;i&amp;gt;=0;i--) {
    list.add(model.getValueAt(modelIndex(ilist[i]), keyCol));
  }
  return list;
}
void loadSelectedRow(JTable table, Vector list, int keyCol) {
  if(list==null || list.size()&amp;lt;=0) return;
  for(int i=0;i&amp;lt;tableModel.getRowCount();i++) {
    if(list.contains(tableModel.getValueAt(modelIndex(i), keyCol))) {
      table.getSelectionModel().addSelectionInterval(i, i);
    }
  }
}
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;がクリックされてソートが行われる前に、選択されている行のあるカラムの値を保存し、ソートが終わった後でその値をキーに選択し直しています。あるカラムは、一意で重複しない値をもつ必要があります。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TableSorterDemoProject/src/components/TableSorter.java&quot;&gt;TableSorter.java&lt;/a&gt;中の&lt;code&gt;MouseHandler&lt;/code&gt;を変更し、&lt;code&gt;0&lt;/code&gt;列目の番号をキーにして行の選択状態を保存するようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;の&lt;code&gt;TableRowSorter&lt;/code&gt;でソートを行う場合は、標準で選択状態が保存されるようです(&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectionkeeper</link>
                <guid>http://terai.xrea.jp/swing/selectionkeeper</guid>
                <pubDate>2005-12-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Highlighterで文字列をハイライト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Highlighter&lt;/code&gt;を使ってテキスト中の文字列を強調表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Highlighter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTN25SyRaI/AAAAAAAAAbc/i3gVEjh-mlQ/s800/Highlighter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;jtc.getHighlighter().removeAllHighlights();
try{
  Highlighter highlighter = jtc.getHighlighter();
  Document doc = jtc.getDocument();
  String text = doc.getText(0, doc.getLength());
  Matcher matcher = Pattern.compile(pattern).matcher(text);
  int pos = 0;
  while(matcher.find(pos)) {
    pos = matcher.end();
    highlighter.addHighlight(matcher.start(), pos, highlightPainter);
  }
}catch(BadLocationException e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;テキストコンポーネントから&lt;code&gt;Highlighter&lt;/code&gt;を取得し、&lt;code&gt;Highlighter#addHighlight&lt;/code&gt;メソッドで検索した文字列を追加していきます。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、ハイライト色を&lt;code&gt;DefaultHighlighter.DefaultHighlightPainter&lt;/code&gt;を使って指定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1387954&quot;&gt;Swing - Searching text in files &amp;amp; highlighting that text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こんにちは。はじめまして。Keithと言います。このプログラムだと、テキスト中の複数の異なる文字に、それぞれハイライトを割り当てることが出来ないのですが、解決策はあるでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/Keith.html&quot;&gt;Keith&lt;/a&gt; 2007-11-28 (水) 19:12:19

&lt;ul&gt;
&lt;li&gt;こんばんは。&lt;code&gt;Highlighter#addHighlight&lt;/code&gt;メソッドは、複数のハイライトを追加できるので、パターン毎に色を変えたいだけなら(効率とか、同じ文字列が含まれる場合とか、エラー処理などの面倒なことは考えない)、以下のようにパターンを配列にして繰り返すだけでもいいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-11-28 (水) 20:25:31&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Highlighter.HighlightPainter[] highlightPainter = {
  new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW),
  new DefaultHighlighter.DefaultHighlightPainter(Color.CYAN)
};
private final String[] pattern = {&quot;Swing&quot;, &quot;win&quot;};
public void setHighlight(JTextComponent jtc, String[] pattern) {
  try{
    Highlighter hilite = jtc.getHighlighter();
    hilite.removeAllHighlights();
    Document doc = jtc.getDocument();
    String text = doc.getText(0, doc.getLength());
    for(int i=0;i&amp;lt;pattern.length;i++) {
      int pos = 0;
      while((pos = text.indexOf(pattern[i], pos)) &amp;gt;= 0) {
        hilite.addHighlight(pos, pos+pattern[i].length(), highlightPainter[i]);
        pos += pattern[i].length();
      }
    }
  }catch(BadLocationException e) { e.printStackTrace(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;こんな簡単にハイライトできるとは！。正規表現で実装すると開始位置と終了位置がより簡単で、しかも複雑にできるかも。 -- &lt;a href=&quot;http://terai.xrea.jp/eternalharvest.html&quot;&gt;eternalharvest&lt;/a&gt; 2008-08-28 (木) 02:20:11

&lt;ul&gt;
&lt;li&gt;ちょっと夏休みで帰省してました。正規表現 &amp;gt; そうですね。基本的には同じような要領で大丈夫だと思います。メモ:&lt;a href=&quot;https://forums.oracle.com/thread/1382907&quot;&gt;Swing - Content-Overlay in JTextPane&lt;/a&gt;、追記: &lt;a href=&quot;http://terai.xrea.jp/Swing/DrawsLayeredHighlights.html&quot;&gt;DefaultHighlighterの描画方法を変更する&lt;/a&gt;に、&lt;code&gt;Matcher matcher = Pattern.compile(pattern).matcher(text);&lt;/code&gt;と正規表現でハイライトするサンプルを追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-09-01 (月) 13:47:05&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;こんにちは。Cakaiと申します。ハイライトされているテキストのカラーを設定することがありますか？ -- &lt;a href=&quot;http://terai.xrea.jp/Caokai.html&quot;&gt;Caokai&lt;/a&gt; 2009-10-15 (Thu) 23:12:47

&lt;ul&gt;
&lt;li&gt;こんにちは。はじめまして。&lt;code&gt;Highlighter.HighlightPainter&lt;/code&gt;で、文字色は変更できないかもしれません。以下のように&lt;code&gt;AttributeSet&lt;/code&gt;を使うのはどうでしょう。&lt;a href=&quot;http://terai.xrea.jp/Swing/SimpleSyntaxHighlight.html&quot;&gt;JTextPaneでキーワードのSyntaxHighlight&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-16 (金) 13:04:32

&lt;ul&gt;
&lt;li&gt;用途によっては、&lt;a href=&quot;http://terai.xrea.jp/Swing/StyleSheet.html&quot;&gt;JEditorPaneのHTMLEditorKitにCSSを適用&lt;/a&gt;なども使えるかもしれません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import javax.swing.*;
import javax.swing.text.*;
public class HighlightTest{
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  private static void addHighlightTest(JTextComponent textarea,
                     String pattern,
                     Highlighter.HighlightPainter painter) {
    String text = textarea.getText();
    try {
      int pos = 0;
      while ((pos = text.indexOf(pattern, pos)) &amp;gt;= 0) {
        textarea.getHighlighter().addHighlight(
          pos, pos+pattern.length(), painter);
        pos += pattern.length();
      }
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }
  private static JTextArea makeTestTextArea() {
    JTextArea textArea = new JTextArea();
    textArea.setText(&quot;JTextArea\nRed and Blue&quot;);
    addHighlightTest(textArea, &quot;Red&quot;,
      new DefaultHighlighter.DefaultHighlightPainter(Color.RED));
    addHighlightTest(textArea, &quot;Blue&quot;,
      new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE));
    return textArea;
  }
  private static void addStyleTest(JTextPane textPane, String pattern) {
    String text = textPane.getText();
    StyledDocument doc = textPane.getStyledDocument();
    Style s = doc.getStyle(pattern.toLowerCase());
    try{
        int pos = 0;
        while ((pos = text.indexOf(pattern, pos)) &amp;gt;= 0) {
            doc.setCharacterAttributes(pos, pattern.length(), s, false);
            pos += pattern.length();
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
  }
  private static JTextPane makeTestTextPane() {
    JTextPane textPane = new JTextPane();
    textPane.setText(&quot;JTextPane\nRed and Blue&quot;);

    StyledDocument doc = textPane.getStyledDocument();
    Style def = StyleContext.getDefaultStyleContext().getStyle(
        StyleContext.DEFAULT_STYLE);
    Style regular = doc.addStyle(&quot;regular&quot;, def);

    Style red = doc.addStyle(&quot;red&quot;, regular);
    StyleConstants.setForeground(red, Color.RED);
    Style blue = doc.addStyle(&quot;blue&quot;, regular);
    StyleConstants.setForeground(blue, Color.BLUE);
    addStyleTest(textPane, &quot;Red&quot;);
    addStyleTest(textPane, &quot;Blue&quot;);
    return textPane;
  }
  public static void createAndShowGUI() {
    JPanel p = new JPanel(new GridLayout(2,1));
    p.add(new JScrollPane(makeTestTextArea()));
    p.add(new JScrollPane(makeTestTextPane()));
    JFrame frame = new JFrame();
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(p);
    frame.setSize(320, 240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;わかりました。ほんとにありがとうございました。 -- &lt;a href=&quot;http://terai.xrea.jp/Caokai.html&quot;&gt;Caokai&lt;/a&gt; 2009-10-16 (Fri) 16:42:07&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/highlighter</link>
                <guid>http://terai.xrea.jp/swing/highlighter</guid>
                <pubDate>2005-12-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableColumnの幅を比率で設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableColumn&lt;/code&gt;の幅を比率で設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HeaderRatio&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TSs6oj80RcI/AAAAAAAAAxs/hm2gp4ELiDI/s800/HeaderRatio.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void setTableHeaderColumnRaito() {
  int[] list = getWidthRaitoArray();
  //System.out.println(&quot;a: &quot;+table.getColumnModel().getTotalColumnWidth());
  //System.out.println(&quot;b: &quot;+table.getSize().width);
  int total = table.getSize().width; //table.getColumnModel().getTotalColumnWidth();
  int raito = total/getRaitoTotal(list);
  for(int i=0;i&amp;lt;table.getColumnModel().getColumnCount()-1;i++) {
    TableColumn col = table.getColumnModel().getColumn(i);
    int colwidth = list[i]*raito;
    col.setPreferredWidth(colwidth); //col.setMaxWidth(colwidth);
    total -= colwidth;
  }
  table.getColumnModel().getColumn(
    table.getColumnModel().getColumnCount()-1).setPreferredWidth(total);
  //table.getColumnModel().getColumnCount()-1).setMaxWidth(total);
  table.revalidate();
}

private void setRaito() {
  int[] list = getWidthRaitoArray();
  int total = getTotalColumnWidth(table);
  int raito = total/getRaitoTotal(table, list);
  for(int i=0;i&amp;lt;table.getColumnModel().getColumnCount()-1;i++) {
    TableColumn col = table.getColumnModel().getColumn(i);
    int colwidth = list[i]*raito;
    col.setMaxWidth(colwidth);
    total = total - colwidth;
  }
  //最後のカラムで誤差を吸収
  table.getColumnModel().getColumn(
    table.getColumnModel().getColumnCount()-1).setMaxWidth(total);
  table.revalidate();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField&lt;/code&gt;にコロン区切りで入力した比率に従って、ヘッダカラムの幅を調整するようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ComponentListener#componentResized(...)&lt;/code&gt;がチェックされている場合

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;に追加した&lt;code&gt;ComponentListener&lt;/code&gt;で、リサイズされる毎に全ての列幅を設定し直すので、フレームのサイズを変更してもカラムの比率は保持される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ComponentListener#componentResized(...)&lt;/code&gt;がチェックされていない場合

&lt;ul&gt;
&lt;li&gt;列幅調整が&lt;code&gt;AUTO_RESIZE_SUBSEQUENT_COLUMNS&lt;/code&gt;(デフォルト)なので、フレームをリサイズすると、その幅の変更(&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/javax/swing/JTable.html#doLayout--&quot;&gt;デルタ&lt;/a&gt;)が、リサイズ可能なすべての列に分散して加算減算される

&lt;ul&gt;
&lt;li&gt;このため、入力されている比率とは異なる列幅になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;TableColumn#setMaxWidth&lt;/code&gt;メソッドでカラムの幅を指定する場合は、マウスのドラッグによるサイズの変更はできません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/javax/swing/JTable.html#doLayout--&quot;&gt;デルタの分散 - JTable#doLayout() (Java Platform SE 8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/headerratio</link>
                <guid>http://terai.xrea.jp/swing/headerratio</guid>
                <pubDate>2005-11-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ColorConvertOpで画像をグレースケールに変換</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ColorConvertOp&lt;/code&gt;を使って画像をグレースケールに変換します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColorConvertOp&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTJmEhFayI/AAAAAAAAAUo/x4JGGk_f08c/s800/ColorConvertOp.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Image img = icon1.getImage();
BufferedImage source = new BufferedImage(
    img.getWidth(this), img.getHeight(this),
    BufferedImage.TYPE_INT_ARGB);
Graphics g = source.createGraphics();
g.drawImage(img, 0, 0, this);
g.dispose();
ColorConvertOp colorConvert = new ColorConvertOp(
    ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
BufferedImage destination = colorConvert.filter(source, null);
icon2 = new ImageIcon(destination);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;用意したアイコンから、&lt;code&gt;BufferedImage&lt;/code&gt;を作成し、これを&lt;code&gt;ColorConvertOp#filter&lt;/code&gt;メソッドを使ってグレースケールに変換しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、ラベルをクリックすると元画像とグレースケール画像とが切り替わるようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように&lt;code&gt;GrayFilter.createDisabledImage&lt;/code&gt;を使った場合よりきれいに変換できるようです。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;icon2 = new ImageIcon(GrayFilter.createDisabledImage(img));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;GrayFilter&lt;/code&gt;の代わりに、以下のような&lt;code&gt;RGBImageFilter&lt;/code&gt;を継承したフィルタを使う方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyGrayFilter extends RGBImageFilter {
  public int filterRGB(int x, int y, int argb) {
    //int a = (argb &amp;gt;&amp;gt; 24) &amp;amp; 0xff;
    int r = (argb &amp;gt;&amp;gt; 16) &amp;amp; 0xff;
    int g = (argb &amp;gt;&amp;gt;  8) &amp;amp; 0xff;
    int b = (argb      ) &amp;amp; 0xff;
    //http://ofo.jp/osakana/cgtips/grayscale.phtml
    int m = (2 * r + 4 * g + b) / 7; //NTSC Coefficients
    return (argb &amp;amp; 0xff000000) | (m&amp;lt;&amp;lt;16) | (m&amp;lt;&amp;lt;8) | (m);
  }
}
//...
ImageProducer ip = new FilteredImageSource(img.getSource(), new MyGrayFilter());
icon2 = new ImageIcon(Toolkit.getDefaultToolkit().createImage(ip));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;BufferedImage.TYPE_BYTE_GRAY&lt;/code&gt;で、&lt;code&gt;BufferedImage&lt;/code&gt;を作成して複写してもグレースケールに変換できますが、透過色を使用している場合はすこし注意が必要なようです(参考:&lt;a href=&quot;https://forums.oracle.com/thread/1373262&quot;&gt;Swing - Color to Grayscale to Binary&lt;/a&gt;)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_BYTE_GRAY);
Graphics g = bi.createGraphics();
//g.setColor(Color.WHITE);
g.fillRect(0, 0, w, h); // pre-fill: alpha
g.drawImage(img, 0, 0, this);
g.dispose();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.java2s.com/Code/Java/2D-Graphics-GUI/ImageColorGrayEffect.htm&quot;&gt;Image Color Gray Effect : Java examples (example source code) » 2D Graphics GUI » Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opus-i.biz/&quot;&gt;opus-i | シンプル素材 テンプレート 音楽素材&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://numata.aquasky.jp/programming/java/graphics/FilteringImage.html&quot;&gt;フィルタによる半透明な画像の作成&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ofo.jp/osakana/cgtips/grayscale.phtml&quot;&gt;osakana.factory - グレースケールのひみつ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href=&quot;http://programamemo2.blogspot.com/2007/08/blog-post_21.html&quot;&gt;プログラマメモ2: グレースケール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1903279&quot;&gt;Swing - image manipulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;リンクを参考にして&lt;code&gt;RGBImageFilter&lt;/code&gt;を使うサンプルを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-08-21 (火) 13:06:10&lt;/li&gt;
&lt;li&gt;グレイスケールからグレースケールに変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-01-10 (木) 14:31:00&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/colorconvertop</link>
                <guid>http://terai.xrea.jp/swing/colorconvertop</guid>
                <pubDate>2005-11-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>FileをJavaアプリケーションからドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;アプリケーションから&lt;code&gt;Windows&lt;/code&gt;のデスクトップなどに&lt;code&gt;File&lt;/code&gt;をドロップします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragSource&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTL5-PTzWI/AAAAAAAAAYU/G2P--5GJWSU/s800/DragSource.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyDragGestureListener implements DragGestureListener {
  @Override public void dragGestureRecognized(DragGestureEvent dge) {
    final File tmpfile = getFile();
    if(tmpfile==null) {
      return;
    }
    Transferable tran = new Transferable() {
      @Override public Object getTransferData(DataFlavor flavor) {
        ArrayList al = new ArrayList(1);
        al.add(tmpfile);
        return al;
      }
      @Override public DataFlavor[] getTransferDataFlavors() {
        return new DataFlavor[] { DataFlavor.javaFileListFlavor };
      }
      @Override public boolean isDataFlavorSupported(DataFlavor flavor) {
        return flavor.equals(DataFlavor.javaFileListFlavor);
      }
    };
    DragSourceAdapter dsa = new DragSourceAdapter() {
      @Override public void dragDropEnd(DragSourceDropEvent dsde) {
        if(dsde.getDropSuccess()) {
          clearFile();
        }
      }
    };
    dge.startDrag(DragSource.DefaultMoveDrop, tran, dsa);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンで空の一時ファイルを生成し、ラベルをマウスでドラッグすると生成したファイルをデスクトップなどに移動することが出来ます。&lt;/p&gt;

&lt;p&gt;以下のように&lt;code&gt;DragGestureListener&lt;/code&gt;を登録してラベルをドラッグ＆ドロップすることで、&lt;code&gt;JFileChooser&lt;/code&gt;などで書き出すフォルダなどを指定する手間が省いています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DragSource dragSource = DragSource.getDefaultDragSource();
dragSource.createDefaultDragGestureRecognizer(label,
       DnDConstants.ACTION_MOVE, new MyDragGestureListener());
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;以上なら、以下のような&lt;code&gt;TransferHandler&lt;/code&gt;を&lt;code&gt;JLabel&lt;/code&gt;に設定する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;label.setTransferHandler(new TransferHandler() {
  @Override public int getSourceActions(JComponent c) {
    return COPY_OR_MOVE;
  }
  @Override protected Transferable createTransferable(JComponent c) {
    File tmpfile = getFile();
    if(tmpfile==null) {
      return null;
    }else{
      return new TempFileTransferable(tmpfile);
    }
  }
  @Override protected void exportDone(JComponent c, Transferable d, int a) {
    cleanup(c, a == MOVE);
  }
  private void cleanup(JComponent c, boolean removeFile) {
    if(removeFile) {
      clearFile();
      c.repaint();
    }
  }
});
label.addMouseListener(new MouseAdapter() {
  @Override public void mousePressed(MouseEvent e) {
    System.out.println(e);
    JComponent c = (JComponent)e.getSource();
    c.getTransferHandler().exportAsDrag(c, e, TransferHandler.COPY);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://opus-i.biz/&quot;&gt;opus-i | シンプル素材 テンプレート 音楽素材&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragsource</link>
                <guid>http://terai.xrea.jp/swing/dragsource</guid>
                <pubDate>2005-11-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldにフォーカスと文字列が無い場合の表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;にフォーカスが無く文字列が空の場合、薄い色でその説明を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GhostText&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNY3BG1nI/AAAAAAAAAas/YJB5L9kNK-c/s800/GhostText.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HintTextFocusListener implements FocusListener {
  Color INACTIVE_COLOR = UIManager.getColor(&quot;TextField.inactiveForeground&quot;);
  Color ORIGINAL_COLOR = UIManager.getColor(&quot;TextField.foreground&quot;);
  private final String hintMessage;
  public HintTextFocusListener(final JTextComponent tf) {
    hintMessage = tf.getText();
    tf.setForeground(INACTIVE_COLOR);
  }
  @Override public void focusGained(final FocusEvent e) {
    JTextComponent textField = (JTextComponent)e.getSource();
    String str = textField.getText();
    Color col  = textField.getForeground();
    if(hintMessage.equals(str) &amp;amp;&amp;amp; INACTIVE_COLOR.equals(col)) {
      textField.setForeground(ORIGINAL_COLOR);
      textField.setText(&quot;&quot;);
    }
  }
  @Override public void focusLost(final FocusEvent e) {
    JTextComponent textField = (JTextComponent)e.getSource();
    String str = textField.getText().trim();
    if(&quot;&quot;.equals(str)) {
      textField.setForeground(INACTIVE_COLOR);
      textField.setText(hintMessage);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、下の&lt;code&gt;JTextField&lt;/code&gt;からフォーカスが失われた時、まだ何も入力されていない場合は、その&lt;code&gt;JTextField&lt;/code&gt;の説明などを薄く表示することができるようにしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;以上の場合は、&lt;code&gt;JLayer&lt;/code&gt;を使用して同様にヒント文字列を描画することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class PlaceholderLayerUI extends LayerUI&amp;lt;JTextComponent&amp;gt; {
  private static final Color INACTIVE = UIManager.getColor(&quot;TextField.inactiveForeground&quot;);
  private final JLabel hint;
  public PlaceholderLayerUI(String hintMessage) {
    super();
    this.hint = new JLabel(hintMessage);
    hint.setForeground(INACTIVE);
  }
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    if (c instanceof JLayer) {
      JLayer jlayer = (JLayer) c;
      JTextComponent tc = (JTextComponent) jlayer.getView();
      if (tc.getText().length() == 0 &amp;amp;&amp;amp; !tc.hasFocus()) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setPaint(INACTIVE);
        Insets i = tc.getInsets();
        Dimension d = hint.getPreferredSize();
        SwingUtilities.paintComponent(g2, hint, tc, i.left, i.top, d.width, d.height);
        g2.dispose();
      }
    }
  }
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK);
    }
  }
  @Override public void uninstallUI(JComponent c) {
    super.uninstallUI(c);
    if (c instanceof JLayer) {
      ((JLayer) c).setLayerEventMask(0);
    }
  }
  @Override public void processFocusEvent(FocusEvent e, JLayer&amp;lt;? extends JTextComponent&amp;gt; l) {
    l.getView().repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/WatermarkInTextField.html&quot;&gt;JTextFieldに透かし画像を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InputHintPasswordField.html&quot;&gt;JPasswordFieldにヒント文字列を描画する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPasswordField&lt;/code&gt;の場合は、&lt;code&gt;setText&lt;/code&gt;などが使えないので、透かし画像と同じ要領で&lt;code&gt;paintComponent&lt;/code&gt;をオーバーライドして文字列を描画する方法を使います。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;タイトルを変更?: &lt;code&gt;Input Hint&lt;/code&gt;、&lt;code&gt;Placeholder&lt;/code&gt;、&lt;code&gt;Watermark&lt;/code&gt; ... -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-11-17 (火) 15:48:18&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LayerUI#paint(...)&lt;/code&gt;中で、子コンポーネントの&lt;code&gt;repaint()&lt;/code&gt;を呼び出して再描画が無限ループしていたバグを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-07-26 (土) 04:51:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/ghosttext</link>
                <guid>http://terai.xrea.jp/swing/ghosttext</guid>
                <pubDate>2005-11-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerの値をパーセントで指定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;の値をパーセントで指定するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/NumberEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTQecBWSoI/AAAAAAAAAfo/IOSdDmzOIBs/s800/NumberEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JSpinner spinner = new JSpinner(new SpinnerNumberModel(0, 0, 1, 0.01));
JSpinner.NumberEditor editor = new JSpinner.NumberEditor(spinner, &quot;0%&quot;);
editor.getTextField().setEditable(false);
spinner.setEditor(editor);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner.NumberEditor&lt;/code&gt;のコンストラクタに、&lt;code&gt;DecimalFormat&lt;/code&gt;オブジェクトのパターンを入力すると数値の解析とフォーマットを行ってくれます。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、数字を表す&lt;code&gt;0&lt;/code&gt;と、&lt;code&gt;100&lt;/code&gt;倍してパーセントを表す&lt;code&gt;%&lt;/code&gt;を組み合わせたフォーマットパターンを使用しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/numbereditor</link>
                <guid>http://terai.xrea.jp/swing/numbereditor</guid>
                <pubDate>2005-10-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのItem選択をループ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Item&lt;/code&gt;の選択が、上下のカーソルキーでループするように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LoopComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPicRK7pI/AAAAAAAAAeI/ApRsPHlRWe0/s800/LoopComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Action up = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    int index = combo.getSelectedIndex();
    combo.setSelectedIndex((index==0)?combo.getItemCount()-1:index-1);
  }
};
Action down = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    int index = combo.getSelectedIndex();
    combo.setSelectedIndex((index==combo.getItemCount()-1)?0:index+1);
  }
};
ActionMap amc = combo.getActionMap();
amc.put(&quot;myUp&quot;,   up);
amc.put(&quot;myDown&quot;, down);
InputMap imc = combo.getInputMap();
imc.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),   &quot;myUp&quot;);
imc.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), &quot;myDown&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、下のコンボボックスの&lt;code&gt;ActionMap&lt;/code&gt;と&lt;code&gt;InputMap&lt;/code&gt;を使って、上下キーに対応する新しいアクションを設定しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/loopcombobox</link>
                <guid>http://terai.xrea.jp/swing/loopcombobox</guid>
                <pubDate>2005-10-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxを使ってポップアップメニューをスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;を使ってスクロール可能なポップアップメニューを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BasicComboPopup&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTH_tpIbsI/AAAAAAAAASE/DrHgihVbnn0/s800/BasicComboPopup.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JComboBox combo = new JComboBox(strArray);
BasicComboPopup popup = new BasicComboPopup(combo) {
  @Override public boolean isFocusable() {
    return true;
  }
  private MouseAdapter listener = null;
  @Override protected void installListListeners() {
    super.installListListeners();
    listener = new MouseAdapter() {
      @Override public void mouseClicked(MouseEvent e) {
        hide();
        System.out.println(comboBox.getSelectedItem());
        append((String)combo.getSelectedItem());
      }
    };
    if(listener!=null) {
      list.addMouseListener(listener);
    }
  }
  @Override public void uninstallingUI() {
    if(listener != null) {
      list.removeMouseListener(listener);
      listener = null;
    }
    super.uninstallingUI();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;kbd&gt;Shift+Tab&lt;/kbd&gt;でポップアップメニューが表示され、&lt;kbd&gt;Up&lt;/kbd&gt;, &lt;kbd&gt;Down&lt;/kbd&gt;キーで移動、&lt;kbd&gt;Enter&lt;/kbd&gt;で&lt;code&gt;JTextPane&lt;/code&gt;のカーソルの後に選択された文字列が入力されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のポップアップ部分の&lt;code&gt;UI&lt;/code&gt;を表現する&lt;code&gt;BasicComboPopup&lt;/code&gt;を利用することで、スクロールバーをもつポップアップメニューを実現しています。&lt;/p&gt;

&lt;p&gt;フォーカスを取得して、キー入力で選択を変更できるように、&lt;code&gt;BasicComboPopup#isFocusable&lt;/code&gt;メソッドをオーバーライドしています。また、&lt;code&gt;BasicComboPopup#show&lt;/code&gt;したあと、&lt;code&gt;BasicComboPopup#requestFocusInWindow&lt;/code&gt;する必要があります。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;から、ポップアップメニューがはみ出す(親&lt;code&gt;Window&lt;/code&gt;が&lt;code&gt;HeavyWeightWindow&lt;/code&gt;になる)場合、カーソルキーなどで、アイテムが移動選択できないバグがあったので、&lt;code&gt;SwingUtilities.getWindowAncestor(popup).toFront();&lt;/code&gt;を追加するなどの修正(&lt;code&gt;Ubuntu&lt;/code&gt;ではうまく動作しない？)をしました。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void popupMenu(ActionEvent e) {
  Rectangle rect = getMyPopupRect();
  popup.show(jtp, rect.x, rect.y + rect.height);
  EventQueue.invokeLater(new Runnable() {
    @Override public void run() {
      SwingUtilities.getWindowAncestor(popup).toFront();
      popup.requestFocusInWindow();
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTICNIyr1I/AAAAAAAAASI/CorNUGA0pF8/s800/BasicComboPopup1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;ただし、バージョン(&lt;code&gt;6uN&lt;/code&gt;？)、&lt;code&gt;Web Start&lt;/code&gt;などで実行すると、&lt;code&gt;AccessControlException&lt;/code&gt;が発生します。&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.security.AccessControlException: access denied (java.awt.AWTPermission setWindowAlwaysOnTop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;上記の&lt;code&gt;AccessControlException&lt;/code&gt;は、&lt;code&gt;6u10 build b26&lt;/code&gt;で修正されている

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6675802&quot;&gt;Bug ID: 6675802 Regression: heavyweight popups cause SecurityExceptions in applets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1367473&quot;&gt;Swing - Scrollable PopupMenu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;大変参考になりました。その上、マウスクリックで文字列を選定できるようにしたいですが、どうすればいかがですか？ -- &lt;a href=&quot;http://terai.xrea.jp/java.html&quot;&gt;java&lt;/a&gt; 2008-01-08 (火) 16:25:30

&lt;ul&gt;
&lt;li&gt;どうもです。とりあえず(以前は、マウスクリックでも動作していたと思うのですが、勘違いだったのかも…？)、手抜きですが、&lt;code&gt;BasicComboPopup#installListListeners&lt;/code&gt;メソッドをオーバーライドしてマウスリスナーを追加してみました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-01-08 (火) 18:23:22&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;助かりました！感動です！ご回答ありがとうございました。 -- &lt;a href=&quot;http://terai.xrea.jp/java.html&quot;&gt;java&lt;/a&gt; 2008-01-10 (木) 17:38:04&lt;/li&gt;
&lt;li&gt;こんにちは。いつもこのサイトを参考にさせていただいています。ようやく自分の&lt;code&gt;java&lt;/code&gt;アプリケーションをリリースしました（&lt;a href=&quot;http://www.jdbckit.com&quot;&gt;http://www.jdbckit.com&lt;/a&gt;  まだ更新中ですが、）。次回のバージョンアップで、&lt;code&gt;Special Thanks&lt;/code&gt;をバージョン情報画面に設けて、Terai Atsuhiro様のサイトを感謝対象にさせてよろしいでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/java.html&quot;&gt;java&lt;/a&gt; 2008-02-22 (金) 15:13:04

&lt;ul&gt;
&lt;li&gt;こんばんは。どうもです。おお、おめでとうございます。リンクの件はご自由にどうぞ。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-22 (金) 17:00:18&lt;/li&gt;
&lt;li&gt;余談: ドキュメントに何か書く必要があるのって、&lt;code&gt;Apache Software License&lt;/code&gt;でしたっけ？基本的(引用先を強調している&lt;code&gt;Tips&lt;/code&gt;を除く)に、このサイトの&lt;code&gt;Tips&lt;/code&gt;は、ちいさなサンプルを目指しているため、コピペしても単独ではあまり役に立たないものが多く、完全に無保証なので、ライセンスなどは気しなくても良いです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-22 (金) 17:01:08&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/basiccombopopup</link>
                <guid>http://terai.xrea.jp/swing/basiccombopopup</guid>
                <pubDate>2005-10-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameを固定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;をマウスなどで移動できないように固定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ImmovableFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTOXXz-C5I/AAAAAAAAAcQ/0qYBPzKq7js/s800/ImmovableFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BasicInternalFrameUI ui = (BasicInternalFrameUI)immovableFrame.getUI();
Component titleBar = ui.getNorthPane();
for(MouseMotionListener l:titleBar.getListeners(MouseMotionListener.class)) {
  titleBar.removeMouseMotionListener(l);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JInternalFrame&lt;/code&gt;の&lt;code&gt;MouseMotionListener&lt;/code&gt;をすべて削除することで、マウスによる移動を不可能にしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のようにしてタイトルバー自体を削除して移動できないフレームを作成する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ui.setNorthPane(null);
internalframe.setBorder(BorderFactory.createEmptyBorder());
internalframe.setSize(200,50);
internalframe.add(new JLabel(&quot;移動できないフレーム&quot;, SwingConstants.CENTER));
internalframe.setLocation(10,10);
internalframe.pack();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOZ803FiI/AAAAAAAAAcU/Bj1t9F8ZKqI/s800/ImmovableFrame1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1392111&quot;&gt;Swing - Lock JInternalPane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/immovableframe</link>
                <guid>http://terai.xrea.jp/swing/immovableframe</guid>
                <pubDate>2005-10-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneのスクロールを禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;のスクロールを一時的に禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisableScrolling&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTLM6S99OI/AAAAAAAAAXM/9r2e_2JRA5g/s800/DisableScrolling.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JCheckBox b = new JCheckBox(&quot;スクロールを禁止する&quot;);
b.addItemListener(new ItemListener() {
  @Override public void itemStateChanged(ItemEvent ie) {
    JCheckBox box = (JCheckBox)ie.getItemSelectable();
    boolean flag = !box.isSelected();
    JScrollBar bar = scrollPane.getVerticalScrollBar();
    bar.setEnabled(flag);
    scrollPane.setWheelScrollingEnabled(flag);
    table.setEnabled(flag);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;Disable Scrolling&lt;/code&gt;をチェックして無効状態にすると

&lt;ul&gt;
&lt;li&gt;スクロールバーを取得し、&lt;code&gt;JScrollBar#setEnabled(boolean)&lt;/code&gt;メソッドを使って、これを無効にします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane#setWheelScrollingEnabled(boolean)&lt;/code&gt;メソッドで、マウスホイールによるスクロールを無効にします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;に配置したコンポーネントを&lt;code&gt;setEnabled(false)&lt;/code&gt;とし、フォーカスの移動などによるスクロールを無効にします。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;Disable Scrolling&lt;/code&gt;をチェックして無効状態にしても

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader&lt;/code&gt;は無効にしていないので、クリックしてソートや、カラムの移動を行うことができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollPane&lt;/code&gt;に設定した&lt;code&gt;JPopupMenu&lt;/code&gt;を表示することができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;に設定した&lt;code&gt;JToolTip&lt;/code&gt;を表示することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;で追加された&lt;code&gt;JLayer&lt;/code&gt;を使用して、以下のように入力を禁止する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PopupMenuBlockLayer.html&quot;&gt;JLayerで子コンポーネントへの入力を制限する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PopupMenuBlockLayer.html&quot;&gt;JLayerで子コンポーネントへの入力を制限する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableInputLayer.html&quot;&gt;JLayerで指定したコンポーネントへの入力を禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disablescrolling</link>
                <guid>http://terai.xrea.jp/swing/disablescrolling</guid>
                <pubDate>2005-10-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのCellEditorにJComboBoxを設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellEditor&lt;/code&gt;に&lt;code&gt;JComboBox&lt;/code&gt;を使用し、リストから値を選択できるようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboCellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJy9xBM6I/AAAAAAAAAU8/h5YELRcY4gE/s800/ComboCellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JComboBox cb = new JComboBox(new String[] {&quot;名前0&quot;, &quot;名前1&quot;, &quot;名前2&quot;});
cb.setBorder(BorderFactory.createEmptyBorder());

TableColumn col = table.getColumnModel().getColumn(1);
col.setCellEditor(new DefaultCellEditor(cb));
//col.setCellRenderer(new ComboBoxCellRenderer());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;1&lt;/code&gt;列目のセルエディタとしてコンボボックスを使う&lt;code&gt;DefaultCellEditor&lt;/code&gt;を登録しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;コンボボックスの余白を&lt;code&gt;0&lt;/code&gt;にしておくと、セル内にきれいにぴったり収まります(参考:&lt;a href=&quot;http://www.jroller.com/page/santhosh?entry=tweaking_jtable_editing&quot;&gt;Santhosh Kumar&amp;#39;s Weblog : Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;以下は余白を&lt;code&gt;0&lt;/code&gt;にしていない場合&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJ1Ykl--I/AAAAAAAAAVA/ZRLgScHCF3s/s800/ComboCellEditor1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;セルの表示にも&lt;code&gt;JComboBox&lt;/code&gt;を使用する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboCellRenderer.html&quot;&gt;JTableのCellRendererにJComboBoxを設定&lt;/a&gt;を参考に&lt;code&gt;JComboBox&lt;/code&gt;を継承するセルレンダラーを使用してみてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTableExamples7.html&quot;&gt;JTable Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/page/santhosh?entry=tweaking_jtable_editing&quot;&gt;Santhosh Kumar&amp;#39;s Weblog : Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboCellRenderer.html&quot;&gt;JTableのCellRendererにJComboBoxを設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/combocelleditor</link>
                <guid>http://terai.xrea.jp/swing/combocelleditor</guid>
                <pubDate>2005-09-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのアイテムをBorderで修飾してグループ分け</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;のアイテムを&lt;code&gt;Border&lt;/code&gt;を使用して修飾してグループ分けします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BorderSeparator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTIMVjWegI/AAAAAAAAASY/yM_W_tfnios/s800/BorderSeparator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JComboBox combobox = new JComboBox();
final JSeparator sep = new JSeparator();
final ListCellRenderer lcr = combobox.getRenderer();
combobox.setRenderer(new ListCellRenderer() {
  @Override public Component getListCellRendererComponent(
               JList list, Object value, int index,
               boolean isSelected, boolean cellHasFocus) {
    MyItem item = (MyItem)value;
    JLabel label = (JLabel)lcr.getListCellRendererComponent(
                    list,item,index,isSelected,cellHasFocus);
    if(item.hasSeparator()) {
      label.setBorder(
             BorderFactory.createMatteBorder(1,0,0,0,Color.GRAY));
    }else{
      label.setBorder(BorderFactory.createEmptyBorder());
    }
    return label;
  }
});
DefaultComboBoxModel model = new DefaultComboBoxModel();
model.addElement(new MyItem(&quot;aaaa&quot;));
model.addElement(new MyItem(&quot;eeeeeeeee&quot;, true));
model.addElement(new MyItem(&quot;bbb12&quot;));
combobox.setModel(model);
combobox.setEditable(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MyItem{
  private final String  item;
  private final boolean flag;
  public MyItem(String str) {
    this(str,false);
  }
  public MyItem(String str, boolean flg) {
    item = str;
    flag = flg;
  }
  @Override public String toString() {
    return item;
  }
  public boolean hasSeparator() {
    return flag;
  }
}
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;レンダラーの中で、&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;MatteBorder&lt;/code&gt;で修飾し、&lt;code&gt;JSeparator&lt;/code&gt;を使用せずに&lt;code&gt;Item&lt;/code&gt;をグループ分けしているように見せかけています。&lt;/p&gt;

&lt;p&gt;コンボボックスが編集可の場合は、フィールド表示にはレンダラーではなく、&lt;code&gt;JTextField&lt;/code&gt;が使用されるため、&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxSeparator.html&quot;&gt;JComboBoxにJSeparatorを挿入&lt;/a&gt;する方法より簡単に区切りを表現することができます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;コンボボックスが編集不可の場合は、&lt;a href=&quot;http://www.jroller.com/santhosh/entry/jcombobox_items_with_separators&quot;&gt;JComboBox Items with Separators - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;のようにフィールド表示(&lt;code&gt;index!=-1&lt;/code&gt;の場合)で区切りが表示されないようにする必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combobox.setRenderer(new ListCellRenderer() {
  @Override public Component getListCellRendererComponent(
               JList list, Object value, int index,
               boolean isSelected, boolean cellHasFocus) {
    MyItem item = (MyItem)value;
    JLabel label = (JLabel)lcr.getListCellRendererComponent(
                    list,item,index,isSelected,cellHasFocus);
    if(index!=-1 &amp;amp;&amp;amp; item.hasSeparator()) {
      label.setBorder(
             BorderFactory.createMatteBorder(1,0,0,0,Color.GRAY));
    }else{
      label.setBorder(BorderFactory.createEmptyBorder());
    }
    return label;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxSeparator.html&quot;&gt;JComboBoxにJSeparatorを挿入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/jcombobox_items_with_separators&quot;&gt;JComboBox Items with Separators - Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index!=-1&lt;/code&gt;を追加、スクリーンショットを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-09-04 (木) 17:53:47&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/borderseparator</link>
                <guid>http://terai.xrea.jp/swing/borderseparator</guid>
                <pubDate>2005-09-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのItemを左右にクリップして配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Item&lt;/code&gt;にテキストをクリップして左右に分けて配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClippedLRComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJSTVvNXI/AAAAAAAAAUI/RNbSh6R4xi8/s800/ClippedLRComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class MultiColumnCellRenderer extends JPanel implements ListCellRenderer{
  private final JLabel leftLabel = new JLabel();
  private final JLabel rightLabel;

  public MultiColumnCellRenderer(int rightWidth) {
    super(new BorderLayout());
    this.setBorder(BorderFactory.createEmptyBorder(1,1,1,1));

    leftLabel.setOpaque(false);
    leftLabel.setBorder(BorderFactory.createEmptyBorder(0,2,0,0));

    final Dimension dim = new Dimension(rightWidth, 0);
    rightLabel = new JLabel() {
      @Override public Dimension getPreferredSize() {
        return dim;
      }
    };
    rightLabel.setOpaque(false);
    rightLabel.setBorder(BorderFactory.createEmptyBorder(0,2,0,2));
    rightLabel.setForeground(Color.GRAY);
    rightLabel.setHorizontalAlignment(SwingConstants.RIGHT);

    this.add(leftLabel);
    this.add(rightLabel, BorderLayout.EAST);
  }
  @Override public Component getListCellRendererComponent(
      JList list, Object value, int index,
      boolean isSelected, boolean cellHasFocus) {
    LRItem item = (LRItem)value;
    leftLabel.setText(item.getLeftText());
    rightLabel.setText(item.getRightText());

    leftLabel.setFont(list.getFont());
    rightLabel.setFont(list.getFont());

    if(index&amp;lt;0) {
      leftLabel.setForeground(list.getForeground());
      this.setOpaque(false);
    }else{
      leftLabel.setForeground(
          isSelected?list.getSelectionForeground():list.getForeground());
      this.setBackground(
          isSelected?list.getSelectionBackground():list.getBackground());
      this.setOpaque(true);
    }
    return this;
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = super.getPreferredSize();
    return new Dimension(0, d.height);
  }
  @Override public void updateUI() {
    super.updateUI();
    this.setName(&quot;List.cellRenderer&quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JLabel&lt;/code&gt;を二つ並べた&lt;code&gt;JPanel&lt;/code&gt;をレンダラーにすることで、&lt;code&gt;Item&lt;/code&gt;に設定した文字列を左右に表示しています。このため文字列が長い場合、&lt;code&gt;JLabel&lt;/code&gt;がこれを自動的にクリップしてくれます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/LRComboBox.html&quot;&gt;JComboBoxのItemを左右に配置&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは&lt;code&gt;html&lt;/code&gt;の&lt;code&gt;table&lt;/code&gt;タグを使用して同様の表示(クリップはしない)を行っています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ポップアップリストが更新されなくなって？、うまくクリップできなくなっていたのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-08-13 (水) 15:14:12&lt;/li&gt;
&lt;li&gt;選択時の文字色を修正(&lt;code&gt;Windows 7&lt;/code&gt;などへの対応)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-02-03 (金) 14:28:48&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/clippedlrcombobox</link>
                <guid>http://terai.xrea.jp/swing/clippedlrcombobox</guid>
                <pubDate>2005-09-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DynamicLayoutでレイアウトの動的評価</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ウィンドウのリサイズなどに応じてレイアウトを再評価するように、&lt;code&gt;DynamicLayout&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DynamicLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMDyaDeJI/AAAAAAAAAYk/-EIAq3TyJbw/s800/DynamicLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Toolkit.getDefaultToolkit().setDynamicLayout(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DynamicLayout&lt;/code&gt;にチェックするとウィンドウのリサイズなどに応じて内部のレイアウトを再評価するように、&lt;code&gt;DefaultToolkit&lt;/code&gt;の&lt;code&gt;setDynamicLayout&lt;/code&gt;メソッドを使って&lt;code&gt;DynamicLayout&lt;/code&gt;の設定をしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;OS&lt;/code&gt;などが、この機能をサポートしているかどうかは、以下のメソッドで調べることができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Toolkit.getDefaultToolkit().getDesktopProperty(&quot;awt.dynamicLayoutSupported&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/java/awt/Toolkit.html#setDynamicLayout-boolean-&quot;&gt;Toolkit#setDynamicLayout(boolean) (Java Platform SE 8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dynamiclayout</link>
                <guid>http://terai.xrea.jp/swing/dynamiclayout</guid>
                <pubDate>2005-09-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxにJSeparatorを挿入</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;に選択できない&lt;code&gt;JSeparator&lt;/code&gt;を挿入します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxSeparator&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJt9fH4ZI/AAAAAAAAAU0/c9vovQi9Jvo/s800/ComboBoxSeparator.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final ListCellRenderer lcr = combobox.getRenderer();
combobox.setRenderer(new ListCellRenderer() {
  @Override public Component getListCellRendererComponent(JList list, Object value,
                    int index, boolean isSelected, boolean cellHasFocus) {
    if(value instanceof JSeparator) {
      return (JSeparator)value;
    }else{
      return (JLabel)lcr.getListCellRendererComponent(
                  list,value,index,isSelected,cellHasFocus);
    }
 }
});
DefaultComboBoxModel model = new DefaultComboBoxModel() {
  @Override public void setSelectedItem(Object o) {
    if(o instanceof JSeparator) return;
    super.setSelectedItem(o);
  }
};
model.addElement(&quot;aaaa&quot;);
model.addElement(new JSeparator());
model.addElement(&quot;bbb1&quot;);
combobox.setModel(model);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ListCellRenderer&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSeparator&lt;/code&gt;が選択された場合は、&lt;code&gt;JSeparator&lt;/code&gt;にキャストして返すような&lt;code&gt;ListCellRenderer&lt;/code&gt;を設定しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultComboBoxModel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSeparator&lt;/code&gt;が選択された場合は何もしないよう、&lt;code&gt;setSelectedItem&lt;/code&gt;メソッドをオーバーライドしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;DefaultComboBoxModel#setSelectedItem&lt;/code&gt;メソッドをオーバーライドする代わりに、以下のように&lt;code&gt;JSeparator&lt;/code&gt;が選択された場合はひとつ前の&lt;code&gt;Item&lt;/code&gt;に戻すような&lt;code&gt;ItemListener&lt;/code&gt;を追加しても同様になります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combobox.addItemListener(new ItemListener() {
  private Object prev;
  @Override public void itemStateChanged(ItemEvent e) {
    if(e.getStateChange()==ItemEvent.SELECTED) {
      Object obj = e.getItem();
      if(obj instanceof JSeparator) {
        if(prev==null) prev = combobox.getItemAt(0);
        combobox.setSelectedItem(prev);
      }else{
        prev = obj;
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらに、&lt;kbd&gt;Up&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;キーでの選択状態移動を可能にする(&lt;code&gt;JSeparator&lt;/code&gt;なら飛ばす)場合は、以下のようなキーストロークのアクションを設定する必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Action up = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    int index = combobox.getSelectedIndex();
    if(index==0) return;
    Object o = combobox.getItemAt(index-1);
    if(o instanceof JSeparator) {
      combobox.setSelectedIndex(index-2);
    }else{
      combobox.setSelectedIndex(index-1);
    }
  }
};
Action down = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    int index = combobox.getSelectedIndex();
    if(index==combobox.getItemCount()-1) return;
    Object o = combobox.getItemAt(index+1);
    if(o instanceof JSeparator) {
      combobox.setSelectedIndex(index+2);
    }else{
      combobox.setSelectedIndex(index+1);
    }
  }
};
ActionMap am = combobox.getActionMap();
am.put(&quot;selectPrevious3&quot;, up);
am.put(&quot;selectNext3&quot;, down);
InputMap im = combobox.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0),      &quot;selectPrevious3&quot;);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0),   &quot;selectPrevious3&quot;);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0),    &quot;selectNext3&quot;);
im.put(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0), &quot;selectNext3&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BorderSeparator.html&quot;&gt;JComboBoxのアイテムをBorderで修飾してグループ分け&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Up&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;キーでの選択状態移動に対応しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-08-10 (金) 18:54:05&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxseparator</link>
                <guid>http://terai.xrea.jp/swing/comboboxseparator</guid>
                <pubDate>2005-08-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>CellEditorのBorderを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;CellEditor&lt;/code&gt;に&lt;code&gt;Border&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellEditorBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTIiyFXk2I/AAAAAAAAAS8/Dgu1EqDMma4/s800/CellEditorBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextField field = new JTextField();
field.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
table.setDefaultEditor(Object.class, new DefaultCellEditor(field));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BorderFactory.createLineBorder(Color.RED, 2)&lt;/code&gt;を設定した&lt;code&gt;JTextField&lt;/code&gt;を使用する&lt;code&gt;DefaultCellEditor&lt;/code&gt;を作成し、&lt;code&gt;JTable#setDefaultEditor(...)&lt;/code&gt;で、&lt;code&gt;Object.class&lt;/code&gt;のデフォルトエディタとして設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable#setDefaultEditor(...)&lt;/code&gt;を使用せずに、&lt;code&gt;JTable#prepareEditor(...)&lt;/code&gt;をオーバーライドして、セルエディタとして使用するコンポーネントの背景色や&lt;code&gt;Border&lt;/code&gt;を変更することもできます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public Component prepareEditor(
      TableCellEditor editor, int row, int column) {
    Component c = super.prepareEditor(editor, row, column);
    if(c instanceof JCheckBox) {
      JCheckBox b = (JCheckBox)c;
      b.setBorderPainted(true);
      b.setBackground(getSelectionBackground());
    }else if(c instanceof JComponent &amp;amp;&amp;amp; convertColumnIndexToModel(column)==1) {
      ((JComponent)c).setBorder(
        BorderFactory.createLineBorder(Color.GREEN, 2));
    }
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BooleanCellEditor.html&quot;&gt;JTableが使用するBooleanCellEditorの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/celleditorborder</link>
                <guid>http://terai.xrea.jp/swing/celleditorborder</guid>
                <pubDate>2005-08-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JToolTipにBorderを設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ツールチップに&lt;code&gt;Border&lt;/code&gt;を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolTipBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTVjcQsX6I/AAAAAAAAAn0/tieki8bniAM/s800/ToolTipBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton button = new JButton() {
  public JToolTip createToolTip() {
    JToolTip tip = new JToolTip();
    Border b1 = tip.getBorder();
    Border b2 = BorderFactory.createMatteBorder(0,10,0,0,Color.GREEN);
    tip.setBorder(BorderFactory.createCompoundBorder(b1, b2));
    tip.setComponent(this);
    return tip;
  }
};
button.setToolTipText(&quot;テスト&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComponent#createToolTip&lt;/code&gt;メソッドをオーバーライドし、その中で&lt;code&gt;Border&lt;/code&gt;を設定した&lt;code&gt;JToolTip&lt;/code&gt;を生成しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltipborder</link>
                <guid>http://terai.xrea.jp/swing/tooltipborder</guid>
                <pubDate>2005-08-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブを等幅にしてタイトルをクリップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブを等幅にし、長いタイトルはクリップして表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClippedTitleTab&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJXdZi5MI/AAAAAAAAAUQ/5nvfRoEEDEM/s800/ClippedTitleTab.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final Insets tabInsets = UIManager.getInsets(&quot;TabbedPane.tabInsets&quot;);
tab1.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
  @Override protected int calculateTabWidth(
      int tabPlacement, int tabIndex, FontMetrics metrics) {
    Insets insets = tabPane.getInsets();
    Insets tabAreaInsets = getTabAreaInsets(tabPlacement);
    int width = tabPane.getWidth() - insets.left - insets.right
                                   - tabAreaInsets.left - tabAreaInsets.right;
    switch(tabPlacement) {
      case LEFT: case RIGHT:
        return (int)(width/4);
      case BOTTOM: case TOP: default:
        return (int)(width/tabPane.getTabCount());
      }
  }
  @Override protected void paintText(
      Graphics g, int tabPlacement, Font font, FontMetrics metrics,
      int tabIndex, String title, Rectangle textRect, boolean isSelected) {
    Rectangle tabRect = rects[tabIndex];
    Rectangle rect = new Rectangle(textRect.x+tabInsets.left, textRect.y,
      tabRect.width-tabInsets.left-tabInsets.right, textRect.height);
    String clippedText = SwingUtilities.layoutCompoundLabel(metrics, title, null,
                                    SwingUtilities.CENTER, SwingUtilities.CENTER,
                                    SwingUtilities.CENTER, SwingUtilities.TRAILING,
                                    rect, new Rectangle(), rect, 0);
    if(title.equals(clippedText)) {
      super.paintText(g, tabPlacement, font, metrics, tabIndex,
                      title, textRect, isSelected);
    }else{
      rect = new Rectangle(textRect.x+tabInsets.left, textRect.y,
        tabRect.width-tabInsets.left-tabInsets.right, textRect.height);
      super.paintText(g, tabPlacement, font, metrics, tabIndex,
                      clippedText, rect, isSelected);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicTabbedPaneUI#calculateTabWidth&lt;/code&gt;メソッドをオーバーライドして、&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ幅が、すべて等しくなるように設定しています。&lt;/p&gt;

&lt;p&gt;タイトル文字列のほうが、このタブ幅より長い場合は、&lt;code&gt;SwingUtilities.layoutCompoundLabel&lt;/code&gt;メソッドで文字列をクリップして表示します。&lt;/p&gt;

&lt;p&gt;タイトルがクリップされていても、ツールチップで元の文字列を表示することができます。&lt;/p&gt;

&lt;p&gt;タブの位置を左右にした場合、このサンプルでは全体の幅の&lt;code&gt;1/4&lt;/code&gt;のタブ幅になるようにしています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJZ71XT7I/AAAAAAAAAUU/bO4iaEaR_xU/s800/ClippedTitleTab1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;なら、&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTabLabel.html&quot;&gt;JTabbedPaneのタイトルをクリップ&lt;/a&gt;のように、&lt;code&gt;JTabbedPane#setTabComponentAt&lt;/code&gt;メソッドを使って、&lt;code&gt;JLabel&lt;/code&gt;のクリップ機能をそのまま利用する方法もあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedTabLabel.html&quot;&gt;JTabbedPaneのタイトルをクリップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleAlignment.html&quot;&gt;JTabbedPaneのTabTitleを左揃えに変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tabAreaInsets&lt;/code&gt;を考慮するように修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-26 (火) 22:18:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/clippedtitletab</link>
                <guid>http://terai.xrea.jp/swing/clippedtitletab</guid>
                <pubDate>2005-08-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneで最終行に移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;CaretPosition&lt;/code&gt;を指定して&lt;code&gt;JTextPane&lt;/code&gt;の最終行に移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CaretPosition&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTId9wo-yI/AAAAAAAAAS0/GZbZiJfMOwI/s800/CaretPosition.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Document doc = jtp.getDocument();
try{
  doc.insertString(doc.getLength(), str+&quot;\n&quot;, null);
  jtp.setCaretPosition(doc.getLength());
}catch(BadLocationException e) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Document&lt;/code&gt;に文字列と改行(&lt;code&gt;JTextComponent&lt;/code&gt;内での改行は常に&lt;code&gt;\n&lt;/code&gt;であり、&lt;code&gt;System.getProperties(&amp;quot;line.separator&amp;quot;)&lt;/code&gt;としたり、&lt;code&gt;\r\n&lt;/code&gt;を考慮する必要はない)を追加した後、その&lt;code&gt;Document&lt;/code&gt;の一番最後に&lt;code&gt;JTextComponent#setCaretPosition(int)&lt;/code&gt;メソッドでキャレットを移動しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Document&lt;/code&gt;の最後ではなく、現在のキャレットの位置から、その行番号を取得したい場合は、以下のようにします。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static int getLineAtCaret(JTextComponent component) {
  int caretPosition = component.getCaretPosition();
  Element root = component.getDocument().getDefaultRootElement();
  return root.getElementIndex(caretPosition)+1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoScroll.html&quot;&gt;JScrollPaneのオートスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1393939&quot;&gt;Swing - Line Number in JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1627028/how-to-set-auto-scrolling-of-jtextarea-in-java-gui&quot;&gt;How to set AUTO-SCROLLING of JTEXTAREA in Java GUI? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/caretposition</link>
                <guid>http://terai.xrea.jp/swing/caretposition</guid>
                <pubDate>2005-08-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DefaultEditorKitでポップアップメニューからコピー</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultEditorKit&lt;/code&gt;を使って、&lt;code&gt;JTextField&lt;/code&gt;などでポップアップメニューを使ったコピー、貼り付け、切り取りを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DefaultEditorKit&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTKk8KGiNI/AAAAAAAAAWM/dJouzZuxv6g/s800/DefaultEditorKit.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//textField.setComponentPopupMenu(new TextFieldPopupMenu());
class TextFieldPopupMenu extends JPopupMenu {
  private final Action cutAction = new DefaultEditorKit.CutAction();
  private final Action copyAction = new DefaultEditorKit.CopyAction();
  private final Action pasteAction = new DefaultEditorKit.PasteAction();
  private final Action deleteAction = new AbstractAction(&quot;delete&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      Component c = getInvoker();
      if(c instanceof JTextComponent) {
        ((JTextComponent)c).replaceSelection(null);
      }
    }
  };
  private final Action cut2Action = new AbstractAction(&quot;cut2&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      Component c = getInvoker();
      if(c instanceof JTextComponent) {
        ((JTextComponent)c).cut();
      }
    }
  };
  public TextFieldPopupMenu() {
    super();
    add(cutAction);
    add(copyAction);
    add(pasteAction);
    add(deleteAction);
    addSeparator();
    add(cut2Action);
  }
  @Override public void show(Component c, int x, int y) {
    boolean flg;
    if(c instanceof JTextComponent) {
      JTextComponent field = (JTextComponent)c;
      flg = field.getSelectedText()!=null;
    }else{
      flg = false;
    }
    cutAction.setEnabled(flg);
    copyAction.setEnabled(flg);
    deleteAction.setEnabled(flg);
    cut2Action.setEnabled(flg);
    super.show(c, x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;DefaultEditorKit&lt;/code&gt;には、エディタとして必要な最小限度の機能がデフォルトで実装されています。上記のサンプルでは、&lt;code&gt;DefaultEditorKit.CopyAction&lt;/code&gt;で、システムクリップボードを使ったコピーをポップアップメニューで行っています。&lt;/p&gt;

&lt;p&gt;サンプルの「切り取り&lt;code&gt;2&lt;/code&gt;」のように、&lt;code&gt;JTextComponent#cut()&lt;/code&gt;などを使っても同様のことが行えます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;サンプルを&lt;code&gt;Java Web Start&lt;/code&gt;で起動した場合は、システム全体の共有クリップボードにはアクセス不可能で、アプリケーション内部のみでのコピー、貼り付けとなるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClipboardService.html&quot;&gt;ClipboardServiceでシステム全体の共有クリップボードにアクセスする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKnUb6nqI/AAAAAAAAAWQ/L3ylLdA-GIw/s800/DefaultEditorKit1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ActionMap.html&quot;&gt;JTextFieldでコピー、貼り付けなどを禁止&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;「今後この警告を表示しない」をやめて、セキュリティの警告を表示したいけど、やり方が分からないorz。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-06 (水) 13:00:48&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/defaulteditorkit</link>
                <guid>http://terai.xrea.jp/swing/defaulteditorkit</guid>
                <pubDate>2005-07-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldでコピー、貼り付けなどを禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;へのコピー、貼り付け、切り取りを禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ActionMap&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTHX8kSixI/AAAAAAAAARE/cRSBUI5TJWo/s800/ActionMap.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Action beep  = new DefaultEditorKit.BeepAction();
ActionMap am = field.getActionMap();
am.put(DefaultEditorKit.cutAction,   beep);
am.put(DefaultEditorKit.copyAction,  beep);
am.put(DefaultEditorKit.pasteAction, beep);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField&lt;/code&gt;の&lt;code&gt;ActionMap&lt;/code&gt;から、コピーなどの&lt;code&gt;Action&lt;/code&gt;を取得し、これらをビープ音を鳴らす&lt;code&gt;DefaultEditorKit.BeepAction()&lt;/code&gt;に置き換えています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように&lt;code&gt;copy&lt;/code&gt;メソッドなどをオーバーライドする方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTextField field = new JTextField() {
  @Override public void copy() {
    UIManager.getLookAndFeel().provideErrorFeedback(this);
    //java.awt.Toolkit.getDefaultToolkit().beep();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultEditorKit.html&quot;&gt;DefaultEditorKitでポップアップメニューからコピー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KeyBinding.html&quot;&gt;JComponentのKeyBinding一覧を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/actionmap</link>
                <guid>http://terai.xrea.jp/swing/actionmap</guid>
                <pubDate>2005-07-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderのカラムを選択不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;のカラムを選択不可にして、ソートなどを禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisabledHeader&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTK7ZrULPI/AAAAAAAAAWw/fwuY_EwXQsM/s800/DisabledHeader.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class SortButtonRenderer extends JButton implements TableCellRenderer{
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    JButton button = this;
    if(!isEnabledAt(column)) {
      button.setText((value ==null) ? &quot;&quot; : value.toString());
      button.getModel().setEnabled(false);
      return button;
    }
    //......

private final HashMap dmap = new HashMap();
public boolean isEnabledAt(int col) {
  Integer oi = Integer.valueOf(col);
  if(dmap.containsKey(oi)) {
    Boolean b = (Boolean)dmap.get(oi);
    return b.booleanValue();
  }else{
    return true;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;サンプルでは、&lt;code&gt;0&lt;/code&gt;列目のヘッダカラムを常に選択不可に、&lt;code&gt;3&lt;/code&gt;列目はチェックボックスで選択できるかどうかを切り替えるようにしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;に選択不可にするカラムヘッダを設定し、レンダラーがヘッダを描画するときにそれを&lt;code&gt;setEnabled(false)&lt;/code&gt;しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TableSorter.java&lt;/code&gt;を使用してソートしている場合は、&lt;code&gt;TableSorter&lt;/code&gt;のインナークラスの&lt;code&gt;MouseHandler&lt;/code&gt;を、例えば以下のように変更すると、任意のカラムをクリックしてもソートされなくなります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private class MouseHandler extends MouseAdapter {
  @Override public void mouseClicked(MouseEvent e) {
    JTableHeader h = (JTableHeader) e.getSource();
    TableColumnModel columnModel = h.getColumnModel();
    int viewColumn = columnModel.getColumnIndexAtX(e.getX());
    int column = columnModel.getColumn(viewColumn).getModelIndex();
    // ここをちょっと変更
    if (isSortableIndex(column)) { //column != -1 ) {
      int status = getSortingStatus(column);
      if (!e.isControlDown()) {
        cancelSorting();
      }
      status = status + (e.isShiftDown() ? -1 : 1);
      status = (status + 4) % 3 - 1; // signed mod, returning {-1, 0, 1}
      setSortingStatus(column, status);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;で導入された、&lt;code&gt;TableRowSorter&lt;/code&gt;を使っている場合は、ソート不可にするカラムを&lt;code&gt;DefaultRowSorter#setSortable(int, boolean)&lt;/code&gt;で指定し、表示を以下のようなレンダラーで切り替えます(参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JTableHeader hd = table.getTableHeader();
final TableCellRenderer headerRenderer = hd.getDefaultRenderer();
hd.setDefaultRenderer(new TableCellRenderer() {
  @Override public Component getTableCellRendererComponent(JTable tbl, Object val,
      boolean isS, boolean hasF, int row, int col) {
  JLabel lbl = (JLabel)headerRenderer.getTableCellRendererComponent(
    tbl, val, isS, hasF, row, col);
  int modelColumnIndex = tbl.convertColumnIndexToModel(col);
  lbl.setForeground(sorter.isSortable(modelColumnIndex)?Color.BLACK:Color.GRAY);
  return lbl;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disabledheader</link>
                <guid>http://terai.xrea.jp/swing/disabledheader</guid>
                <pubDate>2005-07-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの移動を同期</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;を&lt;code&gt;2&lt;/code&gt;つ並べて作成し、その位置関係を保ったまま移動できるようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DockingFrames&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTLtEL3M0I/AAAAAAAAAYA/9HmyXI1Uw0M/s800/DockingFrames.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void positionFrames(ComponentEvent e) {
  if(e.getSource().equals(frame1)) {
    int x = frame1.getBounds().x;
    int y = frame1.getBounds().y + frame1.getBounds().height;
    frame2.removeComponentListener(this);
    frame2.setLocation(x, y);
    frame2.addComponentListener(this);
  }else{
    int x = frame2.getBounds().x;
    int y = frame2.getBounds().y - frame1.getBounds().height;
    frame1.removeComponentListener(this);
    frame1.setLocation(x, y);
    frame1.addComponentListener(this);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFrame&lt;/code&gt;を上下に並べて、それぞれに&lt;code&gt;ComponentListener&lt;/code&gt;インタフェースを実装したリスナーを追加しています。片方のフレームが移動された時、残りのフレームの位置を指定する前に、一旦このリスナーを削除してやることで、処理がループしないようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1479997&quot;&gt;Swing (Archive) - how to dock two jdialogs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1492552&quot;&gt;Swing (Archive) - how to catch drag event in the title bar of a jframe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dockingframes</link>
                <guid>http://terai.xrea.jp/swing/dockingframes</guid>
                <pubDate>2005-07-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの複数作成と終了</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;を複数作成し、これらをすべて閉じた時にアプリケーションを終了します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CloseOperation&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJey1HvEI/AAAAAAAAAUc/KdbEeHP-Ij0/s800/CloseOperation.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static int number = 0;
public static JFrame createFrame(String title) {
  JFrame frame = new JFrame((title==null)?&quot;Frame #&quot;+number:title);
  frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
  number++;
//frame.addWindowListener(new WindowAdapter() {
//  @Override public void windowClosing(WindowEvent e) {
//    number--;
//    if(number==0) {
//      JFrame f = (JFrame)e.getSource();
//      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//    }
//  }
//});
  return frame;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;このサンプルでは、&lt;code&gt;WindowListener&lt;/code&gt;で終了時に自分が最後のフレームの場合だけ&lt;code&gt;setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)&lt;/code&gt;するように設定しています。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;すべてのフレームに、&lt;code&gt;setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE)&lt;/code&gt;を設定して、&lt;code&gt;Java VM&lt;/code&gt;内で最後の表示可能なウィンドウが破棄されると、&lt;code&gt;VM&lt;/code&gt;が終了するようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pushing-pixels.org/?p=232&quot;&gt;When DISPOSE_ON_CLOSE met WebStart&lt;/a&gt;によると、&lt;code&gt;Web Start&lt;/code&gt;で実行する場合は&lt;code&gt;DISPOSE_ON_CLOSE&lt;/code&gt;ではなく、&lt;code&gt;EXIT_ON_CLOSE&lt;/code&gt;を使っておいた方が良さそうです。このため、上記のサンプルでは、解説とは異なり、コメントアウトしたコードで終了するようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/doc-files/AWTThreadIssues.html&quot;&gt;AWT のスレッドの問題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pushing-pixels.org/?p=232&quot;&gt;When DISPOSE_ON_CLOSE met WebStart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;代目の&lt;code&gt;jframe&lt;/code&gt;から複数の&lt;code&gt;2&lt;/code&gt;代目の&lt;code&gt;jframe&lt;/code&gt;を作り出す。また&lt;code&gt;2&lt;/code&gt;代目の&lt;code&gt;jframe&lt;/code&gt;から&lt;code&gt;3&lt;/code&gt;代目の&lt;code&gt;jframe&lt;/code&gt;を作り出す。適当に選んだ&lt;code&gt;1&lt;/code&gt;つの&lt;code&gt;2&lt;/code&gt;代目&lt;code&gt;jframe&lt;/code&gt;を閉じると、その&lt;code&gt;2&lt;/code&gt;代目から作り出した&lt;code&gt;3&lt;/code&gt;代目&lt;code&gt;jframe&lt;/code&gt;も同時に&lt;code&gt;dispose&lt;/code&gt;したい。即ち別の&lt;code&gt;2&lt;/code&gt;代目とそこから生成した&lt;code&gt;3&lt;/code&gt;代目には影響（&lt;code&gt;dispose&lt;/code&gt;）を及ぼさないするにはどうすれば宜しいでしょうか？宜しくご教示ください。 -- &lt;a href=&quot;http://terai.xrea.jp/Panda.html&quot;&gt;Panda&lt;/a&gt; 2011-03-07 (月) 15:12:52

&lt;ul&gt;
&lt;li&gt;ルートになる&lt;code&gt;JFrame&lt;/code&gt;は&lt;code&gt;EXIT_ON_CLOSE&lt;/code&gt;、残りは&lt;code&gt;DISPOSE_ON_CLOSE&lt;/code&gt;とし、各&lt;code&gt;JFrame&lt;/code&gt;の親子関係をどこかに保持するなどしておけば、あとは閉じる時に自分(&lt;code&gt;JFrame&lt;/code&gt;)の子も深さ優先で検索して同様に閉じていくだけで特に問題ない？と思います。   -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-07 (月) 18:58:49&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/closeoperation</link>
                <guid>http://terai.xrea.jp/swing/closeoperation</guid>
                <pubDate>2005-06-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fileのドラッグ＆ドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Windows&lt;/code&gt;などからファイルを&lt;code&gt;JTable&lt;/code&gt;にドラッグ＆ドロップします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileListFlavor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTMhxsIIsI/AAAAAAAAAZU/iZ6Pn8yTFFM/s800/FileListFlavor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final FileModel model = new FileModel();
final JTable table = new JTable(model);
DropTargetListener dtl = new DropTargetAdapter() {
  @Override public void dragOver(DropTargetDragEvent dtde) {
    if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
      dtde.acceptDrag(DnDConstants.ACTION_COPY);
      return;
    }
    dtde.rejectDrag();
  }
  @Override public void drop(DropTargetDropEvent dtde) {
    try {
      if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
        dtde.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable transferable = dtde.getTransferable();
        List list = (List) transferable.getTransferData(
            DataFlavor.javaFileListFlavor);
        for (Object o : list) {
          if (o instanceof File) {
            File file = (File) o;
            model.addFileName(
                new FileName(file.getName(), file.getAbsolutePath()));
          }
        }
        dtde.dropComplete(true);
        return;
      }
    } catch (UnsupportedFlavorException | IOException ex) {
      ex.printStackTrace();
    }
    dtde.rejectDrop();
  }
};
new DropTarget(table, DnDConstants.ACTION_COPY, dtl, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Windows&lt;/code&gt;のエクスプローラなどからファイルを選択(複数可)し、上記のサンプルアプリ上にドラッグ＆ドロップするとファイル名などを&lt;code&gt;JTable&lt;/code&gt;に表示しています。&lt;/p&gt;

&lt;p&gt;ドロップされた&lt;code&gt;DataFlavor&lt;/code&gt;が、&lt;code&gt;DataFlavor.javaFileListFlavor&lt;/code&gt;の場合だけ、これをファイルとして処理する&lt;code&gt;DropTargetListener&lt;/code&gt;を作成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;以降なら、以下のような&lt;code&gt;TransferHandler&lt;/code&gt;を作成して使用する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileDirectoryComparator.html&quot;&gt;JTableでファイルとディレクトリを別々にソート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setDropMode(DropMode.INSERT_ROWS);
table.setTransferHandler(new FileTransferHandler());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class FileTransferHandler extends TransferHandler {
  @Override public boolean importData(TransferSupport support) {
    try{
      if(canImport(support)) {
        JTable table = (JTable)support.getComponent();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        for(Object o: (List)support.getTransferable().getTransferData(
            DataFlavor.javaFileListFlavor)) {
          if(o instanceof File) {
            File file = (File)o;
            model.addRow(new Object[] {
                file, file.length(), file.getAbsolutePath()});
          }
        }
        return true;
      }
    }catch(Exception ex) {
      ex.printStackTrace();
    }
    return false;
  }
  @Override public boolean canImport(TransferSupport support) {
    return support.isDataFlavorSupported(DataFlavor.javaFileListFlavor);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www5.big.or.jp/%7Etera/Labo/Java2/j2dnd.html&quot;&gt;Java2: WindowsからのDrag and Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ne.jp/asahi/j.nihei/personal/linuxDragDrop.html&quot;&gt;java drag and drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FillsViewportHeight.html&quot;&gt;JTable自体の高さを拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filelistflavor</link>
                <guid>http://terai.xrea.jp/swing/filelistflavor</guid>
                <pubDate>2005-06-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブ幅を固定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ幅をできるだけ一定のサイズに固定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabWidth&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTVAYay_fI/AAAAAAAAAm8/1gWXosPj93A/s800/TabWidth.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tab1.setUI(new javax.swing.plaf.basic.BasicTabbedPaneUI() {
  @Override protected int calculateTabWidth(int tabPlacement, int tabIndex, FontMetrics metrics) {
    int i = super.calculateTabWidth(tabPlacement, tabIndex, metrics);
    return i&amp;lt;100 ? 100 : i;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;BasicTabbedPaneUI&lt;/code&gt;の&lt;code&gt;calculateTabWidth&lt;/code&gt;メソッドをオーバーライドして、下の&lt;code&gt;JTabbedPane&lt;/code&gt;のタブ幅がタイトル文字列の長さにかかわらず一定になるように指定しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のサイズが十分で無い場合、タブ列が二段になってタブは指定された幅を維持出来なくなります。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;html&lt;/code&gt;タグを使ってタブ幅を固定する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public String makeTitle(String title) {
  return &quot;&amp;lt;html&amp;gt;&amp;lt;table width=&#39;100&#39;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td align=&#39;center&#39;&amp;gt;&quot;+
          title+
         &quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabwidth</link>
                <guid>http://terai.xrea.jp/swing/tabwidth</guid>
                <pubDate>2005-06-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextFieldのMarginを設定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;内部の余白を設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TextFieldMargin&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVM2PvsXI/AAAAAAAAAnQ/3wxfaHXrEUk/s800/TextFieldMargin.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Insets m = UIManager.getInsets(&quot;TextField.margin&quot;);
InsetsUIResource iur = new InsetsUIResource(m.top,m.left+5,m.bottom,m.right);
UIManager.put(&quot;TextField.margin&quot;, iur);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Insets m = field01.getMargin();
Insets margin = new Insets(m.top,m.left+10,m.bottom,m.right);
field01.setMargin(margin);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Border b1 = BorderFactory.createEmptyBorder(0,20,0,0);
Border b2 = BorderFactory.createCompoundBorder(field02.getBorder(), b1);
field02.setBorder(b2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;以下のサンプルでは、それぞれ左余白のサイズのみを変更しています。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;javax.swing.plaf.InsetsUIResource[top=2,left=7,bottom=2,right=2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;UIManager.put()&lt;/code&gt;ですべての&lt;code&gt;JTextField&lt;/code&gt;の余白を指定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getMargin().left&lt;/code&gt;: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getInsets().left&lt;/code&gt;: &lt;code&gt;8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBorder().getBorderInsets(c).left&lt;/code&gt;: &lt;code&gt;8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: 一番上 + &lt;code&gt;setMargin()&lt;/code&gt;で余白を指定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getMargin().left&lt;/code&gt;: &lt;code&gt;17&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getInsets().left&lt;/code&gt;: &lt;code&gt;18&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBorder().getBorderInsets(c).left&lt;/code&gt;: &lt;code&gt;18&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: 一番上 + &lt;code&gt;setBorder()&lt;/code&gt;で余白を指定

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getMargin().left&lt;/code&gt;: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getInsets().left&lt;/code&gt;: &lt;code&gt;28&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBorder().getBorderInsets(c).left&lt;/code&gt;: &lt;code&gt;28&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/textfieldmargin</link>
                <guid>http://terai.xrea.jp/swing/textfieldmargin</guid>
                <pubDate>2005-06-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListの任意のItemを選択不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;の任意の&lt;code&gt;Item&lt;/code&gt;を選択不可にするようなレンダラーを設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DisabledItem&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTLAYVmo3I/AAAAAAAAAW4/3MUtTm4ixyo/s800/DisabledItem.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JList = new JList();
final ListCellRenderer r = list.getCellRenderer();
final Vector disableIndexSet = new Vector();
initDisableIndex(disableIndexSet);
list.setCellRenderer(new ListCellRenderer() {
  @Override public Component getListCellRendererComponent(JList list, Object value,
                   int index, boolean isSelected, boolean cellHasFocus) {
    Component c;
    if(disableIndexSet.contains(Integer.valueOf(index))) {
      c = r.getListCellRendererComponent(list,value,index,false,false);
      c.setEnabled(false);
    }else{
      c = r.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
    return c;
  }
});
ActionMap am = list.getActionMap();
am.put(&quot;selectNextRow&quot;, new AbstractAction() {
  @Override public void actionPerformed(ActionEvent ae) {
    int index = list.getSelectedIndex()+1;
    for(int i=index;i&amp;lt;list.getModel().getSize();i++) {
      if(!disableIndexSet.contains(Integer.valueOf(i))) {
        list.setSelectedIndex(i);
        break;
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、カンマ区切りで入力したインデックスのアイテムを選択不可にすることができます。&lt;/p&gt;

&lt;p&gt;選択可か不可かはセルレンダラー中で判断しています。このセルレンダラーでは、インデックスが選択不可の場合、オリジナルのセルレンダラーから選択無し、フォーカス無しのコンポーネントを取得し、さらに&lt;code&gt;setEnabled(false)&lt;/code&gt;として返しています。&lt;/p&gt;

&lt;p&gt;また、&lt;kbd&gt;Up&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;キーでアイテムの選択を移動する場合、選択不可にしたアイテムを飛ばすように、&lt;code&gt;selectNextRow&lt;/code&gt;などのアクションを変更しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableItemComboBox.html&quot;&gt;JComboBoxのアイテムを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/disableditem</link>
                <guid>http://terai.xrea.jp/swing/disableditem</guid>
                <pubDate>2005-05-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderのTooltipsを列ごとに変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;の&lt;code&gt;Tooltips&lt;/code&gt;が、カーソルのある列の内容などを表示するようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HeaderTooltips&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNx5xm6BI/AAAAAAAAAbU/LCSjxDNp8p0/s800/HeaderTooltips.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTableHeader header = new JTableHeader(table.getColumnModel()) {
  @Override public String getToolTipText(MouseEvent e) {
    int c = columnAtPoint(e.getPoint());
    return getTable().getColumnName(c)
      +&quot;################################&quot;;
  }
};
table.setTableHeader(header);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTableHeader#getToolTipText&lt;/code&gt;メソッドをオーバーライドして、マウスカーソルの下にあるカラムヘッダの名前などを&lt;code&gt;Tooltips&lt;/code&gt;として返すようにしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowTooltips.html&quot;&gt;JTableのTooltipsを行ごとに変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedCellTooltips.html&quot;&gt;JTableのセルがクリップされている場合のみJToolTipを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;文字列がクリップされている場合だけ、&lt;code&gt;JToolTip&lt;/code&gt;を表示する -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-07 (水) 01:00:19

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedCellTooltips.html&quot;&gt;JTableのセルがクリップされている場合のみJToolTipを表示&lt;/a&gt;に移動 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-12 (月) 17:43:41&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/headertooltips</link>
                <guid>http://terai.xrea.jp/swing/headertooltips</guid>
                <pubDate>2005-05-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserを編集不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;内でのファイル名変更や新規フォルダ作成などの編集を不可にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ROFileChooser&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTR_zuU1UI/AAAAAAAAAiE/nZgj97xKO24/s800/ROFileChooser.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;FileChooser.readOnly&quot;, Boolean.TRUE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;以上の場合、&lt;code&gt;UIManager.put(&amp;quot;FileChooser.readOnly&amp;quot;, Boolean.TRUE)&lt;/code&gt;とすることで、簡単に&lt;code&gt;JFileChooser&lt;/code&gt;でのファイル名の変更や新規フォルダの作成を禁止することができます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1377535&quot;&gt;Swing - disabling &amp;quot;rename&amp;quot; on JFileChooser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/rofilechooser</link>
                <guid>http://terai.xrea.jp/swing/rofilechooser</guid>
                <pubDate>2005-05-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>WindowAncestor(親ウィンドウ)の取得</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SwingUtilities.getWindowAncestor()&lt;/code&gt;などで、親ウィンドウを取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowAncestor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWr-a0yaI/AAAAAAAAApo/Wm-nQMxDh4s/s800/WindowAncestor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JButton button = new JButton(new AbstractAction(&quot;フレームのタイトルを表示&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    JButton btn  = (JButton)e.getSource();
    JFrame f = (JFrame)SwingUtilities.getWindowAncestor(btn);
    //JFrame f = (JFrame)btn.getTopLevelAncestor();
    //JFrame f = (JFrame)JOptionPane.getFrameForComponent(btn);
    JOptionPane.showMessageDialog(f, &quot;parentFrame.getTitle(): &quot;+f.getTitle(),
                                  &quot;title&quot;, JOptionPane.INFORMATION_MESSAGE);
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;自分(コンポーネント)の最初の上位ウィンドウ(親ウィンドウ)を取得します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/SwingUtilities.html#getWindowAncestor%28java.awt.Component%29&quot;&gt;SwingUtilities.getWindowAncestor(Component c)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SwingUtilities.windowForComponent(Component c)&lt;/code&gt;は、&lt;code&gt;getWindowAncestor&lt;/code&gt;をラップしただけのメソッド&lt;/li&gt;
&lt;li&gt;親の&lt;code&gt;java.awt.Window&lt;/code&gt;が返る&lt;/li&gt;
&lt;li&gt;親&lt;code&gt;Window&lt;/code&gt;が無い場合は、&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/SwingUtilities.html#getRoot%28java.awt.Component%29&quot;&gt;SwingUtilities.getRoot(Component c)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;親のコンポーネント(&lt;code&gt;java.awt.Window&lt;/code&gt;または&lt;code&gt;java.awt.Applet&lt;/code&gt;)が返る

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Window&lt;/code&gt;の場合は、&lt;code&gt;c.getParent()&lt;/code&gt;で見つかる最初の上位&lt;code&gt;Window&lt;/code&gt;オブジェクトだが、&lt;code&gt;Applet&lt;/code&gt;の場合は、&lt;code&gt;JComponent#getTopLevelAncestor()&lt;/code&gt;とは異なり、最後の上位&lt;code&gt;Applet&lt;/code&gt;オブジェクト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どちらも存在しない場合は、&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JComponent.html#getTopLevelAncestor%28%29&quot;&gt;JComponent#getTopLevelAncestor()&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;自身の親コンテナ(&lt;code&gt;java.awt.Window&lt;/code&gt;または&lt;code&gt;java.awt.Applet&lt;/code&gt;)が返る&lt;/li&gt;
&lt;li&gt;親コンテナが無い場合は、&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下のコメント参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JOptionPane.html#getFrameForComponent%28java.awt.Component%29&quot;&gt;JOptionPane.getFrameForComponent(Component parentComponent)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;親の&lt;code&gt;java.awt.Frame&lt;/code&gt;が返る&lt;/li&gt;
&lt;li&gt;有効な親&lt;code&gt;Frame&lt;/code&gt;が無い場合は&lt;code&gt;JOptionPane.getRootFrame()&lt;/code&gt;で、非表示にしている&lt;code&gt;TookKit Private&lt;/code&gt;なフレームが返る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOptionPane&lt;/code&gt;用？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/SwingUtilities.html#getRoot%28java.awt.Component%29&quot;&gt;SwingUtilities.getRoot(Component c)&lt;/a&gt; を追加

&lt;ul&gt;
&lt;li&gt;via: &lt;a href=&quot;http://stackoverflow.com/questions/9650874/java-swing-obtain-window-jframe-from-inside-a-jpanel&quot;&gt;Java/Swing: Obtain Window/JFrame from inside a JPanel - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComponent#getTopLevelAncestor()&lt;/code&gt;でもほぼ同じ内容が取得できるような感じですね（自分自身からスタートするか、親からスタートするかの違いはあるようですが）。ただ、この場合、&lt;code&gt;Window&lt;/code&gt;の他に&lt;code&gt;Applet&lt;/code&gt;が戻される場合もあるようですが。 -- &lt;a href=&quot;http://terai.xrea.jp/syo.html&quot;&gt;syo&lt;/a&gt; 2006-08-24 (木) 17:07:25

&lt;ul&gt;
&lt;li&gt;補足ありがとうございます。&lt;code&gt;Window&lt;/code&gt;か&lt;code&gt;Applet&lt;/code&gt;か気にする必要が無いのは便利そうですね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-08-25 (金) 12:46:43&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowancestor</link>
                <guid>http://terai.xrea.jp/swing/windowancestor</guid>
                <pubDate>2005-05-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextField内のテキストをすべて選択</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;フォーカスが&lt;code&gt;JTextField&lt;/code&gt;に移動したとき、そのテキストがすべて選択された状態にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectAll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSvQx8j-I/AAAAAAAAAjQ/iXgBbTGTGuw/s800/SelectAll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;textfield.addFocusListener(new FocusAdapter() {
  @Override public void focusGained(FocusEvent e) {
    ((JTextComponent)e.getComponent()).selectAll();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、上の&lt;code&gt;JTextField&lt;/code&gt;にフォーカスが移動したとき、&lt;code&gt;JTextComponent#selectAll()&lt;/code&gt;メソッドを使って内部のテキストがすべて選択された状態になるようにしています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectall</link>
                <guid>http://terai.xrea.jp/swing/selectall</guid>
                <pubDate>2005-05-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneでタブサイズを設定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;でタブサイズを設定します。&lt;a href=&quot;https://forums.oracle.com/thread/1507037&quot;&gt;Swing (Archive) - tabsize in JTextPane&lt;/a&gt;からの引用です。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabSize&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTUxfmvVtI/AAAAAAAAAmk/hIXOEpGYKYw/s800/TabSize.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;textpane.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
FontMetrics fm = textpane.getFontMetrics(textpane.getFont());
int charWidth = fm.charWidth(&#39;m&#39;);
int tabLength = charWidth * 4;
TabStop[] tabs = new TabStop[10];
for(int j=0;j&amp;lt;tabs.length;j++) {
  tabs[j] = new TabStop((j+1)*tabLength);
}
TabSet tabSet = new TabSet(tabs);
SimpleAttributeSet attrs = new SimpleAttributeSet();
StyleConstants.setTabSet(attrs, tabSet);
int l = textpane.getDocument().getLength();
textpane.getStyledDocument().setParagraphAttributes(0, l, attrs, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextArea&lt;/code&gt;は&lt;code&gt;setTabSize&lt;/code&gt;メソッドでタブサイズを指定することができますが、&lt;code&gt;JTextPane&lt;/code&gt;では、上記のサンプルのような方法でタブサイズを指定します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1507037&quot;&gt;Swing (Archive) - tabsize in JTextPane&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabsize</link>
                <guid>http://terai.xrea.jp/swing/tabsize</guid>
                <pubDate>2005-04-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの次行にTabキーでフォーカスを移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーでセルのフォーカスが次行に移動するように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SelectNextRow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTS5aM0UvI/AAAAAAAAAjg/g-wlrmrzml8/s800/SelectNextRow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;InputMap im = table.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
KeyStroke tab   = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);
KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
im.put(tab, im.get(enter));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、チェックボックスで&lt;kbd&gt;Tab&lt;/kbd&gt;キーでのフォーカスの移動(セル毎に移動)が、&lt;kbd&gt;Enter&lt;/kbd&gt;キーと同じ(行毎に移動)になるように切り替えています。&lt;/p&gt;

&lt;p&gt;逆遷移の&lt;kbd&gt;Shift+Tab&lt;/kbd&gt;なども対応する場合は、修飾子を&lt;code&gt;0&lt;/code&gt;の代わりに&lt;code&gt;InputEvent.SHIFT_MASK&lt;/code&gt;にして、同様に変更しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1484284&quot;&gt;Swing (Archive) - JTable skiping the cells disableds&lt;/a&gt;に、編集できないセルを飛ばして、&lt;kbd&gt;Tab&lt;/kbd&gt;キーでフォーカス移動することができるサンプルがあるので参考にしてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1484284&quot;&gt;Swing (Archive) - JTable skiping the cells disableds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/selectnextrow</link>
                <guid>http://terai.xrea.jp/swing/selectnextrow</guid>
                <pubDate>2005-04-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行を全削除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の行を一括で全削除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ClearTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJISEHcVI/AAAAAAAAAT4/syR1Ucd5n5o/s800/ClearTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;button.addActionListener(new AbstractAction(&quot;clear&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    DefaultTableModel model = (DefaultTableModel)table.getModel();
    model.setRowCount(0);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;モデルが&lt;code&gt;DefaultTableModel&lt;/code&gt;を継承しているなら、&lt;code&gt;setRowCount(0)&lt;/code&gt;ですべての行を削除することができます。この場合、モデルを作り直している訳ではないので、カラムの幅などは削除する前と同じ値を保っています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DefaultTableModel&lt;/code&gt;を継承していない場合は、モデルに以下の要領(詳細は&lt;code&gt;DefaultTableModel.java&lt;/code&gt;のソースを参照)で行を全削除するメソッドを実装します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public void clear() {
  //以下のdataVectorは実装に合わせて変更する
  int size = dataVector.size();
  dataVector.clear();
  fireTableRowsDeleted(0, size-1);
  //fireTableDataChanged();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable#setAutoCreateColumnsFromModel(false)&lt;/code&gt;とカラムをモデルから自動生成しないようにしておけば、&lt;code&gt;TableModel&lt;/code&gt;を入れ替えても、上記の方法と同様に既存の列幅などはそのまま残ります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setAutoCreateColumnsFromModel(false);
table.setModel(new DefaultTableModel());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AddRow.html&quot;&gt;JTableの行を追加、削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DeleteButtonInCell.html&quot;&gt;JTableのセルにJButtonを追加して行削除&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソートした状態で「remove all rows」を押すと例外が発生しますよ -- &lt;a href=&quot;http://terai.xrea.jp/tohrisugari.html&quot;&gt;tohrisugari&lt;/a&gt; 2013-07-23 (火) 08:51:30

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。確かに&lt;code&gt;ArrayIndexOutOfBoundsException: 0 &amp;gt;= 0&lt;/code&gt;が発生していますね。以前は正常だったはず？と思って調べてみたら、&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6967479&quot;&gt;Bug ID: JDK-6967479 JTable sorter fires even if the model is empty&lt;/a&gt;が原因？で、&lt;code&gt;6u10,6u20&lt;/code&gt;以降で発生しているようです。 &lt;del&gt;&lt;code&gt;8&lt;/code&gt;で修正される予定？みたいなので、しばらくは別の方法を使用するように修正し&lt;/del&gt; &lt;del&gt;何時修正されるか分からないので回避方法を考えてみようと思います。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-07-23 (火) 10:47:23&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;model.setRowCount(0);&lt;/code&gt;の前に、&lt;code&gt;table.setRowSorter(null);&lt;/code&gt;とソートを不可にする修正などを追加しました。&lt;/del&gt; &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6967479&quot;&gt;Bug ID: JDK-6967479 JTable sorter fires even if the model is empty&lt;/a&gt;にあるように&lt;code&gt;DefaultTableModel#getColumnClass&lt;/code&gt;をオーバーライドする方法が簡単なので、そのように修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-07-23 (火) 14:44:15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Javaのバグだったのですね。ちなみに私はDefaultTableModel#getColumnClassのオーバーライドでは解決しなかったので、table.setRowSorter(null)の対応案を参考にさせていただきました。 -- &lt;a href=&quot;http://terai.xrea.jp/tohrisugari.html&quot;&gt;tohrisugari&lt;/a&gt; 2013-07-26 (金) 12:08:04

&lt;ul&gt;
&lt;li&gt;行の追加削除があるサンプルなのに、&lt;code&gt;model&lt;/code&gt;が空の場合でも&lt;code&gt;TableModel#getValueAt(0, column).getClass()&lt;/code&gt; &lt;del&gt;を呼ぶような&lt;/del&gt; が呼ばれる可能性がある手抜きをしているのが悪いので、&lt;code&gt;Java&lt;/code&gt;のバグというのはかわいそうな気も(面倒なので出来れば修正して欲しいですが)します(^^;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-07-26 (金) 18:46:28&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/cleartable</link>
                <guid>http://terai.xrea.jp/swing/cleartable</guid>
                <pubDate>2005-04-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderをクリックしてそのColumnのセルを全選択</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;をクリックしたとき、その&lt;code&gt;Column&lt;/code&gt;以下にあるセルを全選択します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColumnSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJrC8DyhI/AAAAAAAAAUw/SO1wMAudBiE/s800/ColumnSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JTable table = new JTable(model);
table.setCellSelectionEnabled(true);
final JTableHeader header = table.getTableHeader();
header.addMouseListener(new MouseAdapter() {
  @Override public void mousePressed(MouseEvent e) {
    if(!check.isSelected()) return;
    if(table.isEditing()) {
      table.getCellEditor().stopCellEditing();
    }
    int col = header.columnAtPoint(e.getPoint());
    table.changeSelection(0, col, false, false);
    table.changeSelection(table.getRowCount()-1, col, false, true);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTableHeader&lt;/code&gt;にマウスリスナーを追加し、&lt;code&gt;JTableHeader#columnAtPoint(Point)&lt;/code&gt;メソッドを使って、クリックされた&lt;code&gt;Column&lt;/code&gt;を取得するようになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Column&lt;/code&gt;全体の選択は、&lt;code&gt;changeSelection&lt;/code&gt;メソッドを二回使用することで行っています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowHeader.html&quot;&gt;JTableに行ヘッダを追加&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;行ヘッダをクリックして行の全選択&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;code&gt;2008-03-11&lt;/code&gt;に&lt;a href=&quot;http://terai.xrea.jp/Swing/AnchorSelection.html&quot;&gt;JTableのセルにあるフォーカスを解除&lt;/a&gt;から移動でこのページを作成。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-02-20 (水) 15:21:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/columnselection</link>
                <guid>http://terai.xrea.jp/swing/columnselection</guid>
                <pubDate>2005-04-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルにあるフォーカスを解除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;以下のコメントにあるように、&lt;code&gt;Java 6&lt;/code&gt;以降でソートや&lt;code&gt;clearSelection&lt;/code&gt;すれば、選択状態やフォーカスは解除されるようになりました。このサンプルは意味が無くなったので削除し、代わりに&lt;code&gt;JTableHeader&lt;/code&gt;をクリックした場合の例を&lt;a href=&quot;http://terai.xrea.jp/Swing/ColumnSelection.html&quot;&gt;JTableHeaderをクリックしてそのColumnのセルを全選択&lt;/a&gt;に作成しました。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0_06&lt;/code&gt;などにして試してみたところ、特別なことをしなくてもヘッダをクリックしてソートするとセルのフォーカスは外れるようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-01-13 (金) 16:07:44

&lt;ul&gt;
&lt;li&gt;もう修正されているようなので、この記事は削除するか、別の内容に変更するかもしれません。&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6195469&quot;&gt;Bug ID: JDK-6195469 REGRESSION: Multiple interval selection is lost in JTable if mouse is dragged&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-04-19 (水) 22:04:07&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;移動したときに、日本語入力するには、どうしたらいいんですかね？ -- &lt;a href=&quot;http://terai.xrea.jp/zero.html&quot;&gt;zero&lt;/a&gt; 2006-03-09 (木) 20:19:17&lt;/li&gt;
&lt;li&gt;多分エクセルみたいな入力のことですよね。アルファベットならマウスで入力状態にしなくてもフォーカスがあるセルに直接入力できますが、&lt;code&gt;IME&lt;/code&gt;が&lt;code&gt;on&lt;/code&gt;の日本語入力モードの場合はうまくいかないようです。いまのところこれを簡単に行う方法を僕は知らないです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-03-09 (木) 23:09:26&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://terai.xrea.jp/swing/anchorselection</link>
                <guid>http://terai.xrea.jp/swing/anchorselection</guid>
                <pubDate>2005-04-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのTooltipsを行ごとに変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;Tooltips&lt;/code&gt;が、カーソルのある行の内容などを表示するようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RowTooltips&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTSbfFU7HI/AAAAAAAAAiw/EPWumbZCrr0/s800/RowTooltips.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  @Override public String getToolTipText(MouseEvent e) {
    int row = convertRowIndexToModel(rowAtPoint(e.getPoint()));
    TableModel m = getModel();
    return &quot;&amp;lt;html&amp;gt;&quot;+m.getValueAt(row, 1)+&quot;&amp;lt;br&amp;gt;&quot;
                   +m.getValueAt(row, 2)+&quot;&amp;lt;/html&amp;gt;&quot;;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;の&lt;code&gt;getToolTipText&lt;/code&gt;メソッドをオーバーライドして、カーソルがある行の情報を表示しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#convertRowIndexToModel&lt;/code&gt;メソッドを使って&lt;code&gt;viewRowIndex&lt;/code&gt;を&lt;code&gt;modelRowIndex&lt;/code&gt;に変更し、モデルから行情報を取得&lt;/li&gt;
&lt;li&gt;第&lt;code&gt;1&lt;/code&gt;列、第&lt;code&gt;2&lt;/code&gt;列を&lt;code&gt;html&lt;/code&gt;タグを使ってそれぞれ&lt;code&gt;Tooltips&lt;/code&gt;に設定&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;メソッドや、&lt;code&gt;CellRenderer&lt;/code&gt;などで&lt;code&gt;setToolTipText&lt;/code&gt;を使用する方法でも、ツールチップを設定することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable() {
  @Override public Component prepareRenderer(
        TableCellRenderer tcr, int row, int column) {
    Component c = super.prepareRenderer(tcr, row, column);
    if(c instanceof JComponent) {
      int mr = convertRowIndexToModel(row);
      int mc = convertColumnIndexToModel(column);
      Object o = getModel().getValueAt(mr, mc);
      String s = (o!=null)?o.toString():null;
      ((JComponent)c).setToolTipText(s.isEmpty()?null:s);
    }
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
  @Override public Component getTableCellRendererComponent(
      JTable table, Object value, boolean isSelected,
      boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent(
      table, value, isSelected, hasFocus, row, column);
    //...
    this.setToolTipText(...);
    return this;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#celltooltip&quot;&gt;How to Use Tables (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HeaderTooltips.html&quot;&gt;JTableHeaderのTooltipsを列ごとに変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedCellTooltips.html&quot;&gt;JTableのセルがクリップされている場合のみJToolTipを表示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;名前もコメントも空の場合は、空のツールチップが表示されないように、&lt;code&gt;null&lt;/code&gt;を返すようにした方がいいかも。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-04 (水) 19:26:19&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rowtooltips</link>
                <guid>http://terai.xrea.jp/swing/rowtooltips</guid>
                <pubDate>2005-03-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLayeredPaneで小さなウインドを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;背景画像を表示可能な&lt;code&gt;JLayeredPane&lt;/code&gt;に付箋紙を表示するサンプル。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/JLayeredPane1&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTOrYdIcmI/AAAAAAAAAcw/Ol4ZcH6Pw48/s800/JLayeredPane1.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;/** 2005/03/24
    JLayeredPane のサンプル
    背景画像を表示する JFrame に JLayeredPane を使って付箋紙を表示する。
    ヘッダー部分のクリックで付箋紙の上下入れ替えを、ドラッグで付箋紙の移
    動を行う。

◎ノート
・Font は環境に合わせて適当に変えるか、コメントアウトして下さい。
・背景画像 bg.gif を用意して下さい。画像がなくても背景なしで動作します。
・テスト WindowsXP/J2SE 5.0
 */
import java.io.File;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.BorderFactory;
import javax.swing.border.Border;

public class TestJLayeredPane1 extends JFrame {
  Font FONT = new Font(&quot;ＭＳ ゴシック&quot;, Font.PLAIN, 12);
  String BG_IMG = &quot;bg.gif&quot;;

  public static void main(String[] argv){
    TestJLayeredPane1 f = new TestJLayeredPane1();
    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    f.setPreferredSize(new Dimension(700,500));
    f.pack();
    f.setVisible(true);
  }

  static final int BACKLAYER = 1;
  static final int FORELAYER = 2;
  BGImageLayeredPane layerPane;

  public TestJLayeredPane1(){
    super(&quot;TestJLayeredPane1&quot;);

    //背景画像
    Image img = null;
    File f = new File(BG_IMG);
    if(f.isFile()) {
      ImageIcon icon = new ImageIcon(BG_IMG);
      img = icon.getImage();
    }

    layerPane = new BGImageLayeredPane();
    layerPane.setImage(img);

    for(int i=0; i&amp;lt;7; i++) {
      JPanel p = createPanel(i);
      p.setLocation(i*70 + 20, i*50 + 15);
      layerPane.add(p, BACKLAYER);
    }
    setContentPane(layerPane);
  }

  int[] colors = { 0xdddddd, 0xaaaaff, 0xffaaaa, 0xaaffaa, 0xffffaa, 0xffaaff, 0xaaffff };

  Color getColor(int i, float f) {
    int b = (int)((i &amp;amp; 0xff) * f);
    i = i &amp;gt;&amp;gt; 8;
    int g = (int)((i &amp;amp; 0xff) * f);
    i = i &amp;gt;&amp;gt; 8;
    int r = (int)((i &amp;amp; 0xff) * f);
    return new Color(r,g,b);
  }

  JPanel createPanel(int i) {
    String s = &quot;&amp;lt;html&amp;gt;&amp;lt;font color=#333333&amp;gt;ヘッダーだよん:&quot;+ i +&quot;&amp;lt;/font&amp;gt;&amp;lt;/html&amp;gt;&quot;;
    JLabel label = new JLabel(s);
    label.setFont(FONT);
    label.setOpaque(true);
    label.setHorizontalAlignment(SwingConstants.CENTER);
    label.setBackground(getColor(colors[i], 0.85f));
    Border border1 = BorderFactory.createEmptyBorder(4, 4, 4, 4);
    label.setBorder(border1);

    JTextArea text = new JTextArea();
    text.setBackground(new Color(colors[i]));
    text.setMargin(new Insets(4,4,4,4));
    text.setLineWrap(true);

    JPanel p = new JPanel();

    Color col = getColor(colors[i], 0.5f);
    Border border = BorderFactory.createLineBorder(col, 1);
    p.setBorder(border);

    //ウインド移動用の処理
    DragMouseListener  li = new DragMouseListener(p);
    p.addMouseListener(li);
    p.addMouseMotionListener(li);

    p.setLayout(new BorderLayout());
    p.add(label, BorderLayout.NORTH);
    p.add(text);
    p.setSize(new Dimension(150, 120));
    return p;
  }

  //タイトル部分のマウスクリックでパネルを最上位にもってくる。ドラッグで移動。
  class DragMouseListener implements MouseListener, MouseMotionListener {
    Point origin;
    JPanel panel;

    DragMouseListener(JPanel p) {
      panel = p;
    }
    public void mousePressed(MouseEvent e) {
      origin = new Point(e.getX(), e.getY());
      //選択された部品を上へ
      layerPane.moveToFront(panel);
    }
    public void mouseDragged(MouseEvent e) {
      if(origin == null) return;

      //ずれた分だけ JPanel を移動させる
      int dx = e.getX() - origin.x;
      int dy = e.getY() - origin.y;
      Point p = panel.getLocation();
      panel.setLocation(p.x + dx, p.y + dy);
    }

    public void mouseClicked(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}
    public void mouseReleased(MouseEvent e) {}
    public void mouseMoved(MouseEvent e) {}
  }

  //背景画像を描画する JLayeredPane
  class BGImageLayeredPane extends JLayeredPane {
    BGImageLayeredPane() {}

    void setImage(Image img) {
      bgImage = img;
    }
    Image bgImage;

    //override
    public void paint(Graphics g) {
      if (bgImage != null) {
        int imageh = bgImage.getHeight(null);
        int imagew = bgImage.getWidth(null);

        Dimension d = getSize();
        for(int h=0; h&amp;lt;d.getHeight(); h += imageh) {
          for(int w=0; w&amp;lt;d.getWidth(); w += imagew) {
            g.drawImage(bgImage, w, h, this);
          }
        }
      }
      super.paint(g);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;のサブクラス&lt;code&gt;BGImageLayeredPane&lt;/code&gt;で背景画像を描画しています。
&lt;code&gt;JLayeredPane&lt;/code&gt;に&lt;code&gt;createPanel(int i)&lt;/code&gt;で作った付箋紙の部品を&lt;code&gt;add&lt;/code&gt;し、マウスリスナーでクリックやドラッグを検出しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BackgroundImage.html&quot;&gt;JPanelの背景に画像を並べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bekkoame.ne.jp/%7Ebootan/free2.html&quot;&gt;デジタル出力工房　絵写楽&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;p&gt;ほかのページで参考になりました。お礼にサンプルを差し上げます。
不都合でしたら編集・削除してください。画像と&lt;code&gt;zip&lt;/code&gt;のアップロードが
わからないので、ソースを全部のせてあります・・・あしからず。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;下のアイコンからファイルの添付ができるのですが、広告のせいかうまく表示や取得ができなくなっています。いい方法がないかちょっと調べてみます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-25 (金) 10:04:23&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;添付できるようにしてみました。&lt;code&gt;codehighlight&lt;/code&gt;プラグインとかも入れたいのですが、今後の課題です。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-28 (月) 11:58:48&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;あと、言い忘れてましたが、全然不都合は無いです(投稿があるとは思ってませんでしたが)。今後ともよろしくお願いします。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-28 (月) 12:00:03&lt;/li&gt;
&lt;li&gt;投稿できる環境を作成するのはまだ先になりそうなので、勝手に背景とか用意させてもらいました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-10 (土) 13:50:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/jlayeredpane1</link>
                <guid>http://terai.xrea.jp/swing/jlayeredpane1</guid>
                <pubDate>2005-03-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルのハイライト</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;セル上にマウスがある場合、その色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellHighlight&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTIqY941CI/AAAAAAAAATI/gk-sbbRE5gw/s800/CellHighlight.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightListener extends MouseAdapter {
  private int row = -1;
  private int col = -1;
  private final JTable table;
  public HighlightListener(JTable table) {
    this.table = table;
  }
  public boolean isHighlightableCell(int row, int column) {
    return this.row==row &amp;amp;&amp;amp; this.col==column;
  }
  @Override public void mouseMoved(MouseEvent e) {
    Point pt = e.getPoint();
    row = table.rowAtPoint(pt);
    col = table.columnAtPoint(pt);
    if(row&amp;lt;0 || col&amp;lt;0) {
      row = -1; col = -1;
    }
    table.repaint();
  }
  @Override public void mouseExited(MouseEvent e) {
    row = -1; col = -1;
    table.repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightRenderer extends DefaultTableCellRenderer {
  private final HighlightListener highlighter;
  public HighlightRenderer(JTable table) {
    super();
    highlighter = new HighlightListener(table);
    table.addMouseListener(highlighter);
    table.addMouseMotionListener(highlighter);
  }
  @Override public Component getTableCellRendererComponent(JTable table,
      Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
    setHorizontalAlignment((value instanceof Number)?RIGHT:LEFT);
    if(highlighter.isHighlightableCell(row, column)) {
      setBackground(Color.RED);
    }else{
      setBackground(isSelected?table.getSelectionBackground():table.getBackground());
    }
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;セルレンダラーに&lt;code&gt;MouseListener&lt;/code&gt;、&lt;code&gt;MouseMotionListener&lt;/code&gt;を追加し、マウスカーソルが乗っているセルの色を変更しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;をオーバーライドする場合も、同様の方法が使用できます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HighlightableTable extends JTable {
  private final HighlightListener highlighter;
  public HighlightableTable(TableModel model) {
    super(model);
    highlighter = new HighlightListener(this);
    addMouseListener(highlighter);
    addMouseMotionListener(highlighter);
  }
  @Override public Component prepareRenderer(TableCellRenderer r, int row, int column) {
    Component c = super.prepareRenderer(r, row, column);
    if(highlighter.isHighlightableCell(row, column)) {
      c.setBackground(Color.RED);
    }else if(isRowSelected(row)) {
      c.setBackground(getSelectionBackground());
    }else{
      c.setBackground(Color.WHITE);
    }
    return c;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RollOverListener.html&quot;&gt;JListのセルをカーソル移動でロールオーバー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ソースコードの整理、スクリーンショットの更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-14 (金) 16:38:10&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/cellhighlight</link>
                <guid>http://terai.xrea.jp/swing/cellhighlight</guid>
                <pubDate>2005-03-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListを選択不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;を選択出来ないように設定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EmptySelectionList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMI697_II/AAAAAAAAAYs/EhpPEXnw1bc/s800/EmptySelectionList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;list2.setFocusable(false);
list2.setSelectionModel(new DefaultListSelectionModel() {
  @Override public boolean isSelectedIndex(int index) {
    return false;
  }
});

class EmptySelectionRenderer implements ListCellRenderer {
  private final ListCellRenderer renderer;
  public EmptySelectionRenderer(ListCellRenderer renderer) {
    this.renderer = renderer;
  }
  @Override public Component getListCellRendererComponent(
                     JList list, Object value, int index,
                     boolean isSelected, boolean cellHasFocus) {
    return renderer.getListCellRendererComponent(
                        list, value, index, false, false);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;左

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#setEnabled(false)&lt;/code&gt;で編集不可にしているため、選択も不可ですが、文字色が薄くなります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JList#setFocusable(false)&lt;/code&gt;でフォーカス無し、かつ&lt;code&gt;ListSelectionModel#isSelectedIndex&lt;/code&gt;が常に&lt;code&gt;false&lt;/code&gt;なセレクションモデルを設定して、選択不可にしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;右

&lt;ul&gt;
&lt;li&gt;常に各セルを選択状態でもフォーカスも無いものとして描画するセルレンダラーを設定して、選択不可のように見せかけています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;が&lt;code&gt;Nimbus&lt;/code&gt;の場合、編集不可にした&lt;code&gt;JList&lt;/code&gt;の文字色を以下のような方法で変更することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.plaf.*;
public class DisabledTextForegroundList {
  public JComponent makeUI() {
    JList list = new JList(makeTestModel());
    //list.putClientProperty(&quot;Nimbus.Overrides&quot;, d);
    //list.putClientProperty(&quot;Nimbus.Overrides.InheritDefaults&quot;, false);
    list.setEnabled(false);
    JSplitPane p = new JSplitPane();
    p.setLeftComponent(new JScrollPane(new JList(makeTestModel())));
    p.setRightComponent(new JScrollPane(list));
    p.setResizeWeight(.5);
    return p;
  }
  private static ListModel makeTestModel() {
    DefaultListModel m = new DefaultListModel();
    m.addElement(&quot;aaaaaaaaaaaa&quot;); m.addElement(&quot;bbbbb&quot;);
    return m;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    try {
      for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels())
        if (&quot;Nimbus&quot;.equals(laf.getName()))
          UIManager.setLookAndFeel(laf.getClassName());
      //UIDefaults d = new UIDefaults();
      UIDefaults d = UIManager.getLookAndFeelDefaults();
      d.put(&quot;List:\&quot;List.cellRenderer\&quot;[Disabled].textForeground&quot;,
            new ColorUIResource(Color.RED));
    } catch(Exception e) {
      e.printStackTrace();
    }
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new DisabledTextForegroundList().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisabledItem.html&quot;&gt;JListの任意のItemを選択不可にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/emptyselectionlist</link>
                <guid>http://terai.xrea.jp/swing/emptyselectionlist</guid>
                <pubDate>2005-03-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fontをファイルから取得</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;独自フォント(&lt;code&gt;mona.ttf&lt;/code&gt;)をファイルから読み込み、&lt;code&gt;ASCII art&lt;/code&gt;を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CreateFont&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTKOUJYB7I/AAAAAAAAAVo/K2rl3dXD4ic/s800/CreateFont.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Font makeFont(URL url) {
    Font font = null;
    try(InputStream is = url.openStream()) {
        font = Font.createFont(Font.TRUETYPE_FONT, is).deriveFont(12.0f);
    }catch(IOException | FontFormatException ex) {
        ex.printStackTrace();
    }
    return font;
}
//Font makeFont(URL url) {
//  Font font = null;
//  InputStream is = null;
//  try {
//    is = url.openStream();
//    font = (Font.createFont(Font.TRUETYPE_FONT, is)).deriveFont(12.0f);
//    is.close();
//  }catch(IOException ioe) {
//    ioe.printStackTrace();
//  }catch(FontFormatException ffe) {
//    ffe.printStackTrace();
//  }finally{
//    if(is!=null) {
//      try{
//        is.close();
//      }catch(IOException ioex) {
//        ioex.printStackTrace();
//      }
//    }
//  }
//  return font;
//}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Font.createFont&lt;/code&gt;メソッドでフォントを作成しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://monafont.sourceforge.net/index.html&quot;&gt;モナーフォント&lt;/a&gt;を使用しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://monafont.sourceforge.net/index.html&quot;&gt;モナーフォント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1483177&quot;&gt;Swing (Archive) - Loading TYPE1 fonts with JRE 1.5.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0_01&lt;/code&gt;でずれる？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-07 11:19:11 (月)&lt;/li&gt;
&lt;li&gt;応急処置済み -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-07 11:32:44 (月)&lt;/li&gt;
&lt;li&gt;メモ:&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6313541&quot;&gt;Bug ID: 6313541 Fonts loaded with createFont cannot be converted into FontUIResource&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-05-25 (木) 23:34:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/createfont</link>
                <guid>http://terai.xrea.jp/swing/createfont</guid>
                <pubDate>2005-03-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableSorterでJTableをソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;以前に、&lt;code&gt;The Java™ Tutorial&lt;/code&gt;にあった&lt;code&gt;TableSorter.java&lt;/code&gt;を使用して、&lt;code&gt;JTable&lt;/code&gt;の行を降順、昇順、初期状態にソートします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableSorter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTUp0MLx6I/AAAAAAAAAmY/omjw4LoJbbc/s800/TableSorter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//DefaultTableModel model = new DefaultTableModel();
TestModel model = new TestModel();
TableSorter sorter = new TableSorter(model);
JTable table = new JTable(sorter);
sorter.setTableHeader(table.getTableHeader());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;The Java™ Tutorial&lt;/code&gt;版の&lt;code&gt;TableSorter&lt;/code&gt;を使用して、&lt;a href=&quot;http://terai.xrea.jp/Swing/SortableTable.html&quot;&gt;JTableのソート&lt;/a&gt;で使用しているものと同じ&lt;code&gt;TableModel&lt;/code&gt;でソートしています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TableSorter&lt;/code&gt;には、&lt;kbd&gt;Ctrl&lt;/kbd&gt;キーを押しながらヘッダをクリックすると、そのカラムを第二キーとしてソートする機能もあります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.4.x&lt;/code&gt;と&lt;code&gt;Windows XP&lt;/code&gt;の環境で、ヘッダにカーソルを置いてもロールオーバーしない場合があるようです。上記のスクリーンショットは&lt;code&gt;JDK 1.5.0_01&lt;/code&gt;で撮っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;で&lt;code&gt;Generics&lt;/code&gt;の警告を出さないようにするには、&lt;code&gt;TableSorter.java&lt;/code&gt;に、以下のような修正を加えれば良いようです。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static class ComparableComparator implements Comparator {
  @SuppressWarnings(&quot;unchecked&quot;)
  public int compare(Object o1, Object o2) {
    return ((Comparable)o1).compareTo(o2);
  }
}
public static final ComparableComparator COMPARABLE_COMAPRATOR
    = new ComparableComparator();
public static final ComparableComparator LEXICAL_COMPARATOR
    = new ComparableComparator() {
  @SuppressWarnings(&quot;unchecked&quot;)
  public int compare(Object o1, Object o2) {
    return o1.toString().compareTo(o2.toString());
  }
};
private TableModelListener tableModelListener;
private Map&amp;lt;Class, Comparator&amp;gt; columnComparators = new HashMap&amp;lt;Class, Comparator&amp;gt;();
private List&amp;lt;Directive&amp;gt; sortingColumns = new ArrayList&amp;lt;Directive&amp;gt;();

protected ComparableComparator getComparator(int column) {
  Class columnType = tableModel.getColumnClass(column);
  ComparableComparator comparator
      = (ComparableComparator) columnComparators.get(columnType);
    if (comparator != null) {
      return comparator;
    }
 private class Row implements Comparable&amp;lt;Row&amp;gt; {
  private int modelIndex;
  public Row(int index) {
    this.modelIndex = index;
  }
  public int compareTo(Row o) {
    int row1 = modelIndex;
    int row2 = o.modelIndex;
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;から&lt;code&gt;JTable&lt;/code&gt;には標準でソート機能が追加されています。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/index-135205.html#1&quot;&gt;Table Sorting and Filtering - New and Updated Desktop Features in Java SE 6, Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#sorting&quot;&gt;Sorting and Otherwise Manipulating Data - How to Use Tables (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1185784&quot;&gt;Generics - Simple method but hard with generics: compareTo()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/TableSorterDemoProject/src/components/TableSorter.java&quot;&gt;TableSorter.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いつもお世話になっております。 &lt;code&gt;jtable&lt;/code&gt;を下記のように初期化します。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//DefaultTableModel model = new DefaultTableModel();
TestModel model = new TestModel();
TableSorter sorter = new TableSorter(model);
JTable table = new JTable(sorter);
sorter.setTableHeader(table.getTableHeader());
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;その後、ソートした状態で、一行ずつのデータを取り出した場合、 どうすればよろしいでしょうか？例えば、&lt;code&gt;No.&lt;/code&gt;欄をソートして、下り順で&lt;code&gt;No.&lt;/code&gt;欄と&lt;code&gt;Name&lt;/code&gt;欄のデータを&lt;code&gt;System.out.println(model.getValueAt(row, 1))&lt;/code&gt;したい場合、その&lt;code&gt;row&lt;/code&gt;は&lt;code&gt;sorter&lt;/code&gt;に関連していると思います。 &lt;code&gt;row=?&lt;/code&gt;かが分かりません。説明下手で、大変申し訳ございません。ご教示をください。よろしくお願い致します。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2010-08-05 (木) 06:07:47

&lt;ul&gt;
&lt;li&gt;こんにちは。多分、&lt;code&gt;sorter.modelIndex(viewIndex);&lt;/code&gt;でいいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-05 (木) 13:17:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
public class SorterModelIndex {
  public JComponent makeUI() {
    String[] columnNames = {&quot;String&quot;, &quot;Integer&quot;, &quot;Boolean&quot;};
    Object[][] data = {
      {&quot;aaa&quot;, 12, true}, {&quot;bbb&quot;, 5, false},
      {&quot;CCC&quot;, 92, true}, {&quot;DDD&quot;, 0, false}
    };
    final DefaultTableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
        return getValueAt(0, column).getClass();
      }
    };
    final TableSorter sorter = new TableSorter(model);
    final JTable table = new JTable(sorter);
    sorter.setTableHeader(table.getTableHeader());
    table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
      public void valueChanged(ListSelectionEvent e) {
        int viewIndex = table.getSelectedRow();
        if (!e.getValueIsAdjusting() &amp;amp;&amp;amp; viewIndex&amp;gt;=0) {
          Object o = model.getValueAt(sorter.modelIndex(viewIndex), 0);
          System.out.println(o);
        }
      }
    });

    JPanel p = new JPanel(new BorderLayout());
    p.add(new JScrollPane(table));
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new SorterModelIndex().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;早速のご回答、ありがとうございました。 選択された行の値を取り出すことができますが、今回表(&lt;code&gt;jTable&lt;/code&gt;)の内容を&lt;code&gt;CSV&lt;/code&gt;に書き出そうとしております。即ち選択した行がない場合、ソートをして(上り順&lt;code&gt;CCC&lt;/code&gt;、&lt;code&gt;DDD&lt;/code&gt;, &lt;code&gt;aaa&lt;/code&gt;、&lt;code&gt;bbb&lt;/code&gt;), &lt;code&gt;jTable.getValueAt(sorter.modelIndex(i),j);&lt;/code&gt;（ &lt;code&gt;i&lt;/code&gt;:行　&lt;code&gt;j&lt;/code&gt;：列）、書き出した結果は（&lt;code&gt;aaa&lt;/code&gt;, &lt;code&gt;bbb&lt;/code&gt;, &lt;code&gt;CCC&lt;/code&gt;, &lt;code&gt;DDD&lt;/code&gt;）。即ち&lt;code&gt;sorter&lt;/code&gt;していなかったの状態で書き出されました。読みにくいかもしれませんが、ご教示ください。 宜しくお願い致します -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2010-08-05 (木) 15:42:51

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable&lt;/code&gt;に表示されている見たまま(全選択、&lt;kbd&gt;Ctrl+C&lt;/kbd&gt;でコピーして&lt;code&gt;TSV&lt;/code&gt;)の状態でということでしょうか。それなら&lt;code&gt;sorter&lt;/code&gt;は関係なく、以下のように&lt;code&gt;JTable#getValueAt&lt;/code&gt;メソッドを普通に使えばいいかもしれません(&lt;code&gt;TableModel#getValueAt&lt;/code&gt;と&lt;code&gt;JTable#getValueAt&lt;/code&gt;の違いに注意)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-08-05 (木) 17:54:10&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;p.add(new JButton(new AbstractAction(&quot;test&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    for (int i=0; i&amp;lt;table.getRowCount(); i++) {
      for (int j=0; j&amp;lt;table.getColumnCount(); j++) {
        //Object o = table.getValueAt(i, table.convertColumnIndexToView(j));
        Object o = table.getValueAt(i, j);
        System.out.print(o+&quot;,&quot;);
      }
      System.out.print(&quot;\n&quot;);
    }
    System.out.println(&quot;----&quot;);
  }
}), BorderLayout.SOUTH);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ありがとうございました。ご指摘の通り、できました。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2010-08-05 (木) 18:08:42&lt;/li&gt;
&lt;li&gt;いつもお世話になっております。&lt;code&gt;JDK1.5&lt;/code&gt;を使っています。&lt;code&gt;Name&lt;/code&gt;と&lt;code&gt;Comment&lt;/code&gt;欄をソートするとき、&lt;code&gt;No.&lt;/code&gt;欄はソートさせないで、固定のままできますか？ご教示をよろしくお願いいたします。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2010-09-10 (金) 12:41:32

&lt;ul&gt;
&lt;li&gt;こんにちは。以下のようなレンダラーを使って、表示を&lt;code&gt;row(View)&lt;/code&gt;にしてしまうのが簡単な気がします(&lt;kbd&gt;Ctrl+C&lt;/kbd&gt;などでコピーすると&lt;code&gt;Model&lt;/code&gt;の値がコピーされたりしますが…)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-09-10 (金) 14:45:58&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableColumn col = table.getColumnModel().getColumn(0);
col.setCellRenderer(new DefaultTableCellRenderer() {
  @Override public Component getTableCellRendererComponent(
      JTable table, Object v, boolean isS, boolean hasF, int row, int col) {
    Component c = super.getTableCellRendererComponent(table, v, isS, hasF, row, col);
    if(c instanceof JLabel) ((JLabel)c).setText(&quot;&quot;+row);
    return c;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ご教示、ありがとうございました。思ったとおりの動きです。 -- &lt;a href=&quot;http://terai.xrea.jp/Tiger.html&quot;&gt;Tiger&lt;/a&gt; 2010-09-10 (金) 16:32:27&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablesorter</link>
                <guid>http://terai.xrea.jp/swing/tablesorter</guid>
                <pubDate>2005-02-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableに行フィルタで表示の切り替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;に表示する行をフィルタを使用して切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FilteredTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMpQqDR4I/AAAAAAAAAZg/vitkhyUoKkI/s800/FilteredTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TestModel extends DefaultTableModel {
  public static final String NUMBER  = &quot;番号&quot;;
  public static final String MASTER  = &quot;名前&quot;;
  public static final String COMMENT = &quot;コメント&quot;;
  private final Vector list = new Vector();
  public TestModel() {
    super(new String[]{NUMBER, MASTER, COMMENT}, 0);
  }
  public void addRow(Test tst) {
    list.add(tst);
    Integer num = new Integer(list.size());
    Object[] obj = {num, tst.getName(), tst.getComment()};
    addRow(obj);
  }
  public void filterRows(boolean flg) {
    //Vector v = new Vector(list.size());
    dataVector.clear();
    for(int i=0;i&amp;lt;list.size();i++) {
      //if(flg &amp;amp;&amp;amp; i%2!=0) continue;
      if(flg &amp;amp;&amp;amp; i%2==0) continue;
      Test t = (Test)list.elementAt(i);
      Object[] o = {Integer.valueOf(i+1), t.getName(), t.getComment()};
      //v.add(convertToVector(o));
      dataVector.add(convertToVector(o));
    }
    //setDataVector(v, columnIdentifiers);
    fireTableDataChanged();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DefaultTableModel&lt;/code&gt;のフィールドにある&lt;code&gt;dataVector&lt;/code&gt;を表示用に使用し、これとは別にすべての行を保持する&lt;code&gt;Vector&lt;/code&gt;を作成しています。例えば、奇数行だけ表示するという条件が選択された場合、この条件に適合する行だけを保持用&lt;code&gt;Vector&lt;/code&gt;から表示用の&lt;code&gt;dataVector&lt;/code&gt;にコピーすることでフィルタリングを行っています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;では、標準でフィルタリング機能が実装されているようです(&lt;a href=&quot;http://terai.xrea.jp/Swing/RowFilter.html&quot;&gt;RowFilterでJTableの行をフィルタリング&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/RowFilter.html&quot;&gt;RowFilterでJTableの行をフィルタリング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filteredtable</link>
                <guid>http://terai.xrea.jp/swing/filteredtable</guid>
                <pubDate>2005-01-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Cursorオブジェクトの生成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;新しいカスタムカーソルオブジェクトを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CustomCursor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTKTOEY7FI/AAAAAAAAAVw/OeBJRlIWHsQ/s800/CustomCursor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BufferedImage bi2 = new BufferedImage(
                      32, 32, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d2 = bi2.createGraphics();
g2d2.setPaint(Color.RED);
g2d2.drawOval(8, 8, 16, 16);
g2d2.dispose();
lbl2.setCursor(getToolkit().createCustomCursor(
                               bi2,new Point(16,16),&quot;oval&quot;));
label2.setIcon(new ImageIcon(bi2));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Toolkit#createCustomCursor&lt;/code&gt;メソッドでカーソルオブジェクトを作成します。上記のサンプルコードでは、&lt;code&gt;32*32&lt;/code&gt;のバッファの中心に、直径&lt;code&gt;16&lt;/code&gt;の円をかき、この円の中心がホットスポットとなるようなカーソルを作っています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/customcursor</link>
                <guid>http://terai.xrea.jp/swing/customcursor</guid>
                <pubDate>2005-01-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxのItemを左右に配置</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Item&lt;/code&gt;にテキストを左右に分けて配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LRComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTPk2QD9aI/AAAAAAAAAeM/xrl0d1ms74g/s800/LRComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LRItem{
  private final String leftText;
  private final String rightText;
  public LRItem(String strLeft, String strRight) {
    leftText  = strLeft;
    rightText = strRight;
  }
  public String getHtmlText() {
    return &quot;&amp;lt;html&amp;gt;&amp;lt;table width=&#39;240&#39;&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td align=&#39;left&#39;&amp;gt;&quot;+leftText+
    &quot;&amp;lt;/td&amp;gt;&amp;lt;td align=&#39;right&#39;&amp;gt;&quot;+rightText+&quot;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;&amp;lt;/html&amp;gt;&quot;;
  }
  public String getLeftText()  { return leftText; }
  public String getRightText() { return rightText; }
  public String toString()     { return getHtmlText(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;に&lt;code&gt;html&lt;/code&gt;の&lt;code&gt;table&lt;/code&gt;タグを使うことで、&lt;code&gt;Item&lt;/code&gt;に設定した文字列を左右に振り分けています。&lt;/p&gt;

&lt;p&gt;この方法では、&lt;code&gt;JComboBox&lt;/code&gt;のリストにカラムを簡単に増やすことが出来ます。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JComboBox&lt;/code&gt;のサイズ変更に対応していません。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClippedLRComboBox.html&quot;&gt;JComboBoxのItemを左右にクリップして配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/lrcombobox</link>
                <guid>http://terai.xrea.jp/swing/lrcombobox</guid>
                <pubDate>2005-01-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Editor&lt;/code&gt;部分と、&lt;code&gt;List&lt;/code&gt;部分の色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColorComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTJhY0CAaI/AAAAAAAAAUg/J70FCr-EUlI/s800/ColorComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class AlternateRowColorComboBox&amp;lt;E&amp;gt; extends JComboBox&amp;lt;E&amp;gt; {
  private static final Color EVEN_BGCOLOR = new Color(225, 255, 225);
  private static final Color ODD_BGCOLOR  = new Color(255, 255, 255);
  private transient ItemListener itemColorListener;

  public AlternateRowColorComboBox() {
    super();
  }
  public AlternateRowColorComboBox(ComboBoxModel&amp;lt;E&amp;gt; aModel) {
    super(aModel);
  }
  public AlternateRowColorComboBox(E[] items) {
    super(items);
  }
  @Override public void setEditable(boolean aFlag) {
    super.setEditable(aFlag);
    if (aFlag) {
      JTextField field = (JTextField) getEditor().getEditorComponent();
      field.setOpaque(true);
      field.setBackground(getAlternateRowColor(getSelectedIndex()));
    }
  }
  @Override public void updateUI() {
    removeItemListener(itemColorListener);
    super.updateUI();
    setRenderer(new DefaultListCellRenderer() {
      @Override public Component getListCellRendererComponent(
          JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        JLabel c = (JLabel) super.getListCellRendererComponent(
            list, value, index, isSelected, cellHasFocus);
        c.setOpaque(true);
        if (!isSelected) {
          c.setBackground(getAlternateRowColor(index));
        }
        return c;
      }
    });
    if (itemColorListener == null) {
      itemColorListener = new ItemListener() {
        @Override public void itemStateChanged(ItemEvent e) {
          if (e.getStateChange() != ItemEvent.SELECTED) {
            return;
          }
          JComboBox cb = (JComboBox) e.getItemSelectable();
          Color rc = getAlternateRowColor(cb.getSelectedIndex());
          if (cb.isEditable()) {
            JTextField field = (JTextField) cb.getEditor().getEditorComponent();
            field.setBackground(rc);
          } else {
            cb.setBackground(rc);
          }
        }
      };
    }
    addItemListener(itemColorListener);
    JTextField field = (JTextField) getEditor().getEditorComponent();
    if (field != null) {
      field.setOpaque(true);
      field.setBackground(getAlternateRowColor(getSelectedIndex()));
    }
  }
  private static Color getAlternateRowColor(int index) {
    return (index % 2 == 0) ? EVEN_BGCOLOR : ODD_BGCOLOR;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;を編集可にした状態で、以下のように&lt;code&gt;List&lt;/code&gt;部分、&lt;code&gt;Editor&lt;/code&gt;部分に背景色を設定します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;部分

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ListCellRenderer&lt;/code&gt;を使用することで背景色を変更しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;部分

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getEditor().getEditorComponent()&lt;/code&gt;で&lt;code&gt;JTextField&lt;/code&gt;オブジェクトを取得して背景色を変更しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;上記のサンプルでは、下の&lt;code&gt;JComboBox&lt;/code&gt;で行の奇数偶数による背景色の変更を行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;GTKLookAndFeel&lt;/code&gt;などで、うまく&lt;code&gt;Box&lt;/code&gt;(&lt;code&gt;Editor&lt;/code&gt;)部分の色を変更できない場合があるようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJj4vDxSI/AAAAAAAAAUk/ZZtKylfc0k8/s800/ColorComboBox1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComboBoxForegroundColor.html&quot;&gt;JComboBoxの文字色を変更する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#setEditable(true)&lt;/code&gt;は必須のようです。編集不可にするには&lt;code&gt;Editor&lt;/code&gt;部分の&lt;code&gt;JTextField&lt;/code&gt;に対して&lt;code&gt;setEditable(false)&lt;/code&gt; -- &lt;a href=&quot;http://terai.xrea.jp/Y.html&quot;&gt;Y&lt;/a&gt; 2006-10-10 (火) 18:51:38

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。せっかく&lt;code&gt;JComboBox&lt;/code&gt;を上下に並べているのだから、編集可の場合と不可の場合のサンプルにすればよかったですね。編集不可の場合(&lt;code&gt;JComboBox#setEditable(false)&lt;/code&gt;)に色を着けるには、上記の方法と、以下のように&lt;code&gt;JComboBox#setBackground(Color)&lt;/code&gt;メソッドを使う方法があるようです。 &lt;del&gt;編集不可の場合は、この部分の色もレンダラーが勝手にやってくれてたような気がするのですが、勘違いだったのかも。&lt;/del&gt; バージョンや&lt;code&gt;LookAndFeel&lt;/code&gt;で異なる？ようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-10-10 (火) 19:58:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JComboBox c = new JComboBox();
c.addItemListener(new ItemListener() {
  @Override public void itemStateChanged(ItemEvent e) {
    if(e.getStateChange()!=ItemEvent.SELECTED) return;
    c.setBackground((c.getSelectedIndex()%2==0)?evenBGColor:oddBGColor);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- せっかくなので、上の`JComboBox`は編集不可、下は編集可の場合で、色を着けるサンプルに変更しました。 -- [aterai](http://terai.xrea.jp/aterai.html) 2006-10-10 (火) 20:31:03
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;メモ:&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6367601&quot;&gt;Windows/Motif L&amp;amp;F: Changing the JComboBox background does not change the popup of the JCombobox&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-13 (木) 15:43:50&lt;/li&gt;
&lt;li&gt;サンプルソースの&lt;code&gt;LookAndFeel&lt;/code&gt;を設定しないようにすると、編集不可コンボはボタン部分も背景色になってしまう・・ -- &lt;a href=&quot;http://terai.xrea.jp/han.html&quot;&gt;han&lt;/a&gt; 2008-10-21 (火) 10:41:38

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;などは、コンボボックスの背景色を変更すると矢印ボタンの色まで変更してしまう仕様？みたいですね。回避するなら、以下のように&lt;code&gt;UI&lt;/code&gt;で使っている&lt;code&gt;PropertyChangeListener&lt;/code&gt;をオーバーライドしてしまうのはどうでしょう。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-21 (火) 15:41:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo01.setUI(new MetalComboBoxUI() {
  @Override public PropertyChangeListener createPropertyChangeListener() {
    return new MetalPropertyChangeListener() {
      @Override public void propertyChange(PropertyChangeEvent e) {
        String propertyName = e.getPropertyName();
        if(propertyName==&quot;background&quot;) {
          Color color = (Color)e.getNewValue();
          //arrowButton.setBackground(color);
          listBox.setBackground(color);
        }else{
          super.propertyChange( e );
        }
      }
    };
  }
});
combo01.setModel(makeModel());
combo01.setRenderer(new MyListCellRenderer(combo01.getRenderer()));
combo01.addItemListener(new ItemListener() {
  @Override public void itemStateChanged(ItemEvent e) {
    if(e.getStateChange()!=ItemEvent.SELECTED) return;
    combo01.setBackground(getOEColor(combo01.getSelectedIndex()));
  }
});
combo01.setSelectedIndex(0);
combo01.setBackground(evenBGColor);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ありがとうございます。動作確認してませんが&lt;code&gt;UI&lt;/code&gt;をさわればいろんなことができそうですね。で&lt;code&gt;UIManager&lt;/code&gt;でなんとかできないか気になったので試すと、&lt;code&gt;UIManager.put(&amp;quot;ComboBox.background&amp;quot;, new ColorUIResource(Color.white));&lt;/code&gt;で全てのコンボボックスの背景色を設定できました（リストの色分けはできないですが） -- &lt;a href=&quot;http://terai.xrea.jp/han.html&quot;&gt;han&lt;/a&gt; 2008-10-24 (金) 11:28:10&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/colorcombobox</link>
                <guid>http://terai.xrea.jp/swing/colorcombobox</guid>
                <pubDate>2005-01-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextField内にアイコンを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;の内部にアイコンを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IconTextField&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTOSatpfJI/AAAAAAAAAcI/9Ghfvb82FsM/s800/IconTextField.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ImageIcon image = new ImageIcon(getClass().getResource(&quot;16x16.png&quot;));
int w = image.getIconWidth();
int h = image.getIconHeight();

JTextField field = new JTextField(&quot;bbbbbbbbbb&quot;);
Insets m = field.getMargin();
field.setMargin(new Insets(m.top, m.left+w, m.bottom, m.right));

JLabel label = new JLabel(image);
label.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
label.setBorder(null);
label.setBounds(m.left, m.top, w, h);

field.add(label);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;サンプルでは&lt;code&gt;setMargin&lt;/code&gt;で&lt;code&gt;JTextField&lt;/code&gt;の左に余白を作り、そこに&lt;code&gt;JLabel&lt;/code&gt;を配置することでアイコン(画像)を表示しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを追加&lt;/a&gt;のように、&lt;code&gt;Border&lt;/code&gt;を使っても同様のことができますが、&lt;code&gt;JTextComponent&lt;/code&gt;を継承したコンポーネントでは、&lt;code&gt;setMargin&lt;/code&gt;を使用するとカーソルの指定などが簡単にできるのでおすすめです。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;JLabel&lt;/code&gt;の代わりに、&lt;code&gt;JButton&lt;/code&gt;などを置くこともできます(参考リンクを参照)。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;の&lt;code&gt;Editor&lt;/code&gt;を取得して&lt;code&gt;Margin&lt;/code&gt;を指定しても、 &lt;del&gt;なぜか&lt;/del&gt; うまくいきません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/text/JTextComponent.html#setMargin%28java.awt.Insets%29&quot;&gt;JTextComponent#setMargin(Insets) (Java Platform SE 6)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ただし、デフォルト以外の境界が設定されている場合は、&lt;code&gt;Border&lt;/code&gt;オブジェクトが適切なマージン空白を作成します(それ以外の場合、このプロパティーは事実上無視される)。&lt;/li&gt;
&lt;li&gt;via: &lt;a href=&quot;http://stackoverflow.com/questions/10496828/jtextfield-margin-doesnt-work-with-border&quot;&gt;java - JTextField margin doesnt work with border - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTextField&lt;/code&gt;の右端に&lt;code&gt;JLabel&lt;/code&gt;を置く場合は、以下のように&lt;code&gt;SpringLayout&lt;/code&gt;を使用する方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonWidth.html&quot;&gt;JButtonなどの高さを変更せずに幅を指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JLabel label2 = new JLabel(image);
label2.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
label2.setBorder(BorderFactory.createEmptyBorder());
JTextField field2 = new JTextField(&quot;ccccccccccccccccccccccccccc&quot;) {
  @Override public void updateUI() {
    super.updateUI();
    removeAll();
    SpringLayout l = new SpringLayout();
    setLayout(l);
    Spring fw = l.getConstraint(SpringLayout.WIDTH,  this);
    Spring fh = l.getConstraint(SpringLayout.HEIGHT, this);
    SpringLayout.Constraints c = l.getConstraints(label2);
    c.setConstraint(SpringLayout.WEST,  fw);
    c.setConstraint(SpringLayout.SOUTH, fh);
    add(label2);
  }
};
m = field2.getMargin();
field2.setMargin(new Insets(m.top+2,m.left,m.bottom,m.right+w));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1489851&quot;&gt;Swing (Archive) - Add a clickable icon to the left corner of a JTextField&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TextFieldMargin.html&quot;&gt;JTextFieldのMarginを設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/icontextfield</link>
                <guid>http://terai.xrea.jp/swing/icontextfield</guid>
                <pubDate>2005-01-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxにアイコンを表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;を編集可にしてテキスト入力部分とリスト部分にアイコンを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/IconComboBox&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTONfr7t7I/AAAAAAAAAcA/jNQyoEApJ1I/s800/IconComboBox.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static Border makeIconBorder(JComponent c, ImageIcon i) {
  int iw = i.getIconWidth();
  Border b1 = BorderFactory.createMatteBorder(0, iw, 0, 0, i);
  Border b2 = BorderFactory.createEmptyBorder(0, 5, 0, 0);
  Border b3 = BorderFactory.createCompoundBorder(b1, b2);
  return BorderFactory.createCompoundBorder(c.getBorder(), b3);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一番上

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;ListCellRenderer&lt;/code&gt;を使用する&lt;code&gt;JComboBox&lt;/code&gt;です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上から二番目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;フィールドが編集不可の場合、&lt;code&gt;ListCellRenderer&lt;/code&gt;を実装することでアイコン表示することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下から二番目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;フィールドが編集可の場合、&lt;code&gt;ListCellRenderer&lt;/code&gt;を実装しても、&lt;code&gt;Editor&lt;/code&gt;部分はアイコン表示されません。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;一番下

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;フィールドが編集可の場合でも、&lt;code&gt;MatteBorder&lt;/code&gt;を使用することでエディタ部分にもアイコンを表示することができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MatteBorder.html&quot;&gt;MatteBorderでラベル枠を修飾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PaddingComboBox.html&quot;&gt;JComboBoxの内余白&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ButtonInComboEditor.html&quot;&gt;JComboBoxのEditorComponentにJButtonを配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/iconcombobox</link>
                <guid>http://terai.xrea.jp/swing/iconcombobox</guid>
                <pubDate>2004-12-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MatteBorderでラベル枠を修飾</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MatteBorder&lt;/code&gt;でラベルの枠を修飾します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MatteBorder&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTPp-xSv1I/AAAAAAAAAeU/K5lHH6YMz_E/s800/MatteBorder.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Border outside = BorderFactory.createMatteBorder(0,10,1,0,Color.GREEN);
Border inside  = BorderFactory.createEmptyBorder(0,5,0,0);
label.setBorder(BorderFactory.createCompoundBorder(outside, inside));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MatteBorder&lt;/code&gt;は、&lt;code&gt;4&lt;/code&gt;辺それぞれに色などを表示することができます。上記のサンプルでは、左と下のみ枠を描いてタイトル風のラベルを作成しています。アイコンをタイル状に描画することもできるので、&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを表示&lt;/a&gt;のような使い方をする場合もあります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconComboBox.html&quot;&gt;JComboBoxにアイコンを表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IconTextField.html&quot;&gt;JTextField内にアイコンを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/matteborder</link>
                <guid>http://terai.xrea.jp/swing/matteborder</guid>
                <pubDate>2004-12-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MediaTrackerで画像のサイズを取得</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MediaTracker&lt;/code&gt;で画像のサイズを取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MediaTracker&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPsQMGUsI/AAAAAAAAAeY/B8MAwtKhshY/s800/MediaTracker.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private Dimension getImageDimension(Image img) {
  MediaTracker tracker = new MediaTracker((Container)this);
  tracker.addImage(img, 0);
  try{
    tracker.waitForID(0);
  }catch(InterruptedException e) {}
  return new Dimension(img.getWidth(null), img.getHeight(null));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;MediaTracker&lt;/code&gt;を使って、画像のサイズを取得しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;にファイルをドロップすると、画像の幅、高さを一覧表示します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/IIOMetadata.html&quot;&gt;Jpegファイルのコメントを取り出す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FileListFlavor.html&quot;&gt;Fileのドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mediatracker</link>
                <guid>http://terai.xrea.jp/swing/mediatracker</guid>
                <pubDate>2004-12-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxで候補一覧を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;に入力候補の一覧表示機能(補完機能、コードアシスト、コンテンツアシスト)を追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ComboBoxSuggestion&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTJwW_1EoI/AAAAAAAAAU4/ENqthfUJCsc/s800/ComboBoxSuggestion.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;String[] array = {
    &quot;aaaa&quot;, &quot;aaaabbb&quot;, &quot;aaaabbbcc&quot;, &quot;aaaabbbccddd&quot;,
    &quot;abcde&quot;, &quot;abefg&quot;, &quot;bbb1&quot;, &quot;bbb12&quot;};
JComboBox combo = new JComboBox(array);
combo.setEditable(true);
combo.setSelectedIndex(-1);
JTextField field = (JTextField)combo.getEditor().getEditorComponent();
field.setText(&quot;&quot;);
field.addKeyListener(new ComboKeyHandler(combo));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ComboKeyHandler extends KeyAdapter {
  private final JComboBox&amp;lt;String&amp;gt; comboBox;
  private final List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
  private boolean shouldHide;

  public ComboKeyHandler(JComboBox&amp;lt;String&amp;gt; combo) {
    super();
    this.comboBox = combo;
    for (int i = 0; i &amp;lt; comboBox.getModel().getSize(); i++) {
      list.add((String) comboBox.getItemAt(i));
    }
  }
  @Override public void keyTyped(final KeyEvent e) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        String text = ((JTextField) e.getComponent()).getText();
        ComboBoxModel&amp;lt;String&amp;gt; m;
        if (text.isEmpty()) {
          String[] array = list.toArray(new String[list.size()]);
          m = new DefaultComboBoxModel&amp;lt;String&amp;gt;(array);
          setSuggestionModel(comboBox, m, &quot;&quot;);
          comboBox.hidePopup();
        } else {
          m = getSuggestedModel(list, text);
          if (m.getSize() == 0 || shouldHide) {
            comboBox.hidePopup();
          } else {
            setSuggestionModel(comboBox, m, text);
            comboBox.showPopup();
          }
        }
      }
    });
  }
  @Override public void keyPressed(KeyEvent e) {
    JTextField textField = (JTextField) e.getComponent();
    String text = textField.getText();
    shouldHide = false;
    switch (e.getKeyCode()) {
    case KeyEvent.VK_RIGHT:
      for (String s : list) {
        if (s.startsWith(text)) {
          textField.setText(s);
          return;
        }
      }
      break;
    case KeyEvent.VK_ENTER:
      if (!list.contains(text)) {
        list.add(text);
        Collections.sort(list);
        //setSuggestionModel(comboBox, new DefaultComboBoxModel(list), text);
        setSuggestionModel(comboBox, getSuggestedModel(list, text), text);
      }
      shouldHide = true;
      break;
    case KeyEvent.VK_ESCAPE:
      shouldHide = true;
      break;
    default:
      break;
    }
  }
  private static void setSuggestionModel(JComboBox&amp;lt;String&amp;gt; comboBox, ComboBoxModel&amp;lt;String&amp;gt; mdl, String str) {
    comboBox.setModel(mdl);
    comboBox.setSelectedIndex(-1);
    ((JTextField) comboBox.getEditor().getEditorComponent()).setText(str);
  }
  private static ComboBoxModel&amp;lt;String&amp;gt; getSuggestedModel(List&amp;lt;String&amp;gt; list, String text) {
    DefaultComboBoxModel&amp;lt;String&amp;gt; m = new DefaultComboBoxModel&amp;lt;&amp;gt;();
    for (String s : list) {
      if (s.startsWith(text)) {
        m.addElement(s);
      }
    }
    return m;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、次のキー操作に対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Up&lt;/kbd&gt;&lt;kbd&gt;Down&lt;/kbd&gt;キー

&lt;ul&gt;
&lt;li&gt;ポップアップ表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;キー

&lt;ul&gt;
&lt;li&gt;ポップアップ非表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Right&lt;/kbd&gt;キー

&lt;ul&gt;
&lt;li&gt;補完&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;キー

&lt;ul&gt;
&lt;li&gt;選択、または追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文字入力

&lt;ul&gt;
&lt;li&gt;候補をポップアップ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;JComboBox#showPopup()&lt;/code&gt;と&lt;code&gt;JComboBox#hidePopup()&lt;/code&gt;(それぞれ、&lt;code&gt;JComboBox#setPopupVisible&lt;/code&gt;メソッドをラップしているだけ)を使って、候補のポップアップメニュー表示を制御します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JComboBox#setSelectedIndex(-1)&lt;/code&gt;で、項目の選択をクリアしないと動作がおかしくなる場合があります。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;ではなく、&lt;code&gt;SwingSet3&lt;/code&gt;の&lt;a href=&quot;http://java.net/projects/swingset3/sources/svn/content/trunk/SwingSet3/src/com/sun/swingset3/demos/textfield/JHistoryTextField.java&quot;&gt;JHistoryTextField.java&lt;/a&gt; のように、&lt;code&gt;JTextField&lt;/code&gt;+&lt;code&gt;JPopupMenu&lt;/code&gt;を使用することもできますが、画面の下側で候補数が変更された場合の&lt;code&gt;JPopupMenu&lt;/code&gt;の位置更新(気にしなければ問題無し)が面倒です。&lt;code&gt;JTextField&lt;/code&gt;風に見せかけたいだけなら、以下のような&lt;code&gt;ArrowButton&lt;/code&gt;を非表示にする方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//UIManager.put(&quot;ComboBox.squareButton&quot;, Boolean.FALSE);
JComboBox = new JComboBox(model) {
  @Override public void updateUI() {
    super.updateUI();
    setUI(new javax.swing.plaf.basic.BasicComboBoxUI() {
      @Override protected JButton createArrowButton() {
        JButton button = new JButton() {
          @Override public int getWidth() {
            return 0;
          }
        };
        button.setBorder(BorderFactory.createEmptyBorder());
        button.setVisible(false);
        return button;
      }
      @Override public void configureArrowButton() {}
    });
    for(MouseListener ml:getMouseListeners()) {
      removeMouseListener(ml);
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;変換途中の日本語も、問題がないともっといいですね。 -- &lt;a href=&quot;http://terai.xrea.jp/toshi.html&quot;&gt;toshi&lt;/a&gt; 2006-04-24 (月) 13:45:06

&lt;ul&gt;
&lt;li&gt;あー、日本語のこと全然考えてなかったです…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-04-24 (月) 15:54:00&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タイトルなどを変更するとしたら&lt;code&gt;AutoCompletion&lt;/code&gt;に？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-09 (水) 20:14:40&lt;/li&gt;
&lt;li&gt;日本語を考えると&lt;code&gt;KeyReleased&lt;/code&gt;より&lt;code&gt;KeyTyped&lt;/code&gt;のほうがよさそうです -- &lt;a href=&quot;http://terai.xrea.jp/foggi.html&quot;&gt;foggi&lt;/a&gt; 2008-05-06 (火) 17:15:39

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。&lt;code&gt;keyTyped&lt;/code&gt;に変更してみました(ついでにスクリーンショットなども更新)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-07 (水) 12:23:19&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Enter&lt;/kbd&gt;キーでの追加が出来なくなっていたのを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-01-22 (木) 16:26:11&lt;/li&gt;
&lt;li&gt;下下と入力したとき、下上と入力したときの動きがおかしいです。 -- &lt;a href=&quot;http://terai.xrea.jp/magi.html&quot;&gt;magi&lt;/a&gt; 2011-02-19 (Sat) 22:03:02

&lt;ul&gt;
&lt;li&gt;自分の環境では再現できてません。カーソルキーを、「下、下、下、上」と入力するのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-21 (月) 15:06:15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;このページでVectorで宣言されているところが　view plain　で表示されるコードだとListで宣言されてますね --  2014-04-14 (月) 11:04:20

&lt;ul&gt;
&lt;li&gt;こんばんは。ご指摘ありがとうございます。ソースコードは出来るだけ&lt;code&gt;Vector&lt;/code&gt;は使用しないようにまとめて変更したのですが、&lt;code&gt;wiki&lt;/code&gt;は面倒なので結構残っているかもしれません。気がつけば徐々に置き換えていこうと思っています :-) -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-04-14 (月) 17:51:02&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/comboboxsuggestion</link>
                <guid>http://terai.xrea.jp/swing/comboboxsuggestion</guid>
                <pubDate>2004-12-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JButtonなどの高さを変更せずに幅を指定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;高さはデフォルトのまま幅だけを指定して、&lt;code&gt;JButton&lt;/code&gt;、&lt;code&gt;JComboBox&lt;/code&gt;、&lt;code&gt;JTextField&lt;/code&gt;などのサイズを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ButtonWidth&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/-B3A8vHPu9_I/UmY7hTtdmtI/AAAAAAAAB4s/7NknsHc_vwI/s800/ButtonWidth.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static JComponent createRightAlignButtonBox2(
    final List&amp;lt;JButton&amp;gt; list, final int buttonWidth, int gap) {
  JComponent box = new JPanel() {
    @Override public void updateUI() {
      for(JButton b: list) {
        b.setPreferredSize(null);
      }
      super.updateUI();
      EventQueue.invokeLater(new Runnable() {
        @Override public void run() {
          int maxHeight = 0;
          for(JButton b: list) {
            maxHeight = Math.max(maxHeight, b.getPreferredSize().height);
          }
          Dimension d = new Dimension(buttonWidth, maxHeight);
          for(JButton b: list) {
            b.setPreferredSize(d);
          }
          revalidate();
        }
      });
    }
  };
  box.setLayout(new BoxLayout(box, BoxLayout.X_AXIS));
  box.add(Box.createHorizontalGlue());
  for(JButton b: list) {
    box.add(b);
    box.add(Box.createHorizontalStrut(gap));
  }
  box.setBorder(BorderFactory.createEmptyBorder(gap, 0, gap, 0));
  return box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JButton&lt;/code&gt;の高さはデフォルト、幅をその文字列によらずに一定、配置は右寄せで水平にしたい場合のレイアウト方法をテストしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&lt;/code&gt;を使用して右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;の幅は、その文字列の長さに依存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getPreferredSize&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Box&lt;/code&gt;を使用して右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;の幅は、&lt;code&gt;JButton#setPreferredSize(...)&lt;/code&gt;で固定幅を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;の高さは、&lt;code&gt;JButton#getPreferredSize()&lt;/code&gt;で取得したサイズの高さを使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を変更すると&lt;code&gt;JButton&lt;/code&gt;の高さが変化するので、その場合は&lt;code&gt;JButton#updateUI()&lt;/code&gt;をオーバーライドして&lt;code&gt;JButton#setPreferredSize(...)&lt;/code&gt;を使用する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;+&lt;code&gt;Box&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SpringLayout.html&quot;&gt;SpringLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;で幅指定、&lt;code&gt;BoxLayout&lt;/code&gt;で右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout.Constraints&lt;/code&gt;で&lt;code&gt;JButton&lt;/code&gt;の固定幅を指定&lt;/li&gt;
&lt;li&gt;親パネルの幅も&lt;code&gt;SpringLayout.Constraints&lt;/code&gt;で固定し、&lt;code&gt;Box&lt;/code&gt;で入れ子にして右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を変更すると&lt;code&gt;JButton&lt;/code&gt;の高さが変化するので、その場合は&lt;code&gt;JComponent#getPreferredSize(...)&lt;/code&gt;をオーバーライドして親パネルの高さを更新する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SpringLayout.html&quot;&gt;SpringLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;を使用して右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringLayout.Constraints&lt;/code&gt;で&lt;code&gt;JButton&lt;/code&gt;の幅を固定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LookAndFeel&lt;/code&gt;を変更すると&lt;code&gt;JButton&lt;/code&gt;の高さが変化するので、その場合は&lt;code&gt;JComponent#getPreferredSize(...)&lt;/code&gt;をオーバーライドして親パネルの高さを更新する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GridLayout&lt;/code&gt;+&lt;code&gt;Box&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GridLayout&lt;/code&gt;で幅指定、&lt;code&gt;BoxLayout&lt;/code&gt;で右寄せ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GridLayout&lt;/code&gt;ですべての&lt;code&gt;JButton&lt;/code&gt;のサイズを同じにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Box&lt;/code&gt;で入れ子にして右寄せ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下、&lt;code&gt;setPreferredSize()&lt;/code&gt;を使用する際の補足、注意点です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JButton&lt;/code&gt;の&lt;code&gt;UI&lt;/code&gt;がフォントサイズや文字列の長さから決めたデフォルトサイズを&lt;code&gt;getPreferredSize()&lt;/code&gt;で取得しています。高さはそのまま利用し、幅だけ一定の値を設定して、新たなデフォルトサイズを作成し、&lt;code&gt;setPreferredSize()&lt;/code&gt;しています。これで次から&lt;code&gt;getPreferredSize()&lt;/code&gt;で返ってくる値は、どちらのボタンでも全く同じになります。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;setPreferredSize(...)&lt;/code&gt;で設定したサイズは、&lt;code&gt;LookAndFeel&lt;/code&gt;を変更しても残ってしまう(&lt;code&gt;DimensionUIResource&lt;/code&gt;を使用しても効果がない)ため、&lt;code&gt;LookAndFeel&lt;/code&gt;がデフォルトで使用する高さを取得したい場合は、&lt;code&gt;updateUI()&lt;/code&gt;をオーバーライドして、一旦&lt;code&gt;JButton#setPreferredSize(null);&lt;/code&gt;を設定して幅を変更した推奨サイズをクリアしてから、&lt;code&gt;super.updateUI();&lt;/code&gt;で推奨サイズを更新し、その後で固定幅、&lt;code&gt;LookAndFeel&lt;/code&gt;デフォルトの高さを&lt;code&gt;setPreferredSize(...)&lt;/code&gt;で設定し直す必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getPreferredSize()&lt;/code&gt;で得られる値を使用するかどうかは、レイアウトマネージャーによって異なりますが、水平方向にコンポーネントを並べる&lt;code&gt;BoxLayout&lt;/code&gt;の場合は以下のようになるため、パネルをリサイズしても、ボタンのサイズはどちらも同じで変化しません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;幅: 推奨サイズ(&lt;code&gt;getPreferredSize&lt;/code&gt;メソッド)から取得した値&lt;/li&gt;
&lt;li&gt;高さ: 各コンポーネントの推奨サイズ(&lt;code&gt;getPreferredSize&lt;/code&gt;メソッド)で得られた中からもっとも大きな値

&lt;ul&gt;
&lt;li&gt;上記のサンプルで&lt;code&gt;button1.setPreferredSize(new Dimension(100, 0));&lt;/code&gt;としても結果は同じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;例えば、各ボタンを格納した親フレームを&lt;code&gt;pack()&lt;/code&gt;する前に&lt;code&gt;JButton#getPreferredSize()&lt;/code&gt;ではなく、&lt;code&gt;JButton#getSize()&lt;/code&gt;でサイズを取得すると、&lt;code&gt;[width=0,height=0]&lt;/code&gt;が帰ってきます。コンポーネントが表示されている場合、&lt;code&gt;getSize()&lt;/code&gt;で得られるサイズは、その実際に表示されているサイズ(レイアウトマネージャーが決める)になります。&lt;/p&gt;

&lt;p&gt;以下は&lt;code&gt;JLabel&lt;/code&gt;を&lt;code&gt;getPreferredSize()&lt;/code&gt;した場合の例です。初期状態(&lt;code&gt;preferredSize&lt;/code&gt;が&lt;code&gt;null&lt;/code&gt;)の場合は、&lt;code&gt;JLabel&lt;/code&gt;の&lt;code&gt;UI&lt;/code&gt;がサイズを計算しています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel l = new JLabel();
l.setText(&quot;a&quot;); //preferredSizeがnullの場合、UIがサイズを計算
//l.getPreferredSize() -&amp;gt; Dimension[width=6,height=13]

l.setText(&quot;aaaa&quot;); //JLabelの場合、Fontサイズと文字列の長さなどで決まる
//l.getPreferredSize() -&amp;gt; Dimension[width=24,height=13]

l.setText(&quot;&amp;lt;html&amp;gt;aa&amp;lt;br&amp;gt;aa&quot;);
//l.getPreferredSize() -&amp;gt; Dimension[width=12,height=26]

l.setPreferredSize(new Dimension(10,10)); //preferredSizeを設定した場合
//l.getPreferredSize() -&amp;gt; Dimension[width=10,height=10]

l.setPreferredSize(null); //preferredSizeをnullに戻した場合
//l.getPreferredSize() -&amp;gt; Dimension[width=12,height=26]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SetColumns.html&quot;&gt;JComboBoxなどの幅をカラム数で指定&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox&lt;/code&gt;、&lt;code&gt;JTextField&lt;/code&gt;などのコンポーネントでは、カラム数で幅を指定することもできます。

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;: カラム数で幅を指定すると、コンポーネントによってサイズや余白などが微妙に異なる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;以上: &lt;code&gt;LookAndFeel&lt;/code&gt;が同じなら、カラム数での幅指定で、どのコンポーネントでもほぼ同じサイズになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SpringLayout.html&quot;&gt;SpringLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jroller.com/santhosh/entry/how_do_you_layout_command&quot;&gt;Santhosh Kumar&amp;#39;s Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;専用のレイアウトマネージャーを作成するサンプルがあります。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;などを使って幅を固定する方法を追加(更新日時は忘れました)。スクリーンショットは未更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-04-14 (日) 00:36:03&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GridLayout&lt;/code&gt;+&lt;code&gt;Box&lt;/code&gt;のサンプルを追加、&lt;code&gt;LookAndFeel&lt;/code&gt;を実行中に変更する場合の注意点を追加、スクリーンショットを更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-10-22 (火) 17:33:58&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/buttonwidth</link>
                <guid>http://terai.xrea.jp/swing/buttonwidth</guid>
                <pubDate>2004-11-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneのオートスクロール</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;上でのマウスドラッグに応じてラベルをオートスクロールします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AutoScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTH2GCzRoI/AAAAAAAAAR0/FR7seILhmaM/s800/AutoScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class ViewportDragScrollListener extends MouseAdapter
                                 implements HierarchyListener {
  private static final int SPEED = 4;
  private static final int DELAY = 10;
  private final Cursor dc;
  private final Cursor hc = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  private final Timer scroller;
  private final JComponent label;
  private Point startPt = new Point();
  private Point move    = new Point();

  public ViewportDragScrollListener(JComponent comp) {
    this.label = comp;
    this.dc = comp.getCursor();
    this.scroller = new Timer(DELAY, new ActionListener() {
      @Override public void actionPerformed(ActionEvent e) {
        Container c = SwingUtilities.getAncestorOfClass(JViewport.class, label);
        if (c instanceof JViewport.class) {
          JViewport vport = (JViewport) c;
          Point vp = vport.getViewPosition(); //= SwingUtilities.convertPoint(vport, 0, 0, label);
          vp.translate(move.x, move.y);
          label.scrollRectToVisible(new Rectangle(vp, vport.getSize())); //vport.setViewPosition(vp);
        }
      }
    });
  }
  @Override public void hierarchyChanged(HierarchyEvent e) {
    JComponent c = (JComponent)e.getSource();
    if((e.getChangeFlags() &amp;amp; HierarchyEvent.DISPLAYABILITY_CHANGED)!=0
       &amp;amp;&amp;amp; !c.isDisplayable()) {
      scroller.stop();
    }
  }
  @Override public void mouseDragged(MouseEvent e) {
    JViewport vport = (JViewport)e.getSource();
    Point pt = e.getPoint();
    int dx = startPt.x - pt.x;
    int dy = startPt.y - pt.y;
    Point vp = vport.getViewPosition();
    vp.translate(dx, dy);
    label.scrollRectToVisible(new Rectangle(vp, vport.getSize()));
    move.setLocation(SPEED*dx, SPEED*dy);
    startPt.setLocation(pt);
  }
  @Override public void mousePressed(MouseEvent e) {
    e.getComponent().setCursor(hc); //label.setCursor(hc);
    startPt.setLocation(e.getPoint());
    move.setLocation(0, 0);
    scroller.stop();
  }
  @Override public void mouseReleased(MouseEvent e) {
    e.getComponent().setCursor(dc); //label.setCursor(dc);
    scroller.start();
  }
  @Override public void mouseExited(MouseEvent e) {
    e.getComponent().setCursor(dc); //label.setCursor(dc);
    move.setLocation(0, 0);
    scroller.stop();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JViewport&lt;/code&gt;内の画像ラベルをマウスでドラッグすると、その移動方向に応じて自動的にスクロールします。マウスをクリックすると停止します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使うことでスクロールの開始、継続、停止を行っています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;で文字列を挿入したときに、最後まで自動スクロールしたい場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/CaretPosition.html&quot;&gt;JTextPaneで最終行に移動&lt;/a&gt;を参考にしてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CaretPosition.html&quot;&gt;JTextPaneで最終行に移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sozai-free.com/&quot;&gt;2000ピクセル以上のフリー写真素材集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;猫の手スクロール風の動作に変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-24 (木) 19:16:16&lt;/li&gt;
&lt;li&gt;ドラッグ中は、&lt;a href=&quot;http://terai.xrea.jp/Swing/HandScroll.html&quot;&gt;JScrollPaneのViewportをマウスで掴んでスクロール&lt;/a&gt;と同じ動作をするように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-12-22 (木) 18:38:02&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/autoscroll</link>
                <guid>http://terai.xrea.jp/swing/autoscroll</guid>
                <pubDate>2004-11-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JComboBoxの値をMouseWheelで変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JComboBox&lt;/code&gt;にフォーカスがある場合、その値を&lt;code&gt;MouseWheel&lt;/code&gt;の上下で変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WheelCombo&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTWm95sa5I/AAAAAAAAApg/1tiQsmg5QKw/s800/WheelCombo.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo.addMouseWheelListener(new MouseWheelListener() {
  @Override public void mouseWheelMoved(MouseWheelEvent e) {
    JComboBox source = (JComboBox) e.getSource();
    if(!source.hasFocus()) return;
    int ni = source.getSelectedIndex() + e.getWheelRotation();
    if(ni&amp;gt;=0 &amp;amp;&amp;amp; ni&amp;lt;source.getItemCount()) {
      source.setSelectedIndex(ni);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一番上のコンボボックスに&lt;code&gt;MouseWheelListener&lt;/code&gt;が設定され、マウスホイールの上下回転に反応して、表示される内容が順次変更されるようになっています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/wheelcombo</link>
                <guid>http://terai.xrea.jp/swing/wheelcombo</guid>
                <pubDate>2004-11-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelをアコーディオン風に展開</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;の展開、折り畳みをアコーディオン風に行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AccordionPanel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTHVHwFBII/AAAAAAAAARA/QX4AmSbPoHs/s800/AccordionPanel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;abstract class ExpansionPanel extends JPanel{
  abstract public JPanel makePanel();
  private final String title;
  private final JLabel label;
  private final JPanel panel;

  public ExpansionPanel(String title) {
    super(new BorderLayout());
    this.title = title;
    label = new JLabel(&quot;↓ &quot;+title) {
      @Override protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D)g;
        //Insets ins = getInsets();
        g2.setPaint(new GradientPaint(50, 0, Color.WHITE,
            getWidth(), getHeight(), new Color(200,200,255)));
        g2.fillRect(0, 0, getWidth(), getHeight());
        super.paintComponent(g);
      }
    };
    label.addMouseListener(new MouseAdapter() {
      @Override public void mousePressed(MouseEvent evt) {
        initPanel();
      }
    });
    label.setForeground(Color.BLUE);
    label.setBorder(BorderFactory.createEmptyBorder(2,5,2,2));
    add(label, BorderLayout.NORTH);

    panel = makePanel();
    panel.setVisible(false);
    panel.setOpaque(true);
    panel.setBackground(new Color(240, 240, 255));
    Border b1 = BorderFactory.createMatteBorder(0,2,2,2,Color.WHITE);
    Border b2 = BorderFactory.createEmptyBorder(10,10,10,10);
    Border b3 = BorderFactory.createCompoundBorder(b1, b2);
    panel.setBorder(b3);
    add(panel);
  }
  @Override public Dimension getPreferredSize() {
    Dimension d = label.getPreferredSize();
    if(panel.isVisible()) {
      d.height += panel.getPreferredSize().height;
    }
    return d;
  }
  @Override public Dimension getMaximumSize() {
    Dimension d = getPreferredSize();
    d.width = Short.MAX_VALUE;
    return d;
  }
  protected void initPanel() {
    panel.setVisible(!panel.isVisible());
    label.setText((panel.isVisible()?&quot;↑ &quot;:&quot;↓ &quot;)+title);
    revalidate();
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        panel.scrollRectToVisible(panel.getBounds());
      }
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;各パネルに配置されたタイトルラベルがクリックされた場合、&lt;code&gt;JPanel#setVisible(boolean)&lt;/code&gt;メソッドを使って、パネルの表示・非表示を切り替えています。&lt;/p&gt;

&lt;p&gt;また、パネルを非表示にするだけでは、その高さが変更されないので、以下のように、&lt;code&gt;JPanel#getPreferredSize()&lt;/code&gt;もオーバーライドしています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public Dimension getPreferredSize() {
  Dimension d = label.getPreferredSize();
  if(panel.isVisible()) {
    d.height += panel.getPreferredSize().height;
  }
  return d;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://common.l2fprod.com/&quot;&gt;L2FProd.com - Common Components&lt;/a&gt; にある&lt;code&gt;JTaskPane&lt;/code&gt;で、アニメーション付きのパネルの展開や折り畳みが可能です。ソースも公開されているので、&lt;code&gt;com.l2fprod.common.swing.JCollapsiblePane&lt;/code&gt;あたりを参考にしてみてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ExpandablePanel.html&quot;&gt;JPanelの展開と折り畳み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ComponentList.html&quot;&gt;BoxLayoutでリスト状に並べる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SearchBox.html&quot;&gt;JTreeのノードを検索する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;アニメーションさせる場合のサンプル&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpringLayout&lt;/code&gt;を&lt;code&gt;BoxLayout&lt;/code&gt;に変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-05-15 (金) 22:33:23&lt;/li&gt;
&lt;li&gt;不要なコードを削除。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-11-16 (火) 21:29:33&lt;/li&gt;
&lt;li&gt;不要(になった？)なリスナクラスなどを削除。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-08-21 (火) 16:33:17&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/accordionpanel</link>
                <guid>http://terai.xrea.jp/swing/accordionpanel</guid>
                <pubDate>2004-11-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelの展開と折り畳み</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;の展開と折り畳みを行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ExpandablePanel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMQbS7ipI/AAAAAAAAAY4/xXDc9VVk87A/s800/ExpandablePanel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public void initComps(java.util.List&amp;lt;ExpansionPanel&amp;gt; list, ExpansionEvent e) {
  setVisible(false);
  centerBox.removeAll();
  northBox.removeAll();
  southBox.removeAll();
  ExpansionPanel es = (ExpansionPanel) e.getSource();
  boolean flag = false;
  for(ExpansionPanel exp: list) {
    if(exp==es &amp;amp;&amp;amp; exp.isSelected()) {
      centerBox.add(exp);
      flag = true;
    }else if(flag) {
      exp.setSelected(false);
      southBox.add(exp);
    }else{
      exp.setSelected(false);
      northBox.add(exp);
    }
  }
  setVisible(true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンが押されるたびにそのパネルの展開(子コンポーネントの追加)と折り畳み(子コンポーネントの削除)を行っています。同時に&lt;code&gt;BorderLayout&lt;/code&gt;の&lt;code&gt;NORTH&lt;/code&gt;、&lt;code&gt;CENTER&lt;/code&gt;、&lt;code&gt;SOUTH&lt;/code&gt;に各パネルを振り分けを行い、展開されるパネル一つだけが推奨サイズが無視されて任意の高さに拡張される&lt;code&gt;CENTER&lt;/code&gt;に配置されます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;a href=&quot;http://common.l2fprod.com/&quot;&gt;L2FProd.com - Common Components&lt;/a&gt; にある&lt;code&gt;JOutlookBar&lt;/code&gt;で、アニメーション付きでパネルの展開や折り畳みが可能です。ソースも公開されているので参考にしてみてください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AccordionPanel.html&quot;&gt;JPanelをアコーディオン風に展開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/expandablepanel</link>
                <guid>http://terai.xrea.jp/swing/expandablepanel</guid>
                <pubDate>2004-11-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fadeアニメーションで画像を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;PNG&lt;/code&gt;画像をフェードイン、フェードアウトします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Fade&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMX06FjXI/AAAAAAAAAZE/mmNOvJ5E6Hk/s800/Fade.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class FadeImage extends JComponent implements ActionListener {
  private int alpha = 10;
  public FadeImage() {
    super();
    setBackground(Color.BLACK);
  }
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.setPaint(getBackground());
    g2d.fillRect(0, 0, getWidth(), getHeight());
    if(mode &amp;amp;&amp;amp; alpha&amp;lt;10) {
      alpha = alpha + 1;
    }else if(!mode &amp;amp;&amp;amp; alpha&amp;gt;0) {
      alpha = alpha - 1;
    }else{
      animator.stop();
    }
    g2d.setComposite(makeAlphaComposite(alpha*0.1f));
    g2d.drawImage(icon, null, 0, 0);
  }
  @Override public void actionPerformed(ActionEvent e) {
    repaint();
  }
  private AlphaComposite makeAlphaComposite(float alpha) {
    return AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使って表示される画像のアルファ値を変更し、フェードイン、フェードアウトさせています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://ux01.so-net.ne.jp/%7Ekomori/archives/java/java2d.html&quot;&gt;Java2D on Gassan2&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fade</link>
                <guid>http://terai.xrea.jp/swing/fade</guid>
                <pubDate>2004-10-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Wipeアニメーションで画像を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Wipe&lt;/code&gt;アニメーションで&lt;code&gt;PNG&lt;/code&gt;画像を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Wipe&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWzXTVO0I/AAAAAAAAAp0/SoNEMaoYEoQ/s800/Wipe.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WipeImage extends JComponent implements ActionListener {
  private int ww = 0;
  public WipeImage() {
    super();
    setBackground(Color.BLACK);
  }
  @Override public void paintComponent(Graphics g) {
    super.paintComponent(g);
    int iw = (int)icon.getIconWidth();
    int ih = (int)icon.getIconHeight();
    if(direction) {
      if(ww&amp;lt;iw) ww=ww+10;
      else animator.stop();
    }else{
      if(ww&amp;gt;0) ww=ww-10;
      else animator.stop();
    }
    g.drawImage(icon.getImage(), 0, 0, iw, ih, this);
    g.fillRect(ww, 0, iw-ww, ih);
  }
  @Override public void actionPerformed(ActionEvent e) {
    repaint();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;画像の上に、徐々に位置と幅を変更しながら矩形を描画することで&lt;code&gt;Wipe&lt;/code&gt;しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/wipe</link>
                <guid>http://terai.xrea.jp/swing/wipe</guid>
                <pubDate>2004-10-18T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Windowを開いたときのフォーカスを指定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;や&lt;code&gt;JDialog&lt;/code&gt;などの&lt;code&gt;Window&lt;/code&gt;を開いたときに、デフォルトでフォーカスを持つコンポーネントを指定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DefaultFocus&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTKp09XXEI/AAAAAAAAAWU/p3YhSijyS90/s800/DefaultFocus.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;EventQueue.invokeLater(new Runnable() {
  @Override public void run() {
    field.requestFocusInWindow();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTextField&lt;/code&gt;がデフォルトのフォーカスを持つように、&lt;code&gt;JComponent#requestFocusInWindow()&lt;/code&gt;メソッドを使用しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JComponent#requestFocusInWindow()&lt;/code&gt;メソッドは、チュートリアル(&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html&quot;&gt;How to Use the Focus Subsystem&lt;/a&gt;)にあるように、&lt;code&gt;JFrame#pack()&lt;/code&gt;、もしくは&lt;code&gt;JFrame#setSize(...)&lt;/code&gt;などでリサイズされた後(フォーカスを取得するコンポーネントのサイズが決まった後)で実行する必要があります。このため、このサンプルでは&lt;code&gt;EventQueue.invokeLater(...)&lt;/code&gt;を使って、待ち状態のすべてのイベントが処理された一番後で実行するようにしています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;以下のように、&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;や&lt;code&gt;WindowListener&lt;/code&gt;を使う方法でも、同様にデフォルトのフォーカスを持つコンポーネントを指定することが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を使用

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を設定して、最初にフォーカスの当たるコンポーネントを指定(&lt;code&gt;JDK 1.4.0&lt;/code&gt;以降)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {
  @Override public Component getInitialComponent(Window w) {
    return field;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowListener#windowOpened(...)&lt;/code&gt;で、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;フレームに&lt;code&gt;WindowListener&lt;/code&gt;を設定して、&lt;code&gt;windowOpened(...)&lt;/code&gt;が呼び出されたときに、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.addWindowListener(new WindowAdapter() {
  @Override public void windowOpened(WindowEvent e) {
    field.requestFocusInWindow();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ComponentListener#componentShown(...)&lt;/code&gt;で、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;フレームに&lt;code&gt;ComponentListener&lt;/code&gt;を設定して、&lt;code&gt;componentShown(...)&lt;/code&gt;が呼び出されたとき(=フレームが&lt;code&gt;setVisible(true)&lt;/code&gt;されたとき)に、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.addComponentListener(new ComponentAdapter() {
  @Override public void componentShown(ComponentEvent e) {
    field.requestFocusInWindow();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KeyboardFocusManager#addPropertyChangeListener(...)&lt;/code&gt;で、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;KeyboardFocusManager&lt;/code&gt;に&lt;code&gt;PropertyChangeListener&lt;/code&gt;を設定して、&lt;code&gt;propertyChange(...)&lt;/code&gt;が呼び出され、&lt;code&gt;PropertyName&lt;/code&gt;が、&lt;code&gt;activeWindow&lt;/code&gt;、かつ&lt;code&gt;PropertyChangeEvent#getNewValue()&lt;/code&gt;が&lt;code&gt;null&lt;/code&gt;でないときに、&lt;code&gt;requestFocusInWindow()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;KeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager();
kfm.addPropertyChangeListener(new PropertyChangeListener() {
  @Override public void propertyChange(PropertyChangeEvent e) {
    String prop = e.getPropertyName();
    if(&quot;activeWindow&quot;.equals(prop) &amp;amp;&amp;amp; e.getNewValue()!=null) {
      System.out.println(&quot;activeWindow&quot;);
      field.requestFocusInWindow();
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversal.html&quot;&gt;Focusの移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1367389&quot;&gt;Swing - When does requestFocusInWindow() fail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OptionPaneDefaultFocus.html&quot;&gt;JOptionPaneのデフォルトフォーカス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame#getRootPane()#setDefaultButton()&lt;/code&gt;は使用方法がよくわからない… -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setDefaultButton&lt;/code&gt;って、&lt;kbd&gt;Enter&lt;/kbd&gt;したときに押されたとみなすボタンだったかな…… --  2004-10-14 (木) 23:21:53

&lt;ul&gt;
&lt;li&gt;ありがとうございます。おかげでようやく理解できました。&lt;code&gt;JTextField&lt;/code&gt;などにフォーカスがある状態で&lt;kbd&gt;Enter&lt;/kbd&gt;キーを入力すると&lt;code&gt;setDefaultButton&lt;/code&gt;したボタンが押されるのですね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-10-18 (月) 12:14:15&lt;/li&gt;
&lt;li&gt;というわけで、&lt;code&gt;frame.getRootPane().setDefaultButton(eb);&lt;/code&gt;を追加してみました。上記のサンプルでは、中央の&lt;code&gt;JTextField&lt;/code&gt;にフォーカスがある状態で、&lt;kbd&gt;Enter&lt;/kbd&gt;キーを押すと、&lt;code&gt;EAST&lt;/code&gt;ボタンが押されたことになります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-10-18 (月) 12:20:58&lt;/li&gt;
&lt;li&gt;&lt;del&gt;いつか、&lt;code&gt;DefaultButton&lt;/code&gt;のページを別に作成すること。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-07 (水) 19:19:44&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultButton.html&quot;&gt;DefaultButtonの設定&lt;/a&gt;に移動。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-12 (月) 14:40:15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HierarchyListener&lt;/code&gt;を使用する場合のテスト -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-03-19 (木) 14:51:30

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/OptionPaneDefaultFocus.html&quot;&gt;JOptionPaneのデフォルトフォーカス&lt;/a&gt;に移動&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/defaultfocus</link>
                <guid>http://terai.xrea.jp/swing/defaultfocus</guid>
                <pubDate>2004-10-11T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>BasicStrokeで点線を作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;点線・破線を描画します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DashedLine&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTKaxPM12I/AAAAAAAAAV8/ZQON-woHuIg/s800/DashedLine.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel() {
  BasicStroke dashed2;
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    super.paintComponent(g2);
    if(dashed2==null) dashed2 = new BasicStroke(5.0f, BasicStroke.CAP_BUTT,
                  BasicStroke.JOIN_MITER, 10.0f, getDashArray(), 0.0f);
    g2.setStroke(dashed2);
    g2.drawLine(5, getHeight()/2, getWidth()-10, getHeight()/2);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;BasicStroke&lt;/code&gt;の破線属性を指定して点線を描画します。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、カンマ区切りで記入した数値を配列に分解し、これを破線のパターンとして&lt;code&gt;BasicStroke&lt;/code&gt;に渡しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/2d/geometry/strokeandfill.html&quot;&gt;Stroking and Filling Graphics Primitives (The Java™ Tutorials &amp;gt; 2D Graphics &amp;gt; Working with Geometry)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/dashedline</link>
                <guid>http://terai.xrea.jp/swing/dashedline</guid>
                <pubDate>2004-10-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブをドラッグ＆ドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブを&lt;code&gt;Drag&amp;amp;Drop&lt;/code&gt;で移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDTabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTLjYzYe0I/AAAAAAAAAXw/nr90t9LvfMI/s800/DnDTabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private int getTargetTabIndex(Point glassPt) {
  Point tabPt = SwingUtilities.convertPoint(glassPane, glassPt, DnDTabbedPane.this);
  boolean isTB = getTabPlacement()==JTabbedPane.TOP || getTabPlacement()==JTabbedPane.BOTTOM;
  for(int i=0;i&amp;lt;getTabCount();i++) {
    Rectangle r = getBoundsAt(i);
    if(isTB) r.setRect(r.x-r.width/2, r.y,  r.width, r.height);
    else     r.setRect(r.x, r.y-r.height/2, r.width, r.height);
    if(r.contains(tabPt)) return i;
  }
  Rectangle r = getBoundsAt(getTabCount()-1);
  if(isTB) r.setRect(r.x+r.width/2, r.y,  r.width, r.height);
  else     r.setRect(r.x, r.y+r.height/2, r.width, r.height);
  return   r.contains(tabPt)?getTabCount():-1;
}

private void convertTab(int prev, int next) {
  if(next&amp;lt;0 || prev==next) {
    return;
  }
  Component cmp = getComponentAt(prev);
  Component tab = getTabComponentAt(prev);
  String str    = getTitleAt(prev);
  Icon icon     = getIconAt(prev);
  String tip    = getToolTipTextAt(prev);
  boolean flg   = isEnabledAt(prev);
  int tgtindex  = prev&amp;gt;next ? next : next-1;
  remove(prev);
  insertTab(str, icon, cmp, tip, tgtindex);
  setEnabledAt(tgtindex, flg);

  //When you drag&#39;n&#39;drop a disabled tab, it finishes enabled and selected.
  //pointed out by dlorde
  if(flg) setSelectedIndex(tgtindex);

  // I have a component in all tabs (jlabel with an X to close the tab)
  // and when i move a tab the component disappear.
  // pointed out by Daniel Dario Morales Salas
  setTabComponentAt(tgtindex, tab);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTabbedPane&lt;/code&gt;のタブをドラッグすると、マウスカーソルが変更されて、ドロップ可能な位置に青い線を描画します。&lt;/p&gt;

&lt;p&gt;ドラッグ中、半透明のタブゴーストを表示するかどうかを切り替えることが出来ます。タブ領域以外にドロップしようとすると、カーソルが変化します。&lt;code&gt;JTabbedPane&lt;/code&gt;のタブが二段以上になる場合の検証はほとんどしていません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MouseMotionListener&lt;/code&gt;と&lt;code&gt;MouseListener&lt;/code&gt;ではなく、&lt;code&gt;DragGestureListener&lt;/code&gt;、&lt;code&gt;DragSourceListener&lt;/code&gt;、&lt;code&gt;DropTargetListener&lt;/code&gt;を使用する方法に変更しました。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/4873112788/toc.html&quot;&gt;Java Swing Hacks #63 半透明のドラッグ＆ドロップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CardLayoutTabbedPane.html&quot;&gt;CardLayoutを使ってJTabbedPane風のコンポーネントを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDExportTabbedPane.html&quot;&gt;JTabbedPane間でタブのドラッグ＆ドロップ移動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDLayerTabbedPane.html&quot;&gt;JLayerを使ってJTabbedPaneのタブの挿入位置を描画する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ドラッグ中のタブゴーストを表示する機能を追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-23 (金) 15:18:30&lt;/li&gt;
&lt;li&gt;&lt;code&gt;java.awt.dnd&lt;/code&gt;パッケージを使用する方法にソースを変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-07-01 (土) 16:22:48&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tab.setTabPlacement(JTabbedPane.RIGHT)&lt;/code&gt;などへの対応と、タブのないタブエリアをドラッグすると&lt;code&gt;Exception&lt;/code&gt;が発生していたのを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-02-19 (火) 18:38:18&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GlassPane&lt;/code&gt;の設定方法を修正 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-08-06 (水) 12:17:51&lt;/li&gt;
&lt;li&gt;選択不可のタブを移動すると、選択可に変化するバグ(dlordeさんからの指摘、ありがとう)を修正。ついでにタブのアイコン、ツールチップにも対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-03 (金) 13:13:31

&lt;ul&gt;
&lt;li&gt;選択不可のタブを移動不可にする場合は、&lt;code&gt;DragGestureListener#dragGestureRecognized&lt;/code&gt;メソッドで&lt;code&gt;if(dragTabIndex&amp;lt;0 || !isEnabledAt(dragTabIndex)) return;&lt;/code&gt;など。、 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-10-03 (金) 13:15:18&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCROLL_TAB_LAYOUT&lt;/code&gt;での、&lt;code&gt;auto scroll&lt;/code&gt;テストを追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-09 (火) 12:49:10&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCROLL_TAB_LAYOUT&lt;/code&gt;で、コンポーネントが&lt;code&gt;null&lt;/code&gt;(&lt;code&gt;addTab(&amp;quot;title&amp;quot;, null)&lt;/code&gt;などの場合)のタブをドラッグすると例外が発生するバグを修正(darylさんからの指摘、thx)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-12-30 (火) 18:56:48&lt;/li&gt;
&lt;li&gt;タブのドラッグ中、&lt;code&gt;JTable&lt;/code&gt;上などで&lt;code&gt;Cursor&lt;/code&gt;が点滅するのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-05-19 (火) 17:16:44&lt;/li&gt;
&lt;li&gt;参考にさせていただきました．ありがとうございます． -- &lt;a href=&quot;http://terai.xrea.jp/M.U.html&quot;&gt;M.U&lt;/a&gt; 2009-12-20 (日) 20:27:37

&lt;ul&gt;
&lt;li&gt;どういたしまして。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-12-21 (月) 00:43:51&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndtabbedpane</link>
                <guid>http://terai.xrea.jp/swing/dndtabbedpane</guid>
                <pubDate>2004-09-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TexturePaintを使って背景に画像を表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TexturePaint&lt;/code&gt;を使用して背景にタイル状に画像を貼り付けます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TexturePaint&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTVUeXC5lI/AAAAAAAAAnc/CWUYfOODy1E/s800/TexturePaint.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;BufferedImage bi = null;
try {
  bi = ImageIO.read(getClass().getResource(&quot;16x16.png&quot;));
}catch(IOException ioe) {
  ioe.printStackTrace();
}
texture = new TexturePaint(bi, new Rectangle(bi.getWidth(), bi.getHeight()));
panel = new JPanel() {
  @Override public void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setPaint(texture);
    g2.fillRect(0, 0, getWidth(), getHeight());
    super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;このサンプルでは、&lt;code&gt;BufferedImage&lt;/code&gt;から&lt;code&gt;TexturePaint&lt;/code&gt;を生成し、これを&lt;code&gt;Graphics2D#setPaint&lt;/code&gt;メソッドで設定してパネル全体を塗りつぶしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BackgroundImage.html&quot;&gt;JPanelの背景に画像を並べる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/texturepaint</link>
                <guid>http://terai.xrea.jp/swing/texturepaint</guid>
                <pubDate>2004-09-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JPanelの背景に画像を並べる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JPanel&lt;/code&gt;の背景に画像をタイル状に並べて表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BackgroundImage&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTH67VnIQI/AAAAAAAAAR8/JMqkIoI8n1Y/s800/BackgroundImage.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override public void paintComponent(Graphics g) {
  Dimension d = getSize();
  int w = bgimage.getIconWidth();
  int h = bgimage.getIconHeight();
  for(int i=0;i*w&amp;lt;d.width;i++) {
    for(int j=0;j*h&amp;lt;d.height;j++) {
      g.drawImage(bgimage.getImage(), i*w, j*h, w, h, this);
    }
  }
  super.paintComponent(g);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JPanel#setOpaque(false)&lt;/code&gt;と背景を描画しないように設定したパネルで、&lt;code&gt;JPanel#paintComponent(Graphics)&lt;/code&gt;メソッドをオーバーライドし、ここで&lt;code&gt;Image&lt;/code&gt;を順番に並べて描画しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TexturePaint.html&quot;&gt;TexturePaintを使って背景に画像を表示&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;同様に画像から&lt;code&gt;TexturePaint&lt;/code&gt;を作成してタイル状に並べて表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CentredBackgroundBorder.html&quot;&gt;JTextAreaの背景に画像を表示&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ひとつの画像を中央に表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/backgroundimage</link>
                <guid>http://terai.xrea.jp/swing/backgroundimage</guid>
                <pubDate>2004-09-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JWindowをマウスで移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JWindow&lt;/code&gt;などのタイトルバーのないフレームをマウスで移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DragWindow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTL8cG8F0I/AAAAAAAAAYY/vZfyqnyr6-I/s800/DragWindow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public void createSplashScreen(String path) {
  ImageIcon img = new ImageIcon(getClass().getResource(path));
  DragWindowListener dwl = new DragWindowListener();
  splashLabel = new JLabel(img);
  splashLabel.addMouseListener(dwl);
  splashLabel.addMouseMotionListener(dwl);
  splashScreen = new JWindow(getFrame());
  splashScreen.getContentPane().add(splashLabel);
  splashScreen.pack();
  splashScreen.setLocationRelativeTo(null);
}
class DragWindowListener extends MouseAdapter {
  private final Point startPt = new Point();
  //private Point  loc;
  private Window window;
  @Override public void mousePressed(MouseEvent me) {
    startPt.setLocation(me.getPoint());
  }
  @Override public void mouseDragged(MouseEvent me) {
    if(window==null) {
      window = SwingUtilities.windowForComponent(me.getComponent());
    }
    Point eventLocationOnScreen = me.getLocationOnScreen();
    window.setLocation(eventLocationOnScreen.x - startPt.x,
                       eventLocationOnScreen.y - startPt.y);
    //loc = window.getLocation(loc);
    //int x = loc.x - start.getX() + me.getX();
    //int y = loc.y - start.getY() + me.getY();
    //window.setLocation(x, y);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JWindow&lt;/code&gt;や、&lt;code&gt;setUndecorated(true)&lt;/code&gt;した&lt;code&gt;JFrame&lt;/code&gt;のようにタイトルバーのないフレームをマウスのドラッグで移動します。実際は&lt;code&gt;JWindow&lt;/code&gt;に、&lt;code&gt;MouseMotionListener&lt;/code&gt;などを実装したコンポーネントを追加しています。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;Splash Screen&lt;/code&gt;の&lt;code&gt;JLabel&lt;/code&gt;にリスナーを追加し、これを&lt;code&gt;JWindow&lt;/code&gt;に貼り付けてドラッグできるようにしています。&lt;/p&gt;

&lt;p&gt;次に開く&lt;code&gt;setUndecorated(true)&lt;/code&gt;した&lt;code&gt;JFrame&lt;/code&gt;では、青いラベル部分をドラッグすることが出来ます。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;マルチディスプレイなどで、別画面に移動できないバグ？を修正。

&lt;ul&gt;
&lt;li&gt;ただし、&lt;code&gt;Web Start&lt;/code&gt;の&lt;code&gt;SandBox&lt;/code&gt;内では、以前と同じく画面の外に移動することができない？

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JNLP&lt;/code&gt;のセキュリティに&lt;code&gt;all-permissions&lt;/code&gt;を設定する必要がある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Swing Tutorial&lt;/code&gt;の &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html#FrameDemo2&quot;&gt;FrameDemo2&lt;/a&gt;で試しても、同様？

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Look and feel decorated&lt;/code&gt;: 画面外に移動不可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Window system decorated&lt;/code&gt;: 画面外に移動可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InternalFrameTitleBar.html&quot;&gt;JInternalFrameをJFrameとして表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/CustomDecoratedFrame.html&quot;&gt;JFrameのタイトルバーなどの装飾を独自のものにカスタマイズする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;無しで&lt;code&gt;JFrame&lt;/code&gt;を直接つかんで移動させようと，ソース中の&lt;code&gt;DragWindowListener&lt;/code&gt;を&lt;code&gt;Frame&lt;/code&gt;の引数に指定して&lt;code&gt;addMouseListener()&lt;/code&gt;，&lt;code&gt;addMouseMotionListener()&lt;/code&gt;に追加してみたのですが，うまく動きませんでした。ラベルではなくフレームを直接つかんで移動させるにはどうすればよいのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-14 (木) 08:00:42

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frame.getContentPane().addMouseListener(dwl);...&lt;/code&gt;と、&lt;code&gt;ContentPane&lt;/code&gt;か&lt;code&gt;RootPane&lt;/code&gt;に&lt;code&gt;DragWindowListener&lt;/code&gt;を追加するか、以下のように&lt;code&gt;DragWindowListener&lt;/code&gt;を変更するのはどうでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-14 (木) 13:53:25&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class MainPanel{
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    DragWindowListener dwl = new DragWindowListener();
    JFrame frame = new JFrame();
    frame.setUndecorated(true);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.addMouseListener(dwl);
    frame.addMouseMotionListener(dwl);
    frame.setSize(320, 240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
class DragWindowListener extends MouseAdapter {
  private final Point startPt = new Point();
  private Window window;
  @Override public void mousePressed(MouseEvent me) {
    if(window==null) {
      Object o = me.getSource();
      if(o instanceof Window) {
        window = (Window)o;
      } else if(o instanceof JComponent) {
        window = SwingUtilities.windowForComponent(me.getComponent());
      }
    }
    startPt.setLocation(me.getPoint());
  }
  @Override public void mouseDragged(MouseEvent me) {
    if(window!=null) {
      Point eventLocationOnScreen = me.getLocationOnScreen();
      window.setLocation(eventLocationOnScreen.x - startPt.x,
                         eventLocationOnScreen.y - startPt.y);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;えーと、このソースは新たに&lt;code&gt;JPanel&lt;/code&gt;を継承してるんですね、という事は結局、&lt;code&gt;JFrame&lt;/code&gt;自体をマウスドラッグでつかむことが出来ないということなんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-15 (金) 11:08:52

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFrame&lt;/code&gt;の&lt;code&gt;ContentPane&lt;/code&gt;に&lt;code&gt;JPanel&lt;/code&gt;を継承したダミーコンポーネントをサンプルとして追加してるだけです。必要ないなら上記のように削除して(どこを削除したかはこのページ上にある「編集された箇所をみる」などで調べてください)調査してみるのがお手軽なのでオススメです。&lt;code&gt;JFrame&lt;/code&gt;に追加したリスナーで&lt;code&gt;JFrame&lt;/code&gt;の移動を行うことは可能ですが、本当に「&lt;code&gt;JFrame&lt;/code&gt;自体をマウスドラッグでつかむことが出来ない」かどうかについては、内部での処理を追っていないのでよく分かりません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-15 (金) 13:56:42&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;返信ありがとうございます，最初のサンプル中の&lt;code&gt;createAndShowGUI()&lt;/code&gt;内や，&lt;code&gt;showFrame()&lt;/code&gt;や，&lt;code&gt;start(JFrame frame)&lt;/code&gt;内などに，&lt;code&gt;DragWindowListener dwl = new DragWindowListener();&lt;/code&gt;と&lt;code&gt;frame.addMouseListener(dwl);&lt;/code&gt;と&lt;code&gt;frame.addMouseMotionListener(dwl);&lt;/code&gt;を入れて見たりしたのですが動作しないのですが，これは何故なんでしょうか？、何か必要な命令が足りないのでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-15 (金) 22:34:12

&lt;ul&gt;
&lt;li&gt;失礼、見落としてました。自分の環境(&lt;code&gt;JDK 1.7.0_17&lt;/code&gt;, &lt;code&gt;Windows 7&lt;/code&gt;)では、特に問題なく動作(&lt;code&gt;Exception&lt;/code&gt;なども出ていない)しています。環境と変更したソース自体をどこか(例えば https://gist.github.com/ とか)に投稿できますか？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-18 (月) 15:34:53&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;あっ、動作しないというのは「&lt;code&gt;JFrame&lt;/code&gt;自体をマウスドラッグでつかむことが出来ない」という意味で，通常の動作は問題ないです，上記のように追加変更して見たら，ラベルの部分だけでなく真ん中のフレーム部分を，マウスでドラッグしてつかんで移動させられるのかなと思ったのですが，実際つかんで移動させようとすると，&lt;code&gt;Exception in thread &amp;quot;AWT-EventQueue-0&amp;quot; java.lang.NullPointerException&lt;/code&gt;が出てきてつかめなかったので....。GitHubのアカウントは持ってないですｗ，環境は&lt;code&gt;JDK1.7.0_15&lt;/code&gt;,&lt;code&gt;win7&lt;/code&gt;,&lt;code&gt;64bit&lt;/code&gt;,ソースは上の三行を追加してみただけです。 --  2013-03-19 (火) 04:21:51

&lt;ul&gt;
&lt;li&gt;「上の三行を追加してみただけ」だと&lt;code&gt;DragWindowListener&lt;/code&gt;が新しくなっていない(コメントの&lt;code&gt;DragWindowListener&lt;/code&gt;になっていない)ので、&lt;code&gt;NullPointerException&lt;/code&gt;が発生していると考えて良さそうです(ソースコードの行とかが分からないので推測ですが)。&lt;code&gt;src.zip&lt;/code&gt;やリポジトリの&lt;code&gt;DragWindowListener&lt;/code&gt;も更新した(ついでに上記のコメントの&lt;code&gt;DragWindowListener&lt;/code&gt;もアップデート)ので、最新版で試してみてください。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-19 (火) 16:03:51&lt;/li&gt;
&lt;li&gt;余談: gistってアカウント必要でしたっけ？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-03-19 (火) 16:05:24&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;gistってアカウント無しで投稿出来るんですね，知りませんでしたm(__)m，再UPしていただいた&lt;code&gt;src.zip&lt;/code&gt;で上記の動作を確認できました。ありがとうございます。&lt;code&gt;DragWindowListener&lt;/code&gt;内部の追加されていたコードの意味が自分にはまだ理解できませんが，もっと勉強したいと思います。 -- &lt;a href=&quot;http://terai.xrea.jp/hshs.html&quot;&gt;hshs&lt;/a&gt; 2013-03-20 (水) 06:49:58&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dragwindow</link>
                <guid>http://terai.xrea.jp/swing/dragwindow</guid>
                <pubDate>2004-09-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameのIconを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;のタイトルバー左に表示されているアイコンを別の画像に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FrameIcon&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTNO_p95yI/AAAAAAAAAac/gl0vOOoKH14/s800/FrameIcon.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;MainPanel panel = new MainPanel();
URL url = panel.getClass().getResource(&quot;16x16.png&quot;);
JFrame frame = new JFrame();
frame.setIconImage(Toolkit.getDefaultToolkit().createImage(url));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame#setIconImage&lt;/code&gt;メソッドでアイコンを設定しています。&lt;/p&gt;

&lt;p&gt;サンプルでは&lt;a href=&quot;http://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt;を使って作成した&lt;code&gt;16x16&lt;/code&gt;の透過&lt;code&gt;PNG&lt;/code&gt;をアイコンとして使用しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;で試すとアイコンの表示が乱れる？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-29 (木) 17:57:16&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/frameicon</link>
                <guid>http://terai.xrea.jp/swing/frameicon</guid>
                <pubDate>2004-08-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableHeaderのフォントを変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableCellRenderer&lt;/code&gt;を使って、&lt;code&gt;JTable&lt;/code&gt;のヘッダが使用するフォントを変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/HeaderFont&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTNshbAJvI/AAAAAAAAAbM/xYo1iOQ9fxU/s800/HeaderFont.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class HeaderRenderer implements TableCellRenderer {
  private final Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 32);
  @Override public Component getTableCellRendererComponent(JTable t,
      Object val, boolean isS, boolean hasF, int row, int col) {
    TableCellRenderer r = t.getTableHeader().getDefaultRenderer();
    JLabel l = (JLabel)r.getTableCellRendererComponent(t, val, isS, hasF, row, col);
    l.setFont(font);
    return l;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;0&lt;/code&gt;番目のヘッダカラムだけフォントを変更しています。&lt;code&gt;JTableHeader&lt;/code&gt;のセルを修飾する場合も、&lt;code&gt;JTable&lt;/code&gt;中のセルの場合と同様に、&lt;code&gt;TableCellRenderer&lt;/code&gt;を実装したセルレンダラーを使用することができます。&lt;/p&gt;

&lt;p&gt;サンプルのセルレンダラーは、&lt;code&gt;TableCellRenderer#getTableCellRendererComponent&lt;/code&gt;メソッドの中で、委譲しているヘッダのデフォルトのレンダラーから描画に使用するコンポーネント(&lt;code&gt;JLabel&lt;/code&gt;)を取得し、そのラベルのフォントだけ&lt;code&gt;JLabel#setFont&lt;/code&gt;メソッドで置き換えています。&lt;/p&gt;

&lt;p&gt;同様の方法で、文字色、背景色、ボーダー、文字の中央揃え、右揃えなども変更することができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;字揃えを変更する場合の注意点: &lt;a href=&quot;http://terai.xrea.jp/Swing/HorizontalAlignmentHeaderRenderer.html&quot;&gt;JTableHeaderの字揃えを変更&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;コメントで&lt;a href=&quot;http://terai.xrea.jp/%E3%81%84%E3%81%A4%E3%82%82%E8%A6%8B%E3%81%A6%E3%81%BE%E3%81%99.html&quot;&gt;いつも見てます&lt;/a&gt;さんが指摘しているように、以下の様に&lt;code&gt;JTableHeader#setFont()&lt;/code&gt;メソッドを使用すると、全ヘッダカラムのフォントを指定することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.getTableHeader().setFont(font);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;すべての&lt;code&gt;JTable&lt;/code&gt;のヘッダを同じフォントや文字色で変更する場合は、以下のように&lt;code&gt;UIManager&lt;/code&gt;を使用する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;TableHeader.font&quot;, new FontUIResource(font));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FontChange.html&quot;&gt;使用するフォントの統一&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2009/02/27/default-table-header-cell-renderer/&quot;&gt;Default Table Header Cell Renderer Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HorizontalAlignmentHeaderRenderer.html&quot;&gt;JTableHeaderの字揃え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;これでいいのでは？ &lt;code&gt;JTableHeader header = TABLE.getTableHeader(); header.setFont(FONT);&lt;/code&gt; -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%84%E3%81%A4%E3%82%82%E8%A6%8B%E3%81%A6%E3%81%BE%E3%81%99.html&quot;&gt;いつも見てます&lt;/a&gt; 2011-11-24 (木) 06:02:05

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。解説などをすこし追加、修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-11-24 (木) 16:28:46&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/headerfont</link>
                <guid>http://terai.xrea.jp/swing/headerfont</guid>
                <pubDate>2004-08-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Wavファイルの演奏</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AudioSystem&lt;/code&gt;を使って、&lt;code&gt;AudioInputStream&lt;/code&gt;、&lt;code&gt;Clip&lt;/code&gt;(&lt;code&gt;Line&lt;/code&gt;)などを作成取得し、&lt;code&gt;wav&lt;/code&gt;ファイルを演奏します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Sound&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTTj2hYTjI/AAAAAAAAAko/8dQ-XleMZBc/s800/Sound.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;URL url = getClass().getResource(&quot;notice1.wav&quot;);
AudioInputStream sound = AudioSystem.getAudioInputStream(url);
AudioFormat format = sound.getFormat();
DataLine.Info di = new DataLine.Info(Clip.class, format);
Clip clip = (Clip) AudioSystem.getLine(di);
clip.open(sound);
clip.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;WAVE&lt;/code&gt;、&lt;code&gt;AU&lt;/code&gt;、&lt;code&gt;AIFF&lt;/code&gt;、&lt;code&gt;SND&lt;/code&gt;形式のサウンドファイルが演奏できるようです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.taitaistudio.com/wav/&quot;&gt;&amp;quot;taitai studio&amp;quot; フリーWav素材集&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;上記のサイトの&lt;code&gt;wav&lt;/code&gt;ファイルをサンプルとして利用しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MidiSystem.html&quot;&gt;MIDIファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Beep.html&quot;&gt;Beep音を鳴らす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AuditoryCues.html&quot;&gt;AuditoryCuesでイベント音を設定する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;こんなところからすみません。こちらのシステムの応用(というほどすごいものでもありませんが)を作ってもよろしいでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%AD%A6%E7%94%9FS.html&quot;&gt;学生S&lt;/a&gt; 2012-10-15 (月) 17:29:22&lt;/li&gt;
&lt;li&gt;使用したい箇所は、ソースプログラムの&lt;code&gt;loadAndPlayAudio&lt;/code&gt;というところになります。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%AD%A6%E7%94%9FS.html&quot;&gt;学生S&lt;/a&gt; 2012-10-15 (月) 17:34:40&lt;/li&gt;
&lt;li&gt;使用目的は、文化祭での展示です。配布なども希望があればする予定ですが、たぶんないかと。 -- &lt;a href=&quot;http://terai.xrea.jp/%E5%AD%A6%E7%94%9FS.html&quot;&gt;学生S&lt;/a&gt; 2012-10-15 (月) 17:53:04

&lt;ul&gt;
&lt;li&gt;こんばんは。&lt;code&gt;wav&lt;/code&gt;ファイルは参考リンク先の利用規約を参照してください。ソースコードは全く使用制限や許可を求める必要もないので(保証もないですし)、自由にどうぞ。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-10-15 (月) 18:53:34&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/sound</link>
                <guid>http://terai.xrea.jp/swing/sound</guid>
                <pubDate>2004-08-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの終了をキャンセル</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;を閉じる前に、本当に終了してよいか、終了をキャンセルするかなどを確認するダイアログを表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WindowClosing&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTWuSq18TI/AAAAAAAAAps/aCkiOWRqfDE/s800/WindowClosing.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static final String ASTERISK_TITLEBAR = &quot;unsaved&quot;;
private final JTextArea textarea = new JTextArea();
private final JButton saveButton = new JButton(&quot;save&quot;);
private final JFrame frame;
private final String title;
public MainPanel(final JFrame frame) {
  super(new BorderLayout());
  this.frame = frame;
  this.title = frame.getTitle();
  frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  addPropertyChangeListener(new PropertyChangeListener() {
    @Override public void propertyChange(PropertyChangeEvent e) {
      if(ASTERISK_TITLEBAR.equals(e.getPropertyName())) {
        Boolean unsaved = (Boolean)e.getNewValue();
        frame.setTitle((unsaved?&quot;* &quot;:&quot;&quot;)+title);
      }
    }
  });
  frame.addWindowListener(new WindowAdapter() {
    @Override public void windowClosing(WindowEvent e) {
      System.out.println(&quot;windowClosing&quot;);
      maybeExit();
    }
    @Override public void windowClosed(WindowEvent e) {
      System.out.println(&quot;windowClosed&quot;);
      System.exit(0); // webstart
    }
  });
  textarea.setText(&quot;Test Test Test&quot;);
  textarea.getDocument().addDocumentListener(new DocumentListener() {
    @Override public void insertUpdate(DocumentEvent e) {
      fireUnsavedFlagChangeEvent(true);
    }
    @Override public void removeUpdate(DocumentEvent e) {
      fireUnsavedFlagChangeEvent(true);
    }
    @Override public void changedUpdate(DocumentEvent e) {}
  });
  saveButton.setEnabled(false);
  saveButton.addActionListener(new ActionListener() {
    @Override public void actionPerformed(ActionEvent ae) {
      System.out.println(&quot;Save(dummy)&quot;);
      fireUnsavedFlagChangeEvent(false);
    }
  });
  add(new JScrollPane(textarea));
  Box box = Box.createHorizontalBox();
  box.add(Box.createHorizontalGlue());
  box.add(new JButton(new AbstractAction(&quot;exit&quot;) {
    @Override public void actionPerformed(ActionEvent e) {
      System.out.println(&quot;exit button&quot;);
      maybeExit();
    }
  }));
  box.add(Box.createHorizontalStrut(5));
  box.add(saveButton);
  add(box, BorderLayout.SOUTH);
  setPreferredSize(new Dimension(320, 240));
}

private void maybeExit() {
  if(title.equals(frame.getTitle())) {
    System.out.println(&quot;The document has already been saved,&quot;+
                       &quot; exit without doing anything.&quot;);
    frame.dispose();
    return;
  }
  java.awt.Toolkit.getDefaultToolkit().beep();
  Object[] options = { &quot;Save&quot;, &quot;Discard&quot;, &quot;Cancel&quot; };
  int retValue = JOptionPane.showOptionDialog(frame,
        &quot;&amp;lt;html&amp;gt;Save: Exit &amp;amp; Save Changes&amp;lt;br&amp;gt;&quot;+
           &quot;Discard: Exit &amp;amp; Discard Changes&amp;lt;br&amp;gt;&quot;+
            &quot;Cancel: Continue&amp;lt;/html&amp;gt;&quot;,
        &quot;Exit Options&quot;,
        JOptionPane.YES_NO_CANCEL_OPTION,
        JOptionPane.WARNING_MESSAGE, null, options, options[0]);
  if(retValue==JOptionPane.YES_OPTION) {
    System.out.println(&quot;exit&quot;);
    //boolean ret = dummyDocumentSaveMethod();
    //if(ret) { //saved and exit
    //  frame.dispose();
    //}else{ //error and cancel exit
    //  return;
    //}
    frame.dispose();
  }else if(retValue==JOptionPane.NO_OPTION) {
    System.out.println(&quot;Exit without save&quot;);
    frame.dispose();
  }else if(retValue==JOptionPane.CANCEL_OPTION) {
    System.out.println(&quot;Cancel exit&quot;);
  }
}
private void fireUnsavedFlagChangeEvent(boolean unsaved) {
  if(unsaved) {
    saveButton.setEnabled(true);
    firePropertyChange(ASTERISK_TITLEBAR, Boolean.FALSE, Boolean.TRUE);
  }else{
    saveButton.setEnabled(false);
    firePropertyChange(ASTERISK_TITLEBAR, Boolean.TRUE, Boolean.FALSE);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、アプリケーションの終了時に、ドキュメントが保存されているかどうかで処理を変更するために、ウィンドウイベントを受け取るためのリスナーを設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowAdapter#windowClosing(WindowEvent e)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;システムメニューでウィンドウを閉じようとしたときに呼び出されるリスナーのメソッド

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OS&lt;/code&gt;が&lt;code&gt;Windows&lt;/code&gt;なら、&lt;kbd&gt;Alt+F4&lt;/kbd&gt;キーを押す&lt;/li&gt;
&lt;li&gt;タイトルバー左上にあるアイコンをクリックし、ポップアップメニューで閉じるを選択&lt;/li&gt;
&lt;li&gt;タイトルバー右上の×ボタンをクリック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;や&lt;code&gt;JMenu&lt;/code&gt;などをクリックした時に、対象となる&lt;code&gt;frame&lt;/code&gt;の&lt;code&gt;windowClosing&lt;/code&gt;を呼び出したい場合は、&lt;code&gt;frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frame.dispose();&lt;/code&gt;では、このメソッドは呼び出されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowAdapter#windowClosed(WindowEvent e)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frame.dispose()&lt;/code&gt;で、ウィンドウがクローズされたときに呼び出されるリスナーのメソッド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windowClosing&lt;/code&gt;の後、自動的に&lt;code&gt;windowClosed&lt;/code&gt;が呼び出されるのは、&lt;code&gt;WindowConstants.DISPOSE_ON_CLOSE&lt;/code&gt;の場合のみ&lt;/li&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;Web Start&lt;/code&gt;から起動しても終了できるように、&lt;code&gt;frame.dispose()&lt;/code&gt;すれば必ず呼び出されるこのメソッド中で&lt;code&gt;System.exit(0);&lt;/code&gt;を使い、&lt;code&gt;JVM&lt;/code&gt;ごとシャットダウンしている

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Web Start&lt;/code&gt;でシャットダウンする必要性については、&lt;a href=&quot;http://www.pushing-pixels.org/?p=232&quot;&gt;When DISPOSE_ON_CLOSE met WebStart&lt;/a&gt;を参考に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFrame#setDefaultCloseOperation&lt;/code&gt;メソッドで、タイトルバー右上の×ボタンをクリック(=デフォルトの終了処理)し、&lt;code&gt;windowClosing&lt;/code&gt;が呼ばれた後(このため&lt;code&gt;windowClosing&lt;/code&gt;中で変更しても有効)の動作を設定できます(これらの動作については、&lt;code&gt;JFrame#processWindowEvent(WindowEvent)&lt;/code&gt;のソースを参照)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WindowConstants.DO_NOTHING_ON_CLOSE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windowClosing&lt;/code&gt;が呼ばれた後になにもしない(終了しない)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return;&lt;/code&gt;と同じ&lt;/li&gt;
&lt;li&gt;このサンプルでは、&lt;code&gt;WindowConstants.DO_NOTHING_ON_CLOSE&lt;/code&gt;を設定しているが、システムメニューでウィンドウを閉じても、下の&lt;code&gt;exit&lt;/code&gt;ボタンと同じ処理になるように、&lt;code&gt;windowClosing&lt;/code&gt;の中で終了処理を行うメソッド(&lt;code&gt;maybeExit()&lt;/code&gt;)を呼び出し、そこでドキュメントの保存状態によって&lt;code&gt;frame.dispose();&lt;/code&gt;を呼んでいる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowConstants.HIDE_ON_CLOSE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windowClosing&lt;/code&gt;が呼ばれた後でウィンドウは非表示になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setVisible(false);&lt;/code&gt;と同じ&lt;/li&gt;
&lt;li&gt;初期値&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowConstants.DISPOSE_ON_CLOSE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windowClosing&lt;/code&gt;が呼ばれた後でウィンドウは破棄される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispose();&lt;/code&gt;と同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispose()&lt;/code&gt;されるので、この後&lt;code&gt;windowClosed&lt;/code&gt;が呼び出される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WindowConstants.EXIT_ON_CLOSE&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windowClosing&lt;/code&gt;が呼ばれた後で&lt;code&gt;JVM&lt;/code&gt;がシャットダウンれさる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.exit(0);&lt;/code&gt;と同じ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispose()&lt;/code&gt;されないので、&lt;code&gt;windowClosed&lt;/code&gt;は呼び出されない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;テキストが変更された場合、タイトル文字列の先頭にアスタリスクを付けることで、保存状態の可視化と保持を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ドキュメントに文字列が追加されたとき、ソース側から&lt;code&gt;firePropertyChange&lt;/code&gt;などで、リスナーに変更をイベントで報告&lt;/li&gt;
&lt;li&gt;リスナー側ではこのイベントを受け、&lt;code&gt;JFrame&lt;/code&gt;のタイトルを変更&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/event/WindowListener.html&quot;&gt;WindowListener (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pushing-pixels.org/?p=232&quot;&gt;When DISPOSE_ON_CLOSE met WebStart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;私は以前　この終了をキャンセルするかどうかなどを確認するダイアログを作成したことがあります。あなたのソースコードは　参考のかいがあると思います。でも　ひとつの問題があるんですけど、&lt;code&gt;textarea&lt;/code&gt;に入力した文字列を削除する場合は　&lt;code&gt;JFrame&lt;/code&gt;のタイトルが変化されていません、どうですか？ -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%9D%E3%81%86%E3%81%8C%E3%81%84.html&quot;&gt;そうがい&lt;/a&gt; 2007-10-08 (Mon) 15:11:56

&lt;ul&gt;
&lt;li&gt;こんばんは。「&lt;code&gt;123&lt;/code&gt;-&amp;gt;&lt;code&gt;12345&lt;/code&gt;(&lt;code&gt;45&lt;/code&gt;追加)-&amp;gt;&lt;code&gt;123&lt;/code&gt;(&lt;code&gt;45&lt;/code&gt;削除)」と追加、削除をして元の状態に戻っても、タイトルが変化しないのは、仕様です。比較のコストが大きくなってしまいそうで嫌なので避けています。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-08 (月) 23:07:09&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変更をアスタリスクに変更、コードの構成を変更、スクリーンショット更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-22 (火) 21:35:25&lt;/li&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/lang/hook-design.html&quot;&gt;シャットダウンフック API の設計&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-11-25 (火) 11:25:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/windowclosing</link>
                <guid>http://terai.xrea.jp/swing/windowclosing</guid>
                <pubDate>2004-08-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの背景色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;を追加した&lt;code&gt;JViewport&lt;/code&gt;がセルで隠れていない部分の色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableBackground&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTUV7me60I/AAAAAAAAAl4/PQqRFaxI6XA/s800/TableBackground.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//JScrollPane scroll = new JScrollPane(table);
scroll.getViewport().add(table);
scroll.getViewport().setOpaque(true);
scroll.getViewport().setBackground(Color.WHITE);
//table.getParent().setBackground(Color.WHITE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;このページのタイトルなどで「&lt;code&gt;JTable&lt;/code&gt;の背景色」としている部分は、実際は&lt;code&gt;JTable&lt;/code&gt;の背景色ではなく、&lt;code&gt;JTable&lt;/code&gt;を追加した&lt;code&gt;JViewport&lt;/code&gt;がセルで隠れていない部分のことです。&lt;/p&gt;

&lt;p&gt;このため、上記のスクリーンショットのように色をつけたい場合は、&lt;code&gt;JTable&lt;/code&gt;自身の背景色を設定するのではなく、&lt;code&gt;JViewport&lt;/code&gt;の背景色を設定する必要があります。サンプルコードでは&lt;code&gt;JScrollPane&lt;/code&gt;から&lt;code&gt;JViewport&lt;/code&gt;を取得していますが、&lt;code&gt;JTable#getParent()&lt;/code&gt;メソッドからも&lt;code&gt;JViewport&lt;/code&gt;を取得することができます。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、背景色を不透明にするを選択して背景色を設定してやると、&lt;code&gt;JViewport&lt;/code&gt;の背景色が変更されます。&lt;/p&gt;

&lt;p&gt;セルの背景色を変更する場合は、&lt;code&gt;TableCellRenderer&lt;/code&gt;を使用(&lt;a href=&quot;http://terai.xrea.jp/Swing/StripeTable.html&quot;&gt;TableCellRendererでセルの背景色を変更&lt;/a&gt;)します。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;で追加された&lt;code&gt;JTable#setFillsViewportHeight&lt;/code&gt;メソッドを使用すると、&lt;code&gt;JTable&lt;/code&gt;の背景色を設定すれば、&lt;code&gt;JViewport&lt;/code&gt;の背景色を設定する必要はありません(参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/FillsViewportHeight.html&quot;&gt;JTable自体の高さを拡張&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FillsViewportHeight.html&quot;&gt;JTable自体の高さを拡張&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StripeTable.html&quot;&gt;TableCellRendererでセルの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowHeader.html&quot;&gt;JTableに行ヘッダを追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablebackground</link>
                <guid>http://terai.xrea.jp/swing/tablebackground</guid>
                <pubDate>2004-08-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneのタブを選択不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;のタブが選択できるかどうかを切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EnabledAt&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTMLdSGopI/AAAAAAAAAYw/aRU27uh4vuQ/s800/EnabledAt.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;checkbox.addItemListener(new ItemListener() {
  @Override public void itemStateChanged(ItemEvent e) {
    if(e.getStateChange()==ItemEvent.SELECTED) {
      tab.setEnabledAt(1, true);
    }else if(e.getStateChange()==ItemEvent.DESELECTED) {
      tab.setEnabledAt(1, false);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、チェックボックスを使って詳細設定タブが選択できるかどうかを切り替えることができます。&lt;/p&gt;

&lt;p&gt;タブが選択できるかどうかは、&lt;code&gt;JTabbedPane#setEnabledAt&lt;/code&gt;メソッドで設定します。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/enabledat</link>
                <guid>http://terai.xrea.jp/swing/enabledat</guid>
                <pubDate>2004-07-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JSpinnerを直接入力不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;のエディタを編集不可にして、ボタンでしか値を変更できないようにします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpinnerEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTTojxcMLI/AAAAAAAAAkw/BznS8i5Xfp4/s800/SpinnerEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;SpinnerNumberModel model = new SpinnerNumberModel(10, 0, 1000, 1);
JSpinner spinner = new JSpinner(model);
//UIManager.put(&quot;FormattedTextField.inactiveBackground&quot;, Color.RED);
JTextField field = ((JSpinner.NumberEditor)spinner.getEditor()).getTextField();
field.setEditable(false);
field.setBackground(UIManager.getColor(&quot;FormattedTextField.background&quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、「直接編集不可」の場合、上下ボタンで値を変更することはできますが、直接キーボードから値を入力することができなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;の編集可・不可を変更するのではなく、&lt;code&gt;JSpinner&lt;/code&gt;で使用するエディタから取得した&lt;code&gt;JTextField&lt;/code&gt;の編集可・不可を切り替えています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/spinnereditor</link>
                <guid>http://terai.xrea.jp/swing/spinnereditor</guid>
                <pubDate>2004-07-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセル幅で文字列を折り返し</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセル幅に合わせて文字列を折り返します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TableCellRenderer&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUbGVPssI/AAAAAAAAAmA/dPiTKpwf1Ro/s800/TableCellRenderer.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableColumnModel tcm = table.getColumnModel();
tcm.getColumn(1).setCellRenderer(new TestRenderer());
tcm.getColumn(2).setCellRenderer(new TextAreaCellRenderer());
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TextAreaCellRenderer extends JTextArea implements TableCellRenderer {
  TextAreaCellRenderer() {
    super();
    setLineWrap(true);
  }
  @Override public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected, boolean hasFocus,
        int row, int column) {
    if(isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    }else{
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    setText((value == null) ? &quot;&quot; : value.toString());
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class TestRenderer extends MyJLabel implements TableCellRenderer {
  public TestRenderer() {
    super();
    setOpaque(true);
    setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
  }
  @Override public Component getTableCellRendererComponent(
        JTable table, Object value, boolean isSelected, boolean hasFocus,
        int row, int column) {
    if(isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    }else{
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    //setHorizontalAlignment((value instanceof Number)?RIGHT:LEFT);
    setFont(table.getFont());
    setText((value == null) ? &quot;&quot; : value.toString());
    return this;
  }
}
class MyJLabel extends JLabel {
  private GlyphVector gvtext;
  public MyJLabel() {super();}
  @Override protected void paintComponent(Graphics g) {
    //super.paintComponent(g);
    Graphics2D g2 = (Graphics2D)g;
    //......
    g2.drawGlyphVector(gvtext,
                       getInsets().left,
                       getFont().getSize()+getInsets().top);
  }
  //......
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;デフォルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GlyphVector.html&quot;&gt;文字列の折り返し&lt;/a&gt;で作成した&lt;code&gt;JLabel&lt;/code&gt;を継承するレンダラーを使って、セル幅に合わせて折り返しています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt;列目

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea&lt;/code&gt;を継承する&lt;code&gt;TableCellRenderer&lt;/code&gt;を作成し、このレンダラーを&lt;code&gt;JTextArea#setLineWrap(boolean)&lt;/code&gt;メソッドを使って折り返しを有効にしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/StripeTable.html&quot;&gt;TableCellRendererでセルの背景色を変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoWrapTableCell.html&quot;&gt;JTableのセルの高さを自動調整&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;code&gt;TextAreaCellRenderer&lt;/code&gt;を、&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;で使ったとき、うまく余白を消す方法が分からない。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-05-08 (木) 18:25:18&lt;/li&gt;
&lt;li&gt;ここの方法だと行の高さも自動変更してくれます。&lt;a href=&quot;http://www.roseindia.net/javatutorials/JTable_in_JDK.shtml&quot;&gt;This JDK Tutorial shows you how to wrap text inside cells of a JTable&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%A8%E3%81%8A%E3%82%8A%E3%81%99%E3%81%8C%E3%82%8A.html&quot;&gt;とおりすがり&lt;/a&gt; 2010-12-10 (金) 10:12:40&lt;/li&gt;
&lt;li&gt;ご指摘ありがとうございます。この方法なら、&lt;a href=&quot;http://terai.xrea.jp/Swing/AutoWrapTableCell.html&quot;&gt;JTableのセルの高さを自動調整&lt;/a&gt;で発生しているバグも修正できそうです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-12-10 (金) 13:50:58

&lt;ul&gt;
&lt;li&gt;スクロールバーの表示・非表示が繰り返されるバグは修正できそうだけど、高さが更新されない場合がある(上記の&lt;code&gt;www.roseindia.net&lt;/code&gt;にある例だと、列幅をすこしずつ調整すると、&lt;code&gt;fox&lt;/code&gt;が表示されなくなる)方は難しそう？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-12-10 (金) 17:43:28&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tablecellrenderer</link>
                <guid>http://terai.xrea.jp/swing/tablecellrenderer</guid>
                <pubDate>2004-07-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Htmlタグで文字列を修飾</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Html&lt;/code&gt;タグを使って&lt;code&gt;Swing&lt;/code&gt;コンポーネントで使用する文字列を修飾します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Html&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTOA5i9OdI/AAAAAAAAAbs/1c_xZ6W4mdo/s800/Html.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public class TestModel extends DefaultTableModel {
  private static final String[] columnNames = {
    &quot;&amp;lt;html&amp;gt;&amp;lt;p&amp;gt;No.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;font color=blue&amp;gt;Number&amp;lt;/font&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/html&amp;gt;&quot;,
    &quot;&amp;lt;html&amp;gt;Name&amp;lt;p&amp;gt;&amp;lt;font color=\&quot;red\&quot;&amp;gt;etc.&amp;lt;/font&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/html&amp;gt;&quot;,
    &quot;&amp;lt;html&amp;gt;&amp;lt;font color=&#39;green&#39;&amp;gt;Comment&amp;lt;/font&amp;gt;&amp;lt;/html&amp;gt;&quot;
  };
  //......
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JTable&lt;/code&gt;のヘッダと&lt;code&gt;JTabbedPane&lt;/code&gt;のタブに&lt;code&gt;html&lt;/code&gt;タグを使用しています。&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;タグなどで簡単に改行するとこができます。&lt;/p&gt;

&lt;p&gt;整形式になっていなくても、ある程度なら大丈夫なようです。属性も、エスケープした&lt;code&gt;&amp;quot;&lt;/code&gt;や、&lt;code&gt;&amp;#39;&lt;/code&gt;で囲んでいなくても認識されます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/label.html&quot;&gt;How to Use Labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090608140218/http://java.sun.com/developer/JDCTechTips/2003/tt1210.html&quot;&gt;More About Handling Exceptions and Using HTML in Swing Components Tech Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/text/html/HTML.Tag.html&quot;&gt;HTML.Tag (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6670274&quot;&gt;Bug ID: 6670274 Incorrect tab titles for JTabbedPane if using HTML (BasicTabbedPanelUI problem)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-01-04 (月) 22:49:01&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class bug6670274x {
  private static void createGui() {
    JFrame frame = new JFrame();
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    final JTabbedPane pane = new JTabbedPane();
    pane.add(&quot;one&quot;, new JLabel(&quot;1&quot;));
    pane.add(&quot;&amp;lt;html&amp;gt;Title broken&amp;lt;BR&amp;gt;across 2 lines&amp;lt;/html&amp;gt;&quot;, new JLabel(&quot;2&quot;));
    pane.add(&quot;three&quot;, new JLabel(&quot;3&quot;));
    JPanel p = new JPanel(new BorderLayout());
    p.add(pane);
    p.add(new JButton(new AbstractAction(&quot;setTitleAt: 0&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        pane.setTitleAt(0, &quot;&amp;lt;html&amp;gt;setTitleAt:0&amp;lt;BR&amp;gt;xxxxx&amp;lt;/html&amp;gt;&quot;);
      }
    }), BorderLayout.NORTH);
    frame.add(p);
    frame.setSize(640, 200);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
  public static void main(String[] args) throws Exception {
    SwingUtilities.invokeLater(new Runnable() {
      @Override public void run() { bug6670274x.createGui(); }
    });
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.6.0_18&lt;/code&gt;, &lt;code&gt;JDK 1.7.0&lt;/code&gt;で修正済: &lt;a href=&quot;http://hg.openjdk.java.net/jdk7/swing/jdk/rev/82524b068f77&quot;&gt;6670274: Incorrect tab titles for JTabbedPane if using HTML (BasicTabbedPanelUI problem)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-05-30 (日) 00:26:16&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/html</link>
                <guid>http://terai.xrea.jp/swing/html</guid>
                <pubDate>2004-07-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルをダブルクリック</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルをダブルクリックして内容を表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DoubleClick&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTLv3qaXoI/AAAAAAAAAYE/aAnkonlteYo/s800/DoubleClick.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setAutoCreateRowSorter(true);
table.addMouseListener(new MouseAdapter() {
  @Override public void mouseClicked(MouseEvent me) {
    if(me.getClickCount()==2) {
      Point pt = me.getPoint();
      int idx = table.rowAtPoint(pt);
      if(idx&amp;gt;=0) {
        int row = table.convertRowIndexToModel(idx);
        String str = String.format(&quot;%s (%s)&quot;, model.getValueAt(row, 1),
                                   model.getValueAt(row, 2));
        JOptionPane.showMessageDialog(table, str, &quot;title&quot;,
                                      JOptionPane.INFORMATION_MESSAGE);
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、セルをマウスでダブルクリックするとダイアログが開くようになっています。各セルはクリックで編集状態になってしまわないように、すべて編集不可にしています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;行以外の場所をダブルクリックすると、&lt;code&gt;IndexOutOfBoundsException&lt;/code&gt;が発生する不具合を修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-02-02 (水) 19:09:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/doubleclick</link>
                <guid>http://terai.xrea.jp/swing/doubleclick</guid>
                <pubDate>2004-06-28T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JInternalFrameを一番手前に表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JLayeredPane&lt;/code&gt;を使って、常に一番手前に表示される&lt;code&gt;JInternalFrame&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LayeredPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTO8wLpaZI/AAAAAAAAAdM/mML3cGeQwrg/s800/LayeredPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JInternalFrame iframe = new JInternalFrame(&quot;AlwaysOnTop&quot;,
  true,  //resizable
  false, //closable
  true,  //maximizable
  true); //iconifiable
iframe.setSize(180, 180);
desktop.add(iframe, Integer.valueOf(JLayeredPane.MODAL_LAYER+1));
iframe.setVisible(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JDesktopPane&lt;/code&gt;は、&lt;code&gt;JLayeredPane&lt;/code&gt;を継承しているので、&lt;code&gt;JInternalFrame&lt;/code&gt;を追加するレイヤーを指定することができます。
このサンプルでは、タイトルが&lt;code&gt;AlwaysOnTop&lt;/code&gt;の&lt;code&gt;JInternalFrame&lt;/code&gt;を、&lt;code&gt;JLayeredPane.MODAL_LAYER&lt;/code&gt;の一つ上に設定し、他の&lt;code&gt;JInternalFrame&lt;/code&gt;(ここでは後から追加する&lt;code&gt;JInternalFrame&lt;/code&gt;)より常に手前に表示されるように設定しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ:&lt;a href=&quot;http://d.hatena.ne.jp/tori31001/20060901&quot;&gt;JInternalFrameは最初にアイコン化しておかないと位置が更新されない&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4110799&quot;&gt;Bug ID: 4110799 JInternalFrame icon position unchanged w/ resize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDK 1.5.0&lt;/code&gt;で&lt;code&gt;JFrame&lt;/code&gt;などは、&lt;code&gt;frame.setAlwaysOnTop(true)&lt;/code&gt;が使えるようになっています。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-10-08 (金) 17:00:59&lt;/li&gt;
&lt;li&gt;ありがとうございます。現在&lt;code&gt;GUI&lt;/code&gt;の作成をしていて、目下この情報を探していました。ありがとうございました -- &lt;a href=&quot;http://terai.xrea.jp/G.html&quot;&gt;G&lt;/a&gt; 2004-12-24 (金) 12:00:00

&lt;ul&gt;
&lt;li&gt;どういたしまして。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/layeredpane</link>
                <guid>http://terai.xrea.jp/swing/layeredpane</guid>
                <pubDate>2004-06-21T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのセルを編集不可にする</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のセルを編集不可にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CellEditor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTIgUbMHLI/AAAAAAAAAS4/v0jIwB26ie4/s800/CellEditor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(new DefaultTableModel() {
  @Override public boolean isCellEditable(int row, int column) {
    return false;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、以下の三種類の方法で、セルを編集不可にすることが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Override TableModel#isCellEditable(...) { return false; }&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;テーブルモデルの&lt;code&gt;TableModel#isCellEditable()&lt;/code&gt;メソッドが常に&lt;code&gt;false&lt;/code&gt;を返すようにオーバーライドして、すべてのセルを編集不可にしています。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setDefaultEditor(Object.class, null);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;各カラムにセルエディタを設定しない、かつ&lt;code&gt;Object.class&lt;/code&gt;が使用するデフォルトセルエディタを&lt;code&gt;null&lt;/code&gt;にした場合も、すべてのセルを編集不可にすることができます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setDefaultEditor(Object.class, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setEnabled(false)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#setEnabled(false)&lt;/code&gt;してしまえば、すべてのセルでの編集を禁止することができますが、セルや行の選択なども不可能になってしまいます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setEnabled(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PreventStartCellEditing.html&quot;&gt;JTableでキー入力によるセル編集開始を禁止する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;セルや行の選択をしないのであれば、&lt;code&gt;JTable#setFocusable(false)&lt;/code&gt;と&lt;code&gt;JTable#setCellSelectionEnabled(false)&lt;/code&gt;を合わせて利用することでも編集不可にできるようです。こちらは編集不可というより、文字通りフォーカスしないといった感じですが。 -- &lt;a href=&quot;http://terai.xrea.jp/shuna.html&quot;&gt;shuna&lt;/a&gt; 2009-10-23 (Fri) 03:12:58

&lt;ul&gt;
&lt;li&gt;なるほど。&lt;kbd&gt;F2&lt;/kbd&gt;も含めてキー入力で編集開始できなくなる(マウスクリックでは可能？)ようですね。&lt;code&gt;table.putClientProperty(&amp;quot;JTable.autoStartsEdit&amp;quot;, Boolean.FALSE);&lt;/code&gt;よりすこし強力といった所でしょうか。いつか、こちらから&lt;a href=&quot;http://terai.xrea.jp/Swing/PreventStartCellEditing.html&quot;&gt;JTableでキー入力によるセル編集開始を禁止する&lt;/a&gt;に移動するかも。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-23 (金) 22:07:44&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/celleditor</link>
                <guid>http://terai.xrea.jp/swing/celleditor</guid>
                <pubDate>2004-06-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Cursorを砂時計に変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;処理中、マウスカーソルを砂時計に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/WaitCursor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTWfYWDbsI/AAAAAAAAApU/rldJwQuVm-8/s800/WaitCursor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setGlassPane(new LockingGlassPane());
frame.getGlassPane().setVisible(false);
button.addActionListener(new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    frame.getGlassPane().setVisible(true);
    button.setEnabled(false);
    new SwingWorker() {
      @Override public Object doInBackground() {
        dummyLongTask();
        return &quot;Done&quot;;
      }
      @Override public void done() {
        frame.getGlassPane().setVisible(false);
        button.setEnabled(true);
      }
    }.execute();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LockingGlassPane extends JComponent {
  public LockingGlassPane() {
    setOpaque(false);
    setFocusTraversalPolicy(new DefaultFocusTraversalPolicy() {
      @Override public boolean accept(Component c) {return false;}
    });
    addKeyListener(new KeyAdapter() {});
    addMouseListener(new MouseAdapter() {});
    requestFocusInWindow();
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  }
  @Override public void setVisible(boolean flag) {
    super.setVisible(flag);
    setFocusTraversalPolicyProvider(flag);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、カーソルを砂時計に変更し、なにもしないマウスリスナーなどを設定した&lt;code&gt;GlassPane&lt;/code&gt;を&lt;code&gt;JFrame#setGlassPane()&lt;/code&gt;メソッドでフレームに追加しています。&lt;/p&gt;

&lt;p&gt;スタートボタンがクリックされて処理が継続している間は、この&lt;code&gt;GlassPane&lt;/code&gt;が有効になり、マウス、キー、フォーカス移動などのイベントが、すべて&lt;code&gt;GlassPane&lt;/code&gt;に奪われるため、フレーム内のコンポーネントをアクセス不可にすることが出来ます。&lt;/p&gt;

&lt;p&gt;このため、サンプルにある&lt;code&gt;setEnabled(true)&lt;/code&gt;な&lt;code&gt;JTextField&lt;/code&gt;の上にマウスポインタを移動しても、処理中はカーソルアイコンは砂時計のまま変化しません。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどによるフォーカス移動を禁止する場合は、&lt;code&gt;GlassPane&lt;/code&gt;に以下のような設定を行います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;どのコンポーネントにもフォーカス移動できない&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;setFocusTraversalPolicy(new DefaultFocusTraversalPolicy() {
  @Override public boolean accept(Component c) {return false;}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;または、&lt;code&gt;TraversalKeys&lt;/code&gt;を空にする

&lt;ul&gt;
&lt;li&gt;参考:&lt;a href=&quot;https://forums.oracle.com/thread/1375257&quot;&gt;Swing - How to display &amp;quot;Loading data...&amp;quot; to the user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Set&amp;lt;AWTKeyStroke&amp;gt; s = Collections.emptySet();
setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, s);
setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, s);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Mnemonic&lt;/code&gt;なども禁止したい場合は、以下のような&lt;code&gt;GlassPane&lt;/code&gt;を使用する方法があります(参考:&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/01/&quot;&gt;Disabling Swing Containers, the final solution?&lt;/a&gt;)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class LockingGlassPane extends JComponent {
  public LockingGlassPane() {
    setOpaque(false);
    super.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  }
  @Override public void setVisible(boolean isVisible) {
    boolean oldVisible = isVisible();
    super.setVisible(isVisible);
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null &amp;amp;&amp;amp; isVisible()!=oldVisible) {
      rootPane.getLayeredPane().setVisible(!isVisible);
    }
  }
  @Override public void paintComponent(Graphics g) {
    JRootPane rootPane = SwingUtilities.getRootPane(this);
    if(rootPane!=null) {
      // http://weblogs.java.net/blog/alexfromsun/archive/2008/01/
      // it is important to call print() instead of paint() here
      // because print() doesn&#39;t affect the frame&#39;s double buffer
      rootPane.getLayeredPane().print(g);
    }
    super.paintComponent(g);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;の場合、&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/07/disabled-glass-pane/&quot;&gt;Disabled Glass Pane « Java Tips Weblog&lt;/a&gt;のようにキー入力を無効にするキーリスナーを追加する方法もあります。&lt;/p&gt;

&lt;p&gt;この方法は、&lt;code&gt;JDK 1.5.0&lt;/code&gt;などの場合、&lt;code&gt;WindowsLookAndFeel&lt;/code&gt;で、&lt;kbd&gt;Alt&lt;/kbd&gt;キーを押すとメニューバーにフォーカスが移ることがあります。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.7.0&lt;/code&gt;の場合、&lt;code&gt;JLayer&lt;/code&gt;などを使用することで、特定のコンポーネントだけ入力不可にしてカーソルを砂時計にするといった設定が簡単に出来るようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DisableInputLayer.html&quot;&gt;JLayerで指定したコンポーネントへの入力を禁止&lt;/a&gt; に移動&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1375257&quot;&gt;Swing - How to display &amp;quot;Loading data...&amp;quot; to the user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weblogs.java.net/blog/alexfromsun/archive/2008/01/&quot;&gt;Disabling Swing Containers, the final solution?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ModalInternalFrame.html&quot;&gt;JInternalFrameをModalにする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/07/disabled-glass-pane/&quot;&gt;Disabled Glass Pane « Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーで状態遷移しないようにするため、なにもしない&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を追加しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-04-18 (月) 10:51:25&lt;/li&gt;
&lt;li&gt;相当悩みました。&lt;code&gt;JDialog&lt;/code&gt;だと同じことができないのは何でなんでしょうねぇ。。。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%8A%E3%82%8C.html&quot;&gt;おれ&lt;/a&gt; 2006-05-17 (水) 16:33:12

&lt;ul&gt;
&lt;li&gt;カーソルが変わらないのでしょうか? それともコンパイルエラーが出るとかでしょうか? -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-05-17 (水) 17:59:14&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;申し訳ない。カーソルが変わらないのだけれど、&lt;code&gt;1.5&lt;/code&gt;系でコンパイルするとだめみたい。同じソースでも&lt;code&gt;1.4&lt;/code&gt;系でコンパイルするとちゃんと変わる。&lt;code&gt;1.5&lt;/code&gt;でのバグかな。。。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%8A%E3%82%8C.html&quot;&gt;おれ&lt;/a&gt; 2006-05-18 (木) 12:58:11

&lt;ul&gt;
&lt;li&gt;追記。&lt;code&gt;JDialog&lt;/code&gt;のコンストラクタに&lt;code&gt;null&lt;/code&gt;を指定しているとこうなるようです。オーナフレームを指定してあげたら、&lt;code&gt;1.5&lt;/code&gt;でもきちんと出ました。お騒がせしました。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%8A%E3%82%8C.html&quot;&gt;おれ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;なるほど、&lt;code&gt;new JDialog((Frame)null);&lt;/code&gt;で試してみるとカーソルが変わらないですね。情報どうもでした。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-05-18 (木) 21:45:15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultFocusTraversalPolicy&lt;/code&gt;を使うように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-07-03 (火) 16:39:12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GlassPane&lt;/code&gt;で、&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を使わず、&lt;code&gt;print&lt;/code&gt;を使って&lt;code&gt;Mnemonic&lt;/code&gt;などをブロックするように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-15 (火) 17:14:09&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SwingWorker&lt;/code&gt;を使うように変更。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-26 (土) 23:21:11&lt;/li&gt;
&lt;li&gt;入力抑制であればAWTEventListenerを追加してInputEventをconsumeしちゃえば良いのでは・・・？ -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2014-01-14 (火) 08:32:09

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWTEventListener&lt;/code&gt;を使うのは便利な方法だと思いますが、セキュリティマネージャの設定によっては&lt;code&gt;SecurityException&lt;/code&gt;が発生したり、ドキュメントには「&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/Toolkit.html#addAWTEventListener%28java.awt.event.AWTEventListener,%20long%29&quot;&gt;アクセシビリティー、イベントの記録と再生、および診断トレースなどの特別な機能をサポートすることを主な目的としているので、アプリケーションの使用では推奨されません。&lt;/a&gt;」的な注意事項があるので、使い所を考慮する必要がありそうです。このサンプルのような場合で&lt;code&gt;InputEvent#consume()&lt;/code&gt;を使うなら&lt;code&gt;1.7&lt;/code&gt;以上で&lt;code&gt;JLayer&lt;/code&gt;を使用する方が無難かもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2014-01-14 (火) 14:13:39&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/waitcursor</link>
                <guid>http://terai.xrea.jp/swing/waitcursor</guid>
                <pubDate>2004-06-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのヘッダ入れ替えを禁止</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ドラッグ＆ドロップでのカラムヘッダ入れ替えを禁止します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Reordering&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTRr3AzfQI/AAAAAAAAAhk/mfgsIhuaEz0/s800/Reordering.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//列の入れ替えを禁止
table.getTableHeader().setReorderingAllowed(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTableHeader&lt;/code&gt;を取得し、これに&lt;code&gt;setReorderingAllowed(false)&lt;/code&gt;を指定して、列の入れ替えを禁止します。&lt;code&gt;JTable#setDragEnabled(...)&lt;/code&gt;は自動ドラッグ処理用のメソッドなので、列の入れ替えには関係ありません。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/reordering</link>
                <guid>http://terai.xrea.jp/swing/reordering</guid>
                <pubDate>2004-05-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableで行を選択</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;で、行を選択した場合の動作をテストします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RowSelection&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTSWRoWNRI/AAAAAAAAAio/X-jqAVKs3Bw/s800/RowSelection.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table = new JTable(model);
table.setAutoCreateRowSorter(true);
table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
  @Override public void valueChanged(ListSelectionEvent e) {
    if(e.getValueIsAdjusting()) return;
    int sc = table.getSelectedRowCount();
    changeInfoPanel((sc==1)?getInfo():&quot; &quot;);
  }
});
//...
private String getInfo() {
  int index = table.convertRowIndexToModel(table.getSelectedRow());
  String name = (String)model.getValueAt(index, 1);
  String comment = (String)model.getValueAt(index, 2);
  return name+&quot;( &quot;+comment+&quot; )&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;マウス、カーソルキー、&lt;kbd&gt;Tab&lt;/kbd&gt;キーでの選択状態の変更に対応するために、&lt;code&gt;JTable&lt;/code&gt;に&lt;code&gt;MouseListener&lt;/code&gt;リスナーを設定するのではなく、&lt;code&gt;JTable#getSelectionModel&lt;/code&gt;メソッドで&lt;code&gt;ListSelectionModel&lt;/code&gt;を参照し、このモデルに&lt;code&gt;ListSelectionListener&lt;/code&gt;リスナーを追加して利用します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ListSelectionEvent#getValueIsAdjusting()&lt;/code&gt;メソッドでイベントが重複処理を起こさないように制御しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ありがとう。助かります。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%94%E3%82%93.html&quot;&gt;ごん&lt;/a&gt; 2009-10-16 (金) 19:37:37

&lt;ul&gt;
&lt;li&gt;どうもです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-10-17 (土) 00:09:01&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どうもです。  -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%94%E3%82%93?.html&quot;&gt;ごん?&lt;/a&gt; 2011-08-02 (火) 15:31:26&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/rowselection</link>
                <guid>http://terai.xrea.jp/swing/rowselection</guid>
                <pubDate>2004-05-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameのサイズを固定</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;や&lt;code&gt;JDialog&lt;/code&gt;のサイズを固定し、変更不可にします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FixedSizeFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTM4ZlDyXI/AAAAAAAAAZ4/xXHwfOJP7p0/s800/FixedSizeFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setResizable(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame#setResizable&lt;/code&gt;メソッドで、フレームのサイズを変更不可にしています。タイトルバーの最大化ボタンなども選択できなくなります。&lt;/p&gt;

&lt;p&gt;リサイズの可不可を切り替えると、&lt;code&gt;LookAndFeel&lt;/code&gt;によっては装飾が変化して&lt;code&gt;JFrame&lt;/code&gt;自体のサイズが変化する場合があります。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;アイコン化ボタンを無効化する方法はないようですね。&lt;code&gt;JInternalFrame&lt;/code&gt;ならクローズも最大化もアイコン化も全部いじれるのに。 -- &lt;a href=&quot;http://terai.xrea.jp/%E3%81%95%E3%81%8F.html&quot;&gt;さく&lt;/a&gt; 2004-08-12 (木) 15:17:30&lt;/li&gt;
&lt;li&gt;なんだかなさそうですね。&lt;code&gt;JDialog&lt;/code&gt;を使うか、以下みたいにして誤魔化すか…、&lt;code&gt;LookAndFeel&lt;/code&gt;を自作すれば何とかなるのかな？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-08-12 (木) 17:01:45&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//XPだと「画面のプロパティ」「デザイン」「次のアニメーション効果を…」
//を無効にしないと、ちょっとかっこ悪い。
frame.addWindowListener(new WindowAdapter() {
  @Override public void windowIconified(WindowEvent e) {
    frame.setState(frame.NORMAL);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/library/j-iframe/&quot;&gt;Go state-of-the-art with IFrame&lt;/a&gt; も面白そうです。IBMだから&lt;code&gt;SWT&lt;/code&gt;使ってるのかなと思ったら&lt;code&gt;JFrame&lt;/code&gt;を継承して作られています。&lt;/del&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-08-12 (木) 18:31:16&lt;/li&gt;
&lt;li&gt;レイアウト変更したときに&lt;code&gt;setAlwaysOnTop&lt;/code&gt;が紛れ込んで、&lt;code&gt;Java Web Start&lt;/code&gt;でサンプルが起動できなくなっていた不具合を修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-03-14 (土) 17:44:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fixedsizeframe</link>
                <guid>http://terai.xrea.jp/swing/fixedsizeframe</guid>
                <pubDate>2004-05-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ToolTip表示の切り替え</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ツールチップ(ツールヒント)表示の有無を&lt;code&gt;ToolTipManager&lt;/code&gt;で切り替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ToolTipManager&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVq857V2I/AAAAAAAAAoA/yRQeWtxd-78/s800/ToolTipManager.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ActionListener al = new ActionListener() {
  @Override public void actionPerformed(ActionEvent e) {
    ToolTipManager.sharedInstance().setEnabled(onRadio.isSelected());
  }
};
onRadio.addActionListener(al);
offRadio.addActionListener(al);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンにツールチップを設定してあり、表示するかどうかを&lt;code&gt;ToolTipManager&lt;/code&gt;を使って切り替えています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ToolTipManager&lt;/code&gt;は、アプリケーション全体でのツールチップの表示時間、表示までの遅延時間などを設定することができます。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/tooltipmanager</link>
                <guid>http://terai.xrea.jp/swing/tooltipmanager</guid>
                <pubDate>2004-05-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行を追加、削除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;で行の追加と削除を行います。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/AddRow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTHaSWCCMI/AAAAAAAAARI/UM476TJWRdM/s800/AddRow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final DefaultTableModel model = new DefaultTableModel();
private final JTable table;

private void createActionPerformed(ActionEvent e) {
  int rc = model.getRowCount();
  model.addRow(new Object[] {rc, &quot;New name&quot;, &quot;&quot;});
  //追加された最終行までスクロール
  table.scrollRectToVisible(table.getCellRect(rc, 0, true));
}

private void deleteActionPerformed(ActionEvent e) {
  int[] selection = table.getSelectedRows();
  if(selection==null || selection.length&amp;lt;=0) return;
  for(int i=selection.length-1;i&amp;gt;=0;i--) {
    model.removeRow(table.convertRowIndexToModel(selection[i]));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ポップアップメニューを使って、行の追加と削除を行っています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;追加

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DefaultTableModel&lt;/code&gt;の&lt;code&gt;addRow&lt;/code&gt;メソッドを使用し、オブジェクトの配列を行として追加&lt;/li&gt;
&lt;li&gt;追加された行が表示されるように、&lt;code&gt;JTable#getCellRect(...)&lt;/code&gt;で行の領域を取得し、&lt;code&gt;JTable#scrollRectToVisible(...)&lt;/code&gt;でスクロール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;削除

&lt;ul&gt;
&lt;li&gt;複数行の削除に対応するために、&lt;code&gt;index&lt;/code&gt;の大きい方から削除する&lt;/li&gt;
&lt;li&gt;行のソートを行っている可能性があるので、&lt;code&gt;JTable#convertRowIndexToModel(int)&lt;/code&gt;で、&lt;code&gt;viewIndex&lt;/code&gt;を&lt;code&gt;modelIndex&lt;/code&gt;に変換してから&lt;code&gt;DefaultTableModel#removeRow(int modelIndex)&lt;/code&gt;を使って削除&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DeleteButtonInCell.html&quot;&gt;JTableのセルにJButtonを追加して行削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ClearTable.html&quot;&gt;JTableの行を全削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/SlideTableRows.html&quot;&gt;JTableで行の追加、削除アニメーション&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/addrow</link>
                <guid>http://terai.xrea.jp/swing/addrow</guid>
                <pubDate>2004-05-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Focusの移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を使って、&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどによるフォーカスの移動を制御します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FocusTraversal&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNE9BAwqI/AAAAAAAAAaM/57d2rzX7ixk/s800/FocusTraversal.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JButton nb = new JButton(&quot;NORTH&quot;);
final JButton sb = new JButton(&quot;SOUTH&quot;);
final JButton wb = new JButton(&quot;WEST&quot;);
final JButton eb = new JButton(&quot;EAST&quot;);
add(new JScrollPane(textarea));
add(nb, BorderLayout.NORTH);
add(sb, BorderLayout.SOUTH);
add(wb, BorderLayout.WEST);
add(eb, BorderLayout.EAST);
FocusTraversalPolicy policy = new FocusTraversalPolicy() {
  //private final List&amp;lt;Component&amp;gt; order = Arrays.asList(
  //    new Component[] {eb, wb, sb, nb});
  private final List&amp;lt;? extends Component&amp;gt; order = Arrays.asList(eb, wb, sb, nb);
  @Override public Component getFirstComponent(Container focusCycleRoot) {
    return order.get(0);
  }
  @Override public Component getLastComponent(Container focusCycleRoot) {
    return order.get(order.size()-1);
  }
  @Override public Component getComponentAfter(
      Container focusCycleRoot, Component aComponent) {
    int i = order.indexOf(aComponent);
    return order.get((i + 1) % order.size());
  }
  @Override public Component getComponentBefore(
      Container focusCycleRoot, Component aComponent) {
    int i = order.indexOf(aComponent);
    return order.get((i - 1 + order.size()) % order.size());
  }
  @Override public Component getDefaultComponent(Container focusCycleRoot) {
    return order.get(0);
  }
};
frame.setFocusTraversalPolicy(policy);
//setFocusTraversalPolicyProvider(true);
//setFocusTraversalPolicy(policy);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;を使用することで、キー入力によるフォーカスの移動を制御しています。また、ラジオボタンで以下のような&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;に切り替えることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JPanel&lt;/code&gt;のデフォルトは、&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実際のキー入力によるフォーカスの移動には、このパネルの親(&lt;code&gt;JFrame&lt;/code&gt;)に設定されている&lt;code&gt;FocusTraversalPolicy&lt;/code&gt;が使用される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Custom&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/java/library/j-mer07153/&quot;&gt;Merlinの魔術: フォーカス、フォーカス、フォーカス&lt;/a&gt;からの引用&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;/kbd&gt;キーを押していくと、東西南北の順でボタンのフォーカスが移動(&lt;kbd&gt;Shift+Tab&lt;/kbd&gt;キーでは逆順)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt;つの&lt;code&gt;JButton&lt;/code&gt;以外には、&lt;kbd&gt;Tab&lt;/kbd&gt;キーでフォーカスは移動しない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Layout&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;以下のように&lt;code&gt;LayoutFocusTraversalPolicy&lt;/code&gt;(&lt;code&gt;LayoutFocusTraversalPolicy&lt;/code&gt;は&lt;code&gt;Swing&lt;/code&gt;のデフォルト、&lt;code&gt;AWT&lt;/code&gt;のデフォルトは&lt;code&gt;DefaultFocusTraversalPolicy&lt;/code&gt;)の&lt;code&gt;accept&lt;/code&gt;メソッドをオーバーライドして、中央の&lt;code&gt;JTextArea&lt;/code&gt;(通常、&lt;code&gt;JTextArea&lt;/code&gt;などから次のコンポーネントにフォーカス移動する場合は、&lt;kbd&gt;Ctrl+Tab&lt;/kbd&gt;)が編集不可の場合は、これに&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどでフォーカスが移動しないように設定している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;frame.setFocusTraversalPolicy(new LayoutFocusTraversalPolicy() {
  @Override protected boolean accept(Component c) {
    if(c instanceof JTextComponent &amp;amp;&amp;amp; !((JTextComponent)c).isEditable()) {
      return false;
    }else{
      return super.accept(c);
    }
    //return (c==textarea)?false:super.accept(c);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/java/awt/doc-files/FocusSpec.html&quot;&gt;AWT フォーカスサブシステム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/java/library/j-mer07153/&quot;&gt;Merlinの魔術: フォーカス、フォーカス、フォーカス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DefaultFocus.html&quot;&gt;Windowを開いたときのフォーカスを指定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FocusTraversalKeys.html&quot;&gt;FocusTraversalKeysに矢印キーを追加してフォーカス移動&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/focustraversal</link>
                <guid>http://terai.xrea.jp/swing/focustraversal</guid>
                <pubDate>2004-04-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TimeZoneによる日付表示の変換</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TimeZone&lt;/code&gt;などを使って、日付の表示を変換します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TimeZone&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTVW5Ljb9I/AAAAAAAAAng/mMDH4E_v9ZQ/s800/TimeZone.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final SimpleDateFormat format =
  new SimpleDateFormat(&quot;EEE, d MMM yyyy HH:mm:ss Z&quot;, Locale.US);
final DateFormat df = DateFormat.getDateTimeInstance();
//field.setText(&quot;Mon, 19 Apr 2004 16:31:41 +0900&quot;);
outf.setEditable(false);
df.setTimeZone(TimeZone.getTimeZone(&quot;JST&quot;));
JButton button = new JButton(new AbstractAction(&quot;Convert&quot;) {
  @Override public void actionPerformed(ActionEvent e) {
    String str = field.getText().trim();
    ParsePosition pp = new ParsePosition(0);
    Date date = format.parse(str, pp);
    outf.setText((date!=null)?df.format(date):&quot;error&quot;);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルは、メールなどの日付文字列を、一旦&lt;code&gt;Date&lt;/code&gt;に変換し、デフォルトロケールのフォーマットスタイルに変換しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Java 1.7.0&lt;/code&gt;から、タイムゾーンに&lt;code&gt;X&lt;/code&gt;で&lt;code&gt;ISO 8601&lt;/code&gt;形式が使用できるようになった

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;: &lt;code&gt;+09&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XX&lt;/code&gt;: &lt;code&gt;+0900&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XXX&lt;/code&gt;: &lt;code&gt;+09:00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;DateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ssXXX&quot;);
System.out.println(&quot;pubdate: &quot; + format.format(new Date()));
//pubdate: 2014-09-08T00:05:45+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/8/api/java/text/SimpleDateFormat.html&quot;&gt;SimpleDateFormat (Java Platform SE 8 )&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/timezone</link>
                <guid>http://terai.xrea.jp/swing/timezone</guid>
                <pubDate>2004-04-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelの文字列を点滅させる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使って文字列が点滅する&lt;code&gt;JLabel&lt;/code&gt;を作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BlinkLabel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTIHWUuKaI/AAAAAAAAASQ/gfrtJsq0Xck/s800/BlinkLabel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JLabel label = new JLabel();
Timer timer = new Timer(600, new ActionListener() {
  private boolean flg = true;
  @Override public void actionPerformed(ActionEvent e) {
    flg ^= true;
    label.setText(flg ? &quot;!!!Warning!!!&quot; : &quot;&quot;);
  }
});
timer.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;javax.swing.Timer&lt;/code&gt;を使って、ラベルのテキスト文字列と空文字列を交互に表示しています。点滅の間隔や、文字列の色を変えたりして実験してみてください。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Timer&lt;/code&gt;があいまいなら&lt;code&gt;javax.swing.Timer&lt;/code&gt;で解決 -- &lt;a href=&quot;http://terai.xrea.jp/666.html&quot;&gt;666&lt;/a&gt; 2007-06-22 (金) 11:51:42

&lt;ul&gt;
&lt;li&gt;ですね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-06-26 (火) 14:53:53&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/blinklabel</link>
                <guid>http://terai.xrea.jp/swing/blinklabel</guid>
                <pubDate>2004-04-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneのスクロールを同期</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;2&lt;/code&gt;つの&lt;code&gt;JScrollPane&lt;/code&gt;のスクロールを同期します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SynchronizedScroll&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTT_c3UmrI/AAAAAAAAAlU/adQEhxZ2FXc/s800/SynchronizedScroll.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ChangeListener cl = new ChangeListener() {
  boolean adjflg = false;
  @Override public void stateChanged(ChangeEvent e) {
    JViewport src = null;
    JViewport tgt = null;
    if(e.getSource()==sp1.getViewport()) {
      src = sp1.getViewport();
      tgt = sp2.getViewport();
    }else if(e.getSource()==sp2.getViewport()) {
      src = sp2.getViewport();
      tgt = sp1.getViewport();
    }
    if(adjflg || tgt==null || src==null) return;
    adjflg = true;
    Dimension dm1 = src.getViewSize();
    Dimension sz1 = src.getSize();
    Point     pt1 = src.getViewPosition();
    Dimension dm2 = tgt.getViewSize();
    Dimension sz2 = tgt.getSize();
    Point     pt2 = tgt.getViewPosition();
    double d;
    d = pt1.getY()/(dm1.getHeight()-sz1.getHeight())
                  *(dm2.getHeight()-sz2.getHeight());
    pt1.y = (int)d;
    d = pt1.getX()/(dm1.getWidth()-sz1.getWidth())
                  *(dm2.getWidth()-sz2.getWidth());
    pt1.x = (int)d;
    tgt.setViewPosition(pt1);
    adjflg = false;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一方のスクロールバーを移動させると、他方も同程度移動するように設定した&lt;code&gt;ChangeListener&lt;/code&gt;を使用しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;内部コンポーネントのサイズが等しい場合は、それぞれの&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;BoundedRangeModel&lt;/code&gt;を共有するだけで、スクロールを同期することができます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;sp2.getVerticalScrollBar().setModel(sp1.getVerticalScrollBar().getModel());
sp2.getHorizontalScrollBar().setModel(sp1.getHorizontalScrollBar().getModel());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1502596&quot;&gt;Swing (Archive) - link to scrollbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1484489&quot;&gt;Swing (Archive) - Synchronizing scrollbars two scroll bars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/synchronizedscroll</link>
                <guid>http://terai.xrea.jp/swing/synchronizedscroll</guid>
                <pubDate>2004-04-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Separatorのグラデーション</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;グラデーションするセパレータを作ってみます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Gradient&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNgUSWNnI/AAAAAAAAAa4/92SfYb-Z3zs/s800/Gradient.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class GradientSeparatorUI extends BasicSeparatorUI{
  public static ComponentUI createUI(JComponent c) {
    return new GradientSeparatorUI();
  }
  private Color bgc,ssc,shc;
  private void updateColors(JComponent c) {
    Color uc = UIManager.getColor(&quot;Panel.background&quot;);
    bgc = (uc instanceof ColorUIResource)? uc:c.getBackground();
    uc = UIManager.getColor(&quot;Separator.shadow&quot;);
    ssc = (uc instanceof ColorUIResource)? uc:c.getBackground().brighter();
    uc = UIManager.getColor(&quot;Separator.highlight&quot;);
    shc = (uc instanceof ColorUIResource)? uc:c.getBackground().darker();
  }
  @Override public void installUI(JComponent c) {
    super.installUI(c);
    updateColors(c);
  }
  @Override public void paint(Graphics g, JComponent c) {
    Graphics2D g2 = (Graphics2D)g;
    Dimension s = c.getSize();
    if(((JSeparator)c).getOrientation()==JSeparator.VERTICAL) {
      g2.setPaint(new GradientPaint(0, 0, ssc, 0, s.height, bgc, true));
      g2.fillRect(0, 0, 1, s.height);
      g2.setPaint(new GradientPaint(0, 0, shc, 0, s.height, bgc, true));
      g2.fillRect(1, 0, 1, s.height);
    }else{
      g2.setPaint(new GradientPaint(0, 0, ssc, s.width, 0, bgc, true));
      g2.fillRect(0, 0, s.width, 1);
      g2.setPaint(new GradientPaint(0, 0, shc, s.width, 0, bgc, true));
      g2.fillRect(0, 1, s.width, 1);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは下の&lt;code&gt;JSeparator&lt;/code&gt;の描画に&lt;code&gt;GradientPaint&lt;/code&gt;を使用し、グラデーションさせています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JSeparator&lt;/code&gt;に&lt;code&gt;setBorder()&lt;/code&gt;すると、セパレータが見えなくなる場合があるのですこし注意が必要です。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JSeparator.VERTICAL&lt;/code&gt;に対応。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-04-11 (金) 14:32:04&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/gradient</link>
                <guid>http://terai.xrea.jp/swing/gradient</guid>
                <pubDate>2004-03-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SpringLayoutの使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;SpringLayout&lt;/code&gt;を使用して、各ラベルのサイズとパネルからの距離が一定の比率になるような配置を指定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SpringLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTwX9UR-I/AAAAAAAAAk8/TLNZjmIrPnw/s800/SpringLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private static void setScaleAndAdd(JComponent parent, SpringLayout layout, JComponent child,
                                   float sx, float sy, float sw, float sh) {
  Spring panelw = layout.getConstraint(SpringLayout.WIDTH,  parent);
  Spring panelh = layout.getConstraint(SpringLayout.HEIGHT, parent);

  SpringLayout.Constraints c = layout.getConstraints(child);
  c.setX(Spring.scale(panelw, sx));
  c.setY(Spring.scale(panelh, sy));
  c.setWidth(Spring.scale(panelw,  sw));
  c.setHeight(Spring.scale(panelh, sh));

  parent.add(child);
}
//public void initLayout() {
//  SpringLayout layout = new SpringLayout();
//  Insets i = panel.getInsets();
//  int w = panel.getWidth()  - i.left - i.right;
//  int h = panel.getHeight() - i.top  - i.bottom;
//
//  l1.setPreferredSize(new Dimension( w*90/100, h*55/100 ) );
//  l2.setPreferredSize(new Dimension( w*40/100, h*30/100 ) );
//
//  layout.putConstraint(SpringLayout.WEST,  l1, w*5/100,
//                       SpringLayout.WEST,  panel);
//  layout.putConstraint(SpringLayout.NORTH, l1, h*5/100,
//                       SpringLayout.NORTH, panel);
//  layout.putConstraint(SpringLayout.WEST,  l2, w*50/100,
//                       SpringLayout.WEST,  panel);
//  //layout.putConstraint(SpringLayout.WEST, l2, 0, SpringLayout.WEST, l1);
//  layout.putConstraint(SpringLayout.SOUTH, l2, -h*5/100,
//                       SpringLayout.SOUTH, panel);
//
//  panel.setLayout(layout);
//  panel.revalidate();
//}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;SpringLayout&lt;/code&gt;を使って&lt;code&gt;2&lt;/code&gt;つの&lt;code&gt;JComponent&lt;/code&gt;をパネル内にレイアウトしています。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;パネルのサイズが変更されるたびに、各ラベルのサイズとパネルからの距離が一定の割合になるように設定し直しています(ただしパネルの余白は無視)。&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;幅はパネルの&lt;code&gt;90%&lt;/code&gt;、高さは&lt;code&gt;55%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左上座標は、親パネルの左上から&lt;code&gt;x&lt;/code&gt;:&lt;code&gt;5%&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;:&lt;code&gt;5%&lt;/code&gt;の位置&lt;/li&gt;
&lt;li&gt;&lt;del&gt;パネルと自身の&lt;code&gt;WEST&lt;/code&gt;からの距離&lt;code&gt;5%&lt;/code&gt;、パネルと自身の&lt;code&gt;NORTH&lt;/code&gt;からの距離&lt;code&gt;5%&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;幅はパネルの&lt;code&gt;40%&lt;/code&gt;、高さは&lt;code&gt;30%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左上座標は、親パネルの左上から&lt;code&gt;x&lt;/code&gt;:&lt;code&gt;50%&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;:&lt;code&gt;65%&lt;/code&gt;の位置&lt;/li&gt;
&lt;li&gt;&lt;del&gt;パネルと自身のWESTからの距離&lt;code&gt;50%&lt;/code&gt;、パネルと自身の&lt;code&gt;SOUTH&lt;/code&gt;からの距離&lt;code&gt;-5%&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;del&gt;&lt;code&gt;SpringLayout&lt;/code&gt;では原点は左上で、右方向、下方向に正の値を取る為、例えばパネルの南辺からコンポーネントの南辺までの距離を指定する場合は、&lt;code&gt;layout.putConstraint&lt;/code&gt;する際にマイナスの値を指定する必要があります。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;距離を&lt;code&gt;0&lt;/code&gt;にすることも可能で、例えばサンプルコードのコメントアウトされたような指定をすると、ラベル&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt;を左揃えで並べることができます。&lt;/del&gt;&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以前の内容は、&lt;a href=&quot;http://terai.xrea.jp/Swing/ComponentList.html&quot;&gt;BoxLayoutでリスト状に並べる&lt;/a&gt;に移動しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-15 (木) 19:40:17&lt;/li&gt;
&lt;li&gt;リスナーを使わなくても次ので出来ました。 --  2010-09-02 (木) 02:41:13&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;panel.setLayout(layout);
Spring panelw = layout.getConstraint(SpringLayout.WIDTH, panel);
layout.getConstraints(name).setWidth(Spring.scale(panelw, 0.9f));
layout.getConstraints(name).setX(Spring.scale(panelw, 0.05f));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。こんなメソッドがあったんですね。サンプルを全体的に修正してみました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-09-02 (木) 07:01:18&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/springlayout</link>
                <guid>http://terai.xrea.jp/swing/springlayout</guid>
                <pubDate>2004-03-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JDialogをESCキーで閉じる</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;キーを押すと閉じる&lt;code&gt;JDialog&lt;/code&gt;を作成します。大部分を&lt;a href=&quot;https://forums.oracle.com/thread/1488562&quot;&gt;Swing (Archive) - JDialog says ESC key is already registered--where?&lt;/a&gt;から、そのまま引用しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/InputMap&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTOj22ObUI/AAAAAAAAAck/b5izKCmGkHk/s800/InputMap.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final JDialog dialog = new JDialog(frame, &quot;title&quot;, true);
AbstractAction act = new AbstractAction() {
  @Override public void actionPerformed(ActionEvent e) {
    dialog.dispose();
  }
};
InputMap imap = dialog.getRootPane().getInputMap(
  JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), &quot;close-it&quot;);
dialog.getRootPane().getActionMap().put(&quot;close-it&quot;, act);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JOptionPane.showMessageDialog()&lt;/code&gt;メソッドで作成したダイアログは、&lt;kbd&gt;Esc&lt;/kbd&gt;キーを押すと閉じますが、&lt;code&gt;JDialog&lt;/code&gt;の場合は閉じてくれません。そこで&lt;code&gt;JDialog&lt;/code&gt;でも&lt;kbd&gt;Esc&lt;/kbd&gt;キーを押すと閉じるように&lt;code&gt;InputMap&lt;/code&gt;などを使って設定します。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1488562&quot;&gt;Swing (Archive) - JDialog says ESC key is already registered--where?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1490398&quot;&gt;Swing (Archive) - ESC Key to Close a JFrame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/KeyBinding.html&quot;&gt;JComponentのKeyBinding一覧を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://www.javaroad.jp/bbs/answer.jsp?q_id=20100528123134643&quot;&gt;Javaの道＞掲示板(JDialogが最小化されてしまう)&lt;/a&gt;。 ~~ &lt;code&gt;JDK 1.7.0&lt;/code&gt;だと、&lt;code&gt;JDialog&lt;/code&gt;などの&lt;code&gt;TitleBar&lt;/code&gt;を右クリックすると、「&lt;code&gt;Java Result: -1073741819&lt;/code&gt;」で落ちる？~~ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-06-17 (木) 17:28:06

&lt;ul&gt;
&lt;li&gt;かなり前から再現しないのに消し忘れていた。 &lt;code&gt;Nvidia&lt;/code&gt;のドライバのせいだった？ &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6458746&quot;&gt;Bug ID: JDK-6458746 OGL: mustang b94 doesn&amp;#39;t work correctly with JDialog (Nvidia, 91.31, Windows)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-09-13 (金) 20:45:00&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/inputmap</link>
                <guid>http://terai.xrea.jp/swing/inputmap</guid>
                <pubDate>2004-03-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MouseWheelを使った値の増減</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JSpinner&lt;/code&gt;や&lt;code&gt;JSlider&lt;/code&gt;の値をマウスホイールを使って変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MouseWheel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTQH9EVaHI/AAAAAAAAAfE/Dv-UnuISmXM/s800/MouseWheel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;spinner.addMouseWheelListener(new MouseWheelListener() {
  @Override public void mouseWheelMoved(MouseWheelEvent e) {
    JSpinner source = (JSpinner)e.getSource();
    SpinnerNumberModel model = (SpinnerNumberModel)source.getModel();
    Integer oldValue = (Integer)source.getValue();
    int newValue = oldValue.intValue()
                  -e.getWheelRotation()*model.getStepSize().intValue();
    int max = ((Integer)model.getMaximum()).intValue(); //1000
    int min = ((Integer)model.getMinimum()).intValue(); //0
    if(min&amp;lt;=newValue &amp;amp;&amp;amp; newValue&amp;lt;=max) {
      source.setValue(newValue);
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JSpinner&lt;/code&gt;や&lt;code&gt;JSlider&lt;/code&gt;上でマウスホイールを回転させると値が変化します。&lt;code&gt;e.getWheelRotation()&lt;/code&gt;の値は、ホイールの回転が下方向の場合は増加、上方向は減少になります。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/mousewheel</link>
                <guid>http://terai.xrea.jp/swing/mousewheel</guid>
                <pubDate>2004-03-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JLabelの文字列を折り返し</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GlyphVector&lt;/code&gt;を使って、ラベルの文字列を折り返して表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GlyphVector&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNbQw2SHI/AAAAAAAAAaw/AApL8KKml8E/s800/GlyphVector.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WrappedLabel extends JLabel {
  private GlyphVector gvtext;
  public WrappedLabel() {
    this(null);
  }
  public WrappedLabel(String str) {
    super(str);
  }
  private int prevwidth = -1;
  @Override public void doLayout() {
    Insets i = getInsets();
    int w = getWidth()-i.left-i.right;
    if(w!=prevwidth) {
      Font font = getFont();
      FontMetrics fm = getFontMetrics(font);
      FontRenderContext frc = fm.getFontRenderContext();
      gvtext = getWrappedGlyphVector(getText(), w, font, frc);
      prevwidth = w;
    }
    super.doLayout();
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g;
    if(gvtext!=null) {
      Insets i = getInsets();
      g2.setPaint(Color.RED);
      g2.drawGlyphVector(gvtext, i.left, getFont().getSize()+i.top);
    }else{
      super.paintComponent(g);
    }
  }
  private GlyphVector getWrappedGlyphVector(
      String str, float width, Font font, FontRenderContext frc) {
    Point2D gmPos  = new Point2D.Double(0.0d, 0.0d);
    GlyphVector gv   = font.createGlyphVector(frc, str);
    float lineheight = (float) (gv.getLogicalBounds().getHeight());
    float xpos     = 0.0f;
    float advance  = 0.0f;
    int   lineCount  = 0;
    GlyphMetrics gm;
    for(int i=0;i&amp;lt;gv.getNumGlyphs();i++) {
      gm = gv.getGlyphMetrics(i);
      advance = gm.getAdvance();
      if(xpos&amp;lt;width &amp;amp;&amp;amp; width&amp;lt;=xpos+advance) {
        lineCount++;
        xpos = 0.0f;
      }
      gmPos.setLocation(xpos, lineheight*lineCount);
      gv.setGlyphPosition(i, gmPos);
      xpos = xpos + advance;
    }
    return gv;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上: &lt;code&gt;JLabel&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトの&lt;code&gt;JLabel&lt;/code&gt;で右側が&lt;code&gt;...&lt;/code&gt;で省略されている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;中: &lt;code&gt;GlyphVector&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;コンポーネントのサイズが変更されるたびに&lt;code&gt;GlyphVector&lt;/code&gt;を更新して、文字列の折り返しを行っている&lt;/li&gt;
&lt;li&gt;欧文などで合字(リガチャ)がある場合は、&lt;code&gt;GlyphVector gv = font.createGlyphVector(frc, str);&lt;/code&gt;ではなく、&lt;a href=&quot;https://forums.oracle.com/thread/1289266&quot;&gt;GlyphVector bounds and kerning, ligatures | Oracle Forums&lt;/a&gt;のように、&lt;code&gt;char[] chars = text.toCharArray(); GlyphVector gv = font.layoutGlyphVector(frc, chars, 0, chars.length, Font.LAYOUT_LEFT_TO_RIGHT);&lt;/code&gt;とした方が良いかもしれない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;下: &lt;code&gt;JTextArea&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JLabel&lt;/code&gt;の&lt;code&gt;Font&lt;/code&gt;と背景色を同じものに設定した編集不可の&lt;code&gt;JTextArea&lt;/code&gt;を&lt;code&gt;setLineWrap(true);&lt;/code&gt;として、文字列の折り返しを行っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;ラベルの幅ではなく、任意の場所で文字列を改行したい場合は、以下のように&lt;code&gt;JLabel&lt;/code&gt;に&lt;code&gt;html&lt;/code&gt;の&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;タグを利用したり、編集不可にした&lt;code&gt;JTextPane&lt;/code&gt;、&lt;code&gt;JTextArea&lt;/code&gt;などを使用します(参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/MultiLineLabel.html&quot;&gt;JTextPane、JLabelなどで複数行を表示&lt;/a&gt;)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;label.setText(&quot;&amp;lt;html&amp;gt;文字列を適当なところで&amp;lt;br /&amp;gt;折り返す。&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;AttributedString&lt;/code&gt;と&lt;code&gt;LineBreakMeasurer&lt;/code&gt;を使って、文字列の折り返しを描画する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class WrappingLabel extends JLabel {
  public WrappingLabel(String text) {
    super(text);
  }
  @Override protected void paintComponent(Graphics g) {
    Graphics2D g2 = (Graphics2D)g.create();
    g2.setPaint(getForeground());
    Insets i = getInsets();
    float x = i.left;
    float y = i.top;
    int w = getWidth() - i.left - i.right;
    AttributedString as = new AttributedString(getText());
    as.addAttribute(TextAttribute.FONT, getFont());
    AttributedCharacterIterator aci = as.getIterator();
    FontRenderContext frc = g2.getFontRenderContext();
    LineBreakMeasurer lbm = new LineBreakMeasurer(aci, frc);
    while(lbm.getPosition() &amp;lt; aci.getEndIndex()) {
      TextLayout tl = lbm.nextLayout(w);
      tl.draw(g2, x, y + tl.getAscent());
      y += tl.getDescent() + tl.getLeading() + tl.getAscent();
    }
    g2.dispose();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/label.html&quot;&gt;How to Use Labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/awt/font/LineBreakMeasurer.html&quot;&gt;LineBreakMeasurer (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTextArea#setLineWrap(true);&lt;/code&gt;を使う方法を追加、スクリーンショットの更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-01-05 (月) 17:15:36&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LineBreakMeasurer&lt;/code&gt;を使用する方法を追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-01-01 (火) 22:38:47&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/glyphvector</link>
                <guid>http://terai.xrea.jp/swing/glyphvector</guid>
                <pubDate>2004-03-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableの行を移動</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ツールバーや、ポップアップメニューを使って、&lt;code&gt;JTable&lt;/code&gt;の行を上下に移動します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MoveRow&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTQMwXadCI/AAAAAAAAAfM/mZbfFQ513GI/s800/MoveRow.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class DownAction extends AbstractAction{
  public DownAction(String str) {
    super(str);
  }
  @Override public void actionPerformed(ActionEvent evt) {
    downActionPerformed(evt);
  }
}
private void downActionPerformed(ActionEvent e) {
  System.out.println(&quot;-------- 下へ --------&quot;);
  int[] pos = table.getSelectedRows();
  if(pos==null || pos.length&amp;lt;=0) return;
  DefaultTableModel mdl = (DefaultTableModel) table.getModel();
  if((e.getModifiers() &amp;amp; ActionEvent.SHIFT_MASK)!=0) {
    mdl.moveRow(pos[0], pos[pos.length-1], mdl.getRowCount()-pos.length);
    table.setRowSelectionInterval(mdl.getRowCount()-pos.length,
      mdl.getRowCount()-1);
  }else{
    if(pos[pos.length-1]==mdl.getRowCount()-1) return;
    mdl.moveRow(pos[0], pos[pos.length-1], pos[0]+1);
    table.setRowSelectionInterval(pos[0]+1, pos[pos.length-1]+1);
  }
  scrollSelectedRow();
}

public void showRowPop(MouseEvent e) {
  int row     = table.rowAtPoint(e.getPoint());
  int count   = table.getSelectedRowCount();
  int[] ilist = table.getSelectedRows();
  boolean flg = true;
  for(int i=0;i&amp;lt;ilist.length;i++) {
    if(ilist[i]==row) {
      flg = false;
      break;
    }
  }
  if(row&amp;gt;0 &amp;amp;&amp;amp; flg) table.setRowSelectionInterval(row, row);
  JPopupMenu pop = new JPopupMenu();
  Action act = new TestCreateAction(&quot;追加&quot;, null);
  act.setEnabled(count==1);
  pop.add(act);
  pop.addSeparator();
  act = new DeleteAction(&quot;削除&quot;, null);
  act.setEnabled(row&amp;gt;=0);
  pop.add(act);
  pop.addSeparator();
  act = new UpAction(&quot;上へ&quot;);
  act.setEnabled(count&amp;gt;0);
  pop.add(act);
  act = new DownAction(&quot;下へ&quot;);
  act.setEnabled(count&amp;gt;0);
  pop.add(act);
  pop.show(e.getComponent(), e.getX(), e.getY());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;DefaultTableModel#moveRow&lt;/code&gt;メソッドを使用して、選択した行を上下に動かしています。&lt;kbd&gt;Shift&lt;/kbd&gt;キーを押しながら、ツールバーの移動ボタンを押すとそれぞれ、先頭、末尾に移動します。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;いつもお世話になっております。違うカテゴリに投稿して、すみません。&lt;code&gt;JTable&lt;/code&gt;のカラムの幅をマウスで広げたり、縮んだりする際、イベントで検出し、その幅を変数に取っておく方法はご存知でしょうか？当方は&lt;code&gt;JDK 1.5&lt;/code&gt;を使っています。よろしくお願いいたします。 -- &lt;a href=&quot;http://terai.xrea.jp/Panda.html&quot;&gt;Panda&lt;/a&gt; 2011-03-01 (火) 15:12:21&lt;/li&gt;
&lt;li&gt;こんばんは。&lt;code&gt;TableColumnModelListener&lt;/code&gt;を使うのはどうでしょうか。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-01 (火) 16:48:43&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;final TableColumnModel cm = table.getColumnModel();
cm.addColumnModelListener(new TableColumnModelListener() {
  @Override public void columnAdded(TableColumnModelEvent e) {}
  @Override public void columnMarginChanged(ChangeEvent e) {
    for(int i=0;i&amp;lt;cm.getColumnCount();i++) {
      TableColumn c = cm.getColumn(i);
      System.out.println(c.getHeaderValue()+&quot;: &quot;+c.getWidth());
    }
  }
  @Override public void columnMoved(TableColumnModelEvent e) {}
  @Override public void columnRemoved(TableColumnModelEvent e) {}
  @Override public void columnSelectionChanged(ListSelectionEvent e) {}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ご回答、ありがとうございました。列の幅を変更するため、&lt;code&gt;TableColumn c = cm.getColumn(i);・・・c.setPreferredWidth(int preferredWidth);&lt;/code&gt;で行いましたが、例えば&lt;code&gt;c.setPreferredWidth(100)&lt;/code&gt;にすると、&lt;code&gt;System.out.println(c.getHeaderValue()+&amp;quot;: &amp;quot;+c.getWidth());&lt;/code&gt;の結果は&lt;code&gt;75&lt;/code&gt;が表示されます。見た目上も&lt;code&gt;100&lt;/code&gt;ピクセルになっていません。確実に幅&lt;code&gt;100&lt;/code&gt;ピクセルにするにはどうすれば良いでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/Panda.html&quot;&gt;Panda&lt;/a&gt; 2011-03-02 (水) 14:10:35

&lt;ul&gt;
&lt;li&gt;列幅が自動調整される場合は、サイズ変更(デルタ)が有効な列に分散されます。このデルタの分散の詳細については、&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/JTable.html#doLayout%28%29&quot;&gt;JTable#doLayout() (Java Platform SE 6)&lt;/a&gt;を参考にしてください。自動調整が&lt;code&gt;OFF&lt;/code&gt;(&lt;code&gt;table.getAutoResizeMode()==AUTO_RESIZE_OFF&lt;/code&gt;)の場合はデルタの分散を考慮する必要がないので、ある列の幅をぴったり&lt;code&gt;100px&lt;/code&gt;にするのは簡単です(&lt;code&gt;TableColumn#setPreferredWidth(100)&lt;/code&gt;とするだけで良い)。デフォルトの&lt;code&gt;AUTO_RESIZE_SUBSEQUENT_COLUMNS&lt;/code&gt;の場合は、例えば以下のようにデルタの分散が&lt;code&gt;0&lt;/code&gt;になるように？後の列も含めてサイズ調整しておく必要があります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-02 (水) 18:05:29&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
public class ColumnPreferredWidthTest {
  String[] columnNames = {&quot;String&quot;, &quot;Integer&quot;, &quot;Boolean&quot;};
  Object[][] data = {
    {&quot;aaa&quot;, 12, true}, {&quot;bbb&quot;, 5, false},
    {&quot;CCC&quot;, 92, true}, {&quot;DDD&quot;, 0, false}
  };
  DefaultTableModel model = new DefaultTableModel(data, columnNames) {
    @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
      return getValueAt(0, column).getClass();
    }
  };
  JTable table = new JTable(model);
  TableColumnModel cm = table.getColumnModel();
  public JComponent makeUI() {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        int total = cm.getTotalColumnWidth();
        int count = cm.getColumnCount();
        cm.getColumn(0).setPreferredWidth(100); //0列目の幅を100pxにする
        total -= 100;
        int colwidth = total/(count-1); //残りの列幅は均等になるように計算
        for (int i=1; i&amp;lt;count-1; i++) {
          TableColumn col = cm.getColumn(i);
          col.setPreferredWidth(colwidth);
          total -= colwidth;
        }
        cm.getColumn(count-1).setPreferredWidth(total); //最後の列幅で余りを吸収
      }
    });

    JPanel p = new JPanel(new BorderLayout());
    p.add(new JScrollPane(table));
    p.add(new JButton(new AbstractAction(&quot;print width&quot;) {
      @Override public void actionPerformed(ActionEvent e) {
        for (int i=0; i&amp;lt;cm.getColumnCount(); i++) {
          TableColumn c = cm.getColumn(i);
          System.out.println(c.getHeaderValue()+&quot;: &quot;+c.getWidth());
        }
      }
    }), BorderLayout.SOUTH);
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new ColumnPreferredWidthTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/HeaderRatio.html&quot;&gt;TableColumnの幅を比率で設定&lt;/a&gt;の解説を追加変更したので、そのうちこれらのコードはそちらに移動するかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2011-03-02 (水) 18:37:11&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/moverow</link>
                <guid>http://terai.xrea.jp/swing/moverow</guid>
                <pubDate>2004-02-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JListの項目をドラッグ＆ドロップ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JList&lt;/code&gt;をドラッグ＆ドロップして、項目を入れ替えます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DnDList&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTLb3DW2ZI/AAAAAAAAAXk/8VfeirUfaoo/s800/DnDList.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;@Override protected void paintComponent(Graphics g) {
  super.paintComponent(g);
  if(targetIndex&amp;gt;=0) {
    Graphics2D g2 = (Graphics2D)g;
    g2.setPaint(lineColor);
    g2.fill(targetLine);
  }
}
private void initTargetLine(Point p) {
  Rectangle2D testArea = new Rectangle2D.Float();
  int cellHeight = (int) getCellBounds(0,0).getHeight();
  int lineWidht  = (int) getCellBounds(0,0).getWidth();
  int lineHeight = 2;
  int modelSize  = getModel().getSize();
  targetIndex = -1;
  for(int i=0;i&amp;lt;modelSize;i++) {
    testArea.setRect(0, cellHeight*i-(cellHeight/2), lineWidht, cellHeight);
    if(testArea.contains(p)) {
      targetIndex = i;
      targetLine.setRect(0, i*cellHeight, lineWidht, lineHeight);
      break;
    }
  }
  if(targetIndex&amp;lt;0) {
    targetIndex = modelSize;
    targetLine.setRect(0, targetIndex*cellHeight-lineHeight, lineWidht, lineHeight);
  }
}
@Override public void dragOver(final DropTargetDragEvent e) {
  if(isDragAcceptable(e)) {
    e.acceptDrag(e.getDropAction());
  }else{
    e.rejectDrag();
    return;
  }
  initTargetLine(e.getLocation());
  repaint();
}
@Override public void drop(DropTargetDropEvent e) {
  DefaultListModel model = (DefaultListModel)getModel();
  Transferable t = e.getTransferable();
  DataFlavor[] f = t.getTransferDataFlavors();
  try {
    if(isDropAcceptable(e)) {
      Component comp = (Component) t.getTransferData(f[0]);
      Object str = model.getElementAt(draggedIndex);
      if(targetIndex==draggedIndex) {
        setSelectedIndex(targetIndex);
      }else if(targetIndex&amp;lt;draggedIndex) {
        model.removeElementAt(draggedIndex);
        model.insertElementAt(str, targetIndex);
        setSelectedIndex(targetIndex);
      }else{
        model.insertElementAt(str, targetIndex);
        model.removeElementAt(draggedIndex);
        setSelectedIndex(targetIndex-1);
      }
      e.dropComplete(true);
    }else{
      e.dropComplete(false);
    }
  }catch(UnsupportedFlavorException ex) {
    e.dropComplete(false);
  }catch(IOException ie) {
    e.dropComplete(false);
  }
  e.dropComplete(false);
  targetIndex = -1;
  repaint();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ドラッグソースとドラッグターゲットの両方を&lt;code&gt;JList&lt;/code&gt;自身に設定して、項目をドラッグ＆ドロップしているように見せかけています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ:

&lt;ul&gt;
&lt;li&gt;複数アイテムを選択して移動する場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;のサンプルなどを参照&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/dnd/intro.html&quot;&gt;Introduction to Drag and Drop and Data Transfer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1487942&quot;&gt;Swing (Archive) - DND from a JList with a single gesture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1487416&quot;&gt;Swing (Archive) - Smoother Drag Drop JList JTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DnDReorderList.html&quot;&gt;TransferHandlerを使ったJListのドラッグ＆ドロップによる並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DragSelectDropReordering.html&quot;&gt;JListのアイテムをラバーバンドで複数選択、ドラッグ＆ドロップで並べ替え&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;以下を修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-04-24 (月) 22:47:06

&lt;ul&gt;
&lt;li&gt;ドラッグで選択されたアイテムがずれにくいように修正&lt;/li&gt;
&lt;li&gt;ドロップしたあとアイテムが選択状態になるように修正&lt;/li&gt;
&lt;li&gt;アイテムの無い場所にドラッグすると一番最後の項目の下にラインを引くように修正(以前は一番下のアイテムの下半分にドラッグした場合のみ、そこに線を引いていた)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;アイテムを複数選択した状態でドラッグすると&lt;code&gt;Exception&lt;/code&gt;が発生する不具合を修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-06-27 (火) 16:34:22&lt;/li&gt;
&lt;li&gt;ドラッグ中マウスが&lt;code&gt;JList&lt;/code&gt;の外に出た場合、カーソルを変更するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-02 (月) 16:26:22&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;に&lt;code&gt;JList&lt;/code&gt;を追加し、タブを２つ作りました。&lt;code&gt;JList&lt;/code&gt;の項目を他のタブへ&lt;code&gt;D&amp;amp;D&lt;/code&gt;すると、&lt;code&gt;mouseReleased&lt;/code&gt;メソッドが反応しないのですが、どうすれば回避できますでしょうヵ。 -- &lt;a href=&quot;http://terai.xrea.jp/sao.html&quot;&gt;sao&lt;/a&gt; 2007-09-22 (土) 14:57:27

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;削除しました &lt;code&gt;src2.zip&lt;/code&gt;&lt;/del&gt; を作って&lt;code&gt;XP&lt;/code&gt;+&lt;code&gt;JDK 1.6.0_02&lt;/code&gt;で試してみたのですが、&lt;code&gt;JList&lt;/code&gt;の項目を他のタブへ&lt;code&gt;D&amp;amp;D&lt;/code&gt;出来ないようです。環境が違うのかな？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-09-22 (土) 16:16:29&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ぉー！ファイル、わざわざありがとうございます！自分なりに頑張ってます。私がやりたのは&lt;code&gt;JList&lt;/code&gt;の項目をタブへ&lt;code&gt;D&amp;amp;D&lt;/code&gt;して項目に書かれている内容を他のタブ(の持ってる&lt;code&gt;JList&lt;/code&gt;)へ渡したいんです。現状は、２つ以上の項目なら渡せて、&lt;code&gt;１&lt;/code&gt;つだとエラーがでてしまいます。よくわかっていないまま進めてるので、全然わからないです（汗） -- &lt;a href=&quot;http://terai.xrea.jp/sao.html&quot;&gt;sao&lt;/a&gt; 2007-09-27 (木) 20:03:38

&lt;ul&gt;
&lt;li&gt;あ、&lt;code&gt;src2.zip&lt;/code&gt;は的外れでしたね。このページの&lt;code&gt;DnDList&lt;/code&gt;を&lt;code&gt;JTabbedPane&lt;/code&gt;に入れて、項目をタブタイトルにドロップすると&lt;code&gt;Exception&lt;/code&gt;の発生するバグがあるのかも？と勘違いしていました。このページのサンプルを改造するなら、&lt;code&gt;src2.zip&lt;/code&gt;ではなく、&lt;a href=&quot;http://terai.xrea.jp/swing/dropontabtitle/src.zip&quot;&gt;こちらのソース(名前を変更しました)&lt;/a&gt;、チュートリアルなら&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/examples/dnd/index.html#DragListDemo&quot;&gt;DragListDemo&lt;/a&gt; が参考になるかも。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-09-28 (金) 02:24:23&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src3&lt;/code&gt;ありがとうございます☆軽快に動きますね！すごく！&lt;code&gt;src3&lt;/code&gt;ですが、&lt;code&gt;DnDList&lt;/code&gt;に&lt;code&gt;setEnabled(true);&lt;/code&gt;を追加しました。が、まったくわからず…思いのほか、&lt;code&gt;2&lt;/code&gt;項目以上の&lt;code&gt;D&amp;amp;D&lt;/code&gt;って難しいですネ(汗 -- &lt;a href=&quot;http://terai.xrea.jp/sao.html&quot;&gt;sao&lt;/a&gt; 2007-09-28 (金) 17:50:42&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/dndlist</link>
                <guid>http://terai.xrea.jp/swing/dndlist</guid>
                <pubDate>2004-02-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneの選択文字色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;で、選択されたタブの文字色を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ColorTab&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTJo7nZnbI/AAAAAAAAAUs/6SU2JG2B0t0/s800/ColorTab.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;tab.addChangeListener(new ChangeListener() {
  @Override public void stateChanged(ChangeEvent e) {
    JTabbedPane jtab = (JTabbedPane)e.getSource();
    int sindex = jtab.getSelectedIndex();
    String str = jtab.getTitleAt(sindex);
    for(int i=0;i&amp;lt;jtab.getTabCount();i++) {
      if(i==sindex &amp;amp;&amp;amp; jtab.getTitleAt(sindex).endsWith(&quot;1&quot;)) {
        jtab.setForegroundAt(i, Color.GREEN);
      }else if(i==sindex) {
        Color sc = (sindex%2==0)?Color.RED:Color.BLUE;
        jtab.setForegroundAt(i, sc);
      }else{
        jtab.setForegroundAt(i, Color.BLACK);
      }
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTabbedPane&lt;/code&gt;に&lt;code&gt;ChangeListener&lt;/code&gt;を追加し、条件によってタブの文字色を変更しています。&lt;/p&gt;

&lt;p&gt;背景色も変更したかったのですが、&lt;code&gt;Look and Feel&lt;/code&gt;などによってはうまくいかないようです。&lt;code&gt;Windows XP&lt;/code&gt;でタブの背景色を変更したい場合は、以下のように&lt;code&gt;System.setProperty(&amp;quot;swing.noxp&amp;quot;, &amp;quot;true&amp;quot;)&lt;/code&gt;とする必要があります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public static void createAndShowGUI() {
  System.setProperty(&quot;swing.noxp&quot;, &quot;true&quot;);
  try{
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }catch (Exception e) {
    throw new InternalError(e.toString());
  }
  JFrame frame = new JFrame(&quot;@title@&quot;);
//......
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;文字色も&lt;code&gt;Synth(Nimbus)LookAndFeel&lt;/code&gt;などでは、&lt;code&gt;JTabbedPane#setForegroundAt(...)&lt;/code&gt;で変更することができないようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6939001&quot;&gt;Bug ID: 6939001 Nimbus: JTabbedPane setBackgroundAt and setForegroundAt have no effect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTabbedPaneExamples1.html&quot;&gt;TabColorExample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/TabTitleHighlight.html&quot;&gt;JTabbedPaneのタブ文字列をハイライト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/colortab</link>
                <guid>http://terai.xrea.jp/swing/colortab</guid>
                <pubDate>2004-02-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのカラム幅を一部だけ固定する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のヘッダでカラム幅を一部だけ固定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FixedWidthColumn&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTM9YcNZfI/AAAAAAAAAaA/sbjwdihBwqY/s800/FixedWidthColumn.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//すべてのヘッダカラムの幅を変更不可に
//tableHeader.setResizingAllowed(false);

//JTable.AUTO_RESIZE_OFFで、あるカラムの幅を変更不可にしたい場合
//table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
//col.setPreferredWidth(50);
//col.setResizable(false);

//カラムの幅を変更不可にしたい場合
TableColumn col = table.getColumnModel().getColumn(0);
col.setMinWidth(50);
col.setMaxWidth(50);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、一番最初のカラム幅が&lt;code&gt;50px&lt;/code&gt;で固定となるように、&lt;code&gt;TableColumn#setMaxWidth(int)&lt;/code&gt;、&lt;code&gt;TableColumn#setMinWidth(int)&lt;/code&gt;を使用しています。カーソルも変化しないようにする場合は、&lt;code&gt;setResizable(false)&lt;/code&gt;も一緒に指定します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メモ

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTableHeader#setResizingAllowed(booelan)&lt;/code&gt;を使うと、すべてのカラム幅が変更不可となる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableColumn#setResizable(boolean)&lt;/code&gt;は、&lt;code&gt;JTable#setAutoResizeMode(JTable.AUTO_RESIZE_OFF)&lt;/code&gt;の場合のみ有効&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TableColumn#setMaxWidth(int)&lt;/code&gt;、&lt;code&gt;TableColumn#setMinWidth(int)&lt;/code&gt;を使用して、カラム幅を固定すると、&lt;code&gt;JTable.AUTO_RESIZE_OFF&lt;/code&gt;でなくても有効&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;以下のようにカラム幅を&lt;code&gt;0&lt;/code&gt;に固定すると、表示されない列を作成することができます。一時的にカラムを隠したいけど、&lt;code&gt;JTable#removeColumn(TableColumn)&lt;/code&gt;、&lt;code&gt;JTable#addColumn(TableColumn)&lt;/code&gt;、&lt;code&gt;JTable#moveColumn(TableColumn)&lt;/code&gt;のように元の場所に戻すのが面倒なときに使えるかもしれません(ただし、&lt;kbd&gt;Tab&lt;/kbd&gt;キーなどによるフォーカス移動がおかしくなります)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;TableColumn col = table.getColumnModel().getColumn(1);
col.setMinWidth(0);
col.setMaxWidth(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;各カラムの幅を固定するのではなく、&lt;code&gt;JTable&lt;/code&gt;を&lt;code&gt;2&lt;/code&gt;つ使用して(&lt;code&gt;model&lt;/code&gt;は&lt;code&gt;1&lt;/code&gt;つ)あるカラムを常に表示(スクロールで隠れないよう固定)しておく場合は、&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/05/fixed-column-table/&quot;&gt;Fixed Column Table ≪ Java Tips Weblog&lt;/a&gt;や、&lt;a href=&quot;http://terai.xrea.jp/Swing/FixedColumnTableSorting.html&quot;&gt;JTableの列固定とソート&lt;/a&gt;などを参照してください。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;カラムの位置を固定してドラッグなどでの移動を禁止したい場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/Reordering.html&quot;&gt;JTableのヘッダ入れ替えを禁止&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.crionics.com/products/opensource/faq/swing_ex/JTableExamples1.html&quot;&gt;FixedColumnExample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2008/11/05/fixed-column-table/&quot;&gt;Fixed Column Table ≪ Java Tips Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/FixedColumnTableSorting.html&quot;&gt;JTableの列固定とソート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/fixedwidthcolumn</link>
                <guid>http://terai.xrea.jp/swing/fixedwidthcolumn</guid>
                <pubDate>2004-02-02T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>EventListenerを実装して独自イベント作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;イベント(イベントオブジェクト、イベントリスナー、イベントソース)を新たに作成し、これを使用します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/EventListener&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTMNwgwo5I/AAAAAAAAAY0/lpZGrcgRE8g/s800/EventListener.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;interface FontChangeListener extends EventListener{
  public void fontStateChanged(FontChangeEvent e);
}
class FontChangeEvent extends EventObject{
  private final String command;
  private final Font font;
  public String getCommand() {
    return command;
  }
  public Font getFont() {
    return font;
  }
  public FontChangeEvent(Object source, String cmd, Font font) {
    super(source);
    this.command = cmd;
    this.font = font;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final Vector listenerList = new Vector();
public void addFontChangeListener(FontChangeListener l) {
  if(!listenerList.contains(l)) listenerList.add(l);
}
public void removeFontChangeListener(FontChangeListener l) {
  listenerList.remove(l);
}
public void fireFontChangeEvent(String cmd, Font font) {
  Vector list = (Vector)listenerList.clone();
  Enumeration e = list.elements();
  FontChangeEvent evt = new FontChangeEvent(this, cmd, font);
  while(e.hasMoreElements()) {
    FontChangeListener listener = (FontChangeListener)e.nextElement();
    listener.fontStateChanged(evt);
  }
  revalidate();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルではメニューからのイベントでコンポーネントのフォントを変更しています。ラベルとボタンをリスナーとして追加しているので、&lt;code&gt;fireFontChangeEvent&lt;/code&gt;でそれらのフォントサイズが変更されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;のイベントモデルは、&lt;code&gt;delegation event model&lt;/code&gt;(委譲型のイベントモデル)です。&lt;a href=&quot;http://www.asahi-net.or.jp/%7Edp8t-asm/java/tips/Event.html&quot;&gt;イベント&lt;/a&gt;などを参考にしてみてください。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt;ではなく、&lt;code&gt;EventListenerList&lt;/code&gt;を使用する場合は、&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/event/EventListenerList.html&quot;&gt;EventListenerList (Java Platform SE 7)&lt;/a&gt;のサンプルが参考になります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;// http://docs.oracle.com/javase/jp/6/api/javax/swing/event/EventListenerList.html
EventListenerList listenerList = new EventListenerList();
//FontChangeEvent fontChangeEvent = null;
public void addFontChangeListener(FontChangeListener l) {
  listenerList.add(FontChangeListener.class, l);
}
public void removeFontChangeListener(FontChangeListener l) {
  listenerList.remove(FontChangeListener.class, l);
}
// Notify all listeners that have registered interest for
// notification on this event type.The event instance
// is lazily created using the parameters passed into
// the fire method.
protected void fireFontChangeEvent(String cmd, Font font) {
  // Guaranteed to return a non-null array
  Object[] listeners = listenerList.getListenerList();
  FontChangeEvent evt = new FontChangeEvent(this, cmd, font);
  // Process the listeners last to first, notifying
  // those that are interested in this event
  for(int i = listeners.length-2; i&amp;gt;=0; i-=2) {
    if(listeners[i]==FontChangeListener.class) {
      // Lazily create the event:
      // if(fontChangeEvent == null)
      //   fontChangeEvent = new FontChangeEvent(this);
      ((FontChangeListener)listeners[i+1]).fontStateChanged(evt);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.asahi-net.or.jp/%7Edp8t-asm/java/tips/Event.html&quot;&gt;イベント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/7/api/javax/swing/event/EventListenerList.html&quot;&gt;EventListenerList (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/Kazzz/20080618/p1&quot;&gt;習慣の生き物 - Kazzzの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EventListenerList&lt;/code&gt;を使用する方法を追加、リンクを追加、整理。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-06-18 (水) 12:57:22&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/eventlistener</link>
                <guid>http://terai.xrea.jp/swing/eventlistener</guid>
                <pubDate>2004-01-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>TableCellRendererでセルの背景色を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TableCellRenderer&lt;/code&gt;を継承するレンダラーを作ってテーブルのセルを修飾します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StripeTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTT1bwXoBI/AAAAAAAAAlE/jmpoFwDpvqs/s800/StripeTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class StripeTableRenderer extends DefaultTableCellRenderer {
  private static final Color evenColor = new Color(240, 240, 255);
  @Override public Component getTableCellRendererComponent(JTable table, Object value,
                           boolean isSelected, boolean hasFocus,
                           int row, int column) {
    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
    if(isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    }else{
      setForeground(table.getForeground());
      setBackground((row%2==0)?evenColor:table.getBackground());
    }
    setHorizontalAlignment((value instanceof Number)?RIGHT:LEFT);
    return this;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、以下のようなセルレンダラーを作成し、&lt;code&gt;Object&lt;/code&gt;を継承するクラスのデフォルトレンダラーとして設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;奇数偶数で行の背景色を変更してテーブルをストライプ模様にする&lt;/li&gt;
&lt;li&gt;第&lt;code&gt;0&lt;/code&gt;列のカラムのセルを右寄せ

&lt;ul&gt;
&lt;li&gt;ここでは、&lt;code&gt;TableColumn#setCellRenderer(TableCellRenderer)&lt;/code&gt;を使わず、&lt;code&gt;Object.classのDefaultRenderer&lt;/code&gt;ひとつにまとめているため、&lt;code&gt;TableModel#getColumnClass(0)&lt;/code&gt;が&lt;code&gt;Integer.class&lt;/code&gt;を返すようにしている&lt;/li&gt;
&lt;li&gt;メモ: &lt;code&gt;JTable#setDefaultRenderer(Class, TableCellRenderer)&lt;/code&gt;でクラスに関連付けるより、各カラムに関連付けした方が優先順位が高い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;table.setDefaultRenderer(Object.class, new StripeTableRenderer());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あるセルが描画されるとき、設定された&lt;code&gt;TableCellRenderer&lt;/code&gt;の&lt;code&gt;getTableCellRendererComponent&lt;/code&gt;メソッドが呼び出されます。レンダラーは、引数などから得られる情報(選択されているか、何行何列目かなど)を使って、コンポーネントを修飾してから&lt;code&gt;return&lt;/code&gt;します。&lt;/p&gt;

&lt;p&gt;サンプルの&lt;code&gt;TestRenderer&lt;/code&gt;では、&lt;code&gt;JLabel&lt;/code&gt;を継承する&lt;code&gt;DefaultTableCellRenderer&lt;/code&gt;を継承しているので、自分自身(&lt;code&gt;this&lt;/code&gt;)を&lt;code&gt;setForeground&lt;/code&gt;、&lt;code&gt;setHorizontalAlignment&lt;/code&gt;などのメソッドで修飾し直し、さらに自分自身(&lt;code&gt;this&lt;/code&gt;)を戻り値としています。このようにコンポーネントを使い回しているため、セルの数が膨大になっても、オブジェクトを大量に生成しなくて済むようになっています。&lt;/p&gt;

&lt;p&gt;また、返されたコンポーネントはセルの描画のためだけに利用され、マウスイベントなどは無視されます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;セルレンダラーで色を変更する代わりに、以下のように&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;メソッドをオーバーライドする方法もあります。使用するセルレンダラーに関係なく、テーブル全体で前処理することができます。このため、&lt;code&gt;Number&lt;/code&gt;クラス用のデフォルトレンダラーである&lt;code&gt;JTable$NumberRenderer&lt;/code&gt;がそのまま使われるので、&lt;code&gt;TableModel#getColumnClass(int)&lt;/code&gt;が、&lt;code&gt;Number.class&lt;/code&gt;を返すようにしておけば、勝手に右寄せしてくれます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JTable table = new JTable(model) {
  private final Color evenColor = new Color(240, 240, 255);
  @Override public Component prepareRenderer(TableCellRenderer tcr, int row, int column) {
    Component c = super.prepareRenderer(tcr, row, column);
    if(isRowSelected(row)) {
      c.setForeground(getSelectionForeground());
      c.setBackground(getSelectionBackground());
    }else{
      c.setForeground(getForeground());
      c.setBackground((row%2==0)?evenColor:getBackground());
    }
    return c;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0_10&lt;/code&gt;以降なら、以下のように設定する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://forums.java.net/jive/thread.jspa?messageID=338905&quot;&gt;java.net Forums : JTable-Zebra with one line ... ...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;Table.alternateRowColor&quot;, Color.PINK);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;注:デフォルトの&lt;code&gt;Boolean&lt;/code&gt;用レンダラーの背景色が変わらないようです。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
class TableAlternateRowColorTest {
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  public static void createAndShowGUI() {
    UIManager.put(&quot;Table.alternateRowColor&quot;, Color.ORANGE);
    String[] columnNames = {&quot;String&quot;, &quot;Integer&quot;, &quot;Boolean&quot;};
    Object[][] data = {
      {&quot;A&quot;,1,true},{&quot;B&quot;,2,false},{&quot;C&quot;,0,true}
    };
    TableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&amp;lt;?&amp;gt; getColumnClass(int column) {
        return getValueAt(0, column).getClass();
      }
    };
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new JScrollPane(new JTable(model)));
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#sorting&quot;&gt;Sorting and Otherwise Manipulating Data - How to Use Tables (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/jp/java/library/j-jtable/&quot;&gt;SwingのJTableコンポーネントでセルを描く&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JTable#prepareRenderer&lt;/code&gt;メソッドを使用する場合のサンプルを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-04-04 (水) 19:41:37&lt;/li&gt;
&lt;li&gt;メモ:&lt;a href=&quot;http://d.hatena.ne.jp/KrdLab/20071209/1197143960&quot;&gt;JTable でセルのないところに行っぽい表示を出せますか？ - KrdLabの不定期日記&lt;/a&gt;。これおもしろいです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-12-10 (月) 17:25:47&lt;/li&gt;
&lt;li&gt;↑ありがとうございます．terai様のサイトは情報が充実していてすばらしいです．参考にさせていただきます． -- &lt;a href=&quot;http://terai.xrea.jp/KrdLab.html&quot;&gt;KrdLab&lt;/a&gt; 2008-01-27 (日) 14:27:53&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/stripetable</link>
                <guid>http://terai.xrea.jp/swing/stripetable</guid>
                <pubDate>2004-01-19T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTextPaneに修飾した文字列を挿入</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTextPane&lt;/code&gt;に、スタイル付けした文字列を挿入して、ログ風に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/StyleConstants&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTT31r9lEI/AAAAAAAAAlI/7PqL2Aa3UJU/s800/StyleConstants.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;StyledDocument doc = jtp.getStyledDocument();
Style def = StyleContext.getDefaultStyleContext().getStyle(
    StyleContext.DEFAULT_STYLE);

Style regular = doc.addStyle(&quot;regular&quot;, def);
//StyleConstants.setForeground(def, Color.BLACK);

Style error = doc.addStyle(&quot;error&quot;, regular);
StyleConstants.setForeground(error, Color.RED);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void append(String str, boolean flg) {
  String style = flg?&quot;regular&quot;:&quot;error&quot;;
  StyledDocument doc = jtp.getStyledDocument();
  try{
    doc.insertString(doc.getLength(), str+&quot;\n&quot;, doc.getStyle(style));
  }catch(BadLocationException e) {
    e.printStackTrace();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;予め設定しておいたエラー表示用のスタイル(文字属性)を、&lt;code&gt;StyledDocument#getStyle(&amp;quot;error&amp;quot;)&lt;/code&gt;で取得し、これを文字列と一緒に&lt;code&gt;Document#insertString&lt;/code&gt;メソッドを使って挿入しています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一々、&lt;code&gt;SimpleAttributeSet&lt;/code&gt;を生成していたのを修正。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2010-12-06 (月) 22:24:36&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/styleconstants</link>
                <guid>http://terai.xrea.jp/swing/styleconstants</guid>
                <pubDate>2004-01-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTableのソート</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JTable&lt;/code&gt;のヘッダカラムをクリックすることで、行表示を降順、昇順にソートします。以下のサンプルは、&lt;del&gt;&lt;a href=&quot;http://www2.gol.com/users/tame/swing/examples/JTableExamples5.html&quot;&gt;SortableTableExample&lt;/a&gt;&lt;/del&gt;を参考にして作成しています。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SortableTable&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTTXXYDR5I/AAAAAAAAAkQ/DeBHN6piDhQ/s800/SortableTable.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;class SortableTableModel extends DefaultTableModel{
  public SortableTableModel(String[] str, int row) {
    super(str, row);
  }
  public void sortByColumn(int column, boolean isAscent) {
    Collections.sort(getDataVector(), new ColumnComparator(column, isAscent));
    fireTableDataChanged();
  }
}
class ColumnComparator implements Comparator{
  final protected int index;
  final protected boolean ascending;
  public ColumnComparator(int index, boolean ascending) {
    this.index = index;
    this.ascending = ascending;
  }
  public int compare(Object one, Object two) {
    if(one instanceof Vector &amp;amp;&amp;amp; two instanceof Vector) {
      Object oOne = ((Vector)one).elementAt(index);
      Object oTwo = ((Vector)two).elementAt(index);
      if(oOne==null &amp;amp;&amp;amp; oTwo==null) {
        return 0;
      }else if(oOne==null) {
        return ascending ? -1 :  1;
      }else if(oTwo==null) {
        return ascending ?  1 : -1;
      }else if(oOne instanceof Comparable &amp;amp;&amp;amp; oTwo instanceof Comparable) {
        Comparable cOne = (Comparable)oOne;
        Comparable cTwo = (Comparable)oTwo;
        return ascending ? cOne.compareTo(cTwo) : cTwo.compareTo(cOne);
      }
    }
    return 1;
  }
  public int compare(Number o1, Number o2) {
    double n1 = o1.doubleValue();
    double n2 = o2.doubleValue();
    if(n1 &amp;lt; n2) {
      return -1;
    }else if(n1 &amp;gt; n2) {
      return 1;
    }else{
      return 0;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、カラムヘッダをクリックすることでソートできます。右クリックからポップアップメニューで、行を追加、削除したり、セルをダブルクリックして中身を色々編集するなどしてソートを試してみてください。&lt;/p&gt;

&lt;p&gt;複数の列をキーにしてソートしたい場合や、ヘッダがボタンになるのがいやな場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/TableSorter.html&quot;&gt;TableSorterでJTableをソート&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6.0&lt;/code&gt;では、&lt;code&gt;JTable&lt;/code&gt;標準で簡単にソート機能を追加できるようになっています(参考:&lt;a href=&quot;http://terai.xrea.jp/Swing/TableRowSorter.html&quot;&gt;TableRowSorterでJTableのソート&lt;/a&gt;)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&quot;http://www2.gol.com/users/tame/swing/examples/JTableExamples5.html&quot;&gt;SortableTableExample&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#sorting&quot;&gt;Sorting and Otherwise Manipulating Data - How to Use Tables (The Java™ Tutorials &amp;gt; Creating a GUI with JFC/Swing &amp;gt; Using Swing Components)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;非常に参考になりました。すぐに実装に使わせていただきます。 -- &lt;a href=&quot;http://terai.xrea.jp/akio.html&quot;&gt;akio&lt;/a&gt; 2005-01-12 18:11:14 (水)&lt;/li&gt;
&lt;li&gt;カラムをドラッグして移動したとき、矢印が残ってしまうようです。 &lt;del&gt;元からだったかデグレードしたのかちょっと不明です。&lt;/del&gt; 元からのようです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-02-25 19:55:01 (金)&lt;/li&gt;
&lt;li&gt;修正できたかな？ &lt;del&gt;確認中。&lt;/del&gt; 確認済み。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-02-25 20:30:57 (金)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Swing&lt;/code&gt;初心者の為このサイトのソースを参考に勉強させて頂いています。 -- &lt;a href=&quot;http://terai.xrea.jp/ao.html&quot;&gt;ao&lt;/a&gt; 2005-03-11 14:37:03 (金)&lt;/li&gt;
&lt;li&gt;行を削除した後にソートを降順ソート、昇順ソート、初期状態と３回ソートを行うと削除した行が元に戻ってしまうようです。&lt;code&gt;TestModel.java&lt;/code&gt;の&lt;code&gt;removeRow&lt;/code&gt;に&lt;code&gt;list.remove(index);&lt;/code&gt;を追加したらうまくいきましたが、本当にこれでよいのでしょうか？-- &lt;a href=&quot;http://terai.xrea.jp/ao.html&quot;&gt;ao&lt;/a&gt; 2005-03-11 14:40:10 (金)&lt;/li&gt;
&lt;li&gt;&lt;del&gt;いいと思います。バグなので修正しておきますm(_ _m)。&lt;/del&gt; あ、ダメみたいです。以下のように行番号をキーにして削除しないとソート中は別の行を削除してしまいます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-11 19:13:45 (金)&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public void removeRow(int index) {
  Integer num = (Integer)getValueAt(index, 0);
  Test test = (Test)list.elementAt(num.intValue()-1);
  list.removeElement(test);
  super.removeRow(index);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;初期状態に戻すのを止めたほうがいいかもしれません(エクスプローラも初期状態に戻したりしないし)。わざわざ&lt;code&gt;Vector&lt;/code&gt;で&lt;code&gt;list&lt;/code&gt;を別に持つ必要も、キーとして番号の列を作る必要もなくなります。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-11 19:23:16 (金)&lt;/li&gt;
&lt;li&gt;こちらのサンプルでは初期状態に戻すのを止めてみました。初期状態戻し有りにしたい場合は、&lt;a href=&quot;http://terai.xrea.jp/Swing/TableSorter.html&quot;&gt;TableSorterでJTableをソート&lt;/a&gt;の方を参考にしてみてください。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2005-03-11 21:08:34 (金)&lt;/li&gt;
&lt;li&gt;ありがとうございます！ -- &lt;a href=&quot;http://terai.xrea.jp/G.html&quot;&gt;G&lt;/a&gt; 2012-07-12 (木) 14:05:48

&lt;ul&gt;
&lt;li&gt;どうもです。関係ない話ですが、元サンプル(&lt;code&gt;SortableTableExample&lt;/code&gt;)が公開されているところを探してリンクを修正する予定です。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-07-13 (金) 17:35:04&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/sortabletable</link>
                <guid>http://terai.xrea.jp/swing/sortabletable</guid>
                <pubDate>2004-01-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameをスクリーン中央に表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;フレームやダイアログなどをスクリーンの中央に表示します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/CenterFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTIvEn-69I/AAAAAAAAATQ/Fw4dLY4C0EE/s800/CenterFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame frame = new JFrame(&quot;フレームをスクリーン中央に表示&quot;);
frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
frame.getContentPane().add(new MainPanel());
frame.pack();
frame.setLocationRelativeTo(null);
//以下は自前で位置を計算する場合
//Rectangle screen = frame.getGraphicsConfiguration().getBounds();
//frame.setLocation(screen.x + screen.width/2  - frame.getSize().width/2,
//                  screen.y + screen.height/2 - frame.getSize().height/2);
frame.setVisible(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame#setLocationRelativeTo&lt;/code&gt;メソッドで、基準となる親ウィンドウを&lt;code&gt;null&lt;/code&gt;にすると、そのフレームは画面中央に表示されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JFrame#setLocation&lt;/code&gt;メソッドで任意の位置を指定する場合は、フレームの左上隅座標を計算します。&lt;/p&gt;

&lt;p&gt;どちらも、フレームを&lt;code&gt;pack()&lt;/code&gt;、もしくは&lt;code&gt;setSize(int,int)&lt;/code&gt;した後で実行するようにしてください。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.4&lt;/code&gt;以降なら、&lt;code&gt;setLocationRelativeTo(null)&lt;/code&gt;でも中央になりますよ。 -- &lt;a href=&quot;http://terai.xrea.jp/Wata.html&quot;&gt;Wata&lt;/a&gt; 2004-06-07 (月) 17:47:08

&lt;ul&gt;
&lt;li&gt;こんな方法があったんですね。参考になりました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-06-07 (月) 19:26:17&lt;/li&gt;
&lt;li&gt;というわけで、&lt;code&gt;src.zip&lt;/code&gt;などを更新してみました。ありがとうございました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-06-07 (月) 19:44:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/centerframe</link>
                <guid>http://terai.xrea.jp/swing/centerframe</guid>
                <pubDate>2003-12-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JTabbedPaneでタブを追加削除</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ポップアップメニューを使って、&lt;code&gt;JTabbedPane&lt;/code&gt;にタブを追加、削除します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/TabbedPane&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTULwZD83I/AAAAAAAAAlo/NwNuK8prCFY/s800/TabbedPane.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private final JPopupMenu pop = new JPopupMenu() {
  @Override public void show(Component c, int x, int y) {
    //JDK 1.3 tabindex = tab.getUI().tabForCoordinate(tab, x, y);
    closePageAction.setEnabled(tab.indexAtLocation(x, y)&amp;gt;=0);
    closeAllAction.setEnabled(tab.getTabCount()&amp;gt;0);
    closeAllButActiveAction.setEnabled(tab.getTabCount()&amp;gt;0);
    super.show(c, x, y);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ポップアップメニューから、タブの追加、削除などが実行できます。&lt;/p&gt;

&lt;p&gt;削除メニューは、タブタイトル上で右クリックされた場合のみ選択可となります。タブタイトル上でマウスがクリックされたかどうかは、&lt;code&gt;JDK 1.4&lt;/code&gt;で導入された&lt;code&gt;JTabbedPane#indexAtLocation&lt;/code&gt;メソッドで判定しています。&lt;/p&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショットなどを更新 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-13 (Thu) 21:58:23&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/tabbedpane</link>
                <guid>http://terai.xrea.jp/swing/tabbedpane</guid>
                <pubDate>2003-12-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Fileの再帰的検索</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ファイルを再帰的に検索します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/RecursiveFileSearch&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRh7du1II/AAAAAAAAAhU/jcMUoOTcbTU/s800/RecursiveFileSearch.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public void recursiveSearch(File dir, final Vector list)
    throws InterruptedException {
  String[] contents = dir.list();
  for(int i=0;i&amp;lt;contents.length;i++) {
    if(Thread.interrupted()) {
      throw new InterruptedException();
    }
    File sdir = new File(dir, contents[i]);
    if(sdir.isDirectory()) {
      recursiveSearch(sdir, list);
    }else if(isGraphicsFile(sdir.getName())) {
      list.add(sdir);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、選択したフォルダ以下のファイルを再帰的にすべて検索して表示するようになっています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JProgressBar&lt;/code&gt;を使った進捗状況の表示とキャンセルには、&lt;code&gt;SwingWorker&lt;/code&gt;を利用しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 7&lt;/code&gt;の場合は、&lt;code&gt;Files.walkFileTree(...)&lt;/code&gt;などを使用する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/io/walk.html&quot;&gt;Walking the File Tree (The Java™ Tutorials &amp;gt; Essential Classes &amp;gt; Basic I/O)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#walkFileTree%28java.nio.file.Path,%20java.nio.file.FileVisitor%29&quot;&gt;Files (Java Platform SE 7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void recursiveSearch(Path dir, final ArrayList&amp;lt;Path&amp;gt; list) throws IOException {
  Files.walkFileTree(dir, new SimpleFileVisitor&amp;lt;Path&amp;gt;() {
    @Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
      if(Thread.interrupted()) {
        throw new IOException();
      }
      if(attrs.isRegularFile()) {
        list.add(file);
      }
      return FileVisitResult.CONTINUE;
    }
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msugai.fc2web.com/java/IO/fileObj.html&quot;&gt;Java入門 ファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/progress.html&quot;&gt;How to Use Progress Bars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/javax/swing/SwingWorker.html&quot;&gt;SwingWorker (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090830092511/http://java.sun.com/products/jfc/tsc/articles/threads/threads2.html&quot;&gt;Using a Swing Worker Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090811085550/http://java.sun.com/products/jfc/tsc/articles/threads/src/SwingWorker.java&quot;&gt;SwingWorker.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-06-2003/jw-0606-swingworker-p3.html&quot;&gt;Customize SwingWorker to improve Swing GUIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;実際に動作するサンプルを追加してみました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-04-28 (金) 21:50:55&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JDK 6&lt;/code&gt;の&lt;code&gt;SwingWorker&lt;/code&gt;を使用するように変更しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-07-11 (金) 15:32:26&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/recursivefilesearch</link>
                <guid>http://terai.xrea.jp/swing/recursivefilesearch</guid>
                <pubDate>2003-12-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Beep音を鳴らす</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Toolkit&lt;/code&gt;を使ってビープ音を鳴らします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Beep&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTIE6ivySI/AAAAAAAAASM/H5qY8r_auGc/s800/Beep.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//UIManager.put(&quot;AuditoryCues.playList&quot;,
//              UIManager.get(&quot;AuditoryCues.noAuditoryCues&quot;));
java.awt.Toolkit.getDefaultToolkit().beep();
JOptionPane.showMessageDialog(this,&quot;error&quot;,&quot;title&quot;,JOptionPane.ERROR_MESSAGE);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ボタンをクリックしてダイアログを開くときに、&lt;code&gt;Toolkit#beep()&lt;/code&gt;メソッドを使ってビープ音を鳴らしています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/MidiSystem.html&quot;&gt;MIDIファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Sound.html&quot;&gt;Wavファイルの演奏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/AuditoryCues.html&quot;&gt;AuditoryCuesでイベント音を設定する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、システムが設定している警告音など(無ければ無音)を&lt;code&gt;AuditoryCues.playList&lt;/code&gt;を使って鳴らす方法&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/beep</link>
                <guid>http://terai.xrea.jp/swing/beep</guid>
                <pubDate>2003-12-08T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JScrollPaneのスクロール量を変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;スクロールがホイールの回転でスムーズに移動しない(遅い)場合は、&lt;code&gt;JScrollPane&lt;/code&gt;のスクロール量を変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ScrollIncrement&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTSi6qpTZI/AAAAAAAAAi8/nrtWKpDCdHI/s800/ScrollIncrement.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JScrollPane scroll = new JScrollPane();
scroll.getVerticalScrollBar().setUnitIncrement(25);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JScrollPane&lt;/code&gt;からスクロールバーを取得し、&lt;code&gt;JScrollBar#setUnitIncrement(int)&lt;/code&gt;メソッドでユニット増分値(&lt;code&gt;unitIncrement&lt;/code&gt;)を設定しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;メモ: &lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;UnitIncrement&lt;/code&gt;と&lt;code&gt;BlockIncrement&lt;/code&gt;について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tips4java.wordpress.com/2010/01/10/mouse-wheel-controller/&quot;&gt;Mouse Wheel Controller « Java Tips Weblog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows 7&lt;/code&gt;環境での&lt;code&gt;e.getScrollAmount()&lt;/code&gt;のデフォルト値: &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DesktopProperty&lt;/code&gt;などを経由せず、&lt;code&gt;OS&lt;/code&gt;のコントロールパネルのマウスのプロパティを直接参照している模様？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/events/mousewheellistener.html&quot;&gt;How to Write a Mouse-Wheel Listener (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Writing Event Listeners)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollPane.getVerticalScrollBar().setBlockIncrement(...)&lt;/code&gt;を設定した場合、その設定した値と&lt;code&gt;Scroll amount&lt;/code&gt;(デフォルトの&lt;code&gt;3&lt;/code&gt;固定) × &lt;code&gt;unit increment(scrollPane.getVerticalScrollBar().getUnitIncrement(...))&lt;/code&gt;のより小さい方がホイールでのスクロール量となる

&lt;ul&gt;
&lt;li&gt;ただし、&lt;code&gt;scrollPane.getVerticalScrollBar().setBlockIncrement(...)&lt;/code&gt;で設定した値が、&lt;code&gt;scrollPane.getVerticalScrollBar().getUnitIncrement(...)&lt;/code&gt; より小さい場合は、&lt;code&gt;UnitIncrement&lt;/code&gt;自体が、ホイールでのスクロール量となる&lt;/li&gt;
&lt;li&gt;このため、例えば縦のアイテムを配置する通常の&lt;code&gt;JList&lt;/code&gt;などのホイールスクロールをスクロールバーの矢印ボタンクリックと同じ&lt;code&gt;1&lt;/code&gt;行ごとにしたいなら、&lt;code&gt;scrollPane.getVerticalScrollBar().setBlockIncrement(0)&lt;/code&gt;でも可能&lt;/li&gt;
&lt;li&gt;すでに上限、下限近くまでスクロールして余地がない場合などは除く(限界を超えてスクロールなどはしない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;code&gt;Scrollable#getScrollableUnitIncrement(...)&lt;/code&gt;などをオーバーライドしても、ホイールスクロールには関係ない？(カーソルキー用？)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JScrollBar#getClientProperty(&amp;quot;JScrollBar.fastWheelScrolling&amp;quot;)&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;(デフォルト)で、&lt;code&gt;View&lt;/code&gt;が&lt;code&gt;JList&lt;/code&gt;などのように&lt;code&gt;Scrollable&lt;/code&gt;を実装している場合は、&lt;code&gt;Scrollable#getScrollableUnitIncrement(...)&lt;/code&gt;、&lt;code&gt;Scrollable#getScrollableBlockIncrement(...)&lt;/code&gt;が使用されている

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@See BasicScrollPaneUI.Handler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マウスのプロパティで「&lt;code&gt;1&lt;/code&gt;画面ずつスクロールする」にすると、&lt;code&gt;e.getScrollType()&lt;/code&gt;が&lt;code&gt;WHEEL_UNIT_SCROLL&lt;/code&gt;から&lt;code&gt;WHEEL_BLOCK_SCROLL&lt;/code&gt;になり、上記の&lt;code&gt;3&lt;/code&gt;行×スクロール量(&lt;code&gt;BasicScrollBarUI.scrollByUnits(...)&lt;/code&gt;)ではなく、&lt;code&gt;BasicScrollBarUI.scrollByBlock(...)&lt;/code&gt;が使用される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//package example;
//-*- mode:java; encoding:utf8n; coding:utf-8 -*-
// vim:set fileencoding=utf-8:
//@homepage@
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class Bbb extends JPanel{
  public Bbb() {
    super(new BorderLayout());
    JList list = makeList();
    final JScrollPane scrollPane = new JScrollPane(list) {
      @Override protected void processMouseWheelEvent(MouseWheelEvent e) {
        MouseWheelEvent mwe = new MouseWheelEvent(
          e.getComponent(),
          e.getID(),
          e.getWhen(),
          e.getModifiers(),
          e.getX(), e.getY(),
          e.getXOnScreen(),
          e.getYOnScreen(),
          e.getClickCount(), //???Nimbusを追加???
          e.isPopupTrigger(),
          e.getScrollType(),
          100, //e.getScrollAmount(),
          e.getWheelRotation());
        super.processMouseWheelEvent(mwe);
      }
    };

    scrollPane.addMouseWheelListener(new MouseWheelListener() {
      @Override public void mouseWheelMoved(MouseWheelEvent e) {
        //System.out.println(e);
        if (e.getScrollType() == MouseWheelEvent.WHEEL_UNIT_SCROLL) {
          System.out.println(&quot;WHEEL_UNIT_SCROLL&quot;);
        }else if (e.getScrollType() == MouseWheelEvent.WHEEL_BLOCK_SCROLL) {
          System.out.println(&quot;WHEEL_BLOCK_SCROLL&quot;);
        }
      }
    });

    list.setFixedCellHeight(64);
    //System.out.println(list.getFixedCellHeight());
    scrollPane.getVerticalScrollBar().setUnitIncrement(32);
    scrollPane.getVerticalScrollBar().setBlockIncrement(64*6);

    JViewport vp = scrollPane.getViewport();
    Scrollable view = (Scrollable)(vp.getView());
    Rectangle vr = vp.getViewRect();

    System.out.println(&quot;getUnitIncrement: &quot;+scrollPane.getVerticalScrollBar().getUnitIncrement(1));
    System.out.println(&quot;getBlockIncrement: &quot;+scrollPane.getVerticalScrollBar().getBlockIncrement(1));
    System.out.println(&quot;getScrollableUnitIncrement: &quot;+view.getScrollableUnitIncrement(vr, scrollPane.getVerticalScrollBar().getOrientation(), 1));
    System.out.println(&quot;getScrollableBlockIncrement: &quot;+view.getScrollableBlockIncrement(vr, scrollPane.getVerticalScrollBar().getOrientation(), 1));

    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    final JSpinner spinner = new JSpinner(new SpinnerNumberModel(scrollPane.getVerticalScrollBar().getBlockIncrement(1), 0, 100000, 1));
    spinner.setEditor(new JSpinner.NumberEditor(spinner, &quot;#####0&quot;));
    spinner.addChangeListener(new ChangeListener() {
      @Override public void stateChanged(ChangeEvent e) {
        JSpinner s = (JSpinner)e.getSource();
        Integer iv = (Integer)s.getValue();
        System.out.println(iv);
        scrollPane.getVerticalScrollBar().setBlockIncrement(iv);
      }
    });
    Box box = Box.createHorizontalBox();
    box.add(new JLabel(&quot;Block Increment:&quot;));
    box.add(Box.createHorizontalStrut(2));
    box.add(spinner);
    box.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
    add(box, BorderLayout.NORTH);

    add(scrollPane);
    setPreferredSize(new Dimension(320, 200));
  }
  @SuppressWarnings(&quot;unchecked&quot;)
  private static JList makeList() {
    DefaultListModel model = new DefaultListModel();
    for(int i=0;i&amp;lt;100;i++) {
      model.addElement(&quot;Item: &quot;+i);
    }
    JList list = new JList(model) {
//       @Override public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
//         return 64;
//       }
//       @Override public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
//         if (orientation == SwingConstants.VERTICAL) {
//           int inc = visibleRect.height;
//           /* Scroll Down */
//           if (direction &amp;gt; 0) {
//             // last cell is the lowest left cell
//             int last = locationToIndex(new Point(visibleRect.x, visibleRect.y+visibleRect.height-1));
//             if (last != -1) {
//               Rectangle lastRect = getCellBounds(last,last);
//               if (lastRect != null) {
//                 inc = lastRect.y - visibleRect.y;
//                 if ( (inc == 0) &amp;amp;&amp;amp; (last &amp;lt; getModel().getSize()-1) ) {
//                   inc = lastRect.height;
//                 }
//               }
//             }
//           }
//           /* Scroll Up */
//           else {
//             int newFirst = locationToIndex(new Point(visibleRect.x, visibleRect.y-visibleRect.height));
//             int first = getFirstVisibleIndex();
//             if (newFirst != -1) {
//               if (first == -1) {
//                 first = locationToIndex(visibleRect.getLocation());
//               }
//               Rectangle newFirstRect = getCellBounds(newFirst,newFirst);
//               Rectangle firstRect = getCellBounds(first,first);
//               if ((newFirstRect != null) &amp;amp;&amp;amp; (firstRect!=null)) {
//                 while ( (newFirstRect.y + visibleRect.height &amp;lt;
//                      firstRect.y + firstRect.height) &amp;amp;&amp;amp;
//                     (newFirstRect.y &amp;lt; firstRect.y) ) {
//                   newFirst++;
//                   newFirstRect = getCellBounds(newFirst,newFirst);
//                 }
//                 inc = visibleRect.y - newFirstRect.y;
//                 if ( (inc &amp;lt;= 0) &amp;amp;&amp;amp; (newFirstRect.y &amp;gt; 0)) {
//                   newFirst--;
//                   newFirstRect = getCellBounds(newFirst,newFirst);
//                   if (newFirstRect != null) {
//                     inc = visibleRect.y - newFirstRect.y;
//                   }
//                 }
//               }
//             }
//           }
//           return 128;
//         }
//         return super.getScrollableBlockIncrement(visibleRect, orientation, direction);
//       }
    };
    list.setCellRenderer(new DefaultListCellRenderer() {
      private final Color ec = new Color(240, 240, 240);
      @Override public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        if(isSelected) {
          setForeground(list.getSelectionForeground());
          setBackground(list.getSelectionBackground());
        }else{
          setForeground(list.getForeground());
          setBackground(((index%2==0))?ec:list.getBackground());
        }
        return this;
      }
    });
    return list;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
//     try{
//       UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//     }catch(Exception e) {
//       e.printStackTrace();
//     }
    JFrame frame = new JFrame(&quot;@title@&quot;);
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.getContentPane().add(new Bbb());
    frame.pack();
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JScrollBar&lt;/code&gt;の&lt;code&gt;UnitIncrement&lt;/code&gt;と&lt;code&gt;BlockIncrement&lt;/code&gt;についてのメモを追加。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2012-07-10 (火) 21:03:39&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/scrollincrement</link>
                <guid>http://terai.xrea.jp/swing/scrollincrement</guid>
                <pubDate>2003-12-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Look and Feelの変更</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;アプリケーションの&lt;code&gt;Look and Feel&lt;/code&gt;を変更します。以下のサンプルコードは、&lt;code&gt;%JAVA_HOME%/demo/jfc/SwingSet2/src/SwingSet2.java&lt;/code&gt;から引用改変したものです。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/LookAndFeel&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTPf78s81I/AAAAAAAAAeE/DIOTnqtAOnY/s800/LookAndFeel.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//%JAVA_HOME%/demo/jfc/SwingSet2/src/SwingSet2.java
// Possible Look &amp;amp; Feels
private static final String mac     = &quot;com.sun.java.swing.plaf.mac.MacLookAndFeel&quot;;
private static final String metal   = &quot;javax.swing.plaf.metal.MetalLookAndFeel&quot;;
private static final String motif   = &quot;com.sun.java.swing.plaf.motif.MotifLookAndFeel&quot;;
private static final String windows = &quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;;
private static final String gtk     = &quot;com.sun.java.swing.plaf.gtk.GTKLookAndFeel&quot;;
private static final String nimbus  = &quot;com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel&quot;;

// The current Look &amp;amp; Feel
private static String currentLookAndFeel = metal;
private final ButtonGroup lafMenuGroup = new ButtonGroup();
public JMenuItem createLafMenuItem(JMenu menu, String label, String laf) {
  JMenuItem mi = menu.add(new JRadioButtonMenuItem(label));
  lafMenuGroup.add(mi);
  mi.addActionListener(new ChangeLookAndFeelAction(laf));
  mi.setEnabled(isAvailableLookAndFeel(laf));
  return mi;
}
protected static boolean isAvailableLookAndFeel(String laf) {
  try{
    Class lnfClass = Class.forName(laf);
    LookAndFeel newLAF = (LookAndFeel)(lnfClass.newInstance());
    return newLAF.isSupportedLookAndFeel();
  }catch(Exception e) {
    return false;
  }
}
//...
private class ChangeLookAndFeelAction extends AbstractAction{
  private final String laf;
  protected ChangeLookAndFeelAction(String laf) {
    super(&quot;ChangeTheme&quot;);
    this.laf = laf;
  }
  @Override public void actionPerformed(ActionEvent e) {
    setLookAndFeel(laf);
  }
}
private void setLookAndFeel(String laf) {
  if(currentLookAndFeel.equals(laf)) return;
  currentLookAndFeel = laf;
  try{
    UIManager.setLookAndFeel(currentLookAndFeel);
    SwingUtilities.updateComponentTreeUI(frame);
  }catch(Exception ex) {
    ex.printStackTrace();
    System.out.println(&quot;Failed loading L&amp;amp;F: &quot; + currentLookAndFeel);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;metal&lt;/code&gt;、&lt;code&gt;motif&lt;/code&gt;、&lt;code&gt;windows&lt;/code&gt;などの&lt;code&gt;LookAndFeel&lt;/code&gt;を予め用意しておき、&lt;code&gt;isAvailableLookAndFeel(...)&lt;/code&gt;メソッドで、それらが実行した環境で使用できるかを調べてメニューの選択可不可を変更しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Look and Feel&lt;/code&gt;を切り替えて、いろんなコンポーネントの見栄えを比較したい場合は、&lt;code&gt;%JAVA_HOME%\demo\jfc\SwingSet2\SwingSet2.jar&lt;/code&gt;がお手軽です。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;SwingSet3&lt;/code&gt;では、&lt;code&gt;UIManager.getInstalledLookAndFeels()&lt;/code&gt;メソッドを使って利用可能な&lt;code&gt;LookAndFeel&lt;/code&gt;の一覧を取得し、これをメニューに表示しているようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InstalledLookAndFeels.html&quot;&gt;LookAndFeelの一覧を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;java.exe&lt;/code&gt;などのコマンドオプションでデフォルトの&lt;code&gt;Look and Feel&lt;/code&gt;を変更する場合は以下のように指定します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;java.exe -Dswing.defaultlaf=com.sun.java.swing.plaf.windows.WindowsLookAndFeel App
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;%JAVA_HOME%\lib&lt;/code&gt;以下に&lt;code&gt;swing.properties&lt;/code&gt;を作ってデフォルトの&lt;code&gt;Look and Feel&lt;/code&gt;を指定する方法もあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html#properties&quot;&gt;Specifying the Look and Feel: swing.properties File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;SystemLookAndFeel&lt;/code&gt;を使用する場合は、&lt;code&gt;UIManager.getSystemLookAndFeelClassName()&lt;/code&gt;でその実装クラス名を取得して設定します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
}catch(Exception e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;&lt;code&gt;Ubuntu(GNOME)&lt;/code&gt;で、上記のようにシステム&lt;code&gt;LookAndFeel&lt;/code&gt;を指定すると、&lt;code&gt;NullPointerException&lt;/code&gt;が発生する場合は、直前に&lt;code&gt;UIManager.getInstalledLookAndFeels()&lt;/code&gt;を呼んでおくと回避できるようです。&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.sun.com/katakai/entry/omegat_in_mdi_mode&quot;&gt;JDK1.6 で使うと JDK 側のバグ (6389282) に引っかかってしまうのか NPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogs.sun.com/katakai/entry/bad_issue_for_swing_gtk&quot;&gt;Java6 の痛いバグ… NetBeans デスクトップアプリが Linux で動かず… - Masaki Katakai&amp;#39;s Weblog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6u10&lt;/code&gt;で修正済

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6389282&quot;&gt;Bug ID: 6389282 NPE in GTKLookAndFeel.initSystemColorDefaults() on mustang when remote X11 displaying.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;How to Set the Look and Feel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/InstalledLookAndFeels.html&quot;&gt;LookAndFeelの一覧を取得する&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;こちらは、&lt;code&gt;SwingSet3&lt;/code&gt;からの引用です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;スクリーンショットなどを更新。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2008-03-28 (金) 21:37:52&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/lookandfeel</link>
                <guid>http://terai.xrea.jp/swing/lookandfeel</guid>
                <pubDate>2003-11-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFileChooserにファイルフィルタを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFileChooser&lt;/code&gt;にファイルフィルタを追加します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileFilter&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTMc7NJ5UI/AAAAAAAAAZM/p-hliI-ZnLs/s800/FileFilter.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFileChooser fileChooser = new JFileChooser();
fileChooser.addChoosableFileFilter(new FileFilter() {
  @Override public boolean accept(File file) {
    if(file.isDirectory()) return true;
    return file.getName().toLowerCase().endsWith(&quot;.jpg&quot;);
  }
  @Override public String getDescription() {
    return &quot;JPEGファイル(*.jpg)&quot;;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、フィルタを匿名インナークラスで書いていますが、複数のフィルタを追加する場合は、それぞれクラスを作ったほうがすっきり書けるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;addChoosableFileFilter(FileFilter)&lt;/code&gt;メソッドを使うと、そのフィルタが現在選択されているフィルタになります。例えば「すべてのファイル」をデフォルト(選択された状態)に戻したい場合は、以下のようにします。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;fileChooser.addChoosableFileFilter(myFilter);
fileChooser.setFileFilter(fileChooser.getAcceptAllFileFilter());
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 6&lt;/code&gt;では、新しく&lt;code&gt;javax.swing.filechooser.FileNameExtensionFilter&lt;/code&gt;クラスが追加されており、拡張子で選択できるファイルフィルタを簡単に作成することが出来ます(参考:&lt;a href=&quot;http://d.hatena.ne.jp/nowokay/20070228#1172660818&quot;&gt;JavaSE6の便利クラス - きしだのはてな&lt;/a&gt;)。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//FileNameExtensionFilter(String description, String... extensions)
FileFilter filter = new FileNameExtensionFilter(&quot;JPEGファイル(*.jpg)&quot;, &quot;jpg&quot;, &quot;jpeg&quot;);
fileChooser.addChoosableFileFilter(filter);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のように説明の後に、可変長引数で拡張子を複数指定することが可能です。ドットは必要なく、大文字小文字も区別されないようです。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6400960&quot;&gt;Bug ID: 6400960 Swing File*Filters should extend java.io.File*Filters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jpg&lt;/code&gt; → &lt;code&gt;.jpg&lt;/code&gt; -- &lt;a href=&quot;http://terai.xrea.jp/MT.html&quot;&gt;MT&lt;/a&gt; 2003-12-24 (水) 12:15:54

&lt;ul&gt;
&lt;li&gt;直しておきました。どもです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2003-12-24 (水) 12:41:13&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addChoosableFileFilter&lt;/code&gt;を何度も呼ぶと最後に追加されたものがデフォルトになるが、例えば&lt;code&gt;2&lt;/code&gt;番目に追加した&lt;code&gt;filter&lt;/code&gt;を最後に再び追加すると&lt;code&gt;2&lt;/code&gt;番目がデフォルトになる。 -- &lt;a href=&quot;http://terai.xrea.jp/Y.html&quot;&gt;Y&lt;/a&gt; 2006-11-27 (月) 15:21:26

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addChoosableFileFilter(FileFilter)&lt;/code&gt;は、その&lt;code&gt;FileFilter&lt;/code&gt;がすでに含まれている場合は、&lt;code&gt;setFileFilter(FileFilter)&lt;/code&gt;だけ実行するみたいですね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2006-11-28 (火) 16:44:40&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/filefilter</link>
                <guid>http://terai.xrea.jp/swing/filefilter</guid>
                <pubDate>2003-11-17T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JMenuに最近使ったファイルを追加</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JMenu&lt;/code&gt;に、「最近使ったファイル(&lt;code&gt;F&lt;/code&gt;)」を履歴として追加していきます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FileHistory&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTMffElRbI/AAAAAAAAAZQ/1d47Mop5D-0/s800/FileHistory.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private int MAXHISTORY = 3;
private void updateHistory(String str) {
  fileHistory.removeAll();
  fh.removeElement(str);
  fh.insertElementAt(str, 0);
  if(fh.size()&amp;gt;MAXHISTORY) fh.remove(fh.size()-1);
  for(int i=0;i&amp;lt;fh.size();i++) {
    String name = (String)fh.elementAt(i);
    String num  = Integer.toString(i+1);
    JMenuItem mi = new JMenuItem(new HistoryAction(new File(name)));
    mi.setText(num + &quot;: &quot;+ name);
    byte[] bt = num.getBytes();
    mi.setMnemonic((int) bt[0]);
    fileHistory.add(mi, i);
  }
}
class HistoryAction extends AbstractAction{
  final private File file;
  public HistoryAction(File file) {
    super();
    this.file = file;
  }
  @Override public void actionPerformed(ActionEvent e) {
    historyActionPerformed(file);
  }
}
private void historyActionPerformed(File file) {
  Object[] obj = {&quot;本来はファイルを開いたりする。\n&quot;,
                  &quot;このサンプルではなにもせずに\n&quot;,
                  &quot;履歴の先頭にファイルを移動する。&quot;};
  JOptionPane.showMessageDialog(this, obj, APP_NAME,
                  JOptionPane.INFORMATION_MESSAGE);
  repaint();
  updateHistory(file.getAbsolutePath());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、「ファイル-&amp;gt;開く」で、ダミーファイルの履歴が残ります。履歴は&lt;code&gt;3&lt;/code&gt;件まで残り、履歴をメニューから選択すると、そのファイルが履歴の先頭に移動します。&lt;/p&gt;

&lt;p&gt;実際に使用する場合は、ダミーファイルを使用している箇所を修正したり、アプリケーションを終了する際に履歴を保存したりするコードを追加する必要があります。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ResourceMenuBar.html&quot;&gt;Resourceファイルからメニューバーを生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/Preferences.html&quot;&gt;JFrameの位置・サイズを記憶する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/filehistory</link>
                <guid>http://terai.xrea.jp/swing/filehistory</guid>
                <pubDate>2003-11-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Backup Fileを番号付きで作成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://terai.xrea.jp/xyzzy.html&quot;&gt;xyzzy&lt;/a&gt;風の番号付きバックアップファイルを作成します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/BackupFile&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTH9enrSII/AAAAAAAAASA/du4XRgNsIZs/s800/BackupFile.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private File makeBackupFile(File file, int intold, int intnew) {
  File testFile = null;
  String newfilename = file.getAbsolutePath();
  if(intold==0 &amp;amp;&amp;amp; intnew==0) {
    file.delete();
    return new File(newfilename);
  }
  boolean testFileFlag = false;
  for(int i=1;i&amp;lt;=intold;i++) {
    testFile = new File(file.getParentFile(), file.getName()+&quot;.&quot;+i+&quot;~&quot;);
    if(!testFile.exists()) {
      testFileFlag = true;
      break;
    }
  }
  if(!testFileFlag) {
    for(int i=intold+1;i&amp;lt;=intold+intnew;i++) {
      testFile = new File(file.getParentFile(), file.getName()+&quot;.&quot;+i+&quot;~&quot;);
      if(!testFile.exists()) {
        testFileFlag = true;
        break;
      }
    }
  }
  if(testFileFlag) {
    System.out.println(&quot;createBKUP1&quot;+testFile.getAbsolutePath());
    file.renameTo(testFile);
  }else{
    File tmpFile3 = new File(file.getParentFile(),
                             file.getName()+&quot;.&quot;+(intold+1)+&quot;~&quot;);
    tmpFile3.delete();
    for(int i=intold+2;i&amp;lt;=intold+intnew;i++) {
      File tmpFile1 = new File(file.getParentFile(),
                               file.getName()+&quot;.&quot;+i+&quot;~&quot;);
      File tmpFile2 = new File(file.getParentFile(),
                               file.getName()+&quot;.&quot;+(i-1)+&quot;~&quot;);
      tmpFile1.renameTo(tmpFile2);
    }
    File tmpFile = new File(file.getParentFile(),
                            file.getName()+&quot;.&quot;+(intold+intnew)+&quot;~&quot;);
    System.out.println(&quot;changeBKUP2&quot;+tmpFile.getAbsolutePath());
    file.renameTo(tmpFile);
  }
  //System.out.println(newfilename);
  return new File(newfilename);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;a href=&quot;http://terai.xrea.jp/xyzzy.html&quot;&gt;xyzzy&lt;/a&gt;風の番号付きバックアップのテストを行っています。&lt;/p&gt;

&lt;p&gt;以下の例では、古いバージョンを&lt;code&gt;2&lt;/code&gt;つ、新しいバージョンを&lt;code&gt;3&lt;/code&gt;つバックアップとして残します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.1~&lt;/code&gt;から&lt;code&gt;tmp.foo.5~&lt;/code&gt;が残される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.1~&lt;/code&gt;がもっとも古いバージョンのファイルになる&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;バックアップファイルが&lt;code&gt;5&lt;/code&gt;個以上になった場合、古い方のバージョン&lt;code&gt;2&lt;/code&gt;つはそのまま残し、新しいバージョンをずらしてバックアップが更新されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.1~&lt;/code&gt;, &lt;code&gt;tmp.foo.2~&lt;/code&gt;は残される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.3~&lt;/code&gt;は削除される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.4~&lt;/code&gt;は&lt;code&gt;tmp.foo.3~&lt;/code&gt;にリネーム&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.5~&lt;/code&gt;は&lt;code&gt;tmp.foo.4~&lt;/code&gt;にリネーム&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp.foo.5~&lt;/code&gt;が新にバックアップとして生成される&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;File tmpFile = File.createTempFile(&quot;tmp&quot;, &quot;.foo~&quot;, file.getParentFile());
File file = makeBackupFile(file, 2, 3);
tmpFile.renameTo(file);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/backupfile</link>
                <guid>http://terai.xrea.jp/swing/backupfile</guid>
                <pubDate>2003-11-03T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>UIManagerで使用するFontを統一</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Swing&lt;/code&gt;の各種コンポーネントで使用する全てのフォントを一気に変更します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/FontChange&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNJ5XQrjI/AAAAAAAAAaU/lvxCohYLmBI/s800/FontChange.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private void updateFont(final Font font) {
  FontUIResource fontUIResource = new FontUIResource(font);
  for(java.util.Map.Entry&amp;lt;?,?&amp;gt; entry: UIManager.getDefaults().entrySet()) {
    if(entry.getKey().toString().toLowerCase().endsWith(&quot;font&quot;)) {
      UIManager.put(entry.getKey(), fontUIResource);
    }
  }
  //SwingUtilities.updateComponentTreeUI(this);
  recursiveUpdateUI(this);
  frame.pack();
}
private void recursiveUpdateUI(JComponent p) {
  for(Component c: p.getComponents()) {
    if(c instanceof JToolBar) {
      continue;
    }else if(c instanceof JComponent) {
      JComponent jc = (JComponent)c;
      jc.updateUI();
      if(jc.getComponentCount()&amp;gt;0) recursiveUpdateUI(jc);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、ツールバーのボタンでコンポーネントが使用するフォントを切り替えています。ただしツールバーだけは、&lt;code&gt;UI&lt;/code&gt;の&lt;code&gt;update&lt;/code&gt;(フォントの変更)を除外しています。&lt;/p&gt;

&lt;p&gt;全部のコンポーネントではなく、例えばテーブルのフォントだけ変更したい場合は以下のように設定します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;Table.font&quot;, new FontUIResource(font));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;UIManager&lt;/code&gt;から、&lt;code&gt;UIDefaults&lt;/code&gt;のキー一覧を作るなどして、いろいろ検索してみてください。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//キー一覧の作成例
import java.util.Map;
import javax.swing.UIManager;
class Test {
  public static void main(String[] args) {
    //for(Object o:UIManager.getDefaults().keySet()) //は、うまくいかない？
    //for(Object o:UIManager.getLookAndFeelDefaults().keySet())
    for(Map.Entry&amp;lt;?,?&amp;gt; entry: UIManager.getDefaults().entrySet())
      System.out.println(entry.getKey());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Metal&lt;/code&gt;で使用されているフォントが気に入らないだけなら、システム&lt;code&gt;LookAndFeel&lt;/code&gt;を使用するか、&lt;code&gt;Metal&lt;/code&gt;でボールドフォントを無効にするなどの方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;ではなく、&lt;code&gt;SystemLookAndFeel&lt;/code&gt;を使用する&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;try{
  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
}catch(Exception e) {
  e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MetalLookAndFeel&lt;/code&gt;で、&lt;code&gt;bold fonts&lt;/code&gt;を無効にする場合

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/BoldMetal.html&quot;&gt;MetalLookAndFeelで太字フォントを使用しない&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;UIManager.put(&quot;swing.boldMetal&quot;, Boolean.FALSE);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JComboBox#setFont&lt;/code&gt;をしても、&lt;code&gt;JComboBox&lt;/code&gt;自体のサイズが更新されない

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5006246&quot;&gt;JCombobox doesn&amp;#39;t get resized according to font size change&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;combo.setFont(font);
//以下回避方法
combo.setPrototypeDisplayValue(null); //null:default?
//or combo.firePropertyChange(&quot;prototypeDisplayValue&quot;,0,1); //0,1:dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;特定のインスタンスだけ、&lt;code&gt;LookAndFeel&lt;/code&gt;などを変更しても常に独自のフォントを設定したい場合、&lt;code&gt;JComponent#updateUI()&lt;/code&gt;をオーバーライドして設定する方法もあります。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JLabel label = new JLabel() {
  @Override public void updateUI() {
    super.updateUI();
    setFont(...);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://java-house.jp/ml/archive/j-h-b/049474.html&quot;&gt;Re: setFont に関して&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JFileChooser&lt;/code&gt;インスタンス化前に上記ソースを実行すると &lt;code&gt;ConcurrentModificationException&lt;/code&gt;がスローされるのですが... 「&lt;code&gt;JDK1.4.2_02&lt;/code&gt;」プロパティーが動的に変化するとしたらあまり有効な方法でないのでは? -- &lt;a href=&quot;http://terai.xrea.jp/MT.html&quot;&gt;MT&lt;/a&gt; 2003-12-24 (水) 14:22:15&lt;/li&gt;
&lt;li&gt;割と手軽なので重宝するのですが、ちゃんとスレッド処理考えたほうがいいのかもしれませんね。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2003-12-25 (木) 20:06:15&lt;/li&gt;
&lt;li&gt;レスありがとうございます _ _)m とりあえず &lt;code&gt;Container&lt;/code&gt; を辿りながら含まれている &lt;code&gt;Component&lt;/code&gt; 毎に &lt;code&gt;setFont&lt;/code&gt; 呼ぶようなユーティリティ用意してしのいでいます＾＾； -- &lt;a href=&quot;http://terai.xrea.jp/MT.html&quot;&gt;MT&lt;/a&gt; 2003-12-26 (金) 16:20:14&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIManager&lt;/code&gt;のリストにないコンポーネント（独自で作成したボタンなどのコンポーネント）なども追加すると変更が適用されるのでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/mari.html&quot;&gt;mari&lt;/a&gt; 2004-01-22 (木) 10:53:29&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JButton&lt;/code&gt;などの&lt;code&gt;Swing&lt;/code&gt;コンポーネントを継承していれば変更されるはずです。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-01-22 (木) 11:46:40&lt;/li&gt;
&lt;li&gt;レスありがとうございます。その場合、独自のコンポーネントを追加すると、そのコンポーネントのみ変更が適用されますか？&lt;code&gt;Panel&lt;/code&gt;を追加したら全ての&lt;code&gt;panel&lt;/code&gt;に適用されてしまってうまくいきませんでした。良い方法があったら教えてください。 -- &lt;a href=&quot;http://terai.xrea.jp/mari.html&quot;&gt;mari&lt;/a&gt; 2004-01-23 (金) 10:24:45&lt;/li&gt;
&lt;li&gt;すべてのコンポーネントに一々設定するのが面倒な場合のための方法なので、上記の場合は使用する意味が無いですね(^^;。ある独自コンポーネントのみフォントを変えたいのなら、コンストラクタなどで普通に&lt;code&gt;setFont&lt;/code&gt;すればいいのでないかと思うのですが、どうなんでしょう？そうじゃなくて、あるパネル以下のコンポーネントのフォントを一気に変えたいということなんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-01-23 (金) 12:13:27&lt;/li&gt;
&lt;li&gt;たびたびすみません。全体のフォントの大きさをツールバーの選択によって変化させるようにしたいです。フォントだけ変化させたいのですが、コンストラクタなどで勝手に&lt;code&gt;setBackground&lt;/code&gt;しているコンポーネントは&lt;code&gt;Look and Feel&lt;/code&gt;で設定しているデフォルトの&lt;code&gt;background&lt;/code&gt;に変わってしまいました。また&lt;code&gt;new&lt;/code&gt;するわけではないので、そのコンポーネントのみのデフォルトをどこかで設定できたらいいなー、と思いました。&lt;code&gt;Look and Feel&lt;/code&gt;でも&lt;code&gt;panel&lt;/code&gt;だったら&lt;code&gt;panel&lt;/code&gt;全ての設定しかできないのでしょうか？有効な方法があったら教えてください。よろしくお願いいたします。 -- &lt;a href=&quot;http://terai.xrea.jp/mari.html&quot;&gt;mari&lt;/a&gt; 2004-01-23 (金) 14:05:47&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Look and Feel&lt;/code&gt;で変更するのではなく、イベントリスナーを作って実装するのはどうでしょう？はずしてるかもしれませんが、とりあえずサンプル置いておきます。初期値はコンストラクタで指定してます。ツールバーじゃなくてメニューで、フォントを切り替えてます。コンボボックスを切り替えたときにサイズがおかしいのは愛嬌ということで…。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-01-23 (金) 15:39:27

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/EventListener.html&quot;&gt;EventListenerを実装して独自イベント作成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;すばらしいサンプルありがとうございます！参考にさせていただきました☆フォントの変更を&lt;code&gt;Look and Feel&lt;/code&gt;で行って、残りの描画できなかった背景色などを&lt;code&gt;PropertyChangeListenerを&lt;/code&gt;実装して描画しなおす、という方法も考えたのですが、こちらでも問題ないでしょうか？主題から外れてしまって申し訳ありません・・・。 -- &lt;a href=&quot;http://terai.xrea.jp/mari.html&quot;&gt;mari&lt;/a&gt; 2004-01-26 (月) 09:56:38&lt;/li&gt;
&lt;li&gt;次のネタ用にイベント作っただけなので、&lt;code&gt;PropertyChangeListener&lt;/code&gt;使うのはまったく問題ないと思います。むしろちゃんと&lt;code&gt;JavaBeans&lt;/code&gt;にして&lt;code&gt;PropertyChangeListener&lt;/code&gt;使うほうがいいかもしれません(^^;。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2004-01-26 (月) 12:54:00&lt;/li&gt;
&lt;li&gt;updateUI()をオーバーライドする方法を追記。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-02-26 (火) 16:15:09&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nimbus&lt;/code&gt;の場合は、この方法では駄目でした。バグのようです。回避策は、&lt;code&gt;UIManager.getLookAndFeelDefaults().put(&amp;quot;defaultFont&amp;quot;, new Font(Font.SANS_SERIF, 0, 20));&lt;/code&gt;をフレームを&lt;code&gt;new&lt;/code&gt;する前に実行する事でした。 参考：&lt;a href=&quot;http://stackoverflow.com/questions/949353/java-altering-ui-fonts-nimbus-doesnt-work&quot;&gt;swing - Java: Altering UI fonts (Nimbus) doesn&amp;#39;t work! - Stack Overflow&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/%E5%8C%BF%E5%90%8D.html&quot;&gt;匿名&lt;/a&gt; 2013-05-25 (土) 09:14:08

&lt;ul&gt;
&lt;li&gt;情報ありがとうございます。これバグだとすると修正されるのかな？(仕様になりそうな気がしますが) 参考のリンク先にあるjasperpotts.comの&lt;code&gt;Nimbus Defaults&lt;/code&gt;一覧が便利ですね(チュートリアル&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html&quot;&gt;Nimbus Defaults (The Java™ Tutorials &amp;gt; Creating a GUI With JFC/Swing &amp;gt; Modifying the Look and Feel)&lt;/a&gt;にも転載されています)。このサイトでは、そちらを参考にして&lt;code&gt;NimbusLookAndFeel&lt;/code&gt;の色をまとめて変換するサンプル(&lt;a href=&quot;http://terai.xrea.jp/Swing/NimbusColorPalette.html&quot;&gt;NimbusLookAndFeelのカラーパレット&lt;/a&gt;)を作成しています。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2013-05-26 (日) 00:51:21&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/fontchange</link>
                <guid>http://terai.xrea.jp/swing/fontchange</guid>
                <pubDate>2003-10-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>SystemColorの使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Swing&lt;/code&gt;コンポーネントの色を&lt;code&gt;SystemColor&lt;/code&gt;クラスから取得します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SystemColor&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTUESCOFBI/AAAAAAAAAlc/eXW_0wilSew/s800/SystemColor.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Color color = SystemColor.textHighlightText;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;各プラットフォームのデスクトップデザインに対応したシステムカラーは、&lt;code&gt;SystemColor&lt;/code&gt;クラスの&lt;code&gt;static&lt;/code&gt;フィールドにまとめて定義されています。例えば、&lt;code&gt;Windows&lt;/code&gt;プラットフォームでデスクトップのカスタマイズでテーマなどを変更すると、この&lt;code&gt;SystemColor&lt;/code&gt;も動的にその変更に追従します(&lt;code&gt;LookAndFeel&lt;/code&gt;の変更では変化しない)。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.asahi-net.or.jp/%7Edp8t-asm/java/tips/SystemColor.html&quot;&gt;システムカラー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GTK&lt;/code&gt;の環境でその&lt;code&gt;SystemColor&lt;/code&gt;を取得することは出来ないようです。&lt;code&gt;UIManager&lt;/code&gt;を使った方がいいかもしれません。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-05-07 (月) 17:04:59&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/systemcolor</link>
                <guid>http://terai.xrea.jp/swing/systemcolor</guid>
                <pubDate>2003-10-20T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JWindowを使ったSplash Screenの表示</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JWindow&lt;/code&gt;を使って、&lt;code&gt;Splash Screen&lt;/code&gt;を表示します。以下のサンプルコードは、&lt;code&gt;%JAVA_HOME%/demo/jfc/SwingSet2/src/SwingSet2.java&lt;/code&gt;から引用改変したものです。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/SplashScreen&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTTtxuiuuI/AAAAAAAAAk4/JhuyuS80C4M/s800/SplashScreen.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private JWindow splashScreen;
private JLabel  splashLabel;
public MainPanel() {
  super();
  createSplashScreen(SPLASH_PATH);
  EventQueue.invokeLater(new Runnable() {
    @Override public void run() {
      showSplashScreen();
    }
  });
  //長い処理のdummy
  try{
    Thread.sleep(3000);
  }catch(InterruptedException e) {
    System.out.println(e);
  }
  EventQueue.invokeLater(new Runnable() {
    @Override public void run() {
      showPanel();
      hideSplash();
    }
  });
}
public void createSplashScreen(String path) {
  ImageIcon img = new ImageIcon(getClass().getResource(path));
  splashLabel   = new JLabel(img);
  splashScreen  = new JWindow(getFrame());
  splashScreen.getContentPane().add(splashLabel);
  splashScreen.pack();
  splashScreen.setLocationRelativeTo(null);
}
public void showSplashScreen() {
  splashScreen.setVisible(true);
}
public void hideSplash() {
  splashScreen.setVisible(false);
  splashScreen = null;
  splashLabel  = null;
}
public JFrame getFrame() {
  return frame;
}
public void showPanel() {
  this.setPreferredSize(new Dimension(300, 200));
  frame.getContentPane().add(this);
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  frame.pack();
  frame.setLocationRelativeTo(null);
  frame.setVisible(true);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルコードでは、クラスパスの通った場所にある&lt;code&gt;/resources/images/splash.png&lt;/code&gt;を読み込んでスプラッシュ・スクリーン(起動画面)を表示しています。&lt;code&gt;JWindow&lt;/code&gt;の表示、非表示は、イベントディスパッチスレッド(&lt;code&gt;EDT&lt;/code&gt;)で行われるように、&lt;code&gt;EventQueue.invokeLater&lt;/code&gt;の中で実行しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;サンプルの画像は、&lt;a href=&quot;http://www.n-generate.com/download.html&quot;&gt;n-Gen&lt;/a&gt;を使って生成しています。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Java SE 6&lt;/code&gt;では、起動時にスプラッシュ・スクリーンとして表示する画像をコマンドラインや&lt;code&gt;manifest.mf&lt;/code&gt;で指定したり、&lt;code&gt;SplashScreen&lt;/code&gt;オブジェクトを生成して表示することができるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://web.archive.org/web/20090419180550/http://java.sun.com/developer/JDCTechTips/2005/tt1115.html#1&quot;&gt;SPLASH SCREENS AND JAVA SE 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/articles/javase/splashscreen-135938.html&quot;&gt;New Splash-Screen Functionality in Java SE 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/ProgressSplashScreen.html&quot;&gt;JDialogでモーダルなJProgressBar付きSplash Screenを表示する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Splash Screen&lt;/code&gt;を&lt;code&gt;Java SE 6&lt;/code&gt;の機能で表示させるために、&lt;code&gt;splashScreen.setVisible(false)&lt;/code&gt;にしていたテスト版のサンプルが添付されていたのを修正しました。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-09-25 (火) 18:56:13&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/splashscreen</link>
                <guid>http://terai.xrea.jp/swing/splashscreen</guid>
                <pubDate>2003-10-13T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Resourceファイルからメニューバーを生成</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;リソースファイルを使ってメニューバーやツールバーを生成します。詳しくは&lt;code&gt;%JAVA_HOME%/demo/jfc/Notepad/src/Notepad.java&lt;/code&gt;を参照してください。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/ResourceMenuBar&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/_9Z4BYR88imo/TQTR15q_ELI/AAAAAAAAAh0/2H6dW1g0eiY/s800/ResourceMenuBar.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JMenuBar createMenubar() {
  JMenuBar mb = new JMenuBar();
  String[] menuKeys = tokenize(getResourceString(&quot;menubar&quot;));
  for(int i=0;i&amp;lt;menuKeys.length;i++) {
    JMenu m = createMenu(menuKeys[i]);
    if(m != null) {
      mb.add(m);
    }
  }
  return mb;
}

private JMenu createMenu(String key) {
  String[] itemKeys = tokenize(getResourceString(key));
  String mitext = getResourceString(key + labelSuffix);
  JMenu menu = new JMenu(mitext);
  String mn = getResourceString(key + mneSuffix);
  if(mn!=null) {
    String tmp = mn.toUpperCase().trim();
    if(tmp.length()==1) {
      if(mitext.indexOf(tmp)&amp;lt;0) {
       menu.setText(mitext+&quot; (&quot;+tmp+&quot;)&quot;);
      }
      byte[] bt = tmp.getBytes();
      menu.setMnemonic((int) bt[0]);
    }
  }
  for(int i=0;i&amp;lt;itemKeys.length;i++) {
    if(itemKeys[i].equals(&quot;-&quot;)) {
      menu.addSeparator();
    }else{
      JMenuItem mi = createMenuItem(itemKeys[i]);
      menu.add(mi);
    }
  }
  menus.put(key, menu);
  return menu;
}

private JMenuItem createMenuItem(String cmd) {
  String mitext = getResourceString(cmd + labelSuffix);
  JMenuItem mi = new JMenuItem(mitext);
  URL url = getResource(cmd+imageSuffix);
  if(url!=null) {
    mi.setHorizontalTextPosition(JButton.RIGHT);
    mi.setIcon(new ImageIcon(url));
  }
  String astr = getResourceString(cmd + actionSuffix);
  if(astr == null) {
    astr = cmd;
  }
  String mn = getResourceString(cmd + mneSuffix);
  if(mn!=null) {
    String tmp = mn.toUpperCase().trim();
    if(tmp.length()==1) {
      if(mitext.indexOf(tmp)&amp;lt;0) {
        mi.setText(mitext+&quot; (&quot;+tmp+&quot;)&quot;);
      }
      byte[] bt = tmp.getBytes();
      mi.setMnemonic((int) bt[0]);
    }
  }
  mi.setActionCommand(astr);
  Action a = getAction(astr);
  if(a!=null) {
    mi.addActionListener(a);
    //a.addPropertyChangeListener(createActionChangeListener(mi));
    mi.setEnabled(a.isEnabled());
  }else{
    mi.setEnabled(false);
  }
  menuItems.put(cmd, mi);
  return mi;
}

public JMenuItem getMenuItem(String cmd) {
  return (JMenuItem) menuItems.get(cmd);
}

public JMenu getMenu(String cmd) {
  return (JMenu) menus.get(cmd);
}

public Action getAction(String cmd) {
  return (Action) commands.get(cmd);
}

public Action[] getActions() {
  return actions;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;アプリケーションの起動時に、リソースファイルからメニューのテキストの生成、アイコン、ショートカットなどの指定を行います。&lt;/p&gt;

&lt;p&gt;上記のサンプルでは、バージョンと終了しか機能しないので、このページにある&lt;code&gt;src.zip&lt;/code&gt;の&lt;code&gt;Main.properties.utf8&lt;/code&gt;、&lt;code&gt;Main_ja_JP.properties.utf8&lt;/code&gt;(日本語用)といったリソースファイルを編集したり、新しいリソースファイルを作成してみてください。&lt;/p&gt;

&lt;p&gt;ソースコードの方では以下のように&lt;code&gt;defaultActions&lt;/code&gt;に、上記の&lt;code&gt;properties&lt;/code&gt;ファイルに書いた&lt;code&gt;Action&lt;/code&gt;を追加します。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public Action[] defaultActions = {
  new NewAction(),
  //new OpenAction(),
  new ExitAction(),
  new HelpAction(),
  new VersionAction(),
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リソースファイルで日本語などをそのまま使用することは出来ないので、以下のように&lt;code&gt;ant&lt;/code&gt;から&lt;code&gt;native2ascii&lt;/code&gt;でユニコードエスケープしています。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;&amp;lt;condition property=&quot;have.resources&quot;&amp;gt;
 &amp;lt;available file=&quot;${res.dir}&quot; /&amp;gt;
&amp;lt;/condition&amp;gt;
&amp;lt;target name=&quot;prepare-resource&quot; depends=&quot;prepare&quot; if=&quot;have.resources&quot;&amp;gt;
 &amp;lt;mkdir dir=&quot;${build.res}&quot; /&amp;gt;
 &amp;lt;native2ascii encoding=&quot;UTF-8&quot; src=&quot;${res.dir}&quot; dest=&quot;${build.res}&quot;
               includes=&quot;**/*.properties.utf8&quot; ext=&quot;&quot; /&amp;gt;
 &amp;lt;copy todir=&quot;${build.res}&quot;&amp;gt;
  &amp;lt;fileset dir=&quot;${res.dir}&quot; excludes=&quot;**/*.properties.*, **/*.bak&quot; /&amp;gt;
 &amp;lt;/copy&amp;gt;
&amp;lt;/target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;面倒な場合は、&lt;code&gt;JDK 1.5&lt;/code&gt;での、&lt;code&gt;XML&lt;/code&gt;に対応した&lt;code&gt;Properties&lt;/code&gt;を使用するようにしてみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考: &lt;a href=&quot;http://www.javainthebox.net/laboratory/J2SE1.5/TinyTips/Properties/Properties.html&quot;&gt;J2SE 5.0 Tiger 虎の穴 Properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;なら、&lt;code&gt;native2ascii&lt;/code&gt;で変換しなくても、リソースファイルのエンコードを指定して読み込むことが出来ます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;参考

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/shin/20090707/p4&quot;&gt;Java 小ネタ千夜一夜 第13夜 Java SE 6はnative2ascii使わなくていいのはみんな知っていると思うが&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/api/java/util/ResourceBundle.Control.html&quot;&gt;ResourceBundle.Control (Java Platform SE 6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;ResourceBundle res = ResourceBundle.getBundle(baseName, new ResourceBundle.Control() {
  @Override public java.util.List&amp;lt;String&amp;gt; getFormats(String baseName) {
    if (baseName == null) throw new NullPointerException();
    return Arrays.asList(&quot;properties&quot;);
  }
  @Override public ResourceBundle newBundle(
      String baseName, Locale locale, String format, ClassLoader loader, boolean reload)
        throws IllegalAccessException, InstantiationException, IOException {
    if (baseName == null || locale == null || format == null || loader == null)
        throw new NullPointerException();
    ResourceBundle bundle = null;
    if (format.equals(&quot;properties&quot;)) {
      String bundleName = toBundleName(baseName, locale);
      String resourceName = toResourceName(bundleName, format);
      InputStream stream = null;
      if (reload) {
        URL url = loader.getResource(resourceName);
        if (url != null) {
          URLConnection connection = url.openConnection();
          if (connection != null) {
            connection.setUseCaches(false);
            stream = connection.getInputStream();
          }
        }
      } else {
        stream = loader.getResourceAsStream(resourceName);
      }
      if (stream != null) {
        //BufferedInputStream bis = new BufferedInputStream(stream);
        Reader r = new BufferedReader(new InputStreamReader(stream, &quot;UTF-8&quot;));
        bundle = new PropertyResourceBundle(r);
        r.close();
      }
    }
    return bundle;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/resourcemenubar</link>
                <guid>http://terai.xrea.jp/swing/resourcemenubar</guid>
                <pubDate>2003-10-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの位置・サイズを記憶する</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Preferences&lt;/code&gt;(レジストリなど)にフレーム(パネル)の位置・サイズを記憶しておきます。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/Preferences&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTRGT4S7mI/AAAAAAAAAgo/GDUrxdRJ4x4/s800/Preferences.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public MainPanel(final JFrame frame) {
  super(new BorderLayout());
  this.frame = frame;
  this.prefs = Preferences.userNodeForPackage(getClass());
  frame.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override public void windowClosing(WindowEvent e) {
      saveLocation();
      frame.dispose();
    }
  });
  frame.addComponentListener(new ComponentAdapter() {
    @Override public void componentMoved(ComponentEvent e) {
      if(frame.getExtendedState()==JFrame.NORMAL) {
        Point pt = frame.getLocationOnScreen();
        if(pt.x&amp;lt;0 || pt.y&amp;lt;0) return;
        try{
          pos.setLocation(pt);
        }catch(IllegalComponentStateException icse) {}
      }
    }
    @Override public void componentResized(ComponentEvent e) {
      if(frame.getExtendedState()==JFrame.NORMAL) {
        dim.setSize(getSize());
      }
    }
  });
  exitButton.setAction(new AbstractAction(&quot;終了&quot;) {
    @Override public void actionPerformed(ActionEvent evt) {
      saveLocation();
      frame.dispose();
    }
  });
  clearButton.setAction(
       new AbstractAction(&quot;レジストリなどに保存した値をクリアして終了&quot;) {
    @Override public void actionPerformed(ActionEvent evt) {
      try{
        prefs.clear();
        prefs.flush();
      }catch(java.util.prefs.BackingStoreException e) {
        e.printStackTrace();
      }
      frame.dispose();
    }
  });
  int wdim = prefs.getInt(PREFIX+&quot;dimw&quot;, dim.width);
  int hdim = prefs.getInt(PREFIX+&quot;dimh&quot;, dim.height);
  dim.setSize(wdim, hdim);
  setPreferredSize(dim);

  Rectangle screen = frame.getGraphicsConfiguration().getBounds();
  pos.setLocation(screen.x + screen.width/2  - dim.width/2,
          screen.y + screen.height/2 - dim.height/2);
  int xpos = prefs.getInt(PREFIX+&quot;locx&quot;, pos.x);
  int ypos = prefs.getInt(PREFIX+&quot;locy&quot;, pos.y);
  pos.setLocation(xpos,ypos);
  frame.setLocation(pos.x, pos.y);
  //......
}
private void saveLocation() {
  prefs.putInt(PREFIX+&quot;locx&quot;, pos.x);
  prefs.putInt(PREFIX+&quot;locy&quot;, pos.y);
  prefs.putInt(PREFIX+&quot;dimw&quot;, dim.width);
  prefs.putInt(PREFIX+&quot;dimh&quot;, dim.height);
  try{
    prefs.flush();
  }catch(java.util.prefs.BackingStoreException e) {
    e.printStackTrace();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、対象フレームが最大化、最小化された状態で終了した場合、その前の位置サイズを記憶しておくようになっています。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/preferences/overview.html&quot;&gt;Preferences API の概要&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;このページの概要にある「&lt;code&gt;Java&lt;/code&gt; コレクション &lt;code&gt;API&lt;/code&gt; の設計に関する &lt;code&gt;FAQ&lt;/code&gt;」は多分、「&lt;code&gt;Preferences API&lt;/code&gt; の設計に関する &lt;code&gt;FAQ&lt;/code&gt;」の間違い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/PersistenceService.html&quot;&gt;PersistenceServiceを使ってJFrameの位置・サイズを記憶&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メモ: &lt;a href=&quot;http://sqs.cmr.sfc.keio.ac.jp/tdiary/20070212.html#p01&quot;&gt;Preferences APIがJava6上では動かない - 日々是開発: SQS Development(2007-02-12)&lt;/a&gt; -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-06-14 (木) 14:42:00&lt;/li&gt;
&lt;li&gt;最大化した状態で終了すると、&lt;code&gt;(x,y)&lt;/code&gt;が&lt;code&gt;(-4,-4)&lt;/code&gt;で記録される。最大化すると、どうやら&lt;code&gt;JFrame.NORMAL&lt;/code&gt;のまま左端に移動してそれから最大扱いになってるようです。だから&lt;code&gt;componentMoved&lt;/code&gt;が誤爆してる。 -- &lt;a href=&quot;http://terai.xrea.jp/Tomopy.html&quot;&gt;Tomopy&lt;/a&gt; 2007-10-26 (金) 12:20:16

&lt;ul&gt;
&lt;li&gt;ご指摘ありがとうございます。位置がマイナスの場合は、保存しないほうがよさそうですね。修正しておきます。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2007-10-26 (金) 13:37:15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/preferences</link>
                <guid>http://terai.xrea.jp/swing/preferences</guid>
                <pubDate>2003-09-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>JFrameの最小サイズ</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JFrame&lt;/code&gt;や&lt;code&gt;JDialog&lt;/code&gt;の最小サイズを指定します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/MinimumFrame&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/_9Z4BYR88imo/TQTP41PdCsI/AAAAAAAAAes/cxniHSm55rQ/s800/MinimumFrame.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//1.6以上で有効
frame.setMinimumSize(new Dimension(320, 150));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;JFrame&lt;/code&gt;などを縮小する際の最小サイズを設定しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.6&lt;/code&gt;以上の場合、&lt;code&gt;JFrame#setMinimumSize&lt;/code&gt;メソッドを使用することで、最小サイズを指定することができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JDK 1.5&lt;/code&gt;で、&lt;code&gt;JFrame#setMinimumSize&lt;/code&gt;メソッドを使う場合は、&lt;code&gt;JFrame.setDefaultLookAndFeelDecorated(true)&lt;/code&gt;、かつウィンドウのリサイズに応じてレイアウトを再評価するようにしておく必要があるようです。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;JFrame.setDefaultLookAndFeelDecorated(true);
Toolkit.getDefaultToolkit().setDynamicLayout(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;JFrame#setMinimumSize&lt;/code&gt;メソッドを使わず、&lt;code&gt;ComponentListener&lt;/code&gt;でサイズを制限する場合は、この制限を超えて縮小しようとしても、マウスを放した時点で設定した最小サイズまでフレームの大きさは戻されます。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;//ComponentListenerを使用
final int mw = 320;
final int mh = 100;
final JFrame frame = new JFrame();
frame.addComponentListener(new ComponentAdapter() {
  @Override public void componentResized(ComponentEvent e) {
    int fw = frame.getSize().width;
    int fh = frame.getSize().height;
    frame.setSize((mw&amp;gt;fw)?mw:fw, (mh&amp;gt;fh)?mh:fh);
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;JFrame#setMaximumSize&lt;/code&gt;が無効な環境でも、上記のように&lt;code&gt;ComponentListener&lt;/code&gt;を使えば最大サイズを制限する(リサイズした後で最大サイズに戻しているだけ)ことができます。&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;code&gt;Robot&lt;/code&gt;を使う方法もあるようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6464548&quot;&gt;Bug ID: 6464548 Reopen 6383434: Frame.setMaximumSize() doesn&amp;#39;t work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class MaximumSizeTest{
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() { createAndShowGUI(); }
    });
  }
  private static final int MAX = 500;
  public static void createAndShowGUI() {
    final JFrame frame = new JFrame();
    frame.setMinimumSize(new Dimension(240,120));
    //frame.setMaximumSize(new Dimension(400,400));
    Robot r;
    final Robot r2;
    try{
      r = new Robot();
    }catch(AWTException ex) {
      r = null;
    }
    r2 = r;
    frame.getRootPane().addComponentListener(new ComponentAdapter() {
      @Override public void componentResized(ComponentEvent e) {
        Point loc   = frame.getLocationOnScreen();
        Point mouse = MouseInfo.getPointerInfo().getLocation();
        if(r2!=null &amp;amp;&amp;amp; (mouse.getX()&amp;gt;loc.getX()+MAX ||
                        mouse.getY()&amp;gt;loc.getY()+MAX)) {
          r2.mouseRelease(InputEvent.BUTTON1_MASK);
          frame.setSize(Math.min(MAX, frame.getWidth()),
                        Math.min(MAX, frame.getHeight()));
        }
      }
    });
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.setSize(320, 240);
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.oracle.com/thread/1377749&quot;&gt;Swing - Have JFrame respect the minimum size (stop resizing) - Partial solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/DynamicLayout.html&quot;&gt;DynamicLayoutでレイアウトの動的評価&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;最大サイズも同じ要領で・・・とありますが&lt;code&gt;JFrame#setMaximumSize&lt;/code&gt;はうまくいかないですね（&lt;code&gt;JDK1.6.0_u1&lt;/code&gt;）色々調べているのですが、いい方法あるんでしょうか？ -- &lt;a href=&quot;http://terai.xrea.jp/sawshun.html&quot;&gt;sawshun&lt;/a&gt; 2009-07-27 (月) 11:51:11

&lt;ul&gt;
&lt;li&gt;同じ要領なのは、&lt;code&gt;ComponentListener&lt;/code&gt;を使う場合…のつもりです。 &lt;del&gt;わかりづらいのであとで修正しますm(_ _)m。&lt;/del&gt; すこし修正しました。&lt;code&gt;setMaximumSize&lt;/code&gt;は、ちょっと難しいのかも(&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6200438&quot;&gt;Bug ID: 6200438 Frame&amp;#39;s size must be validated against maximized bounds when resizing, win32&lt;/a&gt;)。 -- &lt;a href=&quot;http://terai.xrea.jp/aterai.html&quot;&gt;aterai&lt;/a&gt; 2009-07-27 (月) 12:05:33&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;
</description>
                <link>http://terai.xrea.jp/swing/minimumframe</link>
                <guid>http://terai.xrea.jp/swing/minimumframe</guid>
                <pubDate>2003-09-22T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>GridBagLayoutの使用</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;GridBagLayout&lt;/code&gt;を使用して、左右の部品のサイズを固定、中央だけは水平方向に伸縮可になるよう配置します。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/GridBagLayout&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/_9Z4BYR88imo/TQTNi4XckaI/AAAAAAAAAa8/8VJwvf6EScw/s800/GridBagLayout.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;public JPanel createPanel(JComponent cmp, JButton btn, String str) {
  GridBagConstraints c = new GridBagConstraints();
  JPanel panel = new JPanel(new GridBagLayout());

  c.gridheight = 1;
  c.gridwidth  = 1;
  c.gridy = 0;

  c.gridx = 0;
  c.weightx = 0.0;
  c.insets = new Insets(5, 5, 5, 0);
  c.anchor = GridBagConstraints.WEST;
  panel.add(new JLabel(str), c);

  c.gridx = 1;
  c.weightx = 1.0;
  //c.insets = new Insets(5, 5, 5, 0);
  c.fill = GridBagConstraints.HORIZONTAL;
  panel.add(cmp, c);

  c.gridx = 2;
  c.weightx = 0.0;
  c.insets = new Insets(5, 5, 5, 5);
  c.anchor = GridBagConstraints.WEST;
  panel.add(btn, c);

  return panel;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;上記のサンプルでは、&lt;code&gt;GridBagLayout&lt;/code&gt;で&lt;code&gt;BorderLayout&lt;/code&gt;のような配置を行っています。ただし、&lt;code&gt;GridBagLayout&lt;/code&gt;の場合は、各コンポーネントが推奨する高さが生かされるように設定しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BorderLayout&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;それぞれデフォルトの高さが違うコンポーネントを、&lt;code&gt;BorderLayout&lt;/code&gt;を使って、&lt;code&gt;WEST&lt;/code&gt;、&lt;code&gt;CENTER&lt;/code&gt;、&lt;code&gt;EAST&lt;/code&gt;に配置すると、一番高いコンポーネントに揃えられる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CENTER&lt;/code&gt;の&lt;code&gt;JComboBox&lt;/code&gt;が、&lt;code&gt;EAST&lt;/code&gt;の&lt;code&gt;JButton&lt;/code&gt;の高さになっている(スクリーンショット参照)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MotifLookAndFeel&lt;/code&gt;の場合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTNldPsABI/AAAAAAAAAbA/eep6P-D2eC8/s800/GridBagLayout1.png&quot; alt=&quot;screenshot&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GridBagLayout&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;左右のコンポーネントのサイズは&lt;code&gt;BorderLayout&lt;/code&gt;のように固定して、中央のコンポーネントだけを水平方向にのみ伸縮させる。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weightx&lt;/code&gt;を指定することで、余分のスペースを各列のウェイトに比例して分配している。&lt;/li&gt;
&lt;li&gt;ウェイトが&lt;code&gt;0&lt;/code&gt;の場合、余分のスペースはその列に分配されない。&lt;/li&gt;
&lt;li&gt;左右の列の&lt;code&gt;weightx&lt;/code&gt;が&lt;code&gt;0.0&lt;/code&gt;なので、中央の列の&lt;code&gt;weightx&lt;/code&gt;は、&lt;code&gt;0.001&lt;/code&gt;でも&lt;code&gt;100.0&lt;/code&gt;でも水平方向の余分なスペースすべてが配分されている。&lt;/li&gt;
&lt;li&gt;垂直方向のスペースは指定していないため、デフォルト値の&lt;code&gt;weighty=0.0&lt;/code&gt;となり、フレームのサイズを変更しても、垂直方向に関しては常にコンポーネントの推奨サイズで固定される。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;p&gt;&lt;code&gt;IDE&lt;/code&gt;などのサポート無しでは、すこし面倒な&lt;code&gt;GridBagLayout&lt;/code&gt;ですが、&lt;a href=&quot;http://homepage1.nifty.com/masada/cyber/javagridbag1.htm&quot;&gt;GridBagの使い方１&lt;/a&gt;の「紙などにマス目で下書きをしてから、コンポーネントのレイアウトを設計する」方法を使えば、凝ったレイアウトでも理解しやすく、すっきり設計できます。&lt;/p&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://homepage1.nifty.com/masada/cyber/javagridbag1.htm&quot;&gt;GridBagの使い方１&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://satoshi.kinokuni.org/tech/SwingTipsLayout.html#section1&quot;&gt;GridBagLayoutでコンポーネントがつぶれるのを防ぎたいとき～&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://terai.xrea.jp/Swing/GroupLayout.html&quot;&gt;GroupLayoutの使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/gridbaglayout</link>
                <guid>http://terai.xrea.jp/swing/gridbaglayout</guid>
                <pubDate>2003-09-15T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Device Nameのチェック</title>
                <description>&lt;h2&gt;概要&lt;/h2&gt;

&lt;p&gt;ファイルチューザーなどで入力されたファイル名が、デバイスファイル名(&lt;code&gt;con&lt;/code&gt;、&lt;code&gt;prn&lt;/code&gt;、&lt;code&gt;nul&lt;/code&gt;、&lt;code&gt;aux&lt;/code&gt;など)でないかチェックします。&lt;/p&gt;

&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-md-5 col-xs-12&quot;&gt;
&lt;div itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/Code&quot;&gt;
&lt;p&gt;&lt;a href=&quot;example.jar&quot; class=&quot;btn btn-block btn-danger&quot;  download=&quot;example.jar&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;example.jar&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-save icon-white&quot;&gt;&lt;/span&gt; Runnable JARファイル &lt;small&gt;example.jar&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;src.zip&quot; class=&quot;btn btn-block btn-success&quot; download=&quot;src.zip&quot;     onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;download&#39;, &#39;src.zip&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-cloud-download icon-white&quot;&gt;&lt;/span&gt; ソースコード &lt;small&gt;src.zip&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;//github.com/aterai/java-swing-tips/tree/master/DeviceName&quot; class=&quot;btn btn-block btn-info&quot; itemprop=&quot;codeRepository&quot; onclick=&quot;ga(&#39;send&#39;, &#39;event&#39;, &#39;button&#39;, &#39;view&#39;, &#39;repository&#39;);&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-import icon-white&quot;&gt;&lt;/span&gt; リポジトリ &lt;small&gt;repository&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTKz2LmiiI/AAAAAAAAAWk/HOTsKRHPAVo/s800/DeviceName.png &quot; class=&quot;img-responsive&quot; itemprop=&quot;image&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;div class=&quot;col-md-6 col-md-offset-1 col-xs-12&quot; itemscope=&quot;itemscope&quot; itemtype=&quot;http://schema.org/WPAdBlock&quot;&gt;
&lt;!-- responsive --&gt;
&lt;ins class=&quot;adsbygoogle&quot;
     style=&quot;display:block&quot;
     data-ad-client=&quot;ca-pub-6939179021013694&quot;
     data-ad-slot=&quot;1067574330&quot;
     data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;サンプルコード&lt;/h2&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;private boolean isCanonicalPath(File file) {
  if(file==null) return false;
  try{
    if(file.getCanonicalPath()==null) return false;
  }catch(IOException ioe) {
    return false;
  }
  return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Windows&lt;/code&gt;環境で、&lt;code&gt;Device Name&lt;/code&gt;を含むような&lt;strong&gt;正しくないファイルパス&lt;/strong&gt;(&lt;code&gt;c:\con.txt&lt;/code&gt;など)を読み書きしようとすると、&lt;code&gt;Exception&lt;/code&gt;が発生します。正しいファイルパスかどうかは、&lt;code&gt;File#getCanonicalPath()&lt;/code&gt;メソッドが&lt;code&gt;null&lt;/code&gt;を返すかどうかでチェックすることができます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;追記: &lt;code&gt;1.5.0_08&lt;/code&gt;で以下のように修正された

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6176051&quot;&gt;File.isFile() は Windows プラットフォームで &amp;quot;con&amp;quot; に &amp;quot;false&amp;quot; を返すべき&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/jp/6/technotes/guides/io/enhancements.html#6&quot;&gt;Java SE 6 の拡張機能 - Java I/O の拡張機能&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;引用:「&lt;code&gt;CON&lt;/code&gt;、&lt;code&gt;NUL&lt;/code&gt;、&lt;code&gt;AUX&lt;/code&gt;、&lt;code&gt;LPT&lt;/code&gt;などの予約されたデバイス名には必ず&lt;code&gt;false&lt;/code&gt;を返すように、&lt;code&gt;File.isFile()&lt;/code&gt;の&lt;code&gt;Windows&lt;/code&gt;実装が変更されました。 以前の戻り値は&lt;code&gt;true&lt;/code&gt;で、それが&lt;code&gt;Unix&lt;/code&gt;で使用するデバイスの動作と整合していないことから、対象ユーザーはこれをバグとみなしていました。」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;参考リンク&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ipa.go.jp/security/awareness/vendor/programming/b08_01_main.html&quot;&gt;Windowsパス名の落とし穴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- dummy comment line for breaking list --&gt;

&lt;h2&gt;コメント&lt;/h2&gt;
</description>
                <link>http://terai.xrea.jp/swing/devicename</link>
                <guid>http://terai.xrea.jp/swing/devicename</guid>
                <pubDate>2003-09-08T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>

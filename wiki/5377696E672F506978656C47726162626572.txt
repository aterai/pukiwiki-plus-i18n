TITLE:PixelGrabberで画像を配列として取得し編集、書出し
#tags(PixelGrabber, MemoryImageSource, BufferedImage, Graphics2D)
#author(aterai)
#pubdate(2009-12-28T11:50:47+09:00)
* 概要 [#cc3d247f]
画像の配列を取り出す`PixelGrabber`を生成して、角を透過色で塗りつぶします。

#download(https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTRBSkghZI/AAAAAAAAAgg/Ce52fcu-nQI/s800/PixelGrabber.png)

* サンプルコード [#v6f90a8c]
#code(link){{
BufferedImage image;
try {
  image = javax.imageio.ImageIO.read(getClass().getResource("screenshot.png"));
}catch(java.io.IOException ioe) {
  ioe.printStackTrace();
  return;
}

int width  = image.getWidth(p);
int height = image.getHeight(p);
int[] pix  = new int[height * width];
PixelGrabber pg = new PixelGrabber(image, 0, 0, width, height, pix, 0, width);
try {
  pg.grabPixels();
} catch (Exception e) {
  e.printStackTrace();
}

//NW
for(int y=0;y<5;y++) {
  for(int x=0;x<5;x++) {
    if((y==0 && x<5) || (y==1 && x<3) ||
       (y==2 && x<2) || (y==3 && x<1) ||
       (y==4 && x<1) ) pix[y*width+x] = 0x0;
  }
}
//NE
for(int y=0;y<5;y++) {
  for(int x=width-5;x<width;x++) {
    if((y==0 && x>=width-5) || (y==1 && x>=width-3) ||
       (y==2 && x>=width-2) || (y==3 && x>=width-1) ||
       (y==4 && x>=width-1) ) pix[y*width+x] = 0x0;
  }
}
}}

* 解説 [#m27cc900]
上記のサンプルでは、ウィンドウのスクリーンショット画像から、`PixelGrabber`で配列を生成し、左上、右上の角を`Windows XP`風に透過色で上書きしています。

角を置き換えた配列は、以下のように`MemoryImageSource`などを使用して画像に変換しています。

#code{{
MemoryImageSource producer = new MemoryImageSource(width, height, pix, 0, width);
Image img = p.createImage(producer);
BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
Graphics g = bi.createGraphics();
g.drawImage(img, 0, 0, null);
g.dispose();

//PNG画像ファイルとして保存
//try {
//  javax.imageio.ImageIO.write(
//    bi, "png", java.io.File.createTempFile("screenshot", ".png"));
//}catch(java.io.IOException ioe) {
//  ioe.printStackTrace();
//}
}}

----
以下のように、`Graphics2D#setComposite(AlphaComposite.Clear)`として、透過色で塗りつぶす方法もあります。

#code{{
//BufferedImage image = ...;
int w = image.getWidth(null);
int h = image.getHeight(null);

BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d = bi.createGraphics();
g2d.drawImage(image, 0, 0, null);
g2d.setComposite(AlphaComposite.Clear);
g2d.setPaint(new Color(0,0,0,0));
//NW
g2d.drawLine(0,0,4,0);
g2d.drawLine(0,1,2,1);
g2d.drawLine(0,2,1,2);
g2d.drawLine(0,3,0,4);
//NE
g2d.drawLine(w-5,0,w-1,0);
g2d.drawLine(w-3,1,w-1,1);
g2d.drawLine(w-2,2,w-1,2);
g2d.drawLine(w-1,3,w-1,4);
g2d.dispose();
}}

//**参考リンク
* コメント [#y80493ae]
#comment

---
title: JTreeのソート
tags: [JTree, TreeNode]
author: aterai
pubdate: 2009-05-04T16:26:55+09:00
---
* 概要 [#d8f8e60e]
`JTree`をソートします。

#download(https://lh6.googleusercontent.com/_9Z4BYR88imo/TQTThR240sI/AAAAAAAAAkg/h3mIbDu9xa4/s800/SortTree.png)

* サンプルコード [#p11c3166]
#code(link){{
public static void sortTree(DefaultMutableTreeNode root) {
  Enumeration e = root.depthFirstEnumeration();
  while(e.hasMoreElements()) {
    DefaultMutableTreeNode node = (DefaultMutableTreeNode)e.nextElement();
    if(!node.isLeaf()) {
      sort2(node);   //selection sort
      //sort3(node); //iterative merge sort
    }
  }
}
public static Comparator<DefaultMutableTreeNode> tnc = new Comparator<DefaultMutableTreeNode>() {
  @Override public int compare(DefaultMutableTreeNode a, DefaultMutableTreeNode b) {
    if(a.isLeaf() && !b.isLeaf()) {
      return 1;
    }else if(!a.isLeaf() && b.isLeaf()) {
      return -1;
    }else{
      String sa = a.getUserObject().toString();
      String sb = b.getUserObject().toString();
      return sa.compareToIgnoreCase(sb);
    }
  }
};
}}

#code{{
//selection sort
public static void sort2(DefaultMutableTreeNode parent) {
  int n = parent.getChildCount();
  for(int i=0; i<n-1; i++) {
    int min = i;
    for(int j=i+1; j<n; j++) {
      if(tnc.compare((DefaultMutableTreeNode)parent.getChildAt(min),
                     (DefaultMutableTreeNode)parent.getChildAt(j))>0) {
        min = j;
      }
    }
    if(i!=min) {
      MutableTreeNode a = (MutableTreeNode)parent.getChildAt(i);
      MutableTreeNode b = (MutableTreeNode)parent.getChildAt(min);
      parent.insert(b, i);
      parent.insert(a, min);
    }
  }
}
}}

#code{{
public static void sort3(DefaultMutableTreeNode parent) {
  int n = parent.getChildCount();
  //@SuppressWarnings("unchecked")
  //Enumeration<DefaultMutableTreeNode> e = parent.children();
  //ArrayList<DefaultMutableTreeNode> children = Collections.list(e);
  List<DefaultMutableTreeNode> children = new ArrayList<>(n);
  for(int i=0; i<n; i++) {
    children.add((DefaultMutableTreeNode)parent.getChildAt(i));
  }
  Collections.sort(children, tnc); //iterative merge sort
  parent.removeAllChildren();
  for(MutableTreeNode node: children) {
    parent.add(node);
  }
}
}}

* 解説 [#n25f3e6d]
上記のサンプルでは、チェックボックスをクリックするとルートの`DefaultMutableTreeNode`から`deep copy`でクローンを作成し、各親ノードを深さ優先で探索して、昇順ソートしています。

元のソート無しの状態に戻す場合は、`DefaultTreeModel`を作成し直しています。

`DefaultMutableTreeNode`の比較は、`Comparator<DefaultMutableTreeNode>#compare`をオーバーライドし、節ノードが葉ノードより上、かつ`getUserObject().toString()`で生成した文字列の大文字小文字を無視して行なっています。

* 参考リンク [#g127d784]
- [https://forums.oracle.com/thread/1355435 Swing - How to sort jTree Nodes]
-- 以下のコメントにバグの指摘あり
//-- `#6`のHamedさんの投稿 (以下のコメントにバグの指摘あり)
- [[JTreeのノードを走査する>Swing/TraverseAllNodes]]
-- `JTree`ノードの深さ優先探索などについて
- [[JComboBoxのモデルとしてenumを使用する>Swing/SortingAnimations]]
-- 各種ソートアルゴリズムのサンプル
- [[JTableでファイルとディレクトリを別々にソート>Swing/FileDirectoryComparator]]
-- ディレクトリが先になる比較について

* コメント [#lff287f1]
- ソースにバグあります。 `root.insert(prevNode, i);`の後に`i--;`を入れる必要あり -- [[a]] &new{2013-07-02 (火) 15:54:09};
-- ご指摘ありがとうございます。たしかに`i--;break`などがないと、入れ替えられてソートされないノードが出来てしまいますね。効率も悪いので、深さ優先で探索した親ノードから別の方法でソートするように変更した方がいいかもしれません。 %%しばらくテストしてこのサンプルは修正したいと思います。%% 修正しました。 -- [[aterai]] &new{2013-07-03 (水) 13:11:51};

#comment

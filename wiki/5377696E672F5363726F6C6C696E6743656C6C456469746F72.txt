---
title: TableCellEditorをスクロール可能にする
tags: [JTable, JScrollPane, JTextArea, TableCellEditor, Focus]
author: aterai
pubdate: 2011-06-20T14:39:55+09:00
description: JTableのTableCellEditorとして、JTextAreaとJScrollPaneを使用します。
---
* 概要 [#summary]
`JTable`の`TableCellEditor`として、`JTextArea`と`JScrollPane`を使用します。

#download(https://lh4.googleusercontent.com/-DDRbJ9WhSJk/Tf7btYjUE7I/AAAAAAAAA9s/yVKIKC55zIw/s800/ScrollingCellEditor.png)

* サンプルコード [#sourcecode]
#code(link){{
class TextAreaCellEditor extends JTextArea implements TableCellEditor {
  private static final String KEY = "Stop-Cell-Editing";
  protected transient ChangeEvent changeEvent;
  private final JScrollPane scroll;

  protected TextAreaCellEditor() {
    super();
    scroll = new JScrollPane(this);
    scroll.setBorder(BorderFactory.createEmptyBorder());
    //scroll.setViewportBorder(BorderFactory.createEmptyBorder());

    setLineWrap(true);
    setBorder(BorderFactory.createEmptyBorder(2, 4, 2, 4));

    KeyStroke enter = KeyStroke.getKeyStroke(
        KeyEvent.VK_ENTER, InputEvent.CTRL_DOWN_MASK);
    getInputMap(JComponent.WHEN_FOCUSED).put(enter, KEY);
    getActionMap().put(KEY, new AbstractAction() {
      @Override public void actionPerformed(ActionEvent e) {
        stopCellEditing();
      }
    });
  }
  @Override public Object getCellEditorValue() {
    return getText();
  }
  @Override public Component getTableCellEditorComponent(
      JTable table, Object value, boolean isSelected, int row, int column) {
    System.out.println("getTableCellEditorComponent");
    setFont(table.getFont());
    setText(Objects.toString(value, ""));
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        setCaretPosition(getText().length());
        requestFocusInWindow();
        System.out.println("invokeLater: getTableCellEditorComponent");
      }
    });
    return scroll;
  }
  @Override public boolean isCellEditable(final EventObject e) {
    if (e instanceof MouseEvent) {
      return ((MouseEvent) e).getClickCount() >= 2;
    }
    System.out.println("isCellEditable");
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        if (e instanceof KeyEvent) {
          KeyEvent ke = (KeyEvent) e;
          char kc = ke.getKeyChar();
          if (Character.isUnicodeIdentifierStart(kc)) {
            setText(getText() + kc);
            System.out.println("invokeLater: isCellEditable");
          }
        }
      }
    });
    return true;
  }
  //...
}
}}

* 解説 [#explanation]
上記のサンプルでは、`0`列目にデフォルトの`TableCellEditor(JTextField)`、`1`列目に`JTextArea`を継承した`TableCellEditor`を設定しています。

- `TableCellEditor#isCellEditable`
-- マウスのダブルクリックで編集開始
- `TableCellEditor#getTableCellEditorComponent`
-- `JTextArea`に現在表示されているセル文字列をコピーし、戻り値の`Component`として、`JScrollPane`を返す
- `TableCellEditor#isCellEditable`, `EventQueue.invokeLater`
-- キー入力で編集開始した場合、その入力を`JTextArea`の文字列末尾に追加
- `TableCellEditor#getTableCellEditorComponent`, `EventQueue.invokeLater`
-- `JTextArea`にフォーカスを移動し、`JTextArea`のキャレットも文字列末尾に移動

* 参考リンク [#reference]
- [[TableCellEditorのレイアウトを変更>Swing/CellEditorLayout]]
- [[JTableのセル幅で文字列を折り返し>Swing/TableCellRenderer]]

* コメント [#comment]
#comment
#comment
